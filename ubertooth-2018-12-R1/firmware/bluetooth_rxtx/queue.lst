ARM GAS  /tmp/ccHnYXeG.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.queue_init,"ax",%progbits
  16              		.align	1
  17              		.global	queue_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	queue_init:
  24              	.LFB0:
  25              		.file 1 "queue.c"
   1:queue.c       **** /*
   2:queue.c       ****  * Copyright 2017 Mike Ryan
   3:queue.c       ****  *
   4:queue.c       ****  * This file is part of Project Ubertooth and is released under the
   5:queue.c       ****  * terms of the GPL. Refer to COPYING for more information.
   6:queue.c       ****  */
   7:queue.c       **** 
   8:queue.c       **** #include "queue.h"
   9:queue.c       **** 
  10:queue.c       **** // queue implementation is based heavily on Koopman's "Better Embedded
  11:queue.c       **** // Systems Software" section 20.3.3.1 pg 209
  12:queue.c       **** 
  13:queue.c       **** void queue_init(queue_t *f) {
  26              		.loc 1 13 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  14:queue.c       **** 	f->head = 0;
  32              		.loc 1 14 0
  33 0000 0023     		movs	r3, #0
  34 0002 8362     		str	r3, [r0, #40]
  15:queue.c       **** 	f->tail = 0;
  35              		.loc 1 15 0
  36 0004 C362     		str	r3, [r0, #44]
  37 0006 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE0:
  41              		.section	.text.queue_insert,"ax",%progbits
  42              		.align	1
  43              		.global	queue_insert
  44              		.syntax unified
ARM GAS  /tmp/ccHnYXeG.s 			page 2


  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	queue_insert:
  50              	.LFB1:
  16:queue.c       **** }
  17:queue.c       **** 
  18:queue.c       **** // insert
  19:queue.c       **** int queue_insert(queue_t *f, void *x) {
  51              		.loc 1 19 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.LVL1:
  20:queue.c       **** 	unsigned newtail;
  21:queue.c       **** 	// access next free element
  22:queue.c       **** 	newtail = f->tail + 1;
  57              		.loc 1 22 0
  58 0000 C36A     		ldr	r3, [r0, #44]
  23:queue.c       **** 
  24:queue.c       **** 	// wrap around to beginning if needed
  25:queue.c       **** 	if (newtail >= FIFOSIZE) { newtail = 0; }
  26:queue.c       **** 
  27:queue.c       **** 	// if head and tail are equal, queue is full
  28:queue.c       **** 	if (newtail == f->head) { return 0; }
  59              		.loc 1 28 0
  60 0002 826A     		ldr	r2, [r0, #40]
  22:queue.c       **** 
  61              		.loc 1 22 0
  62 0004 0133     		adds	r3, r3, #1
  63              	.LVL2:
  25:queue.c       **** 
  64              		.loc 1 25 0
  65 0006 0A2B     		cmp	r3, #10
  66 0008 28BF     		it	cs
  67 000a 0023     		movcs	r3, #0
  68              	.LVL3:
  69              		.loc 1 28 0
  70 000c 9342     		cmp	r3, r2
  29:queue.c       **** 
  30:queue.c       **** 	// write data before updating pointer
  31:queue.c       **** 	f->data[newtail] = x;
  71              		.loc 1 31 0
  72 000e 1DBF     		ittte	ne
  73 0010 40F82310 		strne	r1, [r0, r3, lsl #2]
  32:queue.c       **** 	f->tail = newtail;
  74              		.loc 1 32 0
  75 0014 C362     		strne	r3, [r0, #44]
  33:queue.c       **** 
  34:queue.c       **** 	return 1;
  76              		.loc 1 34 0
  77 0016 0120     		movne	r0, #1
  78              	.LVL4:
  28:queue.c       **** 
  79              		.loc 1 28 0
  80 0018 0020     		moveq	r0, #0
ARM GAS  /tmp/ccHnYXeG.s 			page 3


  35:queue.c       **** }
  81              		.loc 1 35 0
  82 001a 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE1:
  86              		.section	.text.queue_remove,"ax",%progbits
  87              		.align	1
  88              		.global	queue_remove
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	queue_remove:
  95              	.LFB2:
  36:queue.c       **** 
  37:queue.c       **** // TODO remove
  38:queue.c       **** int queue_remove(queue_t *f, void **x) {
  96              		.loc 1 38 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL5:
  39:queue.c       **** 	unsigned newhead;
  40:queue.c       **** 
  41:queue.c       **** 	if (f->head == f->tail) { return 0; }
 102              		.loc 1 41 0
 103 0000 836A     		ldr	r3, [r0, #40]
 104 0002 C26A     		ldr	r2, [r0, #44]
 105 0004 9342     		cmp	r3, r2
 106 0006 09D0     		beq	.L9
  42:queue.c       **** 
  43:queue.c       **** 	newhead = f->head + 1;
 107              		.loc 1 43 0
 108 0008 0133     		adds	r3, r3, #1
 109              	.LVL6:
  44:queue.c       **** 
  45:queue.c       **** 	if (newhead >= FIFOSIZE) { newhead = 0; }
 110              		.loc 1 45 0
 111 000a 0A2B     		cmp	r3, #10
 112 000c 28BF     		it	cs
 113 000e 0023     		movcs	r3, #0
 114              	.LVL7:
  46:queue.c       **** 
  47:queue.c       **** 	*x = f->data[newhead];
 115              		.loc 1 47 0
 116 0010 50F82320 		ldr	r2, [r0, r3, lsl #2]
 117 0014 0A60     		str	r2, [r1]
  48:queue.c       **** 	f->head = newhead;
 118              		.loc 1 48 0
 119 0016 8362     		str	r3, [r0, #40]
  49:queue.c       **** 
  50:queue.c       **** 	return 1;
 120              		.loc 1 50 0
 121 0018 0120     		movs	r0, #1
 122              	.LVL8:
 123 001a 7047     		bx	lr
ARM GAS  /tmp/ccHnYXeG.s 			page 4


 124              	.LVL9:
 125              	.L9:
  41:queue.c       **** 
 126              		.loc 1 41 0
 127 001c 0020     		movs	r0, #0
 128              	.LVL10:
  51:queue.c       **** }
 129              		.loc 1 51 0
 130 001e 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE2:
 134              		.text
 135              	.Letext0:
 136              		.file 2 "queue.h"
ARM GAS  /tmp/ccHnYXeG.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccHnYXeG.s:16     .text.queue_init:0000000000000000 $t
     /tmp/ccHnYXeG.s:23     .text.queue_init:0000000000000000 queue_init
     /tmp/ccHnYXeG.s:42     .text.queue_insert:0000000000000000 $t
     /tmp/ccHnYXeG.s:49     .text.queue_insert:0000000000000000 queue_insert
     /tmp/ccHnYXeG.s:87     .text.queue_remove:0000000000000000 $t
     /tmp/ccHnYXeG.s:94     .text.queue_remove:0000000000000000 queue_remove
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
