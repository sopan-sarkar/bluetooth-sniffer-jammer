
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007730  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b730  0000b730  0000b730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         00000a09  10000020  0000b738  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000033ce  10000a30  0000c141  00010a30  2**3
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a29  2**0
                  CONTENTS, READONLY
  6 .comment      00000031  00000000  00000000  00010a52  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015ee3  00000000  00000000  00010a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000476b  00000000  00000000  00026966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007d09  00000000  00000000  0002b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000aa8  00000000  00000000  00032de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004ed6  00000000  00000000  00033888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004200  00000000  00000000  0003875e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001d5c  00000000  00000000  0003c960  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f98  00000000  00000000  0003e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 5d 92 00 00 b1 92 00 00 b1 92 00 00     .?..]...........
    4010:	b1 92 00 00 b1 92 00 00 b1 92 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 b1 92 00 00     ................
    4030:	b1 92 00 00 00 00 00 00 b1 92 00 00 b1 92 00 00     ................
    4040:	b1 92 00 00 1d 4f 00 00 b5 80 00 00 b1 92 00 00     .....O..........
    4050:	b1 92 00 00 b1 92 00 00 b1 92 00 00 b1 92 00 00     ................
    4060:	b1 92 00 00 b1 92 00 00 b1 92 00 00 b1 92 00 00     ................
    4070:	b1 92 00 00 b1 92 00 00 b1 92 00 00 b1 92 00 00     ................
    4080:	b1 92 00 00 b1 92 00 00 b1 92 00 00 b1 92 00 00     ................
    4090:	b1 92 00 00 2d 50 00 00 b1 92 00 00 b1 92 00 00     ....-P..........
    40a0:	59 92 00 00 b1 92 00 00 45 51 00 00 b1 92 00 00     Y.......EQ......
    40b0:	b1 92 00 00 b1 92 00 00 b1 92 00 00 b1 92 00 00     ................
    40c0:	b1 92 00 00 b1 92 00 00 b1 92 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	10000a2f 	.word	0x10000a2f
    40e4:	10000a2c 	.word	0x10000a2c
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000a2c 	.word	0x10000a2c
    4108:	10000a2c 	.word	0x10000a2c
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000a30 	.word	0x10000a30
    4130:	00000000 	.word	0x00000000
    4134:	0000b70c 	.word	0x0000b70c

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4908      	ldr	r1, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4808      	ldr	r0, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	10000a34 	.word	0x10000a34
    4164:	0000b70c 	.word	0x0000b70c
    4168:	10000a2c 	.word	0x10000a2c
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	2300      	movs	r3, #0
    4172:	4601      	mov	r1, r0
    4174:	461a      	mov	r2, r3
    4176:	4618      	mov	r0, r3
    4178:	f000 b890 	b.w	429c <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4c0a      	ldr	r4, [pc, #40]	; (41a8 <__libc_fini_array+0x2c>)
    4180:	4d0a      	ldr	r5, [pc, #40]	; (41ac <__libc_fini_array+0x30>)
    4182:	1b64      	subs	r4, r4, r5
    4184:	10a4      	asrs	r4, r4, #2
    4186:	d00a      	beq.n	419e <__libc_fini_array+0x22>
    4188:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    418c:	3b01      	subs	r3, #1
    418e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4192:	3c01      	subs	r4, #1
    4194:	f855 3904 	ldr.w	r3, [r5], #-4
    4198:	4798      	blx	r3
    419a:	2c00      	cmp	r4, #0
    419c:	d1f9      	bne.n	4192 <__libc_fini_array+0x16>
    419e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41a2:	f007 babd 	b.w	b720 <_fini>
    41a6:	bf00      	nop
    41a8:	0000b730 	.word	0x0000b730
    41ac:	0000b72c 	.word	0x0000b72c

000041b0 <__libc_init_array>:
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	4e0f      	ldr	r6, [pc, #60]	; (41f0 <__libc_init_array+0x40>)
    41b4:	4d0f      	ldr	r5, [pc, #60]	; (41f4 <__libc_init_array+0x44>)
    41b6:	1b76      	subs	r6, r6, r5
    41b8:	10b6      	asrs	r6, r6, #2
    41ba:	bf18      	it	ne
    41bc:	2400      	movne	r4, #0
    41be:	d005      	beq.n	41cc <__libc_init_array+0x1c>
    41c0:	3401      	adds	r4, #1
    41c2:	f855 3b04 	ldr.w	r3, [r5], #4
    41c6:	4798      	blx	r3
    41c8:	42a6      	cmp	r6, r4
    41ca:	d1f9      	bne.n	41c0 <__libc_init_array+0x10>
    41cc:	4e0a      	ldr	r6, [pc, #40]	; (41f8 <__libc_init_array+0x48>)
    41ce:	4d0b      	ldr	r5, [pc, #44]	; (41fc <__libc_init_array+0x4c>)
    41d0:	f007 fa9c 	bl	b70c <_init>
    41d4:	1b76      	subs	r6, r6, r5
    41d6:	10b6      	asrs	r6, r6, #2
    41d8:	bf18      	it	ne
    41da:	2400      	movne	r4, #0
    41dc:	d006      	beq.n	41ec <__libc_init_array+0x3c>
    41de:	3401      	adds	r4, #1
    41e0:	f855 3b04 	ldr.w	r3, [r5], #4
    41e4:	4798      	blx	r3
    41e6:	42a6      	cmp	r6, r4
    41e8:	d1f9      	bne.n	41de <__libc_init_array+0x2e>
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	bf00      	nop
    41f0:	0000b718 	.word	0x0000b718
    41f4:	0000b718 	.word	0x0000b718
    41f8:	0000b720 	.word	0x0000b720
    41fc:	0000b718 	.word	0x0000b718

00004200 <memset>:
    4200:	b470      	push	{r4, r5, r6}
    4202:	0786      	lsls	r6, r0, #30
    4204:	d046      	beq.n	4294 <memset+0x94>
    4206:	1e54      	subs	r4, r2, #1
    4208:	2a00      	cmp	r2, #0
    420a:	d041      	beq.n	4290 <memset+0x90>
    420c:	b2ca      	uxtb	r2, r1
    420e:	4603      	mov	r3, r0
    4210:	e002      	b.n	4218 <memset+0x18>
    4212:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    4216:	d33b      	bcc.n	4290 <memset+0x90>
    4218:	f803 2b01 	strb.w	r2, [r3], #1
    421c:	079d      	lsls	r5, r3, #30
    421e:	d1f8      	bne.n	4212 <memset+0x12>
    4220:	2c03      	cmp	r4, #3
    4222:	d92e      	bls.n	4282 <memset+0x82>
    4224:	b2cd      	uxtb	r5, r1
    4226:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    422a:	2c0f      	cmp	r4, #15
    422c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4230:	d919      	bls.n	4266 <memset+0x66>
    4232:	4626      	mov	r6, r4
    4234:	f103 0210 	add.w	r2, r3, #16
    4238:	3e10      	subs	r6, #16
    423a:	2e0f      	cmp	r6, #15
    423c:	f842 5c10 	str.w	r5, [r2, #-16]
    4240:	f842 5c0c 	str.w	r5, [r2, #-12]
    4244:	f842 5c08 	str.w	r5, [r2, #-8]
    4248:	f842 5c04 	str.w	r5, [r2, #-4]
    424c:	f102 0210 	add.w	r2, r2, #16
    4250:	d8f2      	bhi.n	4238 <memset+0x38>
    4252:	f1a4 0210 	sub.w	r2, r4, #16
    4256:	f022 020f 	bic.w	r2, r2, #15
    425a:	f004 040f 	and.w	r4, r4, #15
    425e:	3210      	adds	r2, #16
    4260:	2c03      	cmp	r4, #3
    4262:	4413      	add	r3, r2
    4264:	d90d      	bls.n	4282 <memset+0x82>
    4266:	461e      	mov	r6, r3
    4268:	4622      	mov	r2, r4
    426a:	3a04      	subs	r2, #4
    426c:	2a03      	cmp	r2, #3
    426e:	f846 5b04 	str.w	r5, [r6], #4
    4272:	d8fa      	bhi.n	426a <memset+0x6a>
    4274:	1f22      	subs	r2, r4, #4
    4276:	f022 0203 	bic.w	r2, r2, #3
    427a:	3204      	adds	r2, #4
    427c:	4413      	add	r3, r2
    427e:	f004 0403 	and.w	r4, r4, #3
    4282:	b12c      	cbz	r4, 4290 <memset+0x90>
    4284:	b2c9      	uxtb	r1, r1
    4286:	441c      	add	r4, r3
    4288:	f803 1b01 	strb.w	r1, [r3], #1
    428c:	429c      	cmp	r4, r3
    428e:	d1fb      	bne.n	4288 <memset+0x88>
    4290:	bc70      	pop	{r4, r5, r6}
    4292:	4770      	bx	lr
    4294:	4614      	mov	r4, r2
    4296:	4603      	mov	r3, r0
    4298:	e7c2      	b.n	4220 <memset+0x20>
    429a:	bf00      	nop

0000429c <__register_exitproc>:
    429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a0:	4c27      	ldr	r4, [pc, #156]	; (4340 <__register_exitproc+0xa4>)
    42a2:	4607      	mov	r7, r0
    42a4:	6826      	ldr	r6, [r4, #0]
    42a6:	4688      	mov	r8, r1
    42a8:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42ac:	4692      	mov	sl, r2
    42ae:	4699      	mov	r9, r3
    42b0:	2c00      	cmp	r4, #0
    42b2:	d03c      	beq.n	432e <__register_exitproc+0x92>
    42b4:	6865      	ldr	r5, [r4, #4]
    42b6:	2d1f      	cmp	r5, #31
    42b8:	dc1a      	bgt.n	42f0 <__register_exitproc+0x54>
    42ba:	f105 0e01 	add.w	lr, r5, #1
    42be:	b17f      	cbz	r7, 42e0 <__register_exitproc+0x44>
    42c0:	2001      	movs	r0, #1
    42c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    42c6:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    42ca:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    42ce:	fa00 f205 	lsl.w	r2, r0, r5
    42d2:	4311      	orrs	r1, r2
    42d4:	2f02      	cmp	r7, #2
    42d6:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    42da:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    42de:	d020      	beq.n	4322 <__register_exitproc+0x86>
    42e0:	3502      	adds	r5, #2
    42e2:	f8c4 e004 	str.w	lr, [r4, #4]
    42e6:	2000      	movs	r0, #0
    42e8:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
    42ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42f0:	4b14      	ldr	r3, [pc, #80]	; (4344 <__register_exitproc+0xa8>)
    42f2:	b30b      	cbz	r3, 4338 <__register_exitproc+0x9c>
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	f3af 8000 	nop.w
    42fc:	4604      	mov	r4, r0
    42fe:	b1d8      	cbz	r0, 4338 <__register_exitproc+0x9c>
    4300:	2000      	movs	r0, #0
    4302:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
    4306:	f04f 0e01 	mov.w	lr, #1
    430a:	6060      	str	r0, [r4, #4]
    430c:	6023      	str	r3, [r4, #0]
    430e:	4605      	mov	r5, r0
    4310:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    4314:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4318:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    431c:	2f00      	cmp	r7, #0
    431e:	d0df      	beq.n	42e0 <__register_exitproc+0x44>
    4320:	e7ce      	b.n	42c0 <__register_exitproc+0x24>
    4322:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4326:	431a      	orrs	r2, r3
    4328:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    432c:	e7d8      	b.n	42e0 <__register_exitproc+0x44>
    432e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4332:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    4336:	e7bd      	b.n	42b4 <__register_exitproc+0x18>
    4338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4340:	0000ac2c 	.word	0x0000ac2c
    4344:	00000000 	.word	0x00000000

00004348 <register_fini>:
    4348:	4b02      	ldr	r3, [pc, #8]	; (4354 <register_fini+0xc>)
    434a:	b113      	cbz	r3, 4352 <register_fini+0xa>
    434c:	4802      	ldr	r0, [pc, #8]	; (4358 <register_fini+0x10>)
    434e:	f7ff bf0f 	b.w	4170 <atexit>
    4352:	4770      	bx	lr
    4354:	00000000 	.word	0x00000000
    4358:	0000417d 	.word	0x0000417d

0000435c <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    435c:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    435e:	2300      	movs	r3, #0
	uint8_t reversed = 0;
    4360:	461a      	mov	r2, r3
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    4362:	fa40 f103 	asr.w	r1, r0, r3
    4366:	f1c3 0407 	rsb	r4, r3, #7
    436a:	f001 0101 	and.w	r1, r1, #1
    436e:	40a1      	lsls	r1, r4
	for(size_t i=0; i<8; i++)
    4370:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (7-i);
    4372:	430a      	orrs	r2, r1
	for(size_t i=0; i<8; i++)
    4374:	2b08      	cmp	r3, #8
		reversed |= ((data >> i) & 0x01) << (7-i);
    4376:	b2d2      	uxtb	r2, r2
	for(size_t i=0; i<8; i++)
    4378:	d1f3      	bne.n	4362 <reverse8+0x6>
	}
	return reversed;
}
    437a:	4610      	mov	r0, r2
    437c:	bd10      	pop	{r4, pc}

0000437e <connection_follow_cb>:
 * Called when we receive a packet in connection following mode.
 */

#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void connection_follow_cb(u8 *packet) {
    437e:	4770      	bx	lr

00004380 <le_set_access_address>:
static void le_set_access_address(u32 aa) {
    4380:	b510      	push	{r4, lr}
	le.access_address = aa;
    4382:	4c04      	ldr	r4, [pc, #16]	; (4394 <le_set_access_address+0x14>)
    4384:	6020      	str	r0, [r4, #0]
	aa_rev = rbit(aa);
    4386:	f004 ffa1 	bl	92cc <rbit>
	le.syncl = aa_rev & 0xffff;
    438a:	80e0      	strh	r0, [r4, #6]
	le.synch = aa_rev >> 16;
    438c:	0c00      	lsrs	r0, r0, #16
    438e:	80a0      	strh	r0, [r4, #4]
    4390:	bd10      	pop	{r4, pc}
    4392:	bf00      	nop
    4394:	10000450 	.word	0x10000450

00004398 <cc2400_rx>:
{
    4398:	b538      	push	{r3, r4, r5, lr}
	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    439a:	4b26      	ldr	r3, [pc, #152]	; (4434 <cc2400_rx+0x9c>)
    439c:	4c26      	ldr	r4, [pc, #152]	; (4438 <cc2400_rx+0xa0>)
    439e:	781a      	ldrb	r2, [r3, #0]
    43a0:	b112      	cbz	r2, 43a8 <cc2400_rx+0x10>
    43a2:	781a      	ldrb	r2, [r3, #0]
    43a4:	2a01      	cmp	r2, #1
    43a6:	d126      	bne.n	43f6 <cc2400_rx+0x5e>
		if (modulation == MOD_BT_BASIC_RATE) {
    43a8:	781a      	ldrb	r2, [r3, #0]
    43aa:	2a00      	cmp	r2, #0
    43ac:	d03f      	beq.n	442e <cc2400_rx+0x96>
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43ae:	781b      	ldrb	r3, [r3, #0]
			mdmctrl = 0x0040; // 250 kHz frequency deviation
    43b0:	2b01      	cmp	r3, #1
    43b2:	bf14      	ite	ne
    43b4:	2500      	movne	r5, #0
    43b6:	2540      	moveq	r5, #64	; 0x40
		cc2400_set(MANAND,  0x7fff);
    43b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43bc:	200d      	movs	r0, #13
    43be:	f005 f87c 	bl	94ba <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43c2:	f642 3122 	movw	r1, #11042	; 0x2b22
    43c6:	2012      	movs	r0, #18
    43c8:	f005 f877 	bl	94ba <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    43cc:	f241 314b 	movw	r1, #4939	; 0x134b
    43d0:	2014      	movs	r0, #20
    43d2:	f005 f872 	bl	94ba <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43d6:	f240 1101 	movw	r1, #257	; 0x101
    43da:	2020      	movs	r0, #32
    43dc:	f005 f86d 	bl	94ba <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43e0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    43e4:	2002      	movs	r0, #2
    43e6:	3901      	subs	r1, #1
    43e8:	b289      	uxth	r1, r1
    43ea:	f005 f866 	bl	94ba <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    43ee:	4629      	mov	r1, r5
    43f0:	2003      	movs	r0, #3
    43f2:	f005 f862 	bl	94ba <cc2400_set>
	cs_threshold_calc_and_set(channel);
    43f6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    43fa:	b280      	uxth	r0, r0
    43fc:	f003 fa50 	bl	78a0 <cs_threshold_calc_and_set>
	clkn_start();
    4400:	f003 fae6 	bl	79d0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    4404:	f005 f8f4 	bl	95f0 <cc2400_status>
    4408:	0642      	lsls	r2, r0, #25
    440a:	d5fb      	bpl.n	4404 <cc2400_rx+0x6c>
	cc2400_strobe(SFSON);
    440c:	2061      	movs	r0, #97	; 0x61
    440e:	f005 f8f6 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4412:	f005 f8ed 	bl	95f0 <cc2400_status>
    4416:	0743      	lsls	r3, r0, #29
    4418:	d5fb      	bpl.n	4412 <cc2400_rx+0x7a>
	cc2400_strobe(SRX);
    441a:	2062      	movs	r0, #98	; 0x62
    441c:	f005 f8ef 	bl	95fe <cc2400_strobe>
	PAEN_SET;
    4420:	2280      	movs	r2, #128	; 0x80
    4422:	4b06      	ldr	r3, [pc, #24]	; (443c <cc2400_rx+0xa4>)
    4424:	601a      	str	r2, [r3, #0]
	HGM_SET;
    4426:	f44f 7280 	mov.w	r2, #256	; 0x100
    442a:	601a      	str	r2, [r3, #0]
    442c:	bd38      	pop	{r3, r4, r5, pc}
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    442e:	2529      	movs	r5, #41	; 0x29
    4430:	e7c2      	b.n	43b8 <cc2400_rx+0x20>
    4432:	bf00      	nop
    4434:	10000a4c 	.word	0x10000a4c
    4438:	10000450 	.word	0x10000450
    443c:	2009c058 	.word	0x2009c058

00004440 <cc2400_rx_sync>:
{
    4440:	b570      	push	{r4, r5, r6, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
    4442:	4b29      	ldr	r3, [pc, #164]	; (44e8 <cc2400_rx_sync+0xa8>)
{
    4444:	4604      	mov	r4, r0
	if (modulation == MOD_BT_BASIC_RATE) {
    4446:	781a      	ldrb	r2, [r3, #0]
    4448:	2a00      	cmp	r2, #0
    444a:	d048      	beq.n	44de <cc2400_rx_sync+0x9e>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	2b01      	cmp	r3, #1
    4450:	d144      	bne.n	44dc <cc2400_rx_sync+0x9c>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4452:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4454:	f240 5661 	movw	r6, #1377	; 0x561
	cc2400_set(MANAND,  0x7fff);
    4458:	f647 71ff 	movw	r1, #32767	; 0x7fff
    445c:	200d      	movs	r0, #13
    445e:	f005 f82c 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4462:	f642 3122 	movw	r1, #11042	; 0x2b22
    4466:	2012      	movs	r0, #18
    4468:	f005 f827 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    446c:	f241 214b 	movw	r1, #4683	; 0x124b
    4470:	2014      	movs	r0, #20
    4472:	f005 f822 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    4476:	4631      	mov	r1, r6
    4478:	2020      	movs	r0, #32
    447a:	f005 f81e 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    447e:	b2a1      	uxth	r1, r4
    4480:	202c      	movs	r0, #44	; 0x2c
    4482:	f005 f81a 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4486:	0c21      	lsrs	r1, r4, #16
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4488:	4c18      	ldr	r4, [pc, #96]	; (44ec <cc2400_rx_sync+0xac>)
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    448a:	202d      	movs	r0, #45	; 0x2d
    448c:	f005 f815 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4490:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4494:	2002      	movs	r0, #2
    4496:	3901      	subs	r1, #1
    4498:	b289      	uxth	r1, r1
    449a:	f005 f80e 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    449e:	4629      	mov	r1, r5
    44a0:	2003      	movs	r0, #3
    44a2:	f005 f80a 	bl	94ba <cc2400_set>
	cs_threshold_calc_and_set(channel);
    44a6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    44aa:	b280      	uxth	r0, r0
    44ac:	f003 f9f8 	bl	78a0 <cs_threshold_calc_and_set>
	clkn_start();
    44b0:	f003 fa8e 	bl	79d0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    44b4:	f005 f89c 	bl	95f0 <cc2400_status>
    44b8:	0642      	lsls	r2, r0, #25
    44ba:	d5fb      	bpl.n	44b4 <cc2400_rx_sync+0x74>
	cc2400_strobe(SFSON);
    44bc:	2061      	movs	r0, #97	; 0x61
    44be:	f005 f89e 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44c2:	f005 f895 	bl	95f0 <cc2400_status>
    44c6:	0743      	lsls	r3, r0, #29
    44c8:	d5fb      	bpl.n	44c2 <cc2400_rx_sync+0x82>
	cc2400_strobe(SRX);
    44ca:	2062      	movs	r0, #98	; 0x62
    44cc:	f005 f897 	bl	95fe <cc2400_strobe>
	PAEN_SET;
    44d0:	2280      	movs	r2, #128	; 0x80
    44d2:	4b07      	ldr	r3, [pc, #28]	; (44f0 <cc2400_rx_sync+0xb0>)
    44d4:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    44da:	601a      	str	r2, [r3, #0]
    44dc:	bd70      	pop	{r4, r5, r6, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    44de:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    44e0:	f240 4661 	movw	r6, #1121	; 0x461
    44e4:	e7b8      	b.n	4458 <cc2400_rx_sync+0x18>
    44e6:	bf00      	nop
    44e8:	10000a4c 	.word	0x10000a4c
    44ec:	10000450 	.word	0x10000450
    44f0:	2009c058 	.word	0x2009c058

000044f4 <enqueue>:
{
    44f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44f6:	4607      	mov	r7, r0
    44f8:	460e      	mov	r6, r1
	usb_pkt_rx* f = usb_enqueue();
    44fa:	f003 f8f1 	bl	76e0 <usb_enqueue>
    44fe:	4d1d      	ldr	r5, [pc, #116]	; (4574 <enqueue+0x80>)
	if (f == NULL) {
    4500:	4604      	mov	r4, r0
    4502:	b920      	cbnz	r0, 450e <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4504:	786b      	ldrb	r3, [r5, #1]
    4506:	f043 0304 	orr.w	r3, r3, #4
    450a:	706b      	strb	r3, [r5, #1]
		return 0;
    450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(type == SPECAN) {
    450e:	2f04      	cmp	r7, #4
	f->pkt_type = type;
    4510:	7007      	strb	r7, [r0, #0]
	if(type == SPECAN) {
    4512:	d119      	bne.n	4548 <enqueue+0x54>
		f->clk100ns = CLK100NS;
    4514:	f640 4135 	movw	r1, #3125	; 0xc35
		f->clkn_high = (clkn >> 20) & 0xff;
    4518:	4a17      	ldr	r2, [pc, #92]	; (4578 <enqueue+0x84>)
    451a:	6813      	ldr	r3, [r2, #0]
    451c:	0d1b      	lsrs	r3, r3, #20
    451e:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = CLK100NS;
    4520:	6813      	ldr	r3, [r2, #0]
    4522:	4a16      	ldr	r2, [pc, #88]	; (457c <enqueue+0x88>)
    4524:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4528:	6812      	ldr	r2, [r2, #0]
    452a:	fb01 2303 	mla	r3, r1, r3, r2
    452e:	6043      	str	r3, [r0, #4]
	memcpy(f->data, buf, DMA_SIZE);
    4530:	2232      	movs	r2, #50	; 0x32
    4532:	4631      	mov	r1, r6
    4534:	f104 000e 	add.w	r0, r4, #14
    4538:	f006 fad4 	bl	aae4 <memcpy>
	f->status = status;
    453c:	786b      	ldrb	r3, [r5, #1]
	return 1;
    453e:	2001      	movs	r0, #1
	f->status = status;
    4540:	7063      	strb	r3, [r4, #1]
	status = 0;
    4542:	2300      	movs	r3, #0
    4544:	706b      	strb	r3, [r5, #1]
}
    4546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		f->clkn_high = idle_buf_clkn_high;
    4548:	78ab      	ldrb	r3, [r5, #2]
    454a:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    454c:	686b      	ldr	r3, [r5, #4]
    454e:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4550:	892b      	ldrh	r3, [r5, #8]
    4552:	3b62      	subs	r3, #98	; 0x62
    4554:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    4556:	4b0a      	ldr	r3, [pc, #40]	; (4580 <enqueue+0x8c>)
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    455c:	4b09      	ldr	r3, [pc, #36]	; (4584 <enqueue+0x90>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4562:	8928      	ldrh	r0, [r5, #8]
    4564:	b280      	uxth	r0, r0
    4566:	f003 f987 	bl	7878 <rssi_get_avg>
		f->rssi_count = rssi_count;
    456a:	4b07      	ldr	r3, [pc, #28]	; (4588 <enqueue+0x94>)
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    456c:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	72e3      	strb	r3, [r4, #11]
    4572:	e7dd      	b.n	4530 <enqueue+0x3c>
    4574:	10000a4c 	.word	0x10000a4c
    4578:	10001464 	.word	0x10001464
    457c:	40004008 	.word	0x40004008
    4580:	1000138a 	.word	0x1000138a
    4584:	10001388 	.word	0x10001388
    4588:	100019aa 	.word	0x100019aa

0000458c <cc2400_idle>:
{
    458c:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    458e:	2064      	movs	r0, #100	; 0x64
    4590:	f005 f835 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    4594:	f005 f82c 	bl	95f0 <cc2400_status>
    4598:	f010 0404 	ands.w	r4, r0, #4
    459c:	d1fa      	bne.n	4594 <cc2400_idle+0x8>
	PAEN_CLR;
    459e:	2280      	movs	r2, #128	; 0x80
    45a0:	4b21      	ldr	r3, [pc, #132]	; (4628 <cc2400_idle+0x9c>)
	RXLED_CLR;
    45a2:	2110      	movs	r1, #16
	PAEN_CLR;
    45a4:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    45a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    45aa:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    45ac:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45b0:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45b4:	2202      	movs	r2, #2
    45b6:	f843 2c20 	str.w	r2, [r3, #-32]
	clkn_stop();
    45ba:	f003 f9e1 	bl	7980 <clkn_stop>
	dio_ssp_stop();
    45be:	f003 faeb 	bl	7b98 <dio_ssp_stop>
	cs_reset();
    45c2:	f003 f9cb 	bl	795c <cs_reset>
	rssi_reset();
    45c6:	f003 f8f3 	bl	77b0 <rssi_reset>
	channel = 2441;
    45ca:	f640 1189 	movw	r1, #2441	; 0x989
	hop_mode = HOP_NONE;
    45ce:	4b17      	ldr	r3, [pc, #92]	; (462c <cc2400_idle+0xa0>)
	channel = 2441;
    45d0:	4a17      	ldr	r2, [pc, #92]	; (4630 <cc2400_idle+0xa4>)
	hop_mode = HOP_NONE;
    45d2:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    45d4:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    45d6:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
	hop_timeout = 158;
    45da:	219e      	movs	r1, #158	; 0x9e
	hop_direct_channel = 0;
    45dc:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    45de:	f8a2 104e 	strh.w	r1, [r2, #78]	; 0x4e
	le_adv_channel = 2402;
    45e2:	f640 1162 	movw	r1, #2402	; 0x962
	requested_channel = 0;
    45e6:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    45e8:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
	idle_buf_clkn_high = 0;
    45ec:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    45ee:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    45f0:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    45f2:	741c      	strb	r4, [r3, #16]
	status = 0;
    45f4:	705c      	strb	r4, [r3, #1]
	mode = MODE_IDLE;
    45f6:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    45f8:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    45fa:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    45fc:	751c      	strb	r4, [r3, #20]
	modulation = MOD_BT_BASIC_RATE;
    45fe:	701c      	strb	r4, [r3, #0]
	low_freq = 2400;
    4600:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4604:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	high_freq = 2483;
    4608:	f640 13b3 	movw	r3, #2483	; 0x9b3
    460c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	rssi_threshold = -30;
    4610:	23e2      	movs	r3, #226	; 0xe2
	target.address = 0;
    4612:	2000      	movs	r0, #0
    4614:	2100      	movs	r1, #0
	rssi_threshold = -30;
    4616:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
	target.address = 0;
    461a:	4b06      	ldr	r3, [pc, #24]	; (4634 <cc2400_idle+0xa8>)
    461c:	e9c3 0100 	strd	r0, r1, [r3]
	target.syncword = 0;
    4620:	e9c3 0102 	strd	r0, r1, [r3, #8]
    4624:	bd10      	pop	{r4, pc}
    4626:	bf00      	nop
    4628:	2009c05c 	.word	0x2009c05c
    462c:	10000a4c 	.word	0x10000a4c
    4630:	10000450 	.word	0x10000450
    4634:	10001a28 	.word	0x10001a28

00004638 <cb_follow_le>:
int cb_follow_le() {
    4638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int idx = whitening_index[btle_channel_index(channel)];
    463c:	4d3d      	ldr	r5, [pc, #244]	; (4734 <cb_follow_le+0xfc>)
	debug_printf("I am in cb\n");
    463e:	483e      	ldr	r0, [pc, #248]	; (4738 <cb_follow_le+0x100>)
    4640:	f004 faee 	bl	8c20 <debug_printf>
	int idx = whitening_index[btle_channel_index(channel)];
    4644:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    4648:	4c3c      	ldr	r4, [pc, #240]	; (473c <cb_follow_le+0x104>)
    464a:	b280      	uxth	r0, r0
    464c:	f002 ff46 	bl	74dc <btle_channel_index>
	u32 access_address = 0;
    4650:	2200      	movs	r2, #0
	int idx = whitening_index[btle_channel_index(channel)];
    4652:	5c21      	ldrb	r1, [r4, r0]
    4654:	4628      	mov	r0, r5
		access_address |= (unpacked[i] << 31);
    4656:	4d3a      	ldr	r5, [pc, #232]	; (4740 <cb_follow_le+0x108>)
	for (i = 0; i < 31; ++i) {
    4658:	4613      	mov	r3, r2
    465a:	46a6      	mov	lr, r4
    465c:	46ac      	mov	ip, r5
		access_address |= (unpacked[i] << 31);
    465e:	5d5c      	ldrb	r4, [r3, r5]
	for (i = 0; i < 31; ++i) {
    4660:	3301      	adds	r3, #1
		access_address |= (unpacked[i] << 31);
    4662:	07e4      	lsls	r4, r4, #31
	for (i = 0; i < 31; ++i) {
    4664:	2b1f      	cmp	r3, #31
		access_address |= (unpacked[i] << 31);
    4666:	ea44 0252 	orr.w	r2, r4, r2, lsr #1
	for (i = 0; i < 31; ++i) {
    466a:	d1f8      	bne.n	465e <cb_follow_le+0x26>
		if (access_address == le.access_address) {
    466c:	6805      	ldr	r5, [r0, #0]
		access_address |= (unpacked[i] << 31);
    466e:	f81c 4003 	ldrb.w	r4, [ip, r3]
    4672:	07e4      	lsls	r4, r4, #31
    4674:	ea44 0252 	orr.w	r2, r4, r2, lsr #1
		if (access_address == le.access_address) {
    4678:	42aa      	cmp	r2, r5
    467a:	d156      	bne.n	472a <cb_follow_le+0xf2>
				idle_rxbuf[j] = byte;
    467c:	4e31      	ldr	r6, [pc, #196]	; (4744 <cb_follow_le+0x10c>)
    467e:	2400      	movs	r4, #0
						idx = (idx + 1) % sizeof(whitening);
    4680:	f04f 097f 	mov.w	r9, #127	; 0x7f
    4684:	4635      	mov	r5, r6
	for (i = 0; i < 31; ++i) {
    4686:	f04f 0a00 	mov.w	sl, #0
    468a:	4657      	mov	r7, sl
    468c:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
					int bit = unpacked[offset];
    4690:	eb07 0208 	add.w	r2, r7, r8
    4694:	4462      	add	r2, ip
					if (j >= 4) { // unwhiten data bytes
    4696:	2c03      	cmp	r4, #3
					int bit = unpacked[offset];
    4698:	f812 2c1f 	ldrb.w	r2, [r2, #-31]
					if (j >= 4) { // unwhiten data bytes
    469c:	dd0c      	ble.n	46b8 <cb_follow_le+0x80>
						bit ^= whitening[idx];
    469e:	eb0e 0b01 	add.w	fp, lr, r1
    46a2:	f89b b028 	ldrb.w	fp, [fp, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46a6:	3101      	adds	r1, #1
						bit ^= whitening[idx];
    46a8:	ea82 020b 	eor.w	r2, r2, fp
						idx = (idx + 1) % sizeof(whitening);
    46ac:	fbb1 fbf9 	udiv	fp, r1, r9
    46b0:	ebcb 1bcb 	rsb	fp, fp, fp, lsl #7
    46b4:	eba1 010b 	sub.w	r1, r1, fp
					byte |= bit << k;
    46b8:	40ba      	lsls	r2, r7
				for (k = 0; k < 8; k++) {
    46ba:	3701      	adds	r7, #1
					byte |= bit << k;
    46bc:	ea42 020a 	orr.w	r2, r2, sl
				for (k = 0; k < 8; k++) {
    46c0:	2f08      	cmp	r7, #8
					byte |= bit << k;
    46c2:	fa5f fa82 	uxtb.w	sl, r2
				for (k = 0; k < 8; k++) {
    46c6:	d1e3      	bne.n	4690 <cb_follow_le+0x58>
				idle_rxbuf[j] = byte;
    46c8:	6832      	ldr	r2, [r6, #0]
    46ca:	f802 a004 	strb.w	sl, [r2, r4]
			for (j = 0; j < 46; ++j) {
    46ce:	3401      	adds	r4, #1
    46d0:	2c2e      	cmp	r4, #46	; 0x2e
    46d2:	d1d8      	bne.n	4686 <cb_follow_le+0x4e>
			if (le.crc_verify) {
    46d4:	6903      	ldr	r3, [r0, #16]
    46d6:	b96b      	cbnz	r3, 46f4 <cb_follow_le+0xbc>
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46d8:	6829      	ldr	r1, [r5, #0]
    46da:	2001      	movs	r0, #1
    46dc:	f7ff ff0a 	bl	44f4 <enqueue>
			RXLED_SET;
    46e0:	2210      	movs	r2, #16
    46e2:	4b19      	ldr	r3, [pc, #100]	; (4748 <cb_follow_le+0x110>)
    46e4:	601a      	str	r2, [r3, #0]
			packet_cb((uint8_t*)idle_rxbuf);
    46e6:	4b19      	ldr	r3, [pc, #100]	; (474c <cb_follow_le+0x114>)
    46e8:	6828      	ldr	r0, [r5, #0]
    46ea:	699b      	ldr	r3, [r3, #24]
    46ec:	4798      	blx	r3
}
    46ee:	2001      	movs	r0, #1
    46f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46f4:	6833      	ldr	r3, [r6, #0]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46f6:	68c0      	ldr	r0, [r0, #12]
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46f8:	795c      	ldrb	r4, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46fa:	6831      	ldr	r1, [r6, #0]
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46fc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4700:	1ca2      	adds	r2, r4, #2
    4702:	3104      	adds	r1, #4
    4704:	f002 ff54 	bl	75b0 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    4708:	6832      	ldr	r2, [r6, #0]
    470a:	f104 0308 	add.w	r3, r4, #8
    470e:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    4710:	6832      	ldr	r2, [r6, #0]
    4712:	1de3      	adds	r3, r4, #7
    4714:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4716:	6832      	ldr	r2, [r6, #0]
    4718:	3406      	adds	r4, #6
    471a:	5d12      	ldrb	r2, [r2, r4]
							 | (idle_rxbuf[4+len+1] << 8)
    471c:	021b      	lsls	r3, r3, #8
    471e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    4722:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    4724:	4298      	cmp	r0, r3
    4726:	d1e2      	bne.n	46ee <cb_follow_le+0xb6>
    4728:	e7d6      	b.n	46d8 <cb_follow_le+0xa0>
	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    472a:	3301      	adds	r3, #1
    472c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    4730:	d19d      	bne.n	466e <cb_follow_le+0x36>
    4732:	e7dc      	b.n	46ee <cb_follow_le+0xb6>
    4734:	10000450 	.word	0x10000450
    4738:	0000b502 	.word	0x0000b502
    473c:	0000ac34 	.word	0x0000ac34
    4740:	10001688 	.word	0x10001688
    4744:	10001684 	.word	0x10001684
    4748:	2009c038 	.word	0x2009c038
    474c:	10000a4c 	.word	0x10000a4c

00004750 <vendor_request_handler>:
{
    4750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4752:	460e      	mov	r6, r1
    4754:	4615      	mov	r5, r2
    4756:	461c      	mov	r4, r3
	switch (request) {
    4758:	284d      	cmp	r0, #77	; 0x4d
    475a:	f200 83a7 	bhi.w	4eac <vendor_request_handler+0x75c>
    475e:	e8df f010 	tbh	[pc, r0, lsl #1]
    4762:	006a      	.short	0x006a
    4764:	00660060 	.word	0x00660060
    4768:	0074006e 	.word	0x0074006e
    476c:	007f007a 	.word	0x007f007a
    4770:	00870082 	.word	0x00870082
    4774:	0090008b 	.word	0x0090008b
    4778:	00ed00e2 	.word	0x00ed00e2
    477c:	009b012c 	.word	0x009b012c
    4780:	00a00096 	.word	0x00a00096
    4784:	00aa00a5 	.word	0x00aa00a5
    4788:	00b200ac 	.word	0x00b200ac
    478c:	00db00d9 	.word	0x00db00d9
    4790:	012600de 	.word	0x012600de
    4794:	03a50129 	.word	0x03a50129
    4798:	00b6012e 	.word	0x00b6012e
    479c:	00ca00be 	.word	0x00ca00be
    47a0:	00cc00c8 	.word	0x00cc00c8
    47a4:	014b0158 	.word	0x014b0158
    47a8:	01790175 	.word	0x01790175
    47ac:	01820180 	.word	0x01820180
    47b0:	020501cd 	.word	0x020501cd
    47b4:	0260021e 	.word	0x0260021e
    47b8:	027b0270 	.word	0x027b0270
    47bc:	0285006c 	.word	0x0285006c
    47c0:	028f0289 	.word	0x028f0289
    47c4:	02a20296 	.word	0x02a20296
    47c8:	02140209 	.word	0x02140209
    47cc:	02ce02ab 	.word	0x02ce02ab
    47d0:	034d0168 	.word	0x034d0168
    47d4:	02b203a5 	.word	0x02b203a5
    47d8:	039f039b 	.word	0x039f039b
    47dc:	020101ef 	.word	0x020101ef
    47e0:	03a5022b 	.word	0x03a5022b
    47e4:	02b5004e 	.word	0x02b5004e
    47e8:	02c50149 	.word	0x02c50149
    47ec:	03970232 	.word	0x03970232
    47f0:	02d20315 	.word	0x02d20315
    47f4:	02d002dd 	.word	0x02d002dd
    47f8:	02f002e2 	.word	0x02f002e2
    47fc:	0311      	.short	0x0311
    47fe:	2300      	movs	r3, #0
		for(i=0; i<request_params[0]; i++) {
    4800:	8832      	ldrh	r2, [r6, #0]
    4802:	1c5c      	adds	r4, r3, #1
    4804:	b2db      	uxtb	r3, r3
    4806:	4293      	cmp	r3, r2
    4808:	d217      	bcs.n	483a <vendor_request_handler+0xea>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    480a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    480e:	18ea      	adds	r2, r5, r3
    4810:	7851      	ldrb	r1, [r2, #1]
    4812:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4814:	5ce8      	ldrb	r0, [r5, r3]
    4816:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    481a:	f004 fe4e 	bl	94ba <cc2400_set>
    481e:	4623      	mov	r3, r4
    4820:	e7ee      	b.n	4800 <vendor_request_handler+0xb0>
		requested_mode = MODE_RX_SYMBOLS;
    4822:	2001      	movs	r0, #1
    4824:	4ba6      	ldr	r3, [pc, #664]	; (4ac0 <vendor_request_handler+0x370>)
    4826:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    4828:	2300      	movs	r3, #0
		*data_len = 10;
    482a:	6023      	str	r3, [r4, #0]
		break;
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hop_mode = HOP_BLUETOOTH;
    482e:	2202      	movs	r2, #2
    4830:	4ba3      	ldr	r3, [pc, #652]	; (4ac0 <vendor_request_handler+0x370>)
    4832:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_TX_SYMBOLS;
    4834:	749a      	strb	r2, [r3, #18]
		*data_len = 0;
    4836:	2300      	movs	r3, #0
    4838:	6023      	str	r3, [r4, #0]
	return 1;
    483a:	2001      	movs	r0, #1
    483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data[0] = (USRLED) ? 1 : 0;
    483e:	4ba1      	ldr	r3, [pc, #644]	; (4ac4 <vendor_request_handler+0x374>)
    4840:	681b      	ldr	r3, [r3, #0]
    4842:	f3c3 0340 	ubfx	r3, r3, #1, #1
		data[0] = le.crc_verify ? 1 : 0;
    4846:	702b      	strb	r3, [r5, #0]
    4848:	e047      	b.n	48da <vendor_request_handler+0x18a>
    484a:	2302      	movs	r3, #2
		if (request_params[0])
    484c:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    484e:	b1e2      	cbz	r2, 488a <vendor_request_handler+0x13a>
			CC1V8_SET;
    4850:	4a9d      	ldr	r2, [pc, #628]	; (4ac8 <vendor_request_handler+0x378>)
			HGM_CLR;
    4852:	6013      	str	r3, [r2, #0]
    4854:	e7f1      	b.n	483a <vendor_request_handler+0xea>
		data[0] = (RXLED) ? 1 : 0;
    4856:	4b9b      	ldr	r3, [pc, #620]	; (4ac4 <vendor_request_handler+0x374>)
    4858:	681b      	ldr	r3, [r3, #0]
    485a:	f3c3 1300 	ubfx	r3, r3, #4, #1
    485e:	e7f2      	b.n	4846 <vendor_request_handler+0xf6>
		if (request_params[0])
    4860:	880a      	ldrh	r2, [r1, #0]
    4862:	2310      	movs	r3, #16
    4864:	e7f3      	b.n	484e <vendor_request_handler+0xfe>
		data[0] = (TXLED) ? 1 : 0;
    4866:	4b97      	ldr	r3, [pc, #604]	; (4ac4 <vendor_request_handler+0x374>)
		data[0] = (HGM) ? 1 : 0;
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	f3c3 2300 	ubfx	r3, r3, #8, #1
    486e:	e7ea      	b.n	4846 <vendor_request_handler+0xf6>
		if (request_params[0])
    4870:	880a      	ldrh	r2, [r1, #0]
    4872:	f44f 7380 	mov.w	r3, #256	; 0x100
    4876:	e7ea      	b.n	484e <vendor_request_handler+0xfe>
		data[0] = (CC1V8) ? 1 : 0;
    4878:	4b92      	ldr	r3, [pc, #584]	; (4ac4 <vendor_request_handler+0x374>)
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	f3c3 2340 	ubfx	r3, r3, #9, #1
    4880:	e7e1      	b.n	4846 <vendor_request_handler+0xf6>
		if (request_params[0])
    4882:	880a      	ldrh	r2, [r1, #0]
    4884:	f44f 7300 	mov.w	r3, #512	; 0x200
    4888:	e7e1      	b.n	484e <vendor_request_handler+0xfe>
			CC1V8_CLR;
    488a:	4a90      	ldr	r2, [pc, #576]	; (4acc <vendor_request_handler+0x37c>)
    488c:	e7e1      	b.n	4852 <vendor_request_handler+0x102>
		get_part_num(data, data_len);
    488e:	4621      	mov	r1, r4
    4890:	4610      	mov	r0, r2
    4892:	f004 ff97 	bl	97c4 <get_part_num>
    4896:	e7d0      	b.n	483a <vendor_request_handler+0xea>
		get_device_serial(data, data_len);
    4898:	4621      	mov	r1, r4
    489a:	4610      	mov	r0, r2
    489c:	f004 ffac 	bl	97f8 <get_device_serial>
    48a0:	e7cb      	b.n	483a <vendor_request_handler+0xea>
		data[0] = (PAEN) ? 1 : 0;
    48a2:	4b8b      	ldr	r3, [pc, #556]	; (4ad0 <vendor_request_handler+0x380>)
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    48aa:	e7cc      	b.n	4846 <vendor_request_handler+0xf6>
    48ac:	2380      	movs	r3, #128	; 0x80
		if (request_params[0])
    48ae:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    48b0:	b13a      	cbz	r2, 48c2 <vendor_request_handler+0x172>
			HGM_SET;
    48b2:	4a88      	ldr	r2, [pc, #544]	; (4ad4 <vendor_request_handler+0x384>)
    48b4:	e7cd      	b.n	4852 <vendor_request_handler+0x102>
		data[0] = (HGM) ? 1 : 0;
    48b6:	4b86      	ldr	r3, [pc, #536]	; (4ad0 <vendor_request_handler+0x380>)
    48b8:	e7d6      	b.n	4868 <vendor_request_handler+0x118>
		if (request_params[0])
    48ba:	880a      	ldrh	r2, [r1, #0]
    48bc:	f44f 7380 	mov.w	r3, #256	; 0x100
    48c0:	e7f6      	b.n	48b0 <vendor_request_handler+0x160>
			HGM_CLR;
    48c2:	4a85      	ldr	r2, [pc, #532]	; (4ad8 <vendor_request_handler+0x388>)
    48c4:	e7c5      	b.n	4852 <vendor_request_handler+0x102>
		requested_mode = MODE_TX_TEST;
    48c6:	2203      	movs	r2, #3
		requested_mode = MODE_BT_TRANSMIT_LE;
    48c8:	4b7d      	ldr	r3, [pc, #500]	; (4ac0 <vendor_request_handler+0x370>)
    48ca:	749a      	strb	r2, [r3, #18]
    48cc:	e7b5      	b.n	483a <vendor_request_handler+0xea>
		data[0] = cc2400_get(FREND) & 0x7;
    48ce:	2005      	movs	r0, #5
    48d0:	f004 fdea 	bl	94a8 <cc2400_get>
    48d4:	f000 0007 	and.w	r0, r0, #7
    48d8:	7028      	strb	r0, [r5, #0]
			*data_len = 1;
    48da:	2001      	movs	r0, #1
    48dc:	e0b8      	b.n	4a50 <vendor_request_handler+0x300>
		if( request_params[0] < 8 ) {
    48de:	8809      	ldrh	r1, [r1, #0]
    48e0:	2907      	cmp	r1, #7
    48e2:	f200 82e3 	bhi.w	4eac <vendor_request_handler+0x75c>
			cc2400_set(FREND, 8 | request_params[0]);
    48e6:	2005      	movs	r0, #5
    48e8:	f041 0108 	orr.w	r1, r1, #8
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    48ec:	f004 fde5 	bl	94ba <cc2400_set>
    48f0:	e7a3      	b.n	483a <vendor_request_handler+0xea>
		requested_mode = MODE_RANGE_TEST;
    48f2:	2205      	movs	r2, #5
    48f4:	e7e8      	b.n	48c8 <vendor_request_handler+0x178>
		requested_mode = MODE_REPEATER;
    48f6:	2206      	movs	r2, #6
    48f8:	e7e6      	b.n	48c8 <vendor_request_handler+0x178>
		data[0] = rr.valid;
    48fa:	4b78      	ldr	r3, [pc, #480]	; (4adc <vendor_request_handler+0x38c>)
    48fc:	781a      	ldrb	r2, [r3, #0]
    48fe:	702a      	strb	r2, [r5, #0]
		data[1] = rr.request_pa;
    4900:	785a      	ldrb	r2, [r3, #1]
    4902:	706a      	strb	r2, [r5, #1]
		data[2] = rr.request_num;
    4904:	789a      	ldrb	r2, [r3, #2]
    4906:	70aa      	strb	r2, [r5, #2]
		data[3] = rr.reply_pa;
    4908:	78da      	ldrb	r2, [r3, #3]
    490a:	70ea      	strb	r2, [r5, #3]
		data[4] = rr.reply_num;
    490c:	791b      	ldrb	r3, [r3, #4]
    490e:	712b      	strb	r3, [r5, #4]
		*data_len = 5;
    4910:	2305      	movs	r3, #5
    4912:	e791      	b.n	4838 <vendor_request_handler+0xe8>
		requested_mode = MODE_IDLE;
    4914:	2200      	movs	r2, #0
    4916:	e7d7      	b.n	48c8 <vendor_request_handler+0x178>
		data[0] = modulation;
    4918:	4b69      	ldr	r3, [pc, #420]	; (4ac0 <vendor_request_handler+0x370>)
		data[0] = cs_threshold_req;
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	e793      	b.n	4846 <vendor_request_handler+0xf6>
		modulation = request_params[0];
    491e:	780a      	ldrb	r2, [r1, #0]
    4920:	4b67      	ldr	r3, [pc, #412]	; (4ac0 <vendor_request_handler+0x370>)
    4922:	701a      	strb	r2, [r3, #0]
    4924:	e789      	b.n	483a <vendor_request_handler+0xea>
		data[0] = channel & 0xFF;
    4926:	4b6e      	ldr	r3, [pc, #440]	; (4ae0 <vendor_request_handler+0x390>)
    4928:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    492c:	702a      	strb	r2, [r5, #0]
		data[1] = (channel >> 8) & 0xFF;
    492e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    4932:	f3c3 2307 	ubfx	r3, r3, #8, #8
		data[1] = 0x37;
    4936:	706b      	strb	r3, [r5, #1]
		*data_len = 2;
    4938:	2302      	movs	r3, #2
    493a:	e77d      	b.n	4838 <vendor_request_handler+0xe8>
		requested_channel = request_params[0];
    493c:	880a      	ldrh	r2, [r1, #0]
		if (requested_channel > MAX_FREQ) {
    493e:	f640 21ea 	movw	r1, #2794	; 0xaea
		requested_channel = request_params[0];
    4942:	4b5f      	ldr	r3, [pc, #380]	; (4ac0 <vendor_request_handler+0x370>)
    4944:	81da      	strh	r2, [r3, #14]
		if (requested_channel > MAX_FREQ) {
    4946:	89da      	ldrh	r2, [r3, #14]
    4948:	b292      	uxth	r2, r2
    494a:	428a      	cmp	r2, r1
    494c:	d919      	bls.n	4982 <vendor_request_handler+0x232>
			hop_mode = HOP_SWEEP;
    494e:	2201      	movs	r2, #1
    4950:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4952:	f640 1262 	movw	r2, #2402	; 0x962
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4956:	81da      	strh	r2, [r3, #14]
		le_adv_channel = requested_channel;
    4958:	89d9      	ldrh	r1, [r3, #14]
    495a:	4a61      	ldr	r2, [pc, #388]	; (4ae0 <vendor_request_handler+0x390>)
    495c:	b289      	uxth	r1, r1
    495e:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
		if (mode != MODE_BT_FOLLOW_LE) {
    4962:	7c59      	ldrb	r1, [r3, #17]
    4964:	2909      	cmp	r1, #9
    4966:	f43f af68 	beq.w	483a <vendor_request_handler+0xea>
			channel = requested_channel;
    496a:	89d9      	ldrh	r1, [r3, #14]
    496c:	b289      	uxth	r1, r1
    496e:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
			requested_channel = 0;
    4972:	2100      	movs	r1, #0
    4974:	81d9      	strh	r1, [r3, #14]
			cs_threshold_calc_and_set(channel);
    4976:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
		cs_threshold_calc_and_set(channel);
    497a:	b280      	uxth	r0, r0
    497c:	f002 ff90 	bl	78a0 <cs_threshold_calc_and_set>
    4980:	e75b      	b.n	483a <vendor_request_handler+0xea>
			hop_mode = HOP_NONE;
    4982:	2200      	movs	r2, #0
    4984:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4986:	f640 02dc 	movw	r2, #2268	; 0x8dc
    498a:	89d9      	ldrh	r1, [r3, #14]
    498c:	b289      	uxth	r1, r1
    498e:	4291      	cmp	r1, r2
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4990:	f640 21e9 	movw	r1, #2793	; 0xae9
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4994:	bf84      	itt	hi
    4996:	89da      	ldrhhi	r2, [r3, #14]
    4998:	b292      	uxthhi	r2, r2
    499a:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    499c:	89da      	ldrh	r2, [r3, #14]
    499e:	b292      	uxth	r2, r2
    49a0:	428a      	cmp	r2, r1
    49a2:	bf96      	itet	ls
    49a4:	89da      	ldrhls	r2, [r3, #14]
    49a6:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    49aa:	b292      	uxthls	r2, r2
    49ac:	e7d3      	b.n	4956 <vendor_request_handler+0x206>
		set_isp();
    49ae:	f004 ff55 	bl	985c <set_isp>
    49b2:	e740      	b.n	4836 <vendor_request_handler+0xe6>
		bootloader_ctrl = DFU_MODE;
    49b4:	4a4b      	ldr	r2, [pc, #300]	; (4ae4 <vendor_request_handler+0x394>)
    49b6:	4b4c      	ldr	r3, [pc, #304]	; (4ae8 <vendor_request_handler+0x398>)
    49b8:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    49ba:	220b      	movs	r2, #11
    49bc:	e784      	b.n	48c8 <vendor_request_handler+0x178>
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    49be:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    49c2:	880a      	ldrh	r2, [r1, #0]
    49c4:	1813      	adds	r3, r2, r0
    49c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    49ca:	f080 826f 	bcs.w	4eac <vendor_request_handler+0x75c>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    49ce:	884b      	ldrh	r3, [r1, #2]
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    49d0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    49d4:	1859      	adds	r1, r3, r1
    49d6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    49da:	f080 8267 	bcs.w	4eac <vendor_request_handler+0x75c>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    49de:	429a      	cmp	r2, r3
    49e0:	f200 8264 	bhi.w	4eac <vendor_request_handler+0x75c>
		low_freq = request_params[0];
    49e4:	493e      	ldr	r1, [pc, #248]	; (4ae0 <vendor_request_handler+0x390>)
    49e6:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
		requested_mode = MODE_SPECAN;
    49ea:	2204      	movs	r2, #4
		high_freq = request_params[1];
    49ec:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
		requested_mode = MODE_TX_GENERIC;
    49f0:	4b33      	ldr	r3, [pc, #204]	; (4ac0 <vendor_request_handler+0x370>)
    49f2:	e71f      	b.n	4834 <vendor_request_handler+0xe4>
		requested_mode = MODE_RX_GENERIC;
    49f4:	220f      	movs	r2, #15
    49f6:	e7fb      	b.n	49f0 <vendor_request_handler+0x2a0>
		if (request_params[0] > 256)
    49f8:	880b      	ldrh	r3, [r1, #0]
    49fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    49fe:	f200 8255 	bhi.w	4eac <vendor_request_handler+0x75c>
		rssi_threshold = 54 - request_params[0];
    4a02:	4a37      	ldr	r2, [pc, #220]	; (4ae0 <vendor_request_handler+0x390>)
    4a04:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4a08:	b25b      	sxtb	r3, r3
    4a0a:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
		requested_mode = MODE_LED_SPECAN;
    4a0e:	2207      	movs	r2, #7
    4a10:	e7ee      	b.n	49f0 <vendor_request_handler+0x2a0>
		data[0] = 0x00;
    4a12:	2300      	movs	r3, #0
		length = (u8)strlen(GIT_REVISION);
    4a14:	4835      	ldr	r0, [pc, #212]	; (4aec <vendor_request_handler+0x39c>)
		data[0] = 0x00;
    4a16:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4a18:	7053      	strb	r3, [r2, #1]
		length = (u8)strlen(GIT_REVISION);
    4a1a:	f006 f8d9 	bl	abd0 <strlen>
    4a1e:	b2c6      	uxtb	r6, r0
    4a20:	70a8      	strb	r0, [r5, #2]
		memcpy(&data[3], GIT_REVISION, length);
    4a22:	4632      	mov	r2, r6
    4a24:	4931      	ldr	r1, [pc, #196]	; (4aec <vendor_request_handler+0x39c>)
    4a26:	1ce8      	adds	r0, r5, #3
    4a28:	f006 f85c 	bl	aae4 <memcpy>
		*data_len = 2 + 1 + length;
    4a2c:	3603      	adds	r6, #3
		*data_len = 1 + length;
    4a2e:	6026      	str	r6, [r4, #0]
    4a30:	e703      	b.n	483a <vendor_request_handler+0xea>
		length = (u8)strlen(compile_info);
    4a32:	482f      	ldr	r0, [pc, #188]	; (4af0 <vendor_request_handler+0x3a0>)
    4a34:	f006 f8cc 	bl	abd0 <strlen>
    4a38:	b2c6      	uxtb	r6, r0
    4a3a:	f805 0b01 	strb.w	r0, [r5], #1
		memcpy(&data[1], compile_info, length);
    4a3e:	4632      	mov	r2, r6
    4a40:	492b      	ldr	r1, [pc, #172]	; (4af0 <vendor_request_handler+0x3a0>)
    4a42:	4628      	mov	r0, r5
    4a44:	f006 f84e 	bl	aae4 <memcpy>
		*data_len = 1 + length;
    4a48:	3601      	adds	r6, #1
    4a4a:	e7f0      	b.n	4a2e <vendor_request_handler+0x2de>
		data[0] = BOARD_ID;
    4a4c:	2001      	movs	r0, #1
    4a4e:	7010      	strb	r0, [r2, #0]
			*data_len = 1;
    4a50:	6020      	str	r0, [r4, #0]
    4a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cs_threshold_req = (int8_t)request_params[0];
    4a54:	880a      	ldrh	r2, [r1, #0]
    4a56:	4b27      	ldr	r3, [pc, #156]	; (4af4 <vendor_request_handler+0x3a4>)
    4a58:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set(channel);
    4a5a:	4b21      	ldr	r3, [pc, #132]	; (4ae0 <vendor_request_handler+0x390>)
    4a5c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    4a60:	e78b      	b.n	497a <vendor_request_handler+0x22a>
		data[0] = cs_threshold_req;
    4a62:	4b24      	ldr	r3, [pc, #144]	; (4af4 <vendor_request_handler+0x3a4>)
    4a64:	e759      	b.n	491a <vendor_request_handler+0x1ca>
		target.address = 0;
    4a66:	2200      	movs	r2, #0
    4a68:	2300      	movs	r3, #0
		target.syncword = 0;
    4a6a:	2600      	movs	r6, #0
		target.address = 0;
    4a6c:	4c22      	ldr	r4, [pc, #136]	; (4af8 <vendor_request_handler+0x3a8>)
    4a6e:	1e6f      	subs	r7, r5, #1
    4a70:	e9c4 2300 	strd	r2, r3, [r4]
		target.syncword = 0;
    4a74:	e9c4 2302 	strd	r2, r3, [r4, #8]
			target.address |= (uint64_t)data[i] << 8*i;
    4a78:	4632      	mov	r2, r6
    4a7a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4a7e:	2100      	movs	r1, #0
    4a80:	f005 faae 	bl	9fe0 <__aeabi_llsl>
    4a84:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a88:	3608      	adds	r6, #8
    4a8a:	4310      	orrs	r0, r2
    4a8c:	4319      	orrs	r1, r3
		for(int i=0; i < 8; i++) {
    4a8e:	2e40      	cmp	r6, #64	; 0x40
			target.address |= (uint64_t)data[i] << 8*i;
    4a90:	e9c4 0100 	strd	r0, r1, [r4]
		for(int i=0; i < 8; i++) {
    4a94:	d1f0      	bne.n	4a78 <vendor_request_handler+0x328>
    4a96:	2600      	movs	r6, #0
    4a98:	3507      	adds	r5, #7
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4a9a:	4632      	mov	r2, r6
    4a9c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4aa0:	2100      	movs	r1, #0
    4aa2:	f005 fa9d 	bl	9fe0 <__aeabi_llsl>
    4aa6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    4aaa:	3608      	adds	r6, #8
    4aac:	4310      	orrs	r0, r2
    4aae:	4319      	orrs	r1, r3
		for(int i=0; i < 8; i++) {
    4ab0:	2e40      	cmp	r6, #64	; 0x40
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4ab2:	e9c4 0102 	strd	r0, r1, [r4, #8]
		for(int i=0; i < 8; i++) {
    4ab6:	d1f0      	bne.n	4a9a <vendor_request_handler+0x34a>
		precalc();
    4ab8:	f002 fbc4 	bl	7244 <precalc>
    4abc:	e6bd      	b.n	483a <vendor_request_handler+0xea>
    4abe:	bf00      	nop
    4ac0:	10000a4c 	.word	0x10000a4c
    4ac4:	2009c034 	.word	0x2009c034
    4ac8:	2009c038 	.word	0x2009c038
    4acc:	2009c03c 	.word	0x2009c03c
    4ad0:	2009c054 	.word	0x2009c054
    4ad4:	2009c058 	.word	0x2009c058
    4ad8:	2009c05c 	.word	0x2009c05c
    4adc:	100019e4 	.word	0x100019e4
    4ae0:	10000450 	.word	0x10000450
    4ae4:	4305bb21 	.word	0x4305bb21
    4ae8:	1000001c 	.word	0x1000001c
    4aec:	0000b50e 	.word	0x0000b50e
    4af0:	0000acdb 	.word	0x0000acdb
    4af4:	100019ac 	.word	0x100019ac
    4af8:	10001a28 	.word	0x10001a28
		clkn_offset = 0;
    4afc:	2200      	movs	r2, #0
    4afe:	4ba9      	ldr	r3, [pc, #676]	; (4da4 <vendor_request_handler+0x654>)
    4b00:	1ce8      	adds	r0, r5, #3
    4b02:	601a      	str	r2, [r3, #0]
    4b04:	1e6a      	subs	r2, r5, #1
			clkn_offset <<= 8;
    4b06:	6819      	ldr	r1, [r3, #0]
    4b08:	0209      	lsls	r1, r1, #8
    4b0a:	6019      	str	r1, [r3, #0]
			clkn_offset |= data[i];
    4b0c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    4b10:	681c      	ldr	r4, [r3, #0]
		for(int i=0; i < 4; i++) {
    4b12:	4282      	cmp	r2, r0
			clkn_offset |= data[i];
    4b14:	ea41 0104 	orr.w	r1, r1, r4
    4b18:	6019      	str	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4b1a:	d1f4      	bne.n	4b06 <vendor_request_handler+0x3b6>
		hop_mode = HOP_BLUETOOTH;
    4b1c:	2202      	movs	r2, #2
		dma_discard = 1;
    4b1e:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4b20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		hop_mode = HOP_BLUETOOTH;
    4b24:	4ba0      	ldr	r3, [pc, #640]	; (4da8 <vendor_request_handler+0x658>)
    4b26:	729a      	strb	r2, [r3, #10]
		DIO_SSEL_SET;
    4b28:	4aa0      	ldr	r2, [pc, #640]	; (4dac <vendor_request_handler+0x65c>)
		dma_discard = 1;
    4b2a:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4b2c:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4b2e:	7929      	ldrb	r1, [r5, #4]
    4b30:	796a      	ldrb	r2, [r5, #5]
    4b32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4b36:	499e      	ldr	r1, [pc, #632]	; (4db0 <vendor_request_handler+0x660>)
    4b38:	800a      	strh	r2, [r1, #0]
		requested_mode = MODE_BT_FOLLOW;
    4b3a:	2208      	movs	r2, #8
    4b3c:	749a      	strb	r2, [r3, #18]
		break;
    4b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hop_mode = HOP_AFH;
    4b40:	2205      	movs	r2, #5
    4b42:	4b99      	ldr	r3, [pc, #612]	; (4da8 <vendor_request_handler+0x658>)
			afh_map[i] = 0;
    4b44:	499b      	ldr	r1, [pc, #620]	; (4db4 <vendor_request_handler+0x664>)
		hop_mode = HOP_AFH;
    4b46:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4b48:	220e      	movs	r2, #14
    4b4a:	749a      	strb	r2, [r3, #18]
		for(int i=0; i < 10; i++) {
    4b4c:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4b4e:	461a      	mov	r2, r3
    4b50:	545a      	strb	r2, [r3, r1]
		for(int i=0; i < 10; i++) {
    4b52:	3301      	adds	r3, #1
    4b54:	2b0a      	cmp	r3, #10
    4b56:	d1fb      	bne.n	4b50 <vendor_request_handler+0x400>
		afh_enabled = 1;
    4b58:	2001      	movs	r0, #1
		used_channels = 0;
    4b5a:	4b97      	ldr	r3, [pc, #604]	; (4db8 <vendor_request_handler+0x668>)
    4b5c:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4b5e:	4b97      	ldr	r3, [pc, #604]	; (4dbc <vendor_request_handler+0x66c>)
    4b60:	7018      	strb	r0, [r3, #0]
		break;
    4b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		do_hop = 1;
    4b64:	2001      	movs	r0, #1
    4b66:	4b90      	ldr	r3, [pc, #576]	; (4da8 <vendor_request_handler+0x658>)
    4b68:	72d8      	strb	r0, [r3, #11]
		break;
    4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b6c:	6812      	ldr	r2, [r2, #0]
		clkn = clock;
    4b6e:	4b94      	ldr	r3, [pc, #592]	; (4dc0 <vendor_request_handler+0x670>)
    4b70:	601a      	str	r2, [r3, #0]
    4b72:	e772      	b.n	4a5a <vendor_request_handler+0x30a>
	switch (request) {
    4b74:	2300      	movs	r3, #0
			afh_map[i] = data[i];
    4b76:	4a8f      	ldr	r2, [pc, #572]	; (4db4 <vendor_request_handler+0x664>)
    4b78:	5ce9      	ldrb	r1, [r5, r3]
    4b7a:	5499      	strb	r1, [r3, r2]
		for(int i=0; i < 10; i++) {
    4b7c:	3301      	adds	r3, #1
    4b7e:	2b0a      	cmp	r3, #10
    4b80:	d1fa      	bne.n	4b78 <vendor_request_handler+0x428>
		afh_enabled = 1;
    4b82:	2001      	movs	r0, #1
    4b84:	4a8d      	ldr	r2, [pc, #564]	; (4dbc <vendor_request_handler+0x66c>)
    4b86:	7010      	strb	r0, [r2, #0]
    4b88:	e64f      	b.n	482a <vendor_request_handler+0xda>
	switch (request) {
    4b8a:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4b8c:	461a      	mov	r2, r3
    4b8e:	4989      	ldr	r1, [pc, #548]	; (4db4 <vendor_request_handler+0x664>)
    4b90:	545a      	strb	r2, [r3, r1]
		for(int i=0; i < 10; i++) {
    4b92:	3301      	adds	r3, #1
    4b94:	2b0a      	cmp	r3, #10
    4b96:	d1fb      	bne.n	4b90 <vendor_request_handler+0x440>
		afh_enabled = 0;
    4b98:	4988      	ldr	r1, [pc, #544]	; (4dbc <vendor_request_handler+0x66c>)
    4b9a:	700a      	strb	r2, [r1, #0]
    4b9c:	e64c      	b.n	4838 <vendor_request_handler+0xe8>
		clock = clkn;
    4b9e:	4b88      	ldr	r3, [pc, #544]	; (4dc0 <vendor_request_handler+0x670>)
    4ba0:	1e55      	subs	r5, r2, #1
    4ba2:	6819      	ldr	r1, [r3, #0]
    4ba4:	2300      	movs	r3, #0
			data[i] = (clock >> (8*i)) & 0xff;
    4ba6:	fa21 f203 	lsr.w	r2, r1, r3
    4baa:	3308      	adds	r3, #8
		for(int i=0; i < 4; i++) {
    4bac:	2b20      	cmp	r3, #32
			data[i] = (clock >> (8*i)) & 0xff;
    4bae:	f805 2f01 	strb.w	r2, [r5, #1]!
		for(int i=0; i < 4; i++) {
    4bb2:	d1f8      	bne.n	4ba6 <vendor_request_handler+0x456>
		*data_len = 4;
    4bb4:	2304      	movs	r3, #4
    4bb6:	e63f      	b.n	4838 <vendor_request_handler+0xe8>
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4bb8:	7812      	ldrb	r2, [r2, #0]
    4bba:	786b      	ldrb	r3, [r5, #1]
    4bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4bc0:	4a7b      	ldr	r2, [pc, #492]	; (4db0 <vendor_request_handler+0x660>)
    4bc2:	8013      	strh	r3, [r2, #0]
    4bc4:	e639      	b.n	483a <vendor_request_handler+0xea>
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4bc6:	4a7f      	ldr	r2, [pc, #508]	; (4dc4 <vendor_request_handler+0x674>)
    4bc8:	7828      	ldrb	r0, [r5, #0]
    4bca:	786b      	ldrb	r3, [r5, #1]
    4bcc:	8811      	ldrh	r1, [r2, #0]
    4bce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4bd2:	440b      	add	r3, r1
    4bd4:	b21b      	sxth	r3, r3
    4bd6:	8013      	strh	r3, [r2, #0]
		if (clk_drift_ppm < 0) {
    4bd8:	8813      	ldrh	r3, [r2, #0]
    4bda:	497b      	ldr	r1, [pc, #492]	; (4dc8 <vendor_request_handler+0x678>)
    4bdc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4be0:	4b7a      	ldr	r3, [pc, #488]	; (4dcc <vendor_request_handler+0x67c>)
    4be2:	d00e      	beq.n	4c02 <vendor_request_handler+0x4b2>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4be4:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4be8:	8812      	ldrh	r2, [r2, #0]
    4bea:	4252      	negs	r2, r2
    4bec:	b292      	uxth	r2, r2
    4bee:	fb90 f2f2 	sdiv	r2, r0, r2
			clk_drift_correction = 320 / clk_drift_ppm;
    4bf2:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4bf4:	4a76      	ldr	r2, [pc, #472]	; (4dd0 <vendor_request_handler+0x680>)
    4bf6:	881b      	ldrh	r3, [r3, #0]
    4bf8:	6812      	ldr	r2, [r2, #0]
    4bfa:	b29b      	uxth	r3, r3
    4bfc:	4413      	add	r3, r2
    4bfe:	600b      	str	r3, [r1, #0]
    4c00:	e61b      	b.n	483a <vendor_request_handler+0xea>
		else if (clk_drift_ppm > 0) {
    4c02:	8810      	ldrh	r0, [r2, #0]
    4c04:	b200      	sxth	r0, r0
    4c06:	2800      	cmp	r0, #0
    4c08:	dd07      	ble.n	4c1a <vendor_request_handler+0x4ca>
			clk_drift_correction = 320 / clk_drift_ppm;
    4c0a:	8812      	ldrh	r2, [r2, #0]
    4c0c:	b210      	sxth	r0, r2
    4c0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4c12:	fb92 f2f0 	sdiv	r2, r2, r0
    4c16:	b292      	uxth	r2, r2
    4c18:	e7eb      	b.n	4bf2 <vendor_request_handler+0x4a2>
			clk_drift_correction = 0;
    4c1a:	2200      	movs	r2, #0
    4c1c:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = 0;
    4c1e:	600a      	str	r2, [r1, #0]
    4c20:	e60b      	b.n	483a <vendor_request_handler+0xea>
		*data_len = 0;
    4c22:	2200      	movs	r2, #0
		le.do_follow = request_params[0];
    4c24:	880b      	ldrh	r3, [r1, #0]
    4c26:	4d6b      	ldr	r5, [pc, #428]	; (4dd4 <vendor_request_handler+0x684>)
    4c28:	636b      	str	r3, [r5, #52]	; 0x34
		do_hop = 0;
    4c2a:	4b5f      	ldr	r3, [pc, #380]	; (4da8 <vendor_request_handler+0x658>)
		*data_len = 0;
    4c2c:	6022      	str	r2, [r4, #0]
		do_hop = 0;
    4c2e:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4c30:	2203      	movs	r2, #3
    4c32:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4c34:	2209      	movs	r2, #9
    4c36:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4c38:	f002 fd44 	bl	76c4 <usb_queue_init>
		cs_threshold_calc_and_set(channel);
    4c3c:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    4c40:	e69b      	b.n	497a <vendor_request_handler+0x22a>
	switch (request) {
    4c42:	2300      	movs	r3, #0
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4c44:	4963      	ldr	r1, [pc, #396]	; (4dd4 <vendor_request_handler+0x684>)
    4c46:	1e55      	subs	r5, r2, #1
    4c48:	680a      	ldr	r2, [r1, #0]
    4c4a:	40da      	lsrs	r2, r3
    4c4c:	3308      	adds	r3, #8
		for(int i=0; i < 4; i++) {
    4c4e:	2b20      	cmp	r3, #32
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4c50:	f805 2f01 	strb.w	r2, [r5, #1]!
		for(int i=0; i < 4; i++) {
    4c54:	d1f8      	bne.n	4c48 <vendor_request_handler+0x4f8>
    4c56:	e7ad      	b.n	4bb4 <vendor_request_handler+0x464>
		le.target_set = 1;
    4c58:	2401      	movs	r4, #1
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4c5a:	6810      	ldr	r0, [r2, #0]
    4c5c:	f7ff fb90 	bl	4380 <le_set_access_address>
		le.target_set = 1;
    4c60:	4b5c      	ldr	r3, [pc, #368]	; (4dd4 <vendor_request_handler+0x684>)
		debug_printf("AA set\n");
    4c62:	485d      	ldr	r0, [pc, #372]	; (4dd8 <vendor_request_handler+0x688>)
		le.target_set = 1;
    4c64:	645c      	str	r4, [r3, #68]	; 0x44
		debug_printf("Hop increment set\n");
    4c66:	f003 ffdb 	bl	8c20 <debug_printf>
    4c6a:	e5e6      	b.n	483a <vendor_request_handler+0xea>
		data[0] = 0x13;
    4c6c:	2313      	movs	r3, #19
    4c6e:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4c70:	2337      	movs	r3, #55	; 0x37
    4c72:	e660      	b.n	4936 <vendor_request_handler+0x1e6>
		data[0] = le.crc_verify ? 1 : 0;
    4c74:	4b57      	ldr	r3, [pc, #348]	; (4dd4 <vendor_request_handler+0x684>)
    4c76:	691b      	ldr	r3, [r3, #16]
    4c78:	3300      	adds	r3, #0
    4c7a:	bf18      	it	ne
    4c7c:	2301      	movne	r3, #1
    4c7e:	e5e2      	b.n	4846 <vendor_request_handler+0xf6>
		le.crc_verify = request_params[0] ? 1 : 0;
    4c80:	880b      	ldrh	r3, [r1, #0]
    4c82:	4a54      	ldr	r2, [pc, #336]	; (4dd4 <vendor_request_handler+0x684>)
    4c84:	3300      	adds	r3, #0
    4c86:	bf18      	it	ne
    4c88:	2301      	movne	r3, #1
    4c8a:	6113      	str	r3, [r2, #16]
    4c8c:	e5d5      	b.n	483a <vendor_request_handler+0xea>
		p = dequeue();
    4c8e:	f002 fd41 	bl	7714 <dequeue>
		if (p != NULL) {
    4c92:	4601      	mov	r1, r0
    4c94:	b128      	cbz	r0, 4ca2 <vendor_request_handler+0x552>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4c96:	2240      	movs	r2, #64	; 0x40
    4c98:	4628      	mov	r0, r5
    4c9a:	f005 ff23 	bl	aae4 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4c9e:	2340      	movs	r3, #64	; 0x40
    4ca0:	e5ca      	b.n	4838 <vendor_request_handler+0xe8>
			data[0] = 0;
    4ca2:	7028      	strb	r0, [r5, #0]
    4ca4:	e619      	b.n	48da <vendor_request_handler+0x18a>
		*data_len = 0;
    4ca6:	2200      	movs	r2, #0
		hop_mode = HOP_NONE;
    4ca8:	4b3f      	ldr	r3, [pc, #252]	; (4da8 <vendor_request_handler+0x658>)
		*data_len = 0;
    4caa:	6022      	str	r2, [r4, #0]
		hop_mode = HOP_NONE;
    4cac:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4cae:	220a      	movs	r2, #10
    4cb0:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4cb2:	f002 fd07 	bl	76c4 <usb_queue_init>
    4cb6:	e6d0      	b.n	4a5a <vendor_request_handler+0x30a>
		reg_val = cc2400_get(request_params[0]);
    4cb8:	7808      	ldrb	r0, [r1, #0]
    4cba:	f004 fbf5 	bl	94a8 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4cbe:	0a03      	lsrs	r3, r0, #8
    4cc0:	702b      	strb	r3, [r5, #0]
		data[1] = reg_val & 0xff;
    4cc2:	7068      	strb	r0, [r5, #1]
    4cc4:	e638      	b.n	4938 <vendor_request_handler+0x1e8>
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4cc6:	8849      	ldrh	r1, [r1, #2]
    4cc8:	7830      	ldrb	r0, [r6, #0]
    4cca:	e60f      	b.n	48ec <vendor_request_handler+0x19c>
	switch (request) {
    4ccc:	2600      	movs	r6, #0
    4cce:	b2f7      	uxtb	r7, r6
			reg_val = cc2400_get(i);
    4cd0:	4638      	mov	r0, r7
    4cd2:	f004 fbe9 	bl	94a8 <cc2400_get>
    4cd6:	3601      	adds	r6, #1
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4cd8:	0a03      	lsrs	r3, r0, #8
		for(i=0; i<=MAX_READ_REG; i++) {
    4cda:	2e2e      	cmp	r6, #46	; 0x2e
			data[i*3] = i;
    4cdc:	702f      	strb	r7, [r5, #0]
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4cde:	706b      	strb	r3, [r5, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4ce0:	70a8      	strb	r0, [r5, #2]
    4ce2:	f105 0503 	add.w	r5, r5, #3
		for(i=0; i<=MAX_READ_REG; i++) {
    4ce6:	d1f2      	bne.n	4cce <vendor_request_handler+0x57e>
		*data_len = MAX_READ_REG*3;
    4ce8:	2387      	movs	r3, #135	; 0x87
    4cea:	e5a5      	b.n	4838 <vendor_request_handler+0xe8>
		i = 7 + data[6];
    4cec:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4cee:	4629      	mov	r1, r5
		i = 7 + data[6];
    4cf0:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4cf2:	b2d2      	uxtb	r2, r2
    4cf4:	4839      	ldr	r0, [pc, #228]	; (4ddc <vendor_request_handler+0x68c>)
    4cf6:	f005 fef5 	bl	aae4 <memcpy>
		requested_mode = MODE_TX_GENERIC;
    4cfa:	2210      	movs	r2, #16
    4cfc:	e678      	b.n	49f0 <vendor_request_handler+0x2a0>
		requested_mode = MODE_BT_SLAVE_LE;
    4cfe:	220c      	movs	r2, #12
    4d00:	e5e2      	b.n	48c8 <vendor_request_handler+0x178>
		requested_mode = MODE_BT_TRANSMIT_LE;
    4d02:	2211      	movs	r2, #17
    4d04:	e5e0      	b.n	48c8 <vendor_request_handler+0x178>
		le.conn_interval = (data[0] | data[1] << 8);
    4d06:	7852      	ldrb	r2, [r2, #1]
    4d08:	782b      	ldrb	r3, [r5, #0]
		debug_printf("Hop interval set\n");
    4d0a:	4835      	ldr	r0, [pc, #212]	; (4de0 <vendor_request_handler+0x690>)
		le.conn_interval = (data[0] | data[1] << 8);
    4d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4d10:	4a30      	ldr	r2, [pc, #192]	; (4dd4 <vendor_request_handler+0x684>)
    4d12:	83d3      	strh	r3, [r2, #30]
		window_shift = ((300/1000000)*le.conn_interval*USEC(1250))/2;
    4d14:	2200      	movs	r2, #0
    4d16:	4b24      	ldr	r3, [pc, #144]	; (4da8 <vendor_request_handler+0x658>)
    4d18:	61da      	str	r2, [r3, #28]
    4d1a:	e7a4      	b.n	4c66 <vendor_request_handler+0x516>
		le.channel_increment = data[0];
    4d1c:	7812      	ldrb	r2, [r2, #0]
    4d1e:	4b2d      	ldr	r3, [pc, #180]	; (4dd4 <vendor_request_handler+0x684>)
		debug_printf("Hop increment set\n");
    4d20:	4830      	ldr	r0, [pc, #192]	; (4de4 <vendor_request_handler+0x694>)
		le.channel_increment = data[0];
    4d22:	759a      	strb	r2, [r3, #22]
    4d24:	e79f      	b.n	4c66 <vendor_request_handler+0x516>
		le.channel_idx = data[0];
    4d26:	4c2b      	ldr	r4, [pc, #172]	; (4dd4 <vendor_request_handler+0x684>)
    4d28:	7813      	ldrb	r3, [r2, #0]
		channel = btle_next_hop(&le);
    4d2a:	4620      	mov	r0, r4
		le.channel_idx = data[0];
    4d2c:	7563      	strb	r3, [r4, #21]
		channel = btle_next_hop(&le);
    4d2e:	f002 fc05 	bl	753c <btle_next_hop>
    4d32:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
		channel = btle_next_hop(&le);
    4d36:	4620      	mov	r0, r4
    4d38:	f002 fc00 	bl	753c <btle_next_hop>
    4d3c:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
    4d40:	e57b      	b.n	483a <vendor_request_handler+0xea>
		tx_anchor = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4d42:	4c19      	ldr	r4, [pc, #100]	; (4da8 <vendor_request_handler+0x658>)
    4d44:	6811      	ldr	r1, [r2, #0]
		debug_printf("Anchor: %d\n", tx_anchor);
    4d46:	4828      	ldr	r0, [pc, #160]	; (4de8 <vendor_request_handler+0x698>)
		tx_anchor = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4d48:	6221      	str	r1, [r4, #32]
		debug_printf("Anchor: %d\n", tx_anchor);
    4d4a:	f003 ff69 	bl	8c20 <debug_printf>
		u32 now = tx_anchor + (le.conn_interval*USEC(1250)) - TX_WARMUP_TIME - PACKET_DURATION(2) - USEC(50); 
    4d4e:	f243 01d4 	movw	r1, #12500	; 0x30d4
    4d52:	4b20      	ldr	r3, [pc, #128]	; (4dd4 <vendor_request_handler+0x684>)
	T0MCR = TMCR_MR0I;
    4d54:	2001      	movs	r0, #1
		u32 now = tx_anchor + (le.conn_interval*USEC(1250)) - TX_WARMUP_TIME - PACKET_DURATION(2) - USEC(50); 
    4d56:	8bda      	ldrh	r2, [r3, #30]
    4d58:	6a23      	ldr	r3, [r4, #32]
    4d5a:	fb01 3202 	mla	r2, r1, r2, r3
		if (now > 3276800000)
    4d5e:	4923      	ldr	r1, [pc, #140]	; (4dec <vendor_request_handler+0x69c>)
		u32 now = tx_anchor + (le.conn_interval*USEC(1250)) - TX_WARMUP_TIME - PACKET_DURATION(2) - USEC(50); 
    4d60:	f5a2 63d7 	sub.w	r3, r2, #1720	; 0x6b8
		if (now > 3276800000)
    4d64:	428b      	cmp	r3, r1
	T0MCR = ~TMCR_MR0I;
    4d66:	f06f 0101 	mvn.w	r1, #1
			now -= 3276800000;
    4d6a:	bf84      	itt	hi
    4d6c:	4b20      	ldrhi	r3, [pc, #128]	; (4df0 <vendor_request_handler+0x6a0>)
    4d6e:	189b      	addhi	r3, r3, r2
	T0MCR = ~TMCR_MR0I;
    4d70:	4a20      	ldr	r2, [pc, #128]	; (4df4 <vendor_request_handler+0x6a4>)
    4d72:	6011      	str	r1, [r2, #0]
	T0MR0 = match;
    4d74:	4920      	ldr	r1, [pc, #128]	; (4df8 <vendor_request_handler+0x6a8>)
    4d76:	600b      	str	r3, [r1, #0]
		hop_mode = HOP_TRANSMIT_LE2;
    4d78:	2307      	movs	r3, #7
	T0MCR = TMCR_MR0I;
    4d7a:	6010      	str	r0, [r2, #0]
		hop_mode = HOP_TRANSMIT_LE2;
    4d7c:	72a3      	strb	r3, [r4, #10]
		anchor_set = 1;
    4d7e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		break;
    4d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d84:	6812      	ldr	r2, [r2, #0]
		le.crc_init = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4d86:	4b13      	ldr	r3, [pc, #76]	; (4dd4 <vendor_request_handler+0x684>)
    4d88:	609a      	str	r2, [r3, #8]
    4d8a:	e556      	b.n	483a <vendor_request_handler+0xea>
	unsigned data_in_len = request_params[2];
    4d8c:	888a      	ldrh	r2, [r1, #4]
		if (data_in_len > LE_ADV_MAX_LEN)
    4d8e:	2a15      	cmp	r2, #21
    4d90:	f200 808c 	bhi.w	4eac <vendor_request_handler+0x75c>
		le_adv_len = data_in_len;
    4d94:	480f      	ldr	r0, [pc, #60]	; (4dd4 <vendor_request_handler+0x684>)
		memcpy(le_adv_data, data, le_adv_len);
    4d96:	4629      	mov	r1, r5
		le_adv_len = data_in_len;
    4d98:	6582      	str	r2, [r0, #88]	; 0x58
		memcpy(le_adv_data, data, le_adv_len);
    4d9a:	305c      	adds	r0, #92	; 0x5c
    4d9c:	f005 fea2 	bl	aae4 <memcpy>
    4da0:	e54b      	b.n	483a <vendor_request_handler+0xea>
    4da2:	bf00      	nop
    4da4:	10001398 	.word	0x10001398
    4da8:	10000a4c 	.word	0x10000a4c
    4dac:	2009c098 	.word	0x2009c098
    4db0:	10001672 	.word	0x10001672
    4db4:	1000138b 	.word	0x1000138b
    4db8:	10001389 	.word	0x10001389
    4dbc:	100019ab 	.word	0x100019ab
    4dc0:	10001464 	.word	0x10001464
    4dc4:	100019a8 	.word	0x100019a8
    4dc8:	100019e0 	.word	0x100019e0
    4dcc:	10001460 	.word	0x10001460
    4dd0:	1000145c 	.word	0x1000145c
    4dd4:	10000450 	.word	0x10000450
    4dd8:	0000b513 	.word	0x0000b513
    4ddc:	10001468 	.word	0x10001468
    4de0:	0000b51b 	.word	0x0000b51b
    4de4:	0000b52d 	.word	0x0000b52d
    4de8:	0000b540 	.word	0x0000b540
    4dec:	c3500000 	.word	0xc3500000
    4df0:	3caff948 	.word	0x3caff948
    4df4:	40004014 	.word	0x40004014
    4df8:	40004018 	.word	0x40004018
		if (data[6] > 48) {
    4dfc:	7994      	ldrb	r4, [r2, #6]
    4dfe:	2c30      	cmp	r4, #48	; 0x30
    4e00:	d854      	bhi.n	4eac <vendor_request_handler+0x75c>
		else if (data[6] == 0) {
    4e02:	b974      	cbnz	r4, 4e22 <vendor_request_handler+0x6d2>
			le.target_set = 0;
    4e04:	4d2a      	ldr	r5, [pc, #168]	; (4eb0 <vendor_request_handler+0x760>)
			memset(le.target, 0, 6);
    4e06:	4621      	mov	r1, r4
    4e08:	2206      	movs	r2, #6
    4e0a:	f105 0038 	add.w	r0, r5, #56	; 0x38
			le.target_set = 0;
    4e0e:	646c      	str	r4, [r5, #68]	; 0x44
			memset(le.target, 0, 6);
    4e10:	f7ff f9f6 	bl	4200 <memset>
			memset(le.target_mask, 0, 6);
    4e14:	2206      	movs	r2, #6
    4e16:	4621      	mov	r1, r4
    4e18:	f105 003e 	add.w	r0, r5, #62	; 0x3e
    4e1c:	f7ff f9f0 	bl	4200 <memset>
    4e20:	e50b      	b.n	483a <vendor_request_handler+0xea>
    4e22:	4c24      	ldr	r4, [pc, #144]	; (4eb4 <vendor_request_handler+0x764>)
    4e24:	1d93      	adds	r3, r2, #6
		else if (data[6] == 0) {
    4e26:	4622      	mov	r2, r4
				le.target[i] = data[5-i];
    4e28:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
			for (i = 0; i < 6; ++i)
    4e2c:	429d      	cmp	r5, r3
				le.target[i] = data[5-i];
    4e2e:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (i = 0; i < 6; ++i)
    4e32:	d1f9      	bne.n	4e28 <vendor_request_handler+0x6d8>
			memset(le.target_mask, 0, 6);
    4e34:	2100      	movs	r1, #0
    4e36:	2206      	movs	r2, #6
    4e38:	481f      	ldr	r0, [pc, #124]	; (4eb8 <vendor_request_handler+0x768>)
    4e3a:	f7ff f9e1 	bl	4200 <memset>
				le.target_mask[i] = 0xff;
    4e3e:	26ff      	movs	r6, #255	; 0xff
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4e40:	2305      	movs	r3, #5
				le.target_mask[i] = 0xff;
    4e42:	491b      	ldr	r1, [pc, #108]	; (4eb0 <vendor_request_handler+0x760>)
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4e44:	79a8      	ldrb	r0, [r5, #6]
    4e46:	2808      	cmp	r0, #8
    4e48:	d819      	bhi.n	4e7e <vendor_request_handler+0x72e>
			if (data[6] > 0) {
    4e4a:	b160      	cbz	r0, 4e66 <vendor_request_handler+0x716>
    4e4c:	2100      	movs	r1, #0
    4e4e:	460a      	mov	r2, r1
    4e50:	3101      	adds	r1, #1
				for (i = 0; i < data[6]; ++i) {
    4e52:	b2cd      	uxtb	r5, r1
					final_byte >>= 1;
    4e54:	0852      	lsrs	r2, r2, #1
				for (i = 0; i < data[6]; ++i) {
    4e56:	42a8      	cmp	r0, r5
					final_byte |= 0b10000000;
    4e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				for (i = 0; i < data[6]; ++i) {
    4e5c:	d8f8      	bhi.n	4e50 <vendor_request_handler+0x700>
				le.target_mask[last] = final_byte;
    4e5e:	4914      	ldr	r1, [pc, #80]	; (4eb0 <vendor_request_handler+0x760>)
    4e60:	440b      	add	r3, r1
    4e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    4e66:	4915      	ldr	r1, [pc, #84]	; (4ebc <vendor_request_handler+0x76c>)
				le.target[i] &= le.target_mask[i];
    4e68:	7863      	ldrb	r3, [r4, #1]
    4e6a:	79e2      	ldrb	r2, [r4, #7]
    4e6c:	4013      	ands	r3, r2
    4e6e:	f804 3f01 	strb.w	r3, [r4, #1]!
			for (i = 0; i < 5; ++i)
    4e72:	428c      	cmp	r4, r1
    4e74:	d1f8      	bne.n	4e68 <vendor_request_handler+0x718>
			le.target_set = 1;
    4e76:	2001      	movs	r0, #1
    4e78:	4b0d      	ldr	r3, [pc, #52]	; (4eb0 <vendor_request_handler+0x760>)
    4e7a:	6458      	str	r0, [r3, #68]	; 0x44
    4e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				le.target_mask[i] = 0xff;
    4e7e:	18ca      	adds	r2, r1, r3
    4e80:	f882 603e 	strb.w	r6, [r2, #62]	; 0x3e
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4e84:	79aa      	ldrb	r2, [r5, #6]
    4e86:	3b01      	subs	r3, #1
    4e88:	3a08      	subs	r2, #8
    4e8a:	b2db      	uxtb	r3, r3
    4e8c:	71aa      	strb	r2, [r5, #6]
    4e8e:	e7d9      	b.n	4e44 <vendor_request_handler+0x6f4>
		cancel_follow = 1;
    4e90:	2001      	movs	r0, #1
    4e92:	4b0b      	ldr	r3, [pc, #44]	; (4ec0 <vendor_request_handler+0x770>)
    4e94:	6298      	str	r0, [r3, #40]	; 0x28
		break;
    4e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		jam_mode = request_params[0];
    4e98:	780a      	ldrb	r2, [r1, #0]
    4e9a:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <vendor_request_handler+0x770>)
    4e9c:	74da      	strb	r2, [r3, #19]
    4e9e:	e4cc      	b.n	483a <vendor_request_handler+0xea>
		requested_mode = MODE_EGO;
    4ea0:	220d      	movs	r2, #13
    4ea2:	4b07      	ldr	r3, [pc, #28]	; (4ec0 <vendor_request_handler+0x770>)
    4ea4:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    4ea6:	780a      	ldrb	r2, [r1, #0]
    4ea8:	751a      	strb	r2, [r3, #20]
    4eaa:	e4c6      	b.n	483a <vendor_request_handler+0xea>
			return 0;
    4eac:	2000      	movs	r0, #0
}
    4eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eb0:	10000450 	.word	0x10000450
    4eb4:	10000487 	.word	0x10000487
    4eb8:	1000048e 	.word	0x1000048e
    4ebc:	1000048c 	.word	0x1000048c
    4ec0:	10000a4c 	.word	0x10000a4c

00004ec4 <enqueue_with_ts>:
{
    4ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ec8:	4606      	mov	r6, r0
    4eca:	460f      	mov	r7, r1
    4ecc:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4ece:	f002 fc07 	bl	76e0 <usb_enqueue>
    4ed2:	4d10      	ldr	r5, [pc, #64]	; (4f14 <enqueue_with_ts+0x50>)
	if (f == NULL) {
    4ed4:	4604      	mov	r4, r0
    4ed6:	b928      	cbnz	r0, 4ee4 <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4ed8:	786b      	ldrb	r3, [r5, #1]
    4eda:	f043 0304 	orr.w	r3, r3, #4
    4ede:	706b      	strb	r3, [r5, #1]
		return 0;
    4ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;
    4ee4:	7006      	strb	r6, [r0, #0]
	f->clkn_high = 0;
    4ee6:	2600      	movs	r6, #0
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4ee8:	4b0b      	ldr	r3, [pc, #44]	; (4f18 <enqueue_with_ts+0x54>)
	f->clkn_high = 0;
    4eea:	70c6      	strb	r6, [r0, #3]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4eec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
	f->clk100ns = ts;
    4ef0:	f8c0 8004 	str.w	r8, [r0, #4]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4ef4:	3b62      	subs	r3, #98	; 0x62
    4ef6:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4ef8:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    4efa:	72c6      	strb	r6, [r0, #11]
	memcpy(f->data, buf, DMA_SIZE);
    4efc:	2232      	movs	r2, #50	; 0x32
    4efe:	4639      	mov	r1, r7
    4f00:	300e      	adds	r0, #14
    4f02:	f005 fdef 	bl	aae4 <memcpy>
	f->status = status;
    4f06:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    4f08:	706e      	strb	r6, [r5, #1]
	f->status = status;
    4f0a:	7063      	strb	r3, [r4, #1]
	return 1;
    4f0c:	2001      	movs	r0, #1
}
    4f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f12:	bf00      	nop
    4f14:	10000a4c 	.word	0x10000a4c
    4f18:	10000450 	.word	0x10000450

00004f1c <TIMER0_IRQHandler>:
{
    4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4f22:	681b      	ldr	r3, [r3, #0]
    4f24:	07d9      	lsls	r1, r3, #31
    4f26:	d51b      	bpl.n	4f60 <TIMER0_IRQHandler+0x44>
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f28:	4838      	ldr	r0, [pc, #224]	; (500c <TIMER0_IRQHandler+0xf0>)
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4f2a:	4a39      	ldr	r2, [pc, #228]	; (5010 <TIMER0_IRQHandler+0xf4>)
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f2c:	6801      	ldr	r1, [r0, #0]
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4f2e:	7a93      	ldrb	r3, [r2, #10]
    4f30:	4606      	mov	r6, r0
    4f32:	4614      	mov	r4, r2
    4f34:	b113      	cbz	r3, 4f3c <TIMER0_IRQHandler+0x20>
    4f36:	7a93      	ldrb	r3, [r2, #10]
    4f38:	2b01      	cmp	r3, #1
    4f3a:	d105      	bne.n	4f48 <TIMER0_IRQHandler+0x2c>
			if ((clkn & 0x7f) == 0)
    4f3c:	6833      	ldr	r3, [r6, #0]
    4f3e:	065a      	lsls	r2, r3, #25
    4f40:	d10a      	bne.n	4f58 <TIMER0_IRQHandler+0x3c>
				do_hop = 1;
    4f42:	2301      	movs	r3, #1
    4f44:	72e3      	strb	r3, [r4, #11]
    4f46:	e007      	b.n	4f58 <TIMER0_IRQHandler+0x3c>
		else if (hop_mode == HOP_BLUETOOTH) {
    4f48:	7a93      	ldrb	r3, [r2, #10]
    4f4a:	2b02      	cmp	r3, #2
    4f4c:	d109      	bne.n	4f62 <TIMER0_IRQHandler+0x46>
			if ((clkn & 0x1) == 0)
    4f4e:	6803      	ldr	r3, [r0, #0]
    4f50:	07db      	lsls	r3, r3, #31
    4f52:	d401      	bmi.n	4f58 <TIMER0_IRQHandler+0x3c>
				do_hop = 1;
    4f54:	2301      	movs	r3, #1
    4f56:	72d3      	strb	r3, [r2, #11]
		T0IR = TIR_MR0_Interrupt;
    4f58:	2201      	movs	r2, #1
    4f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4f5e:	601a      	str	r2, [r3, #0]
    4f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f62:	4b2c      	ldr	r3, [pc, #176]	; (5014 <TIMER0_IRQHandler+0xf8>)
    4f64:	699d      	ldr	r5, [r3, #24]
    4f66:	461f      	mov	r7, r3
    4f68:	1b49      	subs	r1, r1, r5
		else if (hop_mode == HOP_BTLE) {
    4f6a:	7a95      	ldrb	r5, [r2, #10]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f6c:	f001 0103 	and.w	r1, r1, #3
		else if (hop_mode == HOP_BTLE) {
    4f70:	2d03      	cmp	r5, #3
    4f72:	d114      	bne.n	4f9e <TIMER0_IRQHandler+0x82>
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    4f74:	7d18      	ldrb	r0, [r3, #20]
    4f76:	2803      	cmp	r0, #3
    4f78:	d1ee      	bne.n	4f58 <TIMER0_IRQHandler+0x3c>
			if(le_clk == 0){
    4f7a:	2900      	cmp	r1, #0
    4f7c:	d1ec      	bne.n	4f58 <TIMER0_IRQHandler+0x3c>
				--le.interval_timer;
    4f7e:	8b99      	ldrh	r1, [r3, #28]
    4f80:	3901      	subs	r1, #1
    4f82:	b289      	uxth	r1, r1
    4f84:	8399      	strh	r1, [r3, #28]
				if (le.interval_timer == 0) {
    4f86:	8b99      	ldrh	r1, [r3, #28]
    4f88:	b289      	uxth	r1, r1
    4f8a:	bb69      	cbnz	r1, 4fe8 <TIMER0_IRQHandler+0xcc>
					do_hop = 1;
    4f8c:	2101      	movs	r1, #1
    4f8e:	72d1      	strb	r1, [r2, #11]
					++le.conn_count;
    4f90:	8c1a      	ldrh	r2, [r3, #32]
    4f92:	440a      	add	r2, r1
    4f94:	b292      	uxth	r2, r2
    4f96:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    4f98:	8bda      	ldrh	r2, [r3, #30]
    4f9a:	839a      	strh	r2, [r3, #28]
    4f9c:	e7dc      	b.n	4f58 <TIMER0_IRQHandler+0x3c>
		else if (hop_mode == HOP_TRANSMIT_LE) {
    4f9e:	7a95      	ldrb	r5, [r2, #10]
    4fa0:	2d06      	cmp	r5, #6
    4fa2:	d0ea      	beq.n	4f7a <TIMER0_IRQHandler+0x5e>
		else if (hop_mode == HOP_TRANSMIT_LE2 && anchor_set == 1) {
    4fa4:	7a91      	ldrb	r1, [r2, #10]
    4fa6:	2907      	cmp	r1, #7
    4fa8:	d123      	bne.n	4ff2 <TIMER0_IRQHandler+0xd6>
    4faa:	f892 5024 	ldrb.w	r5, [r2, #36]	; 0x24
    4fae:	2d01      	cmp	r5, #1
    4fb0:	d11f      	bne.n	4ff2 <TIMER0_IRQHandler+0xd6>
	T0MCR = ~TMCR_MR0I;
    4fb2:	f06f 0601 	mvn.w	r6, #1
			u32 now = CLK100NS;
    4fb6:	6801      	ldr	r1, [r0, #0]
	T0MCR = ~TMCR_MR0I;
    4fb8:	4c17      	ldr	r4, [pc, #92]	; (5018 <TIMER0_IRQHandler+0xfc>)
			u32 now = CLK100NS;
    4fba:	4818      	ldr	r0, [pc, #96]	; (501c <TIMER0_IRQHandler+0x100>)
			timer2_set_match(now + le.conn_interval*USEC(1250) - window_shift -USEC(15));
    4fbc:	8bdb      	ldrh	r3, [r3, #30]
			u32 now = CLK100NS;
    4fbe:	6800      	ldr	r0, [r0, #0]
			do_transmit = 1;
    4fc0:	f882 502c 	strb.w	r5, [r2, #44]	; 0x2c
	T0MCR = ~TMCR_MR0I;
    4fc4:	6026      	str	r6, [r4, #0]
			timer2_set_match(now + le.conn_interval*USEC(1250) - window_shift -USEC(15));
    4fc6:	69d2      	ldr	r2, [r2, #28]
    4fc8:	3896      	subs	r0, #150	; 0x96
    4fca:	1a80      	subs	r0, r0, r2
			u32 now = CLK100NS;
    4fcc:	f3c1 0213 	ubfx	r2, r1, #0, #20
			timer2_set_match(now + le.conn_interval*USEC(1250) - window_shift -USEC(15));
    4fd0:	f640 4135 	movw	r1, #3125	; 0xc35
    4fd4:	fb01 0202 	mla	r2, r1, r2, r0
    4fd8:	f243 01d4 	movw	r1, #12500	; 0x30d4
    4fdc:	fb01 2203 	mla	r2, r1, r3, r2
	T0MR0 = match;
    4fe0:	4b0f      	ldr	r3, [pc, #60]	; (5020 <TIMER0_IRQHandler+0x104>)
    4fe2:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0I;
    4fe4:	6025      	str	r5, [r4, #0]
    4fe6:	e7b7      	b.n	4f58 <TIMER0_IRQHandler+0x3c>
					TXLED_CLR; // hack!
    4fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
    4fec:	4b0d      	ldr	r3, [pc, #52]	; (5024 <TIMER0_IRQHandler+0x108>)
    4fee:	601a      	str	r2, [r3, #0]
    4ff0:	e7b2      	b.n	4f58 <TIMER0_IRQHandler+0x3c>
		else if (hop_mode == HOP_AFH) {
    4ff2:	7aa3      	ldrb	r3, [r4, #10]
    4ff4:	2b05      	cmp	r3, #5
    4ff6:	d1af      	bne.n	4f58 <TIMER0_IRQHandler+0x3c>
			if( (last_hop + hop_timeout) == clkn ) {
    4ff8:	4a0b      	ldr	r2, [pc, #44]	; (5028 <TIMER0_IRQHandler+0x10c>)
    4ffa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    4ffe:	6811      	ldr	r1, [r2, #0]
    5000:	b29b      	uxth	r3, r3
    5002:	6832      	ldr	r2, [r6, #0]
    5004:	440b      	add	r3, r1
    5006:	4293      	cmp	r3, r2
    5008:	d1a6      	bne.n	4f58 <TIMER0_IRQHandler+0x3c>
    500a:	e79a      	b.n	4f42 <TIMER0_IRQHandler+0x26>
    500c:	10001464 	.word	0x10001464
    5010:	10000a4c 	.word	0x10000a4c
    5014:	10000450 	.word	0x10000450
    5018:	40004014 	.word	0x40004014
    501c:	40004008 	.word	0x40004008
    5020:	40004018 	.word	0x40004018
    5024:	2009c03c 	.word	0x2009c03c
    5028:	10001380 	.word	0x10001380

0000502c <EINT3_IRQHandler>:
	IO2IntClr   = PIN_GIO6; // clear interrupt
    502c:	2204      	movs	r2, #4
    502e:	4b08      	ldr	r3, [pc, #32]	; (5050 <EINT3_IRQHandler+0x24>)
    5030:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    5032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5036:	4b07      	ldr	r3, [pc, #28]	; (5054 <EINT3_IRQHandler+0x28>)
    5038:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    503a:	2201      	movs	r2, #1
    503c:	4b06      	ldr	r3, [pc, #24]	; (5058 <EINT3_IRQHandler+0x2c>)
    503e:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5040:	4b06      	ldr	r3, [pc, #24]	; (505c <EINT3_IRQHandler+0x30>)
    5042:	7a9a      	ldrb	r2, [r3, #10]
    5044:	2a02      	cmp	r2, #2
		dma_discard = 0;
    5046:	bf04      	itt	eq
    5048:	2200      	moveq	r2, #0
    504a:	741a      	strbeq	r2, [r3, #16]
    504c:	4770      	bx	lr
    504e:	bf00      	nop
    5050:	400280ac 	.word	0x400280ac
    5054:	2009c09c 	.word	0x2009c09c
    5058:	10001a21 	.word	0x10001a21
    505c:	10000a4c 	.word	0x10000a4c

00005060 <legacy_DMA_IRQHandler>:
{
    5060:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    5062:	4b2a      	ldr	r3, [pc, #168]	; (510c <legacy_DMA_IRQHandler+0xac>)
    5064:	7c5a      	ldrb	r2, [r3, #17]
    5066:	2a01      	cmp	r2, #1
    5068:	d014      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_BT_FOLLOW
    506a:	7c5a      	ldrb	r2, [r3, #17]
    506c:	2a08      	cmp	r2, #8
    506e:	d011      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_SPECAN
    5070:	7c5a      	ldrb	r2, [r3, #17]
    5072:	2a04      	cmp	r2, #4
    5074:	d00e      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_BT_FOLLOW_LE
    5076:	7c5a      	ldrb	r2, [r3, #17]
    5078:	2a09      	cmp	r2, #9
    507a:	d00b      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_BT_PROMISC_LE
    507c:	7c5a      	ldrb	r2, [r3, #17]
    507e:	2a0a      	cmp	r2, #10
    5080:	d008      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_BT_TRANSMIT_LE
    5082:	7c5a      	ldrb	r2, [r3, #17]
    5084:	2a11      	cmp	r2, #17
    5086:	d005      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_BT_SLAVE_LE
    5088:	7c5a      	ldrb	r2, [r3, #17]
    508a:	2a0c      	cmp	r2, #12
    508c:	d002      	beq.n	5094 <legacy_DMA_IRQHandler+0x34>
	   || mode == MODE_RX_GENERIC)
    508e:	7c5a      	ldrb	r2, [r3, #17]
    5090:	2a0f      	cmp	r2, #15
    5092:	d13a      	bne.n	510a <legacy_DMA_IRQHandler+0xaa>
		if (DMACIntStat & (1 << 0)) {
    5094:	4a1e      	ldr	r2, [pc, #120]	; (5110 <legacy_DMA_IRQHandler+0xb0>)
    5096:	6812      	ldr	r2, [r2, #0]
    5098:	07d1      	lsls	r1, r2, #31
    509a:	d536      	bpl.n	510a <legacy_DMA_IRQHandler+0xaa>
			if (DMACIntTCStat & (1 << 0)) {
    509c:	4a1d      	ldr	r2, [pc, #116]	; (5114 <legacy_DMA_IRQHandler+0xb4>)
    509e:	6812      	ldr	r2, [r2, #0]
    50a0:	07d2      	lsls	r2, r2, #31
    50a2:	d527      	bpl.n	50f4 <legacy_DMA_IRQHandler+0x94>
				DMACIntTCClear = (1 << 0);
    50a4:	2101      	movs	r1, #1
    50a6:	4a1c      	ldr	r2, [pc, #112]	; (5118 <legacy_DMA_IRQHandler+0xb8>)
				idle_buf_clk100ns  = CLK100NS;
    50a8:	f640 4435 	movw	r4, #3125	; 0xc35
				DMACIntTCClear = (1 << 0);
    50ac:	6011      	str	r1, [r2, #0]
				if (hop_mode == HOP_BLUETOOTH)
    50ae:	7a9a      	ldrb	r2, [r3, #10]
				idle_buf_clk100ns  = CLK100NS;
    50b0:	481a      	ldr	r0, [pc, #104]	; (511c <legacy_DMA_IRQHandler+0xbc>)
				if (hop_mode == HOP_BLUETOOTH)
    50b2:	2a02      	cmp	r2, #2
					DIO_SSEL_SET;
    50b4:	bf02      	ittt	eq
    50b6:	f04f 5180 	moveq.w	r1, #268435456	; 0x10000000
    50ba:	4a19      	ldreq	r2, [pc, #100]	; (5120 <legacy_DMA_IRQHandler+0xc0>)
    50bc:	6011      	streq	r1, [r2, #0]
				idle_buf_clk100ns  = CLK100NS;
    50be:	4919      	ldr	r1, [pc, #100]	; (5124 <legacy_DMA_IRQHandler+0xc4>)
    50c0:	680a      	ldr	r2, [r1, #0]
    50c2:	6800      	ldr	r0, [r0, #0]
    50c4:	f3c2 0213 	ubfx	r2, r2, #0, #20
    50c8:	fb04 0202 	mla	r2, r4, r2, r0
    50cc:	605a      	str	r2, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    50ce:	680a      	ldr	r2, [r1, #0]
    50d0:	f3c2 5207 	ubfx	r2, r2, #20, #8
    50d4:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    50d6:	4a14      	ldr	r2, [pc, #80]	; (5128 <legacy_DMA_IRQHandler+0xc8>)
    50d8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
    50dc:	b292      	uxth	r2, r2
    50de:	811a      	strh	r2, [r3, #8]
				volatile uint8_t* tmp = active_rxbuf;
    50e0:	4a12      	ldr	r2, [pc, #72]	; (512c <legacy_DMA_IRQHandler+0xcc>)
				active_rxbuf = idle_rxbuf;
    50e2:	4b13      	ldr	r3, [pc, #76]	; (5130 <legacy_DMA_IRQHandler+0xd0>)
				volatile uint8_t* tmp = active_rxbuf;
    50e4:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    50e6:	6818      	ldr	r0, [r3, #0]
    50e8:	6010      	str	r0, [r2, #0]
				++rx_tc;
    50ea:	4a12      	ldr	r2, [pc, #72]	; (5134 <legacy_DMA_IRQHandler+0xd4>)
				idle_rxbuf = tmp;
    50ec:	6019      	str	r1, [r3, #0]
				++rx_tc;
    50ee:	6813      	ldr	r3, [r2, #0]
    50f0:	3301      	adds	r3, #1
    50f2:	6013      	str	r3, [r2, #0]
			if (DMACIntErrStat & (1 << 0)) {
    50f4:	4b10      	ldr	r3, [pc, #64]	; (5138 <legacy_DMA_IRQHandler+0xd8>)
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	07db      	lsls	r3, r3, #31
    50fa:	d506      	bpl.n	510a <legacy_DMA_IRQHandler+0xaa>
				DMACIntErrClr = (1 << 0);
    50fc:	2201      	movs	r2, #1
    50fe:	4b0f      	ldr	r3, [pc, #60]	; (513c <legacy_DMA_IRQHandler+0xdc>)
    5100:	601a      	str	r2, [r3, #0]
				++rx_err;
    5102:	4a0f      	ldr	r2, [pc, #60]	; (5140 <legacy_DMA_IRQHandler+0xe0>)
    5104:	6813      	ldr	r3, [r2, #0]
    5106:	3301      	adds	r3, #1
    5108:	6013      	str	r3, [r2, #0]
    510a:	bd10      	pop	{r4, pc}
    510c:	10000a4c 	.word	0x10000a4c
    5110:	50004000 	.word	0x50004000
    5114:	50004004 	.word	0x50004004
    5118:	50004008 	.word	0x50004008
    511c:	40004008 	.word	0x40004008
    5120:	2009c098 	.word	0x2009c098
    5124:	10001464 	.word	0x10001464
    5128:	10000450 	.word	0x10000450
    512c:	100014a4 	.word	0x100014a4
    5130:	10001684 	.word	0x10001684
    5134:	10001384 	.word	0x10001384
    5138:	5000400c 	.word	0x5000400c
    513c:	50004010 	.word	0x50004010
    5140:	10001a1c 	.word	0x10001a1c

00005144 <DMA_IRQHandler>:
void DMA_IRQHandler(void) {
    5144:	b508      	push	{r3, lr}
	if (mode == MODE_BT_FOLLOW_LE)
    5146:	4b11      	ldr	r3, [pc, #68]	; (518c <DMA_IRQHandler+0x48>)
    5148:	7c5b      	ldrb	r3, [r3, #17]
    514a:	2b09      	cmp	r3, #9
    514c:	d11a      	bne.n	5184 <DMA_IRQHandler+0x40>
		le_DMA_IRQHandler();
    514e:	f002 febb 	bl	7ec8 <le_DMA_IRQHandler>
	if (DMACIntStat & (1 << 7)) {
    5152:	4b0f      	ldr	r3, [pc, #60]	; (5190 <DMA_IRQHandler+0x4c>)
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	0619      	lsls	r1, r3, #24
    5158:	d517      	bpl.n	518a <DMA_IRQHandler+0x46>
		if (DMACIntTCStat & (1 << 7)) {
    515a:	4b0e      	ldr	r3, [pc, #56]	; (5194 <DMA_IRQHandler+0x50>)
    515c:	681b      	ldr	r3, [r3, #0]
    515e:	061a      	lsls	r2, r3, #24
    5160:	d505      	bpl.n	516e <DMA_IRQHandler+0x2a>
			DMACIntTCClear = (1 << 7);
    5162:	2280      	movs	r2, #128	; 0x80
    5164:	4b0c      	ldr	r3, [pc, #48]	; (5198 <DMA_IRQHandler+0x54>)
    5166:	601a      	str	r2, [r3, #0]
			debug_dma_active = 0;
    5168:	2200      	movs	r2, #0
    516a:	4b0c      	ldr	r3, [pc, #48]	; (519c <DMA_IRQHandler+0x58>)
    516c:	601a      	str	r2, [r3, #0]
		if (DMACIntErrStat & (1 << 7)) {
    516e:	4b0c      	ldr	r3, [pc, #48]	; (51a0 <DMA_IRQHandler+0x5c>)
    5170:	681b      	ldr	r3, [r3, #0]
    5172:	061b      	lsls	r3, r3, #24
    5174:	d509      	bpl.n	518a <DMA_IRQHandler+0x46>
			DMACIntErrClr = (1 << 7);
    5176:	2280      	movs	r2, #128	; 0x80
    5178:	4b0a      	ldr	r3, [pc, #40]	; (51a4 <DMA_IRQHandler+0x60>)
    517a:	601a      	str	r2, [r3, #0]
			USRLED_SET;
    517c:	2202      	movs	r2, #2
    517e:	4b0a      	ldr	r3, [pc, #40]	; (51a8 <DMA_IRQHandler+0x64>)
    5180:	601a      	str	r2, [r3, #0]
    5182:	e7fe      	b.n	5182 <DMA_IRQHandler+0x3e>
		legacy_DMA_IRQHandler();
    5184:	f7ff ff6c 	bl	5060 <legacy_DMA_IRQHandler>
    5188:	e7e3      	b.n	5152 <DMA_IRQHandler+0xe>
    518a:	bd08      	pop	{r3, pc}
    518c:	10000a4c 	.word	0x10000a4c
    5190:	50004000 	.word	0x50004000
    5194:	50004004 	.word	0x50004004
    5198:	50004008 	.word	0x50004008
    519c:	100012dc 	.word	0x100012dc
    51a0:	5000400c 	.word	0x5000400c
    51a4:	50004010 	.word	0x50004010
    51a8:	2009c038 	.word	0x2009c038

000051ac <le_transmit>:
{
    51ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51b0:	b08d      	sub	sp, #52	; 0x34
    51b2:	460c      	mov	r4, r1
    51b4:	4690      	mov	r8, r2
	uint32_t sync = rbit(aa);
    51b6:	f004 f889 	bl	92cc <rbit>
	int idx = whitening_index[btle_channel_index(channel)];
    51ba:	4e50      	ldr	r6, [pc, #320]	; (52fc <le_transmit+0x150>)
	uint32_t sync = rbit(aa);
    51bc:	4607      	mov	r7, r0
	int idx = whitening_index[btle_channel_index(channel)];
    51be:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
    51c2:	2c28      	cmp	r4, #40	; 0x28
    51c4:	b280      	uxth	r0, r0
    51c6:	bf28      	it	cs
    51c8:	2428      	movcs	r4, #40	; 0x28
    51ca:	f002 f987 	bl	74dc <btle_channel_index>
		txbuf[i] = 0;
    51ce:	f04f 0900 	mov.w	r9, #0
	for (i = 0; i < len; ++i) {
    51d2:	46c6      	mov	lr, r8
			idx = (idx + 1) % sizeof(whitening);
    51d4:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
	int idx = whitening_index[btle_channel_index(channel)];
    51d8:	4d49      	ldr	r5, [pc, #292]	; (5300 <le_transmit+0x154>)
    51da:	f10d 0107 	add.w	r1, sp, #7
    51de:	5c2b      	ldrb	r3, [r5, r0]
    51e0:	9601      	str	r6, [sp, #4]
	for (i = 0; i < len; ++i) {
    51e2:	ebae 0208 	sub.w	r2, lr, r8
    51e6:	4294      	cmp	r4, r2
    51e8:	d865      	bhi.n	52b6 <le_transmit+0x10a>
	cc2400_set(MANAND,  0x7fff);
    51ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
    51ee:	200d      	movs	r0, #13
    51f0:	f004 f963 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    51f4:	f642 3122 	movw	r1, #11042	; 0x2b22
    51f8:	2012      	movs	r0, #18
    51fa:	f004 f95e 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    51fe:	f241 314b 	movw	r1, #4939	; 0x134b
    5202:	2014      	movs	r0, #20
    5204:	f004 f959 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0ce1);
    5208:	f640 41e1 	movw	r1, #3297	; 0xce1
    520c:	2020      	movs	r0, #32
    520e:	f004 f954 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   channel);
    5212:	9b01      	ldr	r3, [sp, #4]
    5214:	2002      	movs	r0, #2
    5216:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
    521a:	b289      	uxth	r1, r1
    521c:	f004 f94d 	bl	94ba <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5220:	210b      	movs	r1, #11
    5222:	2005      	movs	r0, #5
    5224:	f004 f949 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5228:	2140      	movs	r1, #64	; 0x40
    522a:	2003      	movs	r0, #3
    522c:	f004 f945 	bl	94ba <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5230:	2114      	movs	r1, #20
    5232:	2023      	movs	r0, #35	; 0x23
    5234:	f004 f941 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    5238:	b2b9      	uxth	r1, r7
    523a:	202c      	movs	r0, #44	; 0x2c
    523c:	f004 f93d 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5240:	0c39      	lsrs	r1, r7, #16
    5242:	202d      	movs	r0, #45	; 0x2d
    5244:	f004 f939 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    5248:	f004 f9d2 	bl	95f0 <cc2400_status>
    524c:	0641      	lsls	r1, r0, #25
    524e:	d5fb      	bpl.n	5248 <le_transmit+0x9c>
	cc2400_strobe(SFSON);
    5250:	2061      	movs	r0, #97	; 0x61
    5252:	f004 f9d4 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5256:	f004 f9cb 	bl	95f0 <cc2400_status>
    525a:	0742      	lsls	r2, r0, #29
    525c:	d5fb      	bpl.n	5256 <le_transmit+0xaa>
	TXLED_SET;
    525e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5262:	4b28      	ldr	r3, [pc, #160]	; (5304 <le_transmit+0x158>)
    5264:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    5266:	2280      	movs	r2, #128	; 0x80
    5268:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    526a:	200e      	movs	r0, #14
    526c:	f004 f91c 	bl	94a8 <cc2400_get>
    5270:	f000 001f 	and.w	r0, r0, #31
    5274:	280f      	cmp	r0, #15
    5276:	d1f8      	bne.n	526a <le_transmit+0xbe>
	cc2400_fifo_write(len, txbuf);
    5278:	4620      	mov	r0, r4
    527a:	a902      	add	r1, sp, #8
    527c:	f004 f930 	bl	94e0 <cc2400_fifo_write>
	cc2400_strobe(STX);
    5280:	2063      	movs	r0, #99	; 0x63
    5282:	f004 f9bc 	bl	95fe <cc2400_strobe>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5286:	200e      	movs	r0, #14
    5288:	f004 f90e 	bl	94a8 <cc2400_get>
    528c:	f000 001f 	and.w	r0, r0, #31
    5290:	280f      	cmp	r0, #15
    5292:	d1f8      	bne.n	5286 <le_transmit+0xda>
	TXLED_CLR;
    5294:	f44f 7280 	mov.w	r2, #256	; 0x100
    5298:	4b1b      	ldr	r3, [pc, #108]	; (5308 <le_transmit+0x15c>)
	cc2400_strobe(SRFOFF);
    529a:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    529c:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    529e:	f004 f9ae 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    52a2:	f004 f9a5 	bl	95f0 <cc2400_status>
    52a6:	0743      	lsls	r3, r0, #29
    52a8:	d4fb      	bmi.n	52a2 <le_transmit+0xf6>
	PAEN_CLR;
    52aa:	2280      	movs	r2, #128	; 0x80
    52ac:	4b17      	ldr	r3, [pc, #92]	; (530c <le_transmit+0x160>)
    52ae:	601a      	str	r2, [r3, #0]
}
    52b0:	b00d      	add	sp, #52	; 0x34
    52b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		txbuf[i] = 0;
    52b6:	2607      	movs	r6, #7
    52b8:	f881 9001 	strb.w	r9, [r1, #1]
		byte = data[i];
    52bc:	f81e 2b01 	ldrb.w	r2, [lr], #1
    52c0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
			bit = (byte & 1) ^ whitening[idx];
    52c4:	18e8      	adds	r0, r5, r3
    52c6:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    52ca:	f002 0b01 	and.w	fp, r2, #1
    52ce:	ea8b 0000 	eor.w	r0, fp, r0
			idx = (idx + 1) % sizeof(whitening);
    52d2:	f103 0b01 	add.w	fp, r3, #1
    52d6:	fbbb f3fa 	udiv	r3, fp, sl
			txbuf[i] |= bit << (7 - j);
    52da:	40b0      	lsls	r0, r6
			idx = (idx + 1) % sizeof(whitening);
    52dc:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
			txbuf[i] |= bit << (7 - j);
    52e0:	ea40 0c0c 	orr.w	ip, r0, ip
		for (j = 0; j < 8; ++j) {
    52e4:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			idx = (idx + 1) % sizeof(whitening);
    52e8:	ebab 0303 	sub.w	r3, fp, r3
			byte >>= 1;
    52ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
			txbuf[i] |= bit << (7 - j);
    52f0:	fa5f fc8c 	uxtb.w	ip, ip
		for (j = 0; j < 8; ++j) {
    52f4:	d2e6      	bcs.n	52c4 <le_transmit+0x118>
    52f6:	f881 c000 	strb.w	ip, [r1]
    52fa:	e772      	b.n	51e2 <le_transmit+0x36>
    52fc:	10000450 	.word	0x10000450
    5300:	0000ac34 	.word	0x0000ac34
    5304:	2009c038 	.word	0x2009c038
    5308:	2009c03c 	.word	0x2009c03c
    530c:	2009c05c 	.word	0x2009c05c

00005310 <le_jam>:
void le_jam(void) {
    5310:	b508      	push	{r3, lr}
	cc2400_set(MANAND,  0x7fff);
    5312:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5316:	200d      	movs	r0, #13
    5318:	f004 f8cf 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    531c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5320:	2012      	movs	r0, #18
    5322:	f004 f8ca 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5326:	f242 314b 	movw	r1, #9035	; 0x234b
    532a:	2014      	movs	r0, #20
    532c:	f004 f8c5 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    5330:	f640 4101 	movw	r1, #3073	; 0xc01
    5334:	2020      	movs	r0, #32
    5336:	f004 f8c0 	bl	94ba <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    533a:	210b      	movs	r1, #11
    533c:	2005      	movs	r0, #5
    533e:	f004 f8bc 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5342:	2140      	movs	r1, #64	; 0x40
    5344:	2003      	movs	r0, #3
    5346:	f004 f8b8 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    534a:	f004 f951 	bl	95f0 <cc2400_status>
    534e:	0642      	lsls	r2, r0, #25
    5350:	d5fb      	bpl.n	534a <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5352:	2061      	movs	r0, #97	; 0x61
    5354:	f004 f953 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5358:	f004 f94a 	bl	95f0 <cc2400_status>
    535c:	0743      	lsls	r3, r0, #29
    535e:	d5fb      	bpl.n	5358 <le_jam+0x48>
	TXLED_SET;
    5360:	f44f 7280 	mov.w	r2, #256	; 0x100
    5364:	4b07      	ldr	r3, [pc, #28]	; (5384 <le_jam+0x74>)
    5366:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    5368:	2280      	movs	r2, #128	; 0x80
    536a:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    536c:	200e      	movs	r0, #14
    536e:	f004 f89b 	bl	94a8 <cc2400_get>
    5372:	f000 001f 	and.w	r0, r0, #31
    5376:	280f      	cmp	r0, #15
    5378:	d1f8      	bne.n	536c <le_jam+0x5c>
	cc2400_strobe(STX);
    537a:	2063      	movs	r0, #99	; 0x63
}
    537c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_strobe(STX);
    5380:	f004 b93d 	b.w	95fe <cc2400_strobe>
    5384:	2009c038 	.word	0x2009c038

00005388 <hop>:
{   
    5388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	do_hop = 0;
    538a:	2300      	movs	r3, #0
    538c:	4c6c      	ldr	r4, [pc, #432]	; (5540 <hop+0x1b8>)
	last_hop = clkn;
    538e:	4a6d      	ldr	r2, [pc, #436]	; (5544 <hop+0x1bc>)
	do_hop = 0;
    5390:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5392:	4b6d      	ldr	r3, [pc, #436]	; (5548 <hop+0x1c0>)
    5394:	6819      	ldr	r1, [r3, #0]
    5396:	6011      	str	r1, [r2, #0]
	if (hop_mode == HOP_NONE) {
    5398:	7aa2      	ldrb	r2, [r4, #10]
    539a:	b952      	cbnz	r2, 53b2 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    539c:	2002      	movs	r0, #2
    539e:	f004 f883 	bl	94a8 <cc2400_get>
    53a2:	4b6a      	ldr	r3, [pc, #424]	; (554c <hop+0x1c4>)
    53a4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    53a8:	b29b      	uxth	r3, r3
    53aa:	3b01      	subs	r3, #1
    53ac:	4298      	cmp	r0, r3
    53ae:	d13c      	bne.n	542a <hop+0xa2>
    53b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (hop_mode == HOP_SWEEP) {
    53b2:	7aa2      	ldrb	r2, [r4, #10]
    53b4:	2a01      	cmp	r2, #1
    53b6:	d167      	bne.n	5488 <hop+0x100>
			channel += 32;
    53b8:	4964      	ldr	r1, [pc, #400]	; (554c <hop+0x1c4>)
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    53ba:	2608      	movs	r6, #8
    53bc:	4608      	mov	r0, r1
    53be:	4b64      	ldr	r3, [pc, #400]	; (5550 <hop+0x1c8>)
    53c0:	4d64      	ldr	r5, [pc, #400]	; (5554 <hop+0x1cc>)
    53c2:	781f      	ldrb	r7, [r3, #0]
    53c4:	4b64      	ldr	r3, [pc, #400]	; (5558 <hop+0x1d0>)
    53c6:	f893 e000 	ldrb.w	lr, [r3]
			channel += 32;
    53ca:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    53ce:	3320      	adds	r3, #32
    53d0:	b29b      	uxth	r3, r3
    53d2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (channel > 2480)
    53d6:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    53da:	b29b      	uxth	r3, r3
    53dc:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    53e0:	bf81      	itttt	hi
    53e2:	f8b1 304c 	ldrhhi.w	r3, [r1, #76]	; 0x4c
    53e6:	3b4f      	subhi	r3, #79	; 0x4f
    53e8:	b29b      	uxthhi	r3, r3
    53ea:	f8a1 304c 	strhhi.w	r3, [r1, #76]	; 0x4c
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    53ee:	b1e7      	cbz	r7, 542a <hop+0xa2>
    53f0:	f1be 0f00 	cmp.w	lr, #0
    53f4:	d019      	beq.n	542a <hop+0xa2>
    53f6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    53fa:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    53fe:	b292      	uxth	r2, r2
    5400:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    5404:	fb92 f2f6 	sdiv	r2, r2, r6
    5408:	b29b      	uxth	r3, r3
    540a:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    540e:	f1d3 0c00 	rsbs	ip, r3, #0
    5412:	5caa      	ldrb	r2, [r5, r2]
    5414:	f00c 0c07 	and.w	ip, ip, #7
    5418:	f003 0307 	and.w	r3, r3, #7
    541c:	bf58      	it	pl
    541e:	f1cc 0300 	rsbpl	r3, ip, #0
    5422:	fa42 f303 	asr.w	r3, r2, r3
    5426:	07da      	lsls	r2, r3, #31
    5428:	d5cf      	bpl.n	53ca <hop+0x42>
	cc2400_strobe(SRFOFF);
    542a:	2064      	movs	r0, #100	; 0x64
    542c:	f004 f8e7 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5430:	f004 f8de 	bl	95f0 <cc2400_status>
    5434:	0742      	lsls	r2, r0, #29
    5436:	d4fb      	bmi.n	5430 <hop+0xa8>
	if(mode == MODE_TX_SYMBOLS)
    5438:	7c60      	ldrb	r0, [r4, #17]
    543a:	4d44      	ldr	r5, [pc, #272]	; (554c <hop+0x1c4>)
    543c:	b2c0      	uxtb	r0, r0
		cc2400_set(FSDIV, channel);
    543e:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if(mode == MODE_TX_SYMBOLS)
    5442:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel - 1);
    5444:	bf17      	itett	ne
    5446:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
		cc2400_set(FSDIV, channel);
    544a:	b289      	uxtheq	r1, r1
		cc2400_set(FSDIV, channel - 1);
    544c:	b289      	uxthne	r1, r1
    544e:	2002      	movne	r0, #2
    5450:	f004 f833 	bl	94ba <cc2400_set>
	if (hop_mode > 0) {
    5454:	7aa3      	ldrb	r3, [r4, #10]
    5456:	b123      	cbz	r3, 5462 <hop+0xda>
		cs_threshold_calc_and_set(channel);
    5458:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    545c:	b280      	uxth	r0, r0
    545e:	f002 fa1f 	bl	78a0 <cs_threshold_calc_and_set>
	cc2400_strobe(SFSON);
    5462:	2061      	movs	r0, #97	; 0x61
    5464:	f004 f8cb 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5468:	f004 f8c2 	bl	95f0 <cc2400_status>
    546c:	0743      	lsls	r3, r0, #29
    546e:	d5fb      	bpl.n	5468 <hop+0xe0>
	dma_discard = 1;
    5470:	2301      	movs	r3, #1
    5472:	7423      	strb	r3, [r4, #16]
	if(mode == MODE_TX_SYMBOLS)
    5474:	7c63      	ldrb	r3, [r4, #17]
    5476:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    5478:	bf08      	it	eq
    547a:	2063      	moveq	r0, #99	; 0x63
}
    547c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		cc2400_strobe(SRX);
    5480:	bf18      	it	ne
    5482:	2062      	movne	r0, #98	; 0x62
    5484:	f004 b8bb 	b.w	95fe <cc2400_strobe>
	else if (hop_mode == HOP_AFH) {
    5488:	7aa2      	ldrb	r2, [r4, #10]
    548a:	2a05      	cmp	r2, #5
    548c:	d134      	bne.n	54f8 <hop+0x170>
			channel += 32;
    548e:	492f      	ldr	r1, [pc, #188]	; (554c <hop+0x1c4>)
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5490:	2608      	movs	r6, #8
    5492:	4608      	mov	r0, r1
    5494:	4b2e      	ldr	r3, [pc, #184]	; (5550 <hop+0x1c8>)
    5496:	4d2f      	ldr	r5, [pc, #188]	; (5554 <hop+0x1cc>)
    5498:	781f      	ldrb	r7, [r3, #0]
			channel += 32;
    549a:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    549e:	3320      	adds	r3, #32
    54a0:	b29b      	uxth	r3, r3
    54a2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (channel > 2480)
    54a6:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    54aa:	b29b      	uxth	r3, r3
    54ac:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    54b0:	bf81      	itttt	hi
    54b2:	f8b1 304c 	ldrhhi.w	r3, [r1, #76]	; 0x4c
    54b6:	3b4f      	subhi	r3, #79	; 0x4f
    54b8:	b29b      	uxthhi	r3, r3
    54ba:	f8a1 304c 	strhhi.w	r3, [r1, #76]	; 0x4c
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    54be:	2f4f      	cmp	r7, #79	; 0x4f
    54c0:	d0b3      	beq.n	542a <hop+0xa2>
    54c2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    54c6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    54ca:	b292      	uxth	r2, r2
    54cc:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    54d0:	fb92 f2f6 	sdiv	r2, r2, r6
    54d4:	b29b      	uxth	r3, r3
    54d6:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    54da:	f1d3 0e00 	rsbs	lr, r3, #0
    54de:	5caa      	ldrb	r2, [r5, r2]
    54e0:	f00e 0e07 	and.w	lr, lr, #7
    54e4:	f003 0307 	and.w	r3, r3, #7
    54e8:	bf58      	it	pl
    54ea:	f1ce 0300 	rsbpl	r3, lr, #0
    54ee:	fa42 f303 	asr.w	r3, r2, r3
    54f2:	07db      	lsls	r3, r3, #31
    54f4:	d4d1      	bmi.n	549a <hop+0x112>
    54f6:	e798      	b.n	542a <hop+0xa2>
	else if (hop_mode == HOP_BLUETOOTH) {
    54f8:	7aa2      	ldrb	r2, [r4, #10]
    54fa:	2a02      	cmp	r2, #2
    54fc:	d106      	bne.n	550c <hop+0x184>
		channel = next_hop(clkn);
    54fe:	6818      	ldr	r0, [r3, #0]
    5500:	f001 ff46 	bl	7390 <next_hop>
    5504:	4b11      	ldr	r3, [pc, #68]	; (554c <hop+0x1c4>)
    5506:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
    550a:	e78e      	b.n	542a <hop+0xa2>
	else if (hop_mode == HOP_TRANSMIT_LE || hop_mode == HOP_TRANSMIT_LE2){
    550c:	7aa3      	ldrb	r3, [r4, #10]
    550e:	2b06      	cmp	r3, #6
    5510:	d002      	beq.n	5518 <hop+0x190>
    5512:	7aa3      	ldrb	r3, [r4, #10]
    5514:	2b07      	cmp	r3, #7
    5516:	d106      	bne.n	5526 <hop+0x19e>
		channel = btle_next_hop(&le);
    5518:	4d0c      	ldr	r5, [pc, #48]	; (554c <hop+0x1c4>)
    551a:	4628      	mov	r0, r5
    551c:	f002 f80e 	bl	753c <btle_next_hop>
    5520:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    5524:	e781      	b.n	542a <hop+0xa2>
	else if (hop_mode == HOP_BTLE) {
    5526:	7aa3      	ldrb	r3, [r4, #10]
    5528:	2b03      	cmp	r3, #3
    552a:	d0f5      	beq.n	5518 <hop+0x190>
	else if (hop_mode == HOP_DIRECT) {
    552c:	7aa3      	ldrb	r3, [r4, #10]
    552e:	2b04      	cmp	r3, #4
		channel = hop_direct_channel;
    5530:	bf01      	itttt	eq
    5532:	89a3      	ldrheq	r3, [r4, #12]
    5534:	4a05      	ldreq	r2, [pc, #20]	; (554c <hop+0x1c4>)
    5536:	b29b      	uxtheq	r3, r3
    5538:	f8a2 304c 	strheq.w	r3, [r2, #76]	; 0x4c
    553c:	e775      	b.n	542a <hop+0xa2>
    553e:	bf00      	nop
    5540:	10000a4c 	.word	0x10000a4c
    5544:	10001380 	.word	0x10001380
    5548:	10001464 	.word	0x10001464
    554c:	10000450 	.word	0x10000450
    5550:	10001389 	.word	0x10001389
    5554:	1000138b 	.word	0x1000138b
    5558:	100019ab 	.word	0x100019ab

0000555c <bt_stream_rx>:
{
    555c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	RXLED_CLR;
    5560:	2310      	movs	r3, #16
    5562:	4e4e      	ldr	r6, [pc, #312]	; (569c <bt_stream_rx+0x140>)
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5564:	4f4e      	ldr	r7, [pc, #312]	; (56a0 <bt_stream_rx+0x144>)
	RXLED_CLR;
    5566:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5568:	f002 f8ac 	bl	76c4 <usb_queue_init>
    556c:	463c      	mov	r4, r7
	dio_ssp_init();
    556e:	f003 ff11 	bl	9394 <dio_ssp_init>
	dma_init_rx_symbols();
    5572:	f002 fa73 	bl	7a5c <dma_init_rx_symbols>
	dio_ssp_start();
    5576:	f002 faef 	bl	7b58 <dio_ssp_start>
	cc2400_rx();
    557a:	f7fe ff0d 	bl	4398 <cc2400_rx>
	cs_trigger_enable();
    557e:	f002 f9bd 	bl	78fc <cs_trigger_enable>
		RXLED_SET;
    5582:	f8df b138 	ldr.w	fp, [pc, #312]	; 56bc <bt_stream_rx+0x160>
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5586:	7cbb      	ldrb	r3, [r7, #18]
    5588:	2b01      	cmp	r3, #1
    558a:	d008      	beq.n	559e <bt_stream_rx+0x42>
    558c:	7cbb      	ldrb	r3, [r7, #18]
    558e:	2b08      	cmp	r3, #8
    5590:	d005      	beq.n	559e <bt_stream_rx+0x42>
	dio_ssp_stop();
    5592:	f002 fb01 	bl	7b98 <dio_ssp_stop>
}
    5596:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    559a:	f002 b9c7 	b.w	792c <cs_trigger_disable>
		RXLED_CLR;
    559e:	2310      	movs	r3, #16
    55a0:	6033      	str	r3, [r6, #0]
		rssi_reset();
    55a2:	f002 f905 	bl	77b0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    55a6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		while (!rx_tc) {
    55aa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 56c0 <bt_stream_rx+0x164>
    55ae:	f8df 9114 	ldr.w	r9, [pc, #276]	; 56c4 <bt_stream_rx+0x168>
    55b2:	f8d8 3000 	ldr.w	r3, [r8]
    55b6:	f8df a110 	ldr.w	sl, [pc, #272]	; 56c8 <bt_stream_rx+0x16c>
    55ba:	2b00      	cmp	r3, #0
    55bc:	d049      	beq.n	5652 <bt_stream_rx+0xf6>
		RXLED_SET;
    55be:	2310      	movs	r3, #16
		if (rx_err) {
    55c0:	4d38      	ldr	r5, [pc, #224]	; (56a4 <bt_stream_rx+0x148>)
		RXLED_SET;
    55c2:	f8cb 3000 	str.w	r3, [fp]
		if (rx_err) {
    55c6:	682b      	ldr	r3, [r5, #0]
    55c8:	b11b      	cbz	r3, 55d2 <bt_stream_rx+0x76>
			status |= DMA_ERROR;
    55ca:	7863      	ldrb	r3, [r4, #1]
    55cc:	f043 0302 	orr.w	r3, r3, #2
    55d0:	7063      	strb	r3, [r4, #1]
		if (rx_tc > 1)
    55d2:	f8d8 3000 	ldr.w	r3, [r8]
    55d6:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    55d8:	bf82      	ittt	hi
    55da:	7863      	ldrbhi	r3, [r4, #1]
    55dc:	f043 0301 	orrhi.w	r3, r3, #1
    55e0:	7063      	strbhi	r3, [r4, #1]
		if (dma_discard) {
    55e2:	7c23      	ldrb	r3, [r4, #16]
    55e4:	b12b      	cbz	r3, 55f2 <bt_stream_rx+0x96>
			status |= DISCARD;
    55e6:	7863      	ldrb	r3, [r4, #1]
    55e8:	f043 0320 	orr.w	r3, r3, #32
    55ec:	7063      	strb	r3, [r4, #1]
			dma_discard = 0;
    55ee:	2300      	movs	r3, #0
    55f0:	7423      	strb	r3, [r4, #16]
		rssi_iir_update(channel);
    55f2:	4b2d      	ldr	r3, [pc, #180]	; (56a8 <bt_stream_rx+0x14c>)
    55f4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    55f8:	b280      	uxth	r0, r0
    55fa:	f002 f915 	bl	7828 <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    55fe:	f899 3000 	ldrb.w	r3, [r9]
    5602:	b913      	cbnz	r3, 560a <bt_stream_rx+0xae>
    5604:	4b29      	ldr	r3, [pc, #164]	; (56ac <bt_stream_rx+0x150>)
    5606:	781b      	ldrb	r3, [r3, #0]
    5608:	b133      	cbz	r3, 5618 <bt_stream_rx+0xbc>
			status |= CS_TRIGGER;
    560a:	7863      	ldrb	r3, [r4, #1]
    560c:	f043 0308 	orr.w	r3, r3, #8
    5610:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5612:	2300      	movs	r3, #0
    5614:	f889 3000 	strb.w	r3, [r9]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    5618:	4b25      	ldr	r3, [pc, #148]	; (56b0 <bt_stream_rx+0x154>)
    561a:	4a26      	ldr	r2, [pc, #152]	; (56b4 <bt_stream_rx+0x158>)
    561c:	f993 3000 	ldrsb.w	r3, [r3]
    5620:	f992 2000 	ldrsb.w	r2, [r2]
    5624:	3335      	adds	r3, #53	; 0x35
    5626:	4293      	cmp	r3, r2
			status |= RSSI_TRIGGER;
    5628:	bfb8      	it	lt
    562a:	7863      	ldrblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    562c:	f04f 0000 	mov.w	r0, #0
			status |= RSSI_TRIGGER;
    5630:	bfbc      	itt	lt
    5632:	f043 0310 	orrlt.w	r3, r3, #16
    5636:	7063      	strblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5638:	4b1f      	ldr	r3, [pc, #124]	; (56b8 <bt_stream_rx+0x15c>)
    563a:	6819      	ldr	r1, [r3, #0]
    563c:	f7fe ff5a 	bl	44f4 <enqueue>
		handle_usb(clkn);
    5640:	f8da 0000 	ldr.w	r0, [sl]
    5644:	f002 f8a0 	bl	7788 <handle_usb>
		rx_tc = 0;
    5648:	2300      	movs	r3, #0
    564a:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    564e:	602b      	str	r3, [r5, #0]
    5650:	e799      	b.n	5586 <bt_stream_rx+0x2a>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5652:	2006      	movs	r0, #6
    5654:	f003 ff28 	bl	94a8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5658:	f899 3000 	ldrb.w	r3, [r9]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    565c:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5660:	b163      	cbz	r3, 567c <bt_stream_rx+0x120>
    5662:	f115 0f80 	cmn.w	r5, #128	; 0x80
    5666:	d109      	bne.n	567c <bt_stream_rx+0x120>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5668:	4b11      	ldr	r3, [pc, #68]	; (56b0 <bt_stream_rx+0x154>)
    566a:	f993 3000 	ldrsb.w	r3, [r3]
    566e:	f103 0536 	add.w	r5, r3, #54	; 0x36
    5672:	42a8      	cmp	r0, r5
    5674:	bfb8      	it	lt
    5676:	4628      	movlt	r0, r5
    5678:	b245      	sxtb	r5, r0
				rssi_at_trigger = rssi;
    567a:	4628      	mov	r0, r5
			rssi_add(rssi);
    567c:	f002 f8b4 	bl	77e8 <rssi_add>
			handle_usb(clkn);
    5680:	f8da 0000 	ldr.w	r0, [sl]
    5684:	f002 f880 	bl	7788 <handle_usb>
			if (do_hop) {
    5688:	7ae3      	ldrb	r3, [r4, #11]
    568a:	b113      	cbz	r3, 5692 <bt_stream_rx+0x136>
				hop();
    568c:	f7ff fe7c 	bl	5388 <hop>
    5690:	e78f      	b.n	55b2 <bt_stream_rx+0x56>
				TXLED_CLR;
    5692:	f44f 7380 	mov.w	r3, #256	; 0x100
    5696:	6033      	str	r3, [r6, #0]
    5698:	e78b      	b.n	55b2 <bt_stream_rx+0x56>
    569a:	bf00      	nop
    569c:	2009c03c 	.word	0x2009c03c
    56a0:	10000a4c 	.word	0x10000a4c
    56a4:	10001a1c 	.word	0x10001a1c
    56a8:	10000450 	.word	0x10000450
    56ac:	10001670 	.word	0x10001670
    56b0:	10001a20 	.word	0x10001a20
    56b4:	10001388 	.word	0x10001388
    56b8:	10001684 	.word	0x10001684
    56bc:	2009c038 	.word	0x2009c038
    56c0:	10001384 	.word	0x10001384
    56c4:	10001a21 	.word	0x10001a21
    56c8:	10001464 	.word	0x10001464

000056cc <br_transmit>:
{
    56cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56d0:	b085      	sub	sp, #20
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    56d2:	4b95      	ldr	r3, [pc, #596]	; (5928 <br_transmit+0x25c>)
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    56d4:	2700      	movs	r7, #0
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    56d6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    56da:	2300      	movs	r3, #0
    56dc:	f004 0201 	and.w	r2, r4, #1
    56e0:	4313      	orrs	r3, r2
    56e2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    56e6:	ea4f 76d5 	mov.w	r6, r5, lsr #31
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    56ea:	f245 5855 	movw	r8, #21845	; 0x5555
    56ee:	bf08      	it	eq
    56f0:	4698      	moveq	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    56f2:	2f00      	cmp	r7, #0
    56f4:	bf08      	it	eq
    56f6:	2e01      	cmpeq	r6, #1
		reverse8((target.syncword >> 0) & 0xFF),
    56f8:	b2e0      	uxtb	r0, r4
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    56fa:	bf0c      	ite	eq
    56fc:	26aa      	moveq	r6, #170	; 0xaa
    56fe:	2655      	movne	r6, #85	; 0x55
		reverse8((target.syncword >> 0) & 0xFF),
    5700:	f7fe fe2c 	bl	435c <reverse8>
	uint8_t data[16] = {
    5704:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 8) & 0xFF),
    5708:	f3c4 2007 	ubfx	r0, r4, #8, #8
    570c:	f7fe fe26 	bl	435c <reverse8>
	uint8_t data[16] = {
    5710:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 16) & 0xFF),
    5714:	f3c4 4007 	ubfx	r0, r4, #16, #8
    5718:	f7fe fe20 	bl	435c <reverse8>
	uint8_t data[16] = {
    571c:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 24) & 0xFF),
    5720:	0e20      	lsrs	r0, r4, #24
    5722:	f7fe fe1b 	bl	435c <reverse8>
	uint8_t data[16] = {
    5726:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 32) & 0xFF),
    572a:	b2e8      	uxtb	r0, r5
    572c:	f7fe fe16 	bl	435c <reverse8>
	uint8_t data[16] = {
    5730:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 40) & 0xFF),
    5734:	f3c5 2007 	ubfx	r0, r5, #8, #8
    5738:	f7fe fe10 	bl	435c <reverse8>
	uint8_t data[16] = {
    573c:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 48) & 0xFF),
    5740:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5744:	f7fe fe0a 	bl	435c <reverse8>
	uint8_t data[16] = {
    5748:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 56) & 0xFF),
    574c:	0e28      	lsrs	r0, r5, #24
    574e:	f7fe fe05 	bl	435c <reverse8>
	uint8_t data[16] = {
    5752:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8(trailer),
    5756:	4630      	mov	r0, r6
    5758:	f7fe fe00 	bl	435c <reverse8>
	uint8_t data[16] = {
    575c:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8(0x77),
    5760:	2077      	movs	r0, #119	; 0x77
    5762:	f7fe fdfb 	bl	435c <reverse8>
	uint8_t data[16] = {
    5766:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8(0x66),
    576a:	2066      	movs	r0, #102	; 0x66
    576c:	f7fe fdf6 	bl	435c <reverse8>
	uint8_t data[16] = {
    5770:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8(0x55),
    5774:	2055      	movs	r0, #85	; 0x55
    5776:	f7fe fdf1 	bl	435c <reverse8>
	uint8_t data[16] = {
    577a:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8(0x44),
    577e:	2044      	movs	r0, #68	; 0x44
    5780:	f7fe fdec 	bl	435c <reverse8>
	uint8_t data[16] = {
    5784:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(0x33),
    5788:	2033      	movs	r0, #51	; 0x33
    578a:	f7fe fde7 	bl	435c <reverse8>
	uint8_t data[16] = {
    578e:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x22),
    5792:	2022      	movs	r0, #34	; 0x22
    5794:	f7fe fde2 	bl	435c <reverse8>
	uint8_t data[16] = {
    5798:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x11)
    579c:	2011      	movs	r0, #17
    579e:	f7fe fddd 	bl	435c <reverse8>
	uint16_t reversed = 0;
    57a2:	463c      	mov	r4, r7
	for(size_t i=0; i<16; i++)
    57a4:	463b      	mov	r3, r7
	uint8_t data[16] = {
    57a6:	f88d 000f 	strb.w	r0, [sp, #15]
		reversed |= ((data >> i) & 0x01) << (15-i);
    57aa:	fa48 f203 	asr.w	r2, r8, r3
    57ae:	f1c3 010f 	rsb	r1, r3, #15
    57b2:	f002 0201 	and.w	r2, r2, #1
    57b6:	408a      	lsls	r2, r1
	for(size_t i=0; i<16; i++)
    57b8:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (15-i);
    57ba:	4314      	orrs	r4, r2
	for(size_t i=0; i<16; i++)
    57bc:	2b10      	cmp	r3, #16
		reversed |= ((data >> i) & 0x01) << (15-i);
    57be:	b2a4      	uxth	r4, r4
	for(size_t i=0; i<16; i++)
    57c0:	d1f3      	bne.n	57aa <br_transmit+0xde>
	cc2400_set(MANAND,  0x7fff);
    57c2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    57c6:	200d      	movs	r0, #13
    57c8:	f003 fe77 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    57cc:	f642 3122 	movw	r1, #11042	; 0x2b22
    57d0:	2012      	movs	r0, #18
    57d2:	f003 fe72 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    57d6:	f241 314b 	movw	r1, #4939	; 0x134b
    57da:	2014      	movs	r0, #20
    57dc:	f003 fe6d 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    57e0:	f640 4101 	movw	r1, #3073	; 0xc01
    57e4:	2020      	movs	r0, #32
    57e6:	f003 fe68 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    57ea:	4621      	mov	r1, r4
    57ec:	202c      	movs	r0, #44	; 0x2c
    57ee:	f003 fe64 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    57f2:	2100      	movs	r1, #0
    57f4:	202d      	movs	r0, #45	; 0x2d
    57f6:	f003 fe60 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   channel);
    57fa:	4b4c      	ldr	r3, [pc, #304]	; (592c <br_transmit+0x260>)
    57fc:	2002      	movs	r0, #2
    57fe:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
	if (modulation == MOD_BT_BASIC_RATE) {
    5802:	4c4b      	ldr	r4, [pc, #300]	; (5930 <br_transmit+0x264>)
	cc2400_set(FSDIV,   channel);
    5804:	b289      	uxth	r1, r1
    5806:	f003 fe58 	bl	94ba <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    580a:	210b      	movs	r1, #11
    580c:	2005      	movs	r0, #5
    580e:	f003 fe54 	bl	94ba <cc2400_set>
	if (modulation == MOD_BT_BASIC_RATE) {
    5812:	7823      	ldrb	r3, [r4, #0]
    5814:	bbbb      	cbnz	r3, 5886 <br_transmit+0x1ba>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    5816:	2129      	movs	r1, #41	; 0x29
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5818:	2003      	movs	r0, #3
    581a:	f003 fe4e 	bl	94ba <cc2400_set>
	clkn_start();
    581e:	f002 f8d7 	bl	79d0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    5822:	f003 fee5 	bl	95f0 <cc2400_status>
    5826:	0645      	lsls	r5, r0, #25
    5828:	d5fb      	bpl.n	5822 <br_transmit+0x156>
	cc2400_strobe(SFSON);
    582a:	2061      	movs	r0, #97	; 0x61
    582c:	f003 fee7 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5830:	f003 fede 	bl	95f0 <cc2400_status>
    5834:	0740      	lsls	r0, r0, #29
    5836:	d5fb      	bpl.n	5830 <br_transmit+0x164>
	PAEN_SET;
    5838:	2280      	movs	r2, #128	; 0x80
    583a:	4b3e      	ldr	r3, [pc, #248]	; (5934 <br_transmit+0x268>)
    583c:	601a      	str	r2, [r3, #0]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    583e:	200e      	movs	r0, #14
    5840:	f003 fe32 	bl	94a8 <cc2400_get>
    5844:	f000 001f 	and.w	r0, r0, #31
    5848:	280f      	cmp	r0, #15
    584a:	d1f8      	bne.n	583e <br_transmit+0x172>
	cc2400_strobe(STX);
    584c:	2063      	movs	r0, #99	; 0x63
    584e:	f003 fed6 	bl	95fe <cc2400_strobe>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5852:	2114      	movs	r1, #20
    5854:	2023      	movs	r0, #35	; 0x23
    5856:	f003 fe30 	bl	94ba <cc2400_set>
	gio_save = cc2400_get(IOCFG);
    585a:	2008      	movs	r0, #8
    585c:	f003 fe24 	bl	94a8 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5860:	f3c0 0108 	ubfx	r1, r0, #0, #9
	gio_save = cc2400_get(IOCFG);
    5864:	4607      	mov	r7, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5866:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    586a:	2008      	movs	r0, #8
    586c:	f003 fe25 	bl	94ba <cc2400_set>
	uint32_t clkn_saved = 0;
    5870:	2500      	movs	r5, #0
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5872:	4e31      	ldr	r6, [pc, #196]	; (5938 <br_transmit+0x26c>)
		TXLED_SET;
    5874:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5944 <br_transmit+0x278>
	while ( requested_mode == MODE_TX_SYMBOLS )
    5878:	7ca3      	ldrb	r3, [r4, #18]
    587a:	2b02      	cmp	r3, #2
    587c:	d14a      	bne.n	5914 <br_transmit+0x248>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    587e:	086d      	lsrs	r5, r5, #1
    5880:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5948 <br_transmit+0x27c>
    5884:	e008      	b.n	5898 <br_transmit+0x1cc>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5886:	7823      	ldrb	r3, [r4, #0]
    5888:	2b01      	cmp	r3, #1
    588a:	d1e2      	bne.n	5852 <br_transmit+0x186>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    588c:	2140      	movs	r1, #64	; 0x40
    588e:	e7c3      	b.n	5818 <br_transmit+0x14c>
			if (do_hop) {
    5890:	7ae2      	ldrb	r2, [r4, #11]
    5892:	b11a      	cbz	r2, 589c <br_transmit+0x1d0>
				hop();
    5894:	f7ff fd78 	bl	5388 <hop>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5898:	f640 03c9 	movw	r3, #2249	; 0x8c9
    589c:	6832      	ldr	r2, [r6, #0]
    589e:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
    58a2:	d0f5      	beq.n	5890 <br_transmit+0x1c4>
    58a4:	f8d8 2000 	ldr.w	r2, [r8]
    58a8:	429a      	cmp	r2, r3
    58aa:	d9f1      	bls.n	5890 <br_transmit+0x1c4>
		TXLED_SET;
    58ac:	f44f 7380 	mov.w	r3, #256	; 0x100
		clkn_saved = clkn;
    58b0:	6835      	ldr	r5, [r6, #0]
		cc2400_fifo_write(16, data);
    58b2:	4669      	mov	r1, sp
		TXLED_SET;
    58b4:	f8c9 3000 	str.w	r3, [r9]
		cc2400_fifo_write(16, data);
    58b8:	2010      	movs	r0, #16
    58ba:	f003 fe11 	bl	94e0 <cc2400_fifo_write>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    58be:	200e      	movs	r0, #14
    58c0:	f003 fdf2 	bl	94a8 <cc2400_get>
    58c4:	f000 001f 	and.w	r0, r0, #31
    58c8:	280f      	cmp	r0, #15
    58ca:	d1f8      	bne.n	58be <br_transmit+0x1f2>
		TXLED_CLR;
    58cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    58d0:	4b1a      	ldr	r3, [pc, #104]	; (593c <br_transmit+0x270>)
		cc2400_strobe(SRFOFF);
    58d2:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    58d4:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    58d6:	f003 fe92 	bl	95fe <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    58da:	f003 fe89 	bl	95f0 <cc2400_status>
    58de:	0741      	lsls	r1, r0, #29
    58e0:	d4fb      	bmi.n	58da <br_transmit+0x20e>
		while (!(cc2400_status() & XOSC16M_STABLE));
    58e2:	f003 fe85 	bl	95f0 <cc2400_status>
    58e6:	0642      	lsls	r2, r0, #25
    58e8:	d5fb      	bpl.n	58e2 <br_transmit+0x216>
		cc2400_strobe(SFSON);
    58ea:	2061      	movs	r0, #97	; 0x61
    58ec:	f003 fe87 	bl	95fe <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    58f0:	f003 fe7e 	bl	95f0 <cc2400_status>
    58f4:	0743      	lsls	r3, r0, #29
    58f6:	d5fb      	bpl.n	58f0 <br_transmit+0x224>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    58f8:	200e      	movs	r0, #14
    58fa:	f003 fdd5 	bl	94a8 <cc2400_get>
    58fe:	f000 001f 	and.w	r0, r0, #31
    5902:	280f      	cmp	r0, #15
    5904:	d1f8      	bne.n	58f8 <br_transmit+0x22c>
		cc2400_strobe(STX);
    5906:	2063      	movs	r0, #99	; 0x63
    5908:	f003 fe79 	bl	95fe <cc2400_strobe>
		handle_usb(clkn);
    590c:	6830      	ldr	r0, [r6, #0]
    590e:	f001 ff3b 	bl	7788 <handle_usb>
    5912:	e7b1      	b.n	5878 <br_transmit+0x1ac>
	PAEN_CLR;
    5914:	2280      	movs	r2, #128	; 0x80
    5916:	4b0a      	ldr	r3, [pc, #40]	; (5940 <br_transmit+0x274>)
	cc2400_set(IOCFG, gio_save);
    5918:	4639      	mov	r1, r7
	PAEN_CLR;
    591a:	601a      	str	r2, [r3, #0]
	cc2400_set(IOCFG, gio_save);
    591c:	2008      	movs	r0, #8
    591e:	f003 fdcc 	bl	94ba <cc2400_set>
}
    5922:	b005      	add	sp, #20
    5924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5928:	10001a28 	.word	0x10001a28
    592c:	10000450 	.word	0x10000450
    5930:	10000a4c 	.word	0x10000a4c
    5934:	2009c058 	.word	0x2009c058
    5938:	10001464 	.word	0x10001464
    593c:	2009c03c 	.word	0x2009c03c
    5940:	2009c05c 	.word	0x2009c05c
    5944:	2009c038 	.word	0x2009c038
    5948:	40004008 	.word	0x40004008

0000594c <reset_le>:
void reset_le() {
    594c:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    594e:	480f      	ldr	r0, [pc, #60]	; (598c <reset_le+0x40>)
    5950:	f7fe fd16 	bl	4380 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5954:	4b0e      	ldr	r3, [pc, #56]	; (5990 <reset_le+0x44>)
    5956:	4a0f      	ldr	r2, [pc, #60]	; (5994 <reset_le+0x48>)
    5958:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    595a:	4a0f      	ldr	r2, [pc, #60]	; (5998 <reset_le+0x4c>)
    595c:	60da      	str	r2, [r3, #12]
	le.crc_verify = 0;
    595e:	2200      	movs	r2, #0
	le.interval_timer = 0;
    5960:	839a      	strh	r2, [r3, #28]
	le.crc_verify = 0;
    5962:	611a      	str	r2, [r3, #16]
	le.conn_count = 0;
    5964:	841a      	strh	r2, [r3, #32]
	le.last_packet = 0;
    5966:	649a      	str	r2, [r3, #72]	; 0x48
	le.link_state = LINK_INACTIVE;
    5968:	751a      	strb	r2, [r3, #20]
	le.channel_idx = 0;
    596a:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    596c:	759a      	strb	r2, [r3, #22]
	le.conn_epoch = 0;
    596e:	619a      	str	r2, [r3, #24]
	le.conn_interval = 0;
    5970:	83da      	strh	r2, [r3, #30]
	le.win_size = 0;
    5972:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    5976:	849a      	strh	r2, [r3, #36]	; 0x24
	le.update_pending = 0;
    5978:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    597a:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    597c:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    597e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update = 0;
    5982:	865a      	strh	r2, [r3, #50]	; 0x32
	do_hop = 0;
    5984:	4b05      	ldr	r3, [pc, #20]	; (599c <reset_le+0x50>)
    5986:	72da      	strb	r2, [r3, #11]
    5988:	bd08      	pop	{r3, pc}
    598a:	bf00      	nop
    598c:	8e89bed6 	.word	0x8e89bed6
    5990:	10000450 	.word	0x10000450
    5994:	00555555 	.word	0x00555555
    5998:	00aaaaaa 	.word	0x00aaaaaa
    599c:	10000a4c 	.word	0x10000a4c

000059a0 <reset_le_promisc>:
void reset_le_promisc(void) {
    59a0:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    59a2:	4c06      	ldr	r4, [pc, #24]	; (59bc <reset_le_promisc+0x1c>)
    59a4:	f44f 7284 	mov.w	r2, #264	; 0x108
    59a8:	2100      	movs	r1, #0
    59aa:	4620      	mov	r0, r4
    59ac:	f7fe fc28 	bl	4200 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    59b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    59b8:	bd10      	pop	{r4, pc}
    59ba:	bf00      	nop
    59bc:	100014a8 	.word	0x100014a8

000059c0 <bt_generic_le>:
{
    59c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	modulation = MOD_BT_LOW_ENERGY;
    59c4:	2301      	movs	r3, #1
    59c6:	4c6f      	ldr	r4, [pc, #444]	; (5b84 <bt_generic_le+0x1c4>)
{
    59c8:	4682      	mov	sl, r0
	modulation = MOD_BT_LOW_ENERGY;
    59ca:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    59cc:	7460      	strb	r0, [r4, #17]
	reset_le();
    59ce:	f7ff ffbd 	bl	594c <reset_le>
	ISER0 = ISER0_ISE_USB;
    59d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    59d6:	4b6c      	ldr	r3, [pc, #432]	; (5b88 <bt_generic_le+0x1c8>)
	RXLED_CLR;
    59d8:	4f6c      	ldr	r7, [pc, #432]	; (5b8c <bt_generic_le+0x1cc>)
	ISER0 = ISER0_ISE_USB;
    59da:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    59dc:	2310      	movs	r3, #16
    59de:	603b      	str	r3, [r7, #0]
	usb_queue_init();
    59e0:	f001 fe70 	bl	76c4 <usb_queue_init>
	hold = 0;
    59e4:	2600      	movs	r6, #0
	dio_ssp_init();
    59e6:	f003 fcd5 	bl	9394 <dio_ssp_init>
	dma_init_rx_symbols();
    59ea:	f002 f837 	bl	7a5c <dma_init_rx_symbols>
	dio_ssp_start();
    59ee:	f002 f8b3 	bl	7b58 <dio_ssp_start>
	cc2400_rx();
    59f2:	f7fe fcd1 	bl	4398 <cc2400_rx>
	cs_trigger_enable();
    59f6:	f001 ff81 	bl	78fc <cs_trigger_enable>
			cc2400_set(FSDIV, channel - 1);
    59fa:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 5bb0 <bt_generic_le+0x1f0>
		while ((rx_tc == 0) && (rx_err == 0))
    59fe:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5bb4 <bt_generic_le+0x1f4>
	while (requested_mode == active_mode) {
    5a02:	7ca3      	ldrb	r3, [r4, #18]
    5a04:	459a      	cmp	sl, r3
    5a06:	f040 808c 	bne.w	5b22 <bt_generic_le+0x162>
		if (requested_channel != 0) {
    5a0a:	89e3      	ldrh	r3, [r4, #14]
    5a0c:	b29b      	uxth	r3, r3
    5a0e:	b1cb      	cbz	r3, 5a44 <bt_generic_le+0x84>
			cc2400_strobe(SRFOFF);
    5a10:	2064      	movs	r0, #100	; 0x64
    5a12:	f003 fdf4 	bl	95fe <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5a16:	f003 fdeb 	bl	95f0 <cc2400_status>
    5a1a:	0742      	lsls	r2, r0, #29
    5a1c:	d4fb      	bmi.n	5a16 <bt_generic_le+0x56>
			cc2400_set(FSDIV, channel - 1);
    5a1e:	f8bb 104c 	ldrh.w	r1, [fp, #76]	; 0x4c
    5a22:	2002      	movs	r0, #2
    5a24:	3901      	subs	r1, #1
    5a26:	b289      	uxth	r1, r1
    5a28:	f003 fd47 	bl	94ba <cc2400_set>
			cc2400_strobe(SFSON);
    5a2c:	2061      	movs	r0, #97	; 0x61
    5a2e:	f003 fde6 	bl	95fe <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5a32:	f003 fddd 	bl	95f0 <cc2400_status>
    5a36:	0743      	lsls	r3, r0, #29
    5a38:	d5fb      	bpl.n	5a32 <bt_generic_le+0x72>
			cc2400_strobe(SRX);
    5a3a:	2062      	movs	r0, #98	; 0x62
    5a3c:	f003 fddf 	bl	95fe <cc2400_strobe>
			requested_channel = 0;
    5a40:	2300      	movs	r3, #0
    5a42:	81e3      	strh	r3, [r4, #14]
		if (do_hop) {
    5a44:	7ae3      	ldrb	r3, [r4, #11]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d077      	beq.n	5b3a <bt_generic_le+0x17a>
			hop();
    5a4a:	f7ff fc9d 	bl	5388 <hop>
		RXLED_CLR;
    5a4e:	2310      	movs	r3, #16
    5a50:	603b      	str	r3, [r7, #0]
		rssi_reset();
    5a52:	f001 fead 	bl	77b0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5a56:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    5a5a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 5bb8 <bt_generic_le+0x1f8>
		while ((rx_tc == 0) && (rx_err == 0))
    5a5e:	f8d8 3000 	ldr.w	r3, [r8]
    5a62:	b91b      	cbnz	r3, 5a6c <bt_generic_le+0xac>
    5a64:	f8d9 3000 	ldr.w	r3, [r9]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d06a      	beq.n	5b42 <bt_generic_le+0x182>
		if (rx_err) {
    5a6c:	f8d9 3000 	ldr.w	r3, [r9]
    5a70:	b11b      	cbz	r3, 5a7a <bt_generic_le+0xba>
			status |= DMA_ERROR;
    5a72:	7863      	ldrb	r3, [r4, #1]
    5a74:	f043 0302 	orr.w	r3, r3, #2
    5a78:	7063      	strb	r3, [r4, #1]
		if (!rx_tc)
    5a7a:	f8d8 3000 	ldr.w	r3, [r8]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d079      	beq.n	5b76 <bt_generic_le+0x1b6>
		if (rx_tc > 1)
    5a82:	f8d8 3000 	ldr.w	r3, [r8]
    5a86:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5a88:	bf82      	ittt	hi
    5a8a:	7863      	ldrbhi	r3, [r4, #1]
    5a8c:	f043 0301 	orrhi.w	r3, r3, #1
    5a90:	7063      	strbhi	r3, [r4, #1]
		rssi_iir_update(channel);
    5a92:	f8bb 004c 	ldrh.w	r0, [fp, #76]	; 0x4c
    5a96:	b280      	uxth	r0, r0
    5a98:	f001 fec6 	bl	7828 <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    5a9c:	4a3c      	ldr	r2, [pc, #240]	; (5b90 <bt_generic_le+0x1d0>)
    5a9e:	7813      	ldrb	r3, [r2, #0]
    5aa0:	b913      	cbnz	r3, 5aa8 <bt_generic_le+0xe8>
    5aa2:	4b3c      	ldr	r3, [pc, #240]	; (5b94 <bt_generic_le+0x1d4>)
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	b133      	cbz	r3, 5ab6 <bt_generic_le+0xf6>
			status |= CS_TRIGGER;
    5aa8:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5aaa:	2602      	movs	r6, #2
			status |= CS_TRIGGER;
    5aac:	f043 0308 	orr.w	r3, r3, #8
    5ab0:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5ab2:	2300      	movs	r3, #0
    5ab4:	7013      	strb	r3, [r2, #0]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    5ab6:	4b38      	ldr	r3, [pc, #224]	; (5b98 <bt_generic_le+0x1d8>)
    5ab8:	4a38      	ldr	r2, [pc, #224]	; (5b9c <bt_generic_le+0x1dc>)
    5aba:	f993 3000 	ldrsb.w	r3, [r3]
    5abe:	f992 2000 	ldrsb.w	r2, [r2]
    5ac2:	3335      	adds	r3, #53	; 0x35
    5ac4:	4293      	cmp	r3, r2
    5ac6:	da54      	bge.n	5b72 <bt_generic_le+0x1b2>
			hold = CS_HOLD_TIME;
    5ac8:	2602      	movs	r6, #2
			status |= RSSI_TRIGGER;
    5aca:	7863      	ldrb	r3, [r4, #1]
    5acc:	f043 0310 	orr.w	r3, r3, #16
    5ad0:	7063      	strb	r3, [r4, #1]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5ad2:	4933      	ldr	r1, [pc, #204]	; (5ba0 <bt_generic_le+0x1e0>)
    5ad4:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5ad8:	f5a1 70c8 	sub.w	r0, r1, #400	; 0x190
    5adc:	f005 f802 	bl	aae4 <memcpy>
		for (i = 0; i < DMA_SIZE; ++i) {
    5ae0:	2300      	movs	r3, #0
		hold--;
    5ae2:	3e01      	subs	r6, #1
    5ae4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 5ba8 <bt_generic_le+0x1e8>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5ae8:	4d2e      	ldr	r5, [pc, #184]	; (5ba4 <bt_generic_le+0x1e4>)
		hold--;
    5aea:	b2f6      	uxtb	r6, r6
			hold = CS_HOLD_TIME;
    5aec:	2100      	movs	r1, #0
    5aee:	f103 0032 	add.w	r0, r3, #50	; 0x32
    5af2:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5af6:	682a      	ldr	r2, [r5, #0]
    5af8:	5cd2      	ldrb	r2, [r2, r3]
				idle_rxbuf[i] <<= 1;
    5afa:	f8d5 e000 	ldr.w	lr, [r5]
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5afe:	09d2      	lsrs	r2, r2, #7
    5b00:	5442      	strb	r2, [r0, r1]
				idle_rxbuf[i] <<= 1;
    5b02:	f81e 2003 	ldrb.w	r2, [lr, r3]
			for (j = 0; j < 8; ++j) {
    5b06:	3101      	adds	r1, #1
				idle_rxbuf[i] <<= 1;
    5b08:	0052      	lsls	r2, r2, #1
    5b0a:	b2d2      	uxtb	r2, r2
			for (j = 0; j < 8; ++j) {
    5b0c:	2908      	cmp	r1, #8
				idle_rxbuf[i] <<= 1;
    5b0e:	f80e 2003 	strb.w	r2, [lr, r3]
			for (j = 0; j < 8; ++j) {
    5b12:	d1f0      	bne.n	5af6 <bt_generic_le+0x136>
		for (i = 0; i < DMA_SIZE; ++i) {
    5b14:	3301      	adds	r3, #1
    5b16:	2b32      	cmp	r3, #50	; 0x32
    5b18:	d1e8      	bne.n	5aec <bt_generic_le+0x12c>
		int ret = data_cb(unpacked);
    5b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5b1c:	4822      	ldr	r0, [pc, #136]	; (5ba8 <bt_generic_le+0x1e8>)
    5b1e:	4798      	blx	r3
		if (!ret) break;
    5b20:	bb48      	cbnz	r0, 5b76 <bt_generic_le+0x1b6>
	ICER0 = ICER0_ICE_USB;
    5b22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b26:	4b21      	ldr	r3, [pc, #132]	; (5bac <bt_generic_le+0x1ec>)
    5b28:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5b2a:	f7fe fd2f 	bl	458c <cc2400_idle>
	dio_ssp_stop();
    5b2e:	f002 f833 	bl	7b98 <dio_ssp_stop>
}
    5b32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    5b36:	f001 bef9 	b.w	792c <cs_trigger_disable>
			TXLED_CLR;
    5b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b3e:	603b      	str	r3, [r7, #0]
    5b40:	e785      	b.n	5a4e <bt_generic_le+0x8e>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b42:	2006      	movs	r0, #6
    5b44:	f003 fcb0 	bl	94a8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b48:	4b11      	ldr	r3, [pc, #68]	; (5b90 <bt_generic_le+0x1d0>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b4a:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b4e:	781b      	ldrb	r3, [r3, #0]
    5b50:	b163      	cbz	r3, 5b6c <bt_generic_le+0x1ac>
    5b52:	f115 0f80 	cmn.w	r5, #128	; 0x80
    5b56:	d109      	bne.n	5b6c <bt_generic_le+0x1ac>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5b58:	4b0f      	ldr	r3, [pc, #60]	; (5b98 <bt_generic_le+0x1d8>)
    5b5a:	f993 3000 	ldrsb.w	r3, [r3]
    5b5e:	f103 0536 	add.w	r5, r3, #54	; 0x36
    5b62:	42a8      	cmp	r0, r5
    5b64:	bfb8      	it	lt
    5b66:	4628      	movlt	r0, r5
    5b68:	b245      	sxtb	r5, r0
				rssi_at_trigger = rssi;
    5b6a:	4628      	mov	r0, r5
			rssi_add(rssi);
    5b6c:	f001 fe3c 	bl	77e8 <rssi_add>
    5b70:	e775      	b.n	5a5e <bt_generic_le+0x9e>
		if (hold == 0) {
    5b72:	2e00      	cmp	r6, #0
    5b74:	d1ad      	bne.n	5ad2 <bt_generic_le+0x112>
		rx_tc = 0;
    5b76:	2300      	movs	r3, #0
    5b78:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5b7c:	f8c9 3000 	str.w	r3, [r9]
    5b80:	e73f      	b.n	5a02 <bt_generic_le+0x42>
    5b82:	bf00      	nop
    5b84:	10000a4c 	.word	0x10000a4c
    5b88:	e000e100 	.word	0xe000e100
    5b8c:	2009c03c 	.word	0x2009c03c
    5b90:	10001a21 	.word	0x10001a21
    5b94:	10001670 	.word	0x10001670
    5b98:	10001a20 	.word	0x10001a20
    5b9c:	10001388 	.word	0x10001388
    5ba0:	10001818 	.word	0x10001818
    5ba4:	10001684 	.word	0x10001684
    5ba8:	10001688 	.word	0x10001688
    5bac:	e000e180 	.word	0xe000e180
    5bb0:	10000450 	.word	0x10000450
    5bb4:	10001384 	.word	0x10001384
    5bb8:	10001a1c 	.word	0x10001a1c

00005bbc <le_promisc_state>:
void bt_follow_le() {
	le_phy_main();
}
*/
// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    5bbc:	b570      	push	{r4, r5, r6, lr}
    5bbe:	b08e      	sub	sp, #56	; 0x38
    5bc0:	4615      	mov	r5, r2
    5bc2:	460c      	mov	r4, r1
    5bc4:	4606      	mov	r6, r0
	u8 buf[50] = { 0, };
    5bc6:	2232      	movs	r2, #50	; 0x32
    5bc8:	2100      	movs	r1, #0
    5bca:	a801      	add	r0, sp, #4
    5bcc:	f7fe fb18 	bl	4200 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    5bd0:	2d31      	cmp	r5, #49	; 0x31
    5bd2:	462a      	mov	r2, r5
    5bd4:	4621      	mov	r1, r4
    5bd6:	bf28      	it	cs
    5bd8:	2231      	movcs	r2, #49	; 0x31
    5bda:	f10d 0005 	add.w	r0, sp, #5
	buf[0] = type;
    5bde:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    5be2:	f004 ff7f 	bl	aae4 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    5be6:	a901      	add	r1, sp, #4
    5be8:	2005      	movs	r0, #5
    5bea:	f7fe fc83 	bl	44f4 <enqueue>
}
    5bee:	b00e      	add	sp, #56	; 0x38
    5bf0:	bd70      	pop	{r4, r5, r6, pc}
    5bf2:	0000      	movs	r0, r0

00005bf4 <bt_le_sync>:
{
    5bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bf8:	b093      	sub	sp, #76	; 0x4c
	modulation = MOD_BT_LOW_ENERGY;
    5bfa:	2301      	movs	r3, #1
	ISER0 = ISER0_ISE_USB;
    5bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	modulation = MOD_BT_LOW_ENERGY;
    5c00:	4ca1      	ldr	r4, [pc, #644]	; (5e88 <bt_le_sync+0x294>)
	le.link_state = LINK_LISTENING;
    5c02:	4da2      	ldr	r5, [pc, #648]	; (5e8c <bt_le_sync+0x298>)
	modulation = MOD_BT_LOW_ENERGY;
    5c04:	7023      	strb	r3, [r4, #0]
	le.link_state = LINK_LISTENING;
    5c06:	752b      	strb	r3, [r5, #20]
	ISER0 = ISER0_ISE_USB;
    5c08:	4ba1      	ldr	r3, [pc, #644]	; (5e90 <bt_le_sync+0x29c>)
	mode = active_mode;
    5c0a:	7460      	strb	r0, [r4, #17]
	ISER0 = ISER0_ISE_USB;
    5c0c:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5c0e:	2310      	movs	r3, #16
    5c10:	4ea0      	ldr	r6, [pc, #640]	; (5e94 <bt_le_sync+0x2a0>)
{
    5c12:	4681      	mov	r9, r0
	RXLED_CLR;
    5c14:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5c16:	f001 fd55 	bl	76c4 <usb_queue_init>
	dio_ssp_init();
    5c1a:	f003 fbbb 	bl	9394 <dio_ssp_init>
	dma_init_le();
    5c1e:	f001 ff61 	bl	7ae4 <dma_init_le>
	dio_ssp_start();
    5c22:	f001 ff99 	bl	7b58 <dio_ssp_start>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5c26:	6828      	ldr	r0, [r5, #0]
    5c28:	f003 fb50 	bl	92cc <rbit>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5c2c:	f8df a298 	ldr.w	sl, [pc, #664]	; 5ec8 <bt_le_sync+0x2d4>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5c30:	f7fe fc06 	bl	4440 <cc2400_rx_sync>
    5c34:	9600      	str	r6, [sp, #0]
	while (requested_mode == active_mode) {
    5c36:	7ca3      	ldrb	r3, [r4, #18]
    5c38:	4599      	cmp	r9, r3
    5c3a:	f040 8197 	bne.w	5f6c <bt_le_sync+0x378>
		if (requested_channel != 0) {
    5c3e:	89e3      	ldrh	r3, [r4, #14]
    5c40:	b29b      	uxth	r3, r3
    5c42:	b1cb      	cbz	r3, 5c78 <bt_le_sync+0x84>
			cc2400_strobe(SRFOFF);
    5c44:	2064      	movs	r0, #100	; 0x64
    5c46:	f003 fcda 	bl	95fe <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5c4a:	f003 fcd1 	bl	95f0 <cc2400_status>
    5c4e:	0747      	lsls	r7, r0, #29
    5c50:	d4fb      	bmi.n	5c4a <bt_le_sync+0x56>
			cc2400_set(FSDIV, channel - 1);
    5c52:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5c56:	2002      	movs	r0, #2
    5c58:	3901      	subs	r1, #1
    5c5a:	b289      	uxth	r1, r1
    5c5c:	f003 fc2d 	bl	94ba <cc2400_set>
			cc2400_strobe(SFSON);
    5c60:	2061      	movs	r0, #97	; 0x61
    5c62:	f003 fccc 	bl	95fe <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5c66:	f003 fcc3 	bl	95f0 <cc2400_status>
    5c6a:	0746      	lsls	r6, r0, #29
    5c6c:	d5fb      	bpl.n	5c66 <bt_le_sync+0x72>
			cc2400_strobe(SRX);
    5c6e:	2062      	movs	r0, #98	; 0x62
    5c70:	f003 fcc5 	bl	95fe <cc2400_strobe>
			requested_channel = 0;
    5c74:	2300      	movs	r3, #0
    5c76:	81e3      	strh	r3, [r4, #14]
		RXLED_CLR;
    5c78:	2310      	movs	r3, #16
    5c7a:	9a00      	ldr	r2, [sp, #0]
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5c7c:	f8df b24c 	ldr.w	fp, [pc, #588]	; 5ecc <bt_le_sync+0x2d8>
		RXLED_CLR;
    5c80:	6013      	str	r3, [r2, #0]
		rssi_reset();
    5c82:	f001 fd95 	bl	77b0 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5c86:	4a84      	ldr	r2, [pc, #528]	; (5e98 <bt_le_sync+0x2a4>)
    5c88:	f8db 3000 	ldr.w	r3, [fp]
    5c8c:	b933      	cbnz	r3, 5c9c <bt_le_sync+0xa8>
    5c8e:	6813      	ldr	r3, [r2, #0]
    5c90:	b923      	cbnz	r3, 5c9c <bt_le_sync+0xa8>
    5c92:	7ae3      	ldrb	r3, [r4, #11]
    5c94:	b913      	cbnz	r3, 5c9c <bt_le_sync+0xa8>
    5c96:	7ca3      	ldrb	r3, [r4, #18]
    5c98:	4599      	cmp	r9, r3
    5c9a:	d0f5      	beq.n	5c88 <bt_le_sync+0x94>
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c9c:	2006      	movs	r0, #6
    5c9e:	f003 fc03 	bl	94a8 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5ca2:	4b7e      	ldr	r3, [pc, #504]	; (5e9c <bt_le_sync+0x2a8>)
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5ca4:	f340 2007 	sbfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    5ca8:	7018      	strb	r0, [r3, #0]
    5caa:	4b7d      	ldr	r3, [pc, #500]	; (5ea0 <bt_le_sync+0x2ac>)
    5cac:	7018      	strb	r0, [r3, #0]
		if (requested_mode != active_mode) {
    5cae:	7ca3      	ldrb	r3, [r4, #18]
    5cb0:	4599      	cmp	r9, r3
    5cb2:	f040 815b 	bne.w	5f6c <bt_le_sync+0x378>
		if (rx_err) {
    5cb6:	4b78      	ldr	r3, [pc, #480]	; (5e98 <bt_le_sync+0x2a4>)
    5cb8:	4f77      	ldr	r7, [pc, #476]	; (5e98 <bt_le_sync+0x2a4>)
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	b11b      	cbz	r3, 5cc6 <bt_le_sync+0xd2>
			status |= DMA_ERROR;
    5cbe:	7863      	ldrb	r3, [r4, #1]
    5cc0:	f043 0302 	orr.w	r3, r3, #2
    5cc4:	7063      	strb	r3, [r4, #1]
		if (do_hop)
    5cc6:	7ae3      	ldrb	r3, [r4, #11]
    5cc8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5ccc:	2b00      	cmp	r3, #0
    5cce:	f040 8115 	bne.w	5efc <bt_le_sync+0x308>
		if (!rx_tc)
    5cd2:	f8db 3000 	ldr.w	r3, [fp]
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d0ad      	beq.n	5c36 <bt_le_sync+0x42>
		uint32_t packet[48/4+1] = { 0, };
    5cda:	2234      	movs	r2, #52	; 0x34
    5cdc:	a805      	add	r0, sp, #20
    5cde:	f7fe fa8f 	bl	4200 <memset>
		packet[0] = le.access_address;
    5ce2:	682b      	ldr	r3, [r5, #0]
    5ce4:	4e6f      	ldr	r6, [pc, #444]	; (5ea4 <bt_le_sync+0x2b0>)
    5ce6:	9305      	str	r3, [sp, #20]
		if(send_clock){
    5ce8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    5cec:	b1e3      	cbz	r3, 5d28 <bt_le_sync+0x134>
			anchor_timestamp = CLK100NS;
    5cee:	f640 4135 	movw	r1, #3125	; 0xc35
    5cf2:	4a6d      	ldr	r2, [pc, #436]	; (5ea8 <bt_le_sync+0x2b4>)
    5cf4:	6833      	ldr	r3, [r6, #0]
    5cf6:	6812      	ldr	r2, [r2, #0]
    5cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5cfc:	fb01 2303 	mla	r3, r1, r3, r2
			if (anchor_timestamp < le.last_packet)
    5d00:	6caa      	ldr	r2, [r5, #72]	; 0x48
			anchor_timestamp = CLK100NS;
    5d02:	63a3      	str	r3, [r4, #56]	; 0x38
			if (anchor_timestamp < le.last_packet)
    5d04:	4293      	cmp	r3, r2
				anchor_timestamp += 3276800000; // handle rollover
    5d06:	bf3c      	itt	cc
    5d08:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    5d0c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
			le_promisc_state(5, &anchor_timestamp, 4);
    5d10:	f04f 0204 	mov.w	r2, #4
    5d14:	4965      	ldr	r1, [pc, #404]	; (5eac <bt_le_sync+0x2b8>)
    5d16:	f04f 0005 	mov.w	r0, #5
				anchor_timestamp += 3276800000; // handle rollover
    5d1a:	bf38      	it	cc
    5d1c:	63a3      	strcc	r3, [r4, #56]	; 0x38
			le_promisc_state(5, &anchor_timestamp, 4);
    5d1e:	f7ff ff4d 	bl	5bbc <le_promisc_state>
			send_clock = 0;
    5d22:	2300      	movs	r3, #0
    5d24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		debug_printf("channel_a: %d,	%d\n", channel,CLK100NS);
    5d28:	f640 4035 	movw	r0, #3125	; 0xc35
    5d2c:	4a5e      	ldr	r2, [pc, #376]	; (5ea8 <bt_le_sync+0x2b4>)
    5d2e:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5d32:	6833      	ldr	r3, [r6, #0]
    5d34:	6812      	ldr	r2, [r2, #0]
    5d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5d3a:	fb00 2203 	mla	r2, r0, r3, r2
    5d3e:	b289      	uxth	r1, r1
    5d40:	485b      	ldr	r0, [pc, #364]	; (5eb0 <bt_le_sync+0x2bc>)
    5d42:	f002 ff6d 	bl	8c20 <debug_printf>
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5d46:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5d4a:	2630      	movs	r6, #48	; 0x30
    5d4c:	b280      	uxth	r0, r0
    5d4e:	f001 fbc5 	bl	74dc <btle_channel_index>
    5d52:	4346      	muls	r6, r0
    5d54:	f8df 8178 	ldr.w	r8, [pc, #376]	; 5ed0 <bt_le_sync+0x2dc>
    5d58:	eb08 0306 	add.w	r3, r8, r6
    5d5c:	9301      	str	r3, [sp, #4]
			uint32_t v = rxbuf1[i+0] << 24
    5d5e:	4b55      	ldr	r3, [pc, #340]	; (5eb4 <bt_le_sync+0x2c0>)
    5d60:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5d64:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5d66:	7899      	ldrb	r1, [r3, #2]
					   | rxbuf1[i+1] << 16
    5d68:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+3] << 0;
    5d6a:	78d8      	ldrb	r0, [r3, #3]
					   | rxbuf1[i+1] << 16
    5d6c:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+3] << 0;
    5d70:	4310      	orrs	r0, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d72:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
					   | rxbuf1[i+3] << 0;
    5d76:	9302      	str	r3, [sp, #8]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d78:	f003 faa8 	bl	92cc <rbit>
    5d7c:	f858 6006 	ldr.w	r6, [r8, r6]
    5d80:	4046      	eors	r6, r0
    5d82:	9606      	str	r6, [sp, #24]
		unsigned len = (p[5] & 0x3f) + 2;
    5d84:	f3c6 2605 	ubfx	r6, r6, #8, #6
    5d88:	f106 0802 	add.w	r8, r6, #2
		if (len > 39)
    5d8c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
    5d90:	f300 80b4 	bgt.w	5efc <bt_le_sync+0x308>
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5d94:	3608      	adds	r6, #8
		if (total_transfers < 11) {
    5d96:	2e2b      	cmp	r6, #43	; 0x2b
    5d98:	d86d      	bhi.n	5e76 <bt_le_sync+0x282>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5d9a:	9b02      	ldr	r3, [sp, #8]
    5d9c:	f026 0203 	bic.w	r2, r6, #3
    5da0:	4945      	ldr	r1, [pc, #276]	; (5eb8 <bt_le_sync+0x2c4>)
    5da2:	4413      	add	r3, r2
    5da4:	680a      	ldr	r2, [r1, #0]
    5da6:	429a      	cmp	r2, r3
    5da8:	d202      	bcs.n	5db0 <bt_le_sync+0x1bc>
    5daa:	683a      	ldr	r2, [r7, #0]
    5dac:	2a00      	cmp	r2, #0
    5dae:	d0f9      	beq.n	5da4 <bt_le_sync+0x1b0>
		for (i = 4; i < 44; i += 4) {
    5db0:	2704      	movs	r7, #4
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5db2:	f8da 3000 	ldr.w	r3, [sl]
		cc2400_strobe(SFSON);
    5db6:	2061      	movs	r0, #97	; 0x61
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5db8:	f023 0301 	bic.w	r3, r3, #1
    5dbc:	f8ca 3000 	str.w	r3, [sl]
		cc2400_strobe(SFSON);
    5dc0:	f003 fc1d 	bl	95fe <cc2400_strobe>
			uint32_t v = rxbuf1[i+0] << 24
    5dc4:	4a3b      	ldr	r2, [pc, #236]	; (5eb4 <bt_le_sync+0x2c0>)
    5dc6:	1c7b      	adds	r3, r7, #1
    5dc8:	f812 c007 	ldrb.w	ip, [r2, r7]
					   | rxbuf1[i+1] << 16
    5dcc:	5cd0      	ldrb	r0, [r2, r3]
    5dce:	1cbb      	adds	r3, r7, #2
					   | rxbuf1[i+2] << 8
    5dd0:	f812 e003 	ldrb.w	lr, [r2, r3]
    5dd4:	1cfb      	adds	r3, r7, #3
					   | rxbuf1[i+3] << 0;
    5dd6:	5cd3      	ldrb	r3, [r2, r3]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5dd8:	10b9      	asrs	r1, r7, #2
					   | rxbuf1[i+3] << 0;
    5dda:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    5dde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5de2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					   | rxbuf1[i+3] << 0;
    5de6:	9203      	str	r2, [sp, #12]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5de8:	9102      	str	r1, [sp, #8]
    5dea:	f003 fa6f 	bl	92cc <rbit>
    5dee:	9902      	ldr	r1, [sp, #8]
    5df0:	ab12      	add	r3, sp, #72	; 0x48
    5df2:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
    5df6:	9b01      	ldr	r3, [sp, #4]
		for (i = 4; i < 44; i += 4) {
    5df8:	3704      	adds	r7, #4
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5dfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		for (i = 4; i < 44; i += 4) {
    5dfe:	2f2c      	cmp	r7, #44	; 0x2c
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e00:	ea80 0003 	eor.w	r0, r0, r3
    5e04:	f84e 0c30 	str.w	r0, [lr, #-48]
		for (i = 4; i < 44; i += 4) {
    5e08:	9a03      	ldr	r2, [sp, #12]
    5e0a:	d1dc      	bne.n	5dc6 <bt_le_sync+0x1d2>
		if (le.crc_verify) {
    5e0c:	692b      	ldr	r3, [r5, #16]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d160      	bne.n	5ed4 <bt_le_sync+0x2e0>
		RXLED_SET;
    5e12:	2210      	movs	r2, #16
    5e14:	4b29      	ldr	r3, [pc, #164]	; (5ebc <bt_le_sync+0x2c8>)
		packet_cb((uint8_t *)packet);
    5e16:	a805      	add	r0, sp, #20
		RXLED_SET;
    5e18:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5e1a:	69a3      	ldr	r3, [r4, #24]
    5e1c:	4798      	blx	r3
        	if(btle_channel_index(channel) == idx3){
    5e1e:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5e22:	b280      	uxth	r0, r0
    5e24:	f001 fb5a 	bl	74dc <btle_channel_index>
    5e28:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
    5e2c:	4283      	cmp	r3, r0
    5e2e:	d10c      	bne.n	5e4a <bt_le_sync+0x256>
            		count3++;  
    5e30:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
            	if(count3 > count2-1){
    5e34:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
            		count3++;  
    5e38:	3301      	adds	r3, #1
    5e3a:	b2db      	uxtb	r3, r3
            	if(count3 > count2-1){
    5e3c:	429a      	cmp	r2, r3
            		count3++;  
    5e3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                	count3 = 0;
    5e42:	bfdc      	itt	le
    5e44:	2300      	movle	r3, #0
    5e46:	f884 303c 	strble.w	r3, [r4, #60]	; 0x3c
		ICER0 = ICER0_ICE_USB;
    5e4a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    5e4e:	4b1c      	ldr	r3, [pc, #112]	; (5ec0 <bt_le_sync+0x2cc>)
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e50:	a905      	add	r1, sp, #20
		ICER0 = ICER0_ICE_USB;
    5e52:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e54:	2001      	movs	r0, #1
    5e56:	f7fe fb4d 	bl	44f4 <enqueue>
		le.last_packet = CLK100NS;
    5e5a:	f640 4135 	movw	r1, #3125	; 0xc35
		ISER0 = ISER0_ISE_USB;
    5e5e:	4b0c      	ldr	r3, [pc, #48]	; (5e90 <bt_le_sync+0x29c>)
		le.last_packet = CLK100NS;
    5e60:	4a11      	ldr	r2, [pc, #68]	; (5ea8 <bt_le_sync+0x2b4>)
		ISER0 = ISER0_ISE_USB;
    5e62:	601e      	str	r6, [r3, #0]
		le.last_packet = CLK100NS;
    5e64:	4b0f      	ldr	r3, [pc, #60]	; (5ea4 <bt_le_sync+0x2b0>)
    5e66:	681b      	ldr	r3, [r3, #0]
    5e68:	6812      	ldr	r2, [r2, #0]
    5e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e6e:	fb01 2303 	mla	r3, r1, r3, r2
    5e72:	64ab      	str	r3, [r5, #72]	; 0x48
    5e74:	e042      	b.n	5efc <bt_le_sync+0x308>
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e76:	4a13      	ldr	r2, [pc, #76]	; (5ec4 <bt_le_sync+0x2d0>)
    5e78:	6813      	ldr	r3, [r2, #0]
    5e7a:	07d8      	lsls	r0, r3, #31
    5e7c:	d598      	bpl.n	5db0 <bt_le_sync+0x1bc>
    5e7e:	683b      	ldr	r3, [r7, #0]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d0f9      	beq.n	5e78 <bt_le_sync+0x284>
    5e84:	e794      	b.n	5db0 <bt_le_sync+0x1bc>
    5e86:	bf00      	nop
    5e88:	10000a4c 	.word	0x10000a4c
    5e8c:	10000450 	.word	0x10000450
    5e90:	e000e100 	.word	0xe000e100
    5e94:	2009c03c 	.word	0x2009c03c
    5e98:	10001a1c 	.word	0x10001a1c
    5e9c:	10001388 	.word	0x10001388
    5ea0:	1000138a 	.word	0x1000138a
    5ea4:	10001464 	.word	0x10001464
    5ea8:	40004008 	.word	0x40004008
    5eac:	10000a84 	.word	0x10000a84
    5eb0:	0000b54c 	.word	0x0000b54c
    5eb4:	100019e9 	.word	0x100019e9
    5eb8:	50004104 	.word	0x50004104
    5ebc:	2009c038 	.word	0x2009c038
    5ec0:	e000e180 	.word	0xe000e180
    5ec4:	50004110 	.word	0x50004110
    5ec8:	40030024 	.word	0x40030024
    5ecc:	10001384 	.word	0x10001384
    5ed0:	0000ad30 	.word	0x0000ad30
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5ed4:	4642      	mov	r2, r8
    5ed6:	a906      	add	r1, sp, #24
    5ed8:	68e8      	ldr	r0, [r5, #12]
    5eda:	f001 fb69 	bl	75b0 <btle_crcgen_lut>
						 | (p[4+len+1] << 8)
    5ede:	ab12      	add	r3, sp, #72	; 0x48
			u32 wire_crc = (p[4+len+2] << 16)
    5ee0:	441e      	add	r6, r3
						 | (p[4+len+1] << 8)
    5ee2:	4498      	add	r8, r3
			u32 wire_crc = (p[4+len+2] << 16)
    5ee4:	f816 3c34 	ldrb.w	r3, [r6, #-52]
						 | (p[4+len+1] << 8)
    5ee8:	f818 2c2f 	ldrb.w	r2, [r8, #-47]
			u32 wire_crc = (p[4+len+2] << 16)
    5eec:	041b      	lsls	r3, r3, #16
						 | (p[4+len+1] << 8)
    5eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						 | (p[4+len+0] << 0);
    5ef2:	f818 2c30 	ldrb.w	r2, [r8, #-48]
    5ef6:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5ef8:	4298      	cmp	r0, r3
    5efa:	d08a      	beq.n	5e12 <bt_le_sync+0x21e>
		cc2400_strobe(SFSON);
    5efc:	2061      	movs	r0, #97	; 0x61
    5efe:	f003 fb7e 	bl	95fe <cc2400_strobe>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f02:	f8da 3000 	ldr.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5f06:	4a46      	ldr	r2, [pc, #280]	; (6020 <bt_le_sync+0x42c>)
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f08:	f023 0301 	bic.w	r3, r3, #1
    5f0c:	f8ca 3000 	str.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5f10:	6813      	ldr	r3, [r2, #0]
    5f12:	0759      	lsls	r1, r3, #29
    5f14:	d437      	bmi.n	5f86 <bt_le_sync+0x392>
		u32 now = CLK100NS;
    5f16:	f640 4135 	movw	r1, #3125	; 0xc35
    5f1a:	4b42      	ldr	r3, [pc, #264]	; (6024 <bt_le_sync+0x430>)
    5f1c:	4a42      	ldr	r2, [pc, #264]	; (6028 <bt_le_sync+0x434>)
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	6812      	ldr	r2, [r2, #0]
    5f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f26:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5f2a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f2c:	7d2a      	ldrb	r2, [r5, #20]
		if (now < le.last_packet)
    5f2e:	428b      	cmp	r3, r1
			now += 3276800000; // handle rollover
    5f30:	bf38      	it	cc
    5f32:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f36:	f1a2 0202 	sub.w	r2, r2, #2
			now += 3276800000; // handle rollover
    5f3a:	bf38      	it	cc
    5f3c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f40:	2a01      	cmp	r2, #1
    5f42:	d803      	bhi.n	5f4c <bt_le_sync+0x358>
			&& (now - le.last_packet > 50000000))
    5f44:	4a39      	ldr	r2, [pc, #228]	; (602c <bt_le_sync+0x438>)
    5f46:	1a5b      	subs	r3, r3, r1
    5f48:	4293      	cmp	r3, r2
    5f4a:	d802      	bhi.n	5f52 <bt_le_sync+0x35e>
			|| (le_jam_count == 1)
    5f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5f4e:	2b01      	cmp	r3, #1
    5f50:	d133      	bne.n	5fba <bt_le_sync+0x3c6>
			reset_le();
    5f52:	f7ff fcfb 	bl	594c <reset_le>
			TXLED_CLR;
    5f56:	f44f 7280 	mov.w	r2, #256	; 0x100
			le_jam_count = 0;
    5f5a:	2300      	movs	r3, #0
			TXLED_CLR;
    5f5c:	9900      	ldr	r1, [sp, #0]
			le_jam_count = 0;
    5f5e:	6423      	str	r3, [r4, #64]	; 0x40
			TXLED_CLR;
    5f60:	600a      	str	r2, [r1, #0]
			if (jam_mode == JAM_ONCE) {
    5f62:	7ce2      	ldrb	r2, [r4, #19]
    5f64:	2a01      	cmp	r2, #1
    5f66:	d111      	bne.n	5f8c <bt_le_sync+0x398>
				jam_mode = JAM_NONE;
    5f68:	74e3      	strb	r3, [r4, #19]
				requested_mode = MODE_IDLE;
    5f6a:	74a3      	strb	r3, [r4, #18]
	ICER0 = ICER0_ICE_USB;
    5f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5f70:	4b2f      	ldr	r3, [pc, #188]	; (6030 <bt_le_sync+0x43c>)
    5f72:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5f74:	f7fe fb0a 	bl	458c <cc2400_idle>
	dio_ssp_stop();
    5f78:	f001 fe0e 	bl	7b98 <dio_ssp_stop>
	cs_trigger_disable();
    5f7c:	f001 fcd6 	bl	792c <cs_trigger_disable>
}
    5f80:	b013      	add	sp, #76	; 0x4c
    5f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			u8 tmp = (u8)DIO_SSP_DR;
    5f86:	4b2b      	ldr	r3, [pc, #172]	; (6034 <bt_le_sync+0x440>)
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	e7c1      	b.n	5f10 <bt_le_sync+0x31c>
			if (active_mode == MODE_BT_PROMISC_LE)
    5f8c:	f1b9 0f0a 	cmp.w	r9, #10
    5f90:	d0ec      	beq.n	5f6c <bt_le_sync+0x378>
			le.link_state = LINK_LISTENING;
    5f92:	2301      	movs	r3, #1
			cc2400_strobe(SRFOFF);
    5f94:	2064      	movs	r0, #100	; 0x64
			le.link_state = LINK_LISTENING;
    5f96:	752b      	strb	r3, [r5, #20]
			cc2400_strobe(SRFOFF);
    5f98:	f003 fb31 	bl	95fe <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5f9c:	f003 fb28 	bl	95f0 <cc2400_status>
    5fa0:	0742      	lsls	r2, r0, #29
    5fa2:	d4fb      	bmi.n	5f9c <bt_le_sync+0x3a8>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5fa4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    5fa8:	b29b      	uxth	r3, r3
    5faa:	b303      	cbz	r3, 5fee <bt_le_sync+0x3fa>
    5fac:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    5fb0:	b29b      	uxth	r3, r3
    5fb2:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
			restart_jamming = 1;
    5fb6:	2301      	movs	r3, #1
    5fb8:	6463      	str	r3, [r4, #68]	; 0x44
		cc2400_set(SYNCL, le.syncl);
    5fba:	88e9      	ldrh	r1, [r5, #6]
    5fbc:	202c      	movs	r0, #44	; 0x2c
    5fbe:	f003 fa7c 	bl	94ba <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    5fc2:	88a9      	ldrh	r1, [r5, #4]
    5fc4:	202d      	movs	r0, #45	; 0x2d
    5fc6:	f003 fa78 	bl	94ba <cc2400_set>
		if (do_hop)
    5fca:	7ae3      	ldrb	r3, [r4, #11]
    5fcc:	b10b      	cbz	r3, 5fd2 <bt_le_sync+0x3de>
			hop();
    5fce:	f7ff f9db 	bl	5388 <hop>
		if (le_jam_count > 0) {
    5fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	dd0d      	ble.n	5ff4 <bt_le_sync+0x400>
			le_jam();
    5fd8:	f7ff f99a 	bl	5310 <le_jam>
			--le_jam_count;
    5fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5fde:	3b01      	subs	r3, #1
    5fe0:	6423      	str	r3, [r4, #64]	; 0x40
		rx_tc = 0;
    5fe2:	2300      	movs	r3, #0
		rx_err = 0;
    5fe4:	4a14      	ldr	r2, [pc, #80]	; (6038 <bt_le_sync+0x444>)
		rx_tc = 0;
    5fe6:	f8cb 3000 	str.w	r3, [fp]
		rx_err = 0;
    5fea:	6013      	str	r3, [r2, #0]
    5fec:	e623      	b.n	5c36 <bt_le_sync+0x42>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5fee:	f640 1362 	movw	r3, #2402	; 0x962
    5ff2:	e7de      	b.n	5fb2 <bt_le_sync+0x3be>
			dma_init_le();
    5ff4:	f001 fd76 	bl	7ae4 <dma_init_le>
			dio_ssp_start();
    5ff8:	f001 fdae 	bl	7b58 <dio_ssp_start>
			if (restart_jamming) {
    5ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5ffe:	b13b      	cbz	r3, 6010 <bt_le_sync+0x41c>
				cc2400_rx_sync(rbit(le.access_address));
    6000:	6828      	ldr	r0, [r5, #0]
    6002:	f003 f963 	bl	92cc <rbit>
    6006:	f7fe fa1b 	bl	4440 <cc2400_rx_sync>
				restart_jamming = 0;
    600a:	2300      	movs	r3, #0
    600c:	6463      	str	r3, [r4, #68]	; 0x44
    600e:	e7e8      	b.n	5fe2 <bt_le_sync+0x3ee>
				while (!(cc2400_status() & FS_LOCK));
    6010:	f003 faee 	bl	95f0 <cc2400_status>
    6014:	0743      	lsls	r3, r0, #29
    6016:	d5fb      	bpl.n	6010 <bt_le_sync+0x41c>
				cc2400_strobe(SRX);
    6018:	2062      	movs	r0, #98	; 0x62
    601a:	f003 faf0 	bl	95fe <cc2400_strobe>
    601e:	e7e0      	b.n	5fe2 <bt_le_sync+0x3ee>
    6020:	4003000c 	.word	0x4003000c
    6024:	10001464 	.word	0x10001464
    6028:	40004008 	.word	0x40004008
    602c:	02faf080 	.word	0x02faf080
    6030:	e000e180 	.word	0xe000e180
    6034:	40030008 	.word	0x40030008
    6038:	10001a1c 	.word	0x10001a1c

0000603c <promisc_recover_hop_interval>:

// divide, rounding to the nearest integer: round up at 0.5.


//sopan
void promisc_recover_hop_interval(u8 *packet) {
    603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6040:	b097      	sub	sp, #92	; 0x5c
    	// for hop increment
    	static u32 first_ts = 0;
    	u8 hops = 0;
    	u32 diff = 0;
    	u32 channels_hopped = 0;
    	time_array1[0] = 0;
    6042:	2100      	movs	r1, #0
    6044:	4ed2      	ldr	r6, [pc, #840]	; (6390 <promisc_recover_hop_interval+0x354>)

    // for increment
    
    if(count > 8){
    6046:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
    	time_array1[0] = 0;
    604a:	f8a6 1048 	strh.w	r1, [r6, #72]	; 0x48
    if(count > 8){
    604e:	2b08      	cmp	r3, #8
    6050:	d906      	bls.n	6060 <promisc_recover_hop_interval+0x24>
        count = 0;
        memset(seq, 0, sizeof seq);    
    6052:	2248      	movs	r2, #72	; 0x48
    6054:	f106 006c 	add.w	r0, r6, #108	; 0x6c
        count = 0;
    6058:	f8a6 1068 	strh.w	r1, [r6, #104]	; 0x68
        memset(seq, 0, sizeof seq);    
    605c:	f7fe f8d0 	bl	4200 <memset>
    }

	u32 cur_clk = CLK100NS;
    6060:	f640 4135 	movw	r1, #3125	; 0xc35
    6064:	4ccb      	ldr	r4, [pc, #812]	; (6394 <promisc_recover_hop_interval+0x358>)
    6066:	4acc      	ldr	r2, [pc, #816]	; (6398 <promisc_recover_hop_interval+0x35c>)
    6068:	6823      	ldr	r3, [r4, #0]
    606a:	6812      	ldr	r2, [r2, #0]
    606c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6070:	fb01 2303 	mla	r3, r1, r3, r2
	if (cur_clk < prev_clk)
    6074:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
	u32 cur_clk = CLK100NS;
    6078:	9301      	str	r3, [sp, #4]
	if (cur_clk < prev_clk)
    607a:	42ab      	cmp	r3, r5
		cur_clk += 3267800000; // handle rollover
    607c:	bf3f      	itttt	cc
    607e:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6082:	f5a3 1365 	subcc.w	r3, r3, #3751936	; 0x394000
    6086:	f5a3 53a2 	subcc.w	r3, r3, #5184	; 0x1440
    608a:	9301      	strcc	r3, [sp, #4]
	u32 clk_diff = cur_clk - prev_clk;
    608c:	9b01      	ldr	r3, [sp, #4]
    608e:	1b5d      	subs	r5, r3, r5

	static u16 obsv_hop_interval; // observed hop interval
    u16 hop_diff;


	if (clk_diff < 6 * LE_BASECLK)
    6090:	4bc2      	ldr	r3, [pc, #776]	; (639c <promisc_recover_hop_interval+0x360>)
    6092:	429d      	cmp	r5, r3
    6094:	f240 80c4 	bls.w	6220 <promisc_recover_hop_interval+0x1e4>
		return;
	
    if(match == 0){
    6098:	f896 30b8 	ldrb.w	r3, [r6, #184]	; 0xb8
    609c:	b943      	cbnz	r3, 60b0 <promisc_recover_hop_interval+0x74>
	    seq[count] = (clk_diff/10000);
    609e:	f242 7210 	movw	r2, #10000	; 0x2710
    60a2:	fbb5 f2f2 	udiv	r2, r5, r2
    60a6:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
    60aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    60ae:	66da      	str	r2, [r3, #108]	; 0x6c
    }
	if(calc == 0){
    60b0:	4fbb      	ldr	r7, [pc, #748]	; (63a0 <promisc_recover_hop_interval+0x364>)
    60b2:	f897 8072 	ldrb.w	r8, [r7, #114]	; 0x72
    60b6:	f1b8 0f00 	cmp.w	r8, #0
    60ba:	d139      	bne.n	6130 <promisc_recover_hop_interval+0xf4>
		++sindex;
        hop_diff = abs(seq[sindex] - (clk_diff/10000));
    60bc:	f242 7910 	movw	r9, #10000	; 0x2710
    60c0:	fbb5 f9f9 	udiv	r9, r5, r9
		++sindex;
    60c4:	f8b6 30ba 	ldrh.w	r3, [r6, #186]	; 0xba
    60c8:	3301      	adds	r3, #1
    60ca:	b29b      	uxth	r3, r3
    60cc:	f8a6 30ba 	strh.w	r3, [r6, #186]	; 0xba
        hop_diff = abs(seq[sindex] - (clk_diff/10000));
    60d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    60d4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    60d6:	eba0 0009 	sub.w	r0, r0, r9
    60da:	f004 fcff 	bl	aadc <abs>
        interval += (clk_diff/10000);
    60de:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
		if(hop_diff <= 10){		
    60e2:	b280      	uxth	r0, r0
        interval += (clk_diff/10000);
    60e4:	444a      	add	r2, r9
		if(hop_diff <= 10){		
    60e6:	280a      	cmp	r0, #10
        interval += (clk_diff/10000);
    60e8:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
		if(hop_diff <= 10){		
    60ec:	f200 809b 	bhi.w	6226 <promisc_recover_hop_interval+0x1ea>
            if(step < 1){
    60f0:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    60f4:	b92b      	cbnz	r3, 6102 <promisc_recover_hop_interval+0xc6>
                time_array1[sindex] = interval;
    60f6:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
    60fa:	eb06 0141 	add.w	r1, r6, r1, lsl #1
    60fe:	f8a1 2048 	strh.w	r2, [r1, #72]	; 0x48
            }
			if(sindex == eindex){
    6102:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
    6106:	f8b6 20c2 	ldrh.w	r2, [r6, #194]	; 0xc2
    610a:	4291      	cmp	r1, r2
    610c:	d110      	bne.n	6130 <promisc_recover_hop_interval+0xf4>
                match = 1;
    610e:	2201      	movs	r2, #1
    6110:	f886 20b8 	strb.w	r2, [r6, #184]	; 0xb8
                sindex = 0;
    6114:	2200      	movs	r2, #0
                count = 0;
                step = step + 1;
    6116:	3301      	adds	r3, #1
    6118:	b2db      	uxtb	r3, r3
                if(step >= 3){
    611a:	2b02      	cmp	r3, #2
                sindex = 0;
    611c:	f8a6 20ba 	strh.w	r2, [r6, #186]	; 0xba
                count = 0;
    6120:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
                step = step + 1;
    6124:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
                if(step >= 3){
    6128:	d939      	bls.n	619e <promisc_recover_hop_interval+0x162>
                    calc = 2;
    612a:	2302      	movs	r3, #2
    612c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            match = 0;
            seq[count] = (clk_diff/10000);
			}
	}

	if((count > 1) && (calc == 1)){
    6130:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
    6134:	2b01      	cmp	r3, #1
    6136:	d932      	bls.n	619e <promisc_recover_hop_interval+0x162>
    6138:	f897 8072 	ldrb.w	r8, [r7, #114]	; 0x72
    613c:	f1b8 0f01 	cmp.w	r8, #1
    6140:	d12d      	bne.n	619e <promisc_recover_hop_interval+0x162>
        hop_diff = abs(seq[1] - (clk_diff/10000));
    6142:	f242 7310 	movw	r3, #10000	; 0x2710
    6146:	fbb5 f5f3 	udiv	r5, r5, r3
    614a:	6f30      	ldr	r0, [r6, #112]	; 0x70
    614c:	1b40      	subs	r0, r0, r5
    614e:	f004 fcc5 	bl	aadc <abs>
		if(hop_diff <= 10){
    6152:	b280      	uxth	r0, r0
    6154:	280a      	cmp	r0, #10
    6156:	d822      	bhi.n	619e <promisc_recover_hop_interval+0x162>
			interval += (clk_diff/10000);
			calc = 0;
    6158:	2200      	movs	r2, #0
			interval += (clk_diff/10000);
    615a:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
			calc = 0;
    615e:	f887 2072 	strb.w	r2, [r7, #114]	; 0x72
			interval += (clk_diff/10000);
    6162:	441d      	add	r5, r3
			sindex = 1;
			eindex = count - 1;
    6164:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
			interval += (clk_diff/10000);
    6168:	f8c6 50bc 	str.w	r5, [r6, #188]	; 0xbc
			eindex = count - 1;
    616c:	3b01      	subs	r3, #1
    616e:	b29b      	uxth	r3, r3
            if(sindex == eindex){
    6170:	2b01      	cmp	r3, #1
			sindex = 1;
    6172:	f8a6 80ba 	strh.w	r8, [r6, #186]	; 0xba
			eindex = count - 1;
    6176:	f8a6 30c2 	strh.w	r3, [r6, #194]	; 0xc2
            if(sindex == eindex){
    617a:	d10a      	bne.n	6192 <promisc_recover_hop_interval+0x156>
                match = 1;
    617c:	f886 30b8 	strb.w	r3, [r6, #184]	; 0xb8
                sindex = 0;
                count = 0;
                step = step + 1;
    6180:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
                sindex = 0;
    6184:	f8a6 20ba 	strh.w	r2, [r6, #186]	; 0xba
                step = step + 1;
    6188:	3301      	adds	r3, #1
                count = 0;
    618a:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
                step = step + 1;
    618e:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
			}
            time_array1[sindex] = interval;
    6192:	f8b6 30ba 	ldrh.w	r3, [r6, #186]	; 0xba
    6196:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    619a:	f8a3 5048 	strh.w	r5, [r3, #72]	; 0x48

		}
	}

    if(calc == 2){
    619e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    61a2:	f897 5073 	ldrb.w	r5, [r7, #115]	; 0x73
    61a6:	2b02      	cmp	r3, #2
    61a8:	d157      	bne.n	625a <promisc_recover_hop_interval+0x21e>
        uint16_t val = DIVIDE_ROUND(interval,step);
    61aa:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
    61ae:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    61b2:	eb03 0052 	add.w	r0, r3, r2, lsr #1
    61b6:	fb90 f0f2 	sdiv	r0, r0, r2
        obsv_hop_interval = DIVIDE_ROUND(val, 37);
    61ba:	2325      	movs	r3, #37	; 0x25
    61bc:	b280      	uxth	r0, r0
    61be:	3012      	adds	r0, #18
    61c0:	fb90 f0f3 	sdiv	r0, r0, r3
    61c4:	f8a6 00c4 	strh.w	r0, [r6, #196]	; 0xc4
        //debug_printf("Hop interval: %d\n",obsv_hop_interval);
        le.conn_interval = DIVIDE_ROUND(obsv_hop_interval, 1.25);
    61c8:	f004 f868 	bl	a29c <__aeabi_i2d>
    61cc:	2200      	movs	r2, #0
    61ce:	4b75      	ldr	r3, [pc, #468]	; (63a4 <promisc_recover_hop_interval+0x368>)
    61d0:	f003 ff18 	bl	a004 <__adddf3>
    61d4:	2200      	movs	r2, #0
    61d6:	4b74      	ldr	r3, [pc, #464]	; (63a8 <promisc_recover_hop_interval+0x36c>)
    61d8:	f004 f9f0 	bl	a5bc <__aeabi_ddiv>
    61dc:	f004 fad6 	bl	a78c <__aeabi_d2uiz>
        first_ts = CLK100NS; 
    61e0:	f640 4135 	movw	r1, #3125	; 0xc35
    61e4:	4a6c      	ldr	r2, [pc, #432]	; (6398 <promisc_recover_hop_interval+0x35c>)
    61e6:	6823      	ldr	r3, [r4, #0]
    61e8:	6812      	ldr	r2, [r2, #0]
    61ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    61ee:	fb01 2303 	mla	r3, r1, r3, r2
        le.conn_interval = DIVIDE_ROUND(obsv_hop_interval, 1.25);
    61f2:	83f8      	strh	r0, [r7, #30]
        hop_direct_channel = btle_channel_index_to_phys(idx2);
    61f4:	4628      	mov	r0, r5
        first_ts = CLK100NS; 
    61f6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
        hop_direct_channel = btle_channel_index_to_phys(idx2);
    61fa:	f001 f987 	bl	750c <btle_channel_index_to_phys>
		hop_mode = HOP_DIRECT;
    61fe:	2304      	movs	r3, #4
        hop_direct_channel = btle_channel_index_to_phys(idx2);
    6200:	81b0      	strh	r0, [r6, #12]
		hop_mode = HOP_DIRECT;
    6202:	72b3      	strb	r3, [r6, #10]
	    do_hop = 1;
    6204:	2301      	movs	r3, #1
    6206:	72f3      	strb	r3, [r6, #11]
        calc = 3;
    6208:	2303      	movs	r3, #3
    620a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        }
    }

    // for increment
	
	++count;
    620e:	4b60      	ldr	r3, [pc, #384]	; (6390 <promisc_recover_hop_interval+0x354>)
    6210:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
    6214:	3201      	adds	r2, #1
    6216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	prev_clk = cur_clk;
    621a:	9a01      	ldr	r2, [sp, #4]
    621c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
    6220:	b017      	add	sp, #92	; 0x5c
    6222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memset(seq, 0, sizeof seq);
    6226:	2248      	movs	r2, #72	; 0x48
    6228:	4641      	mov	r1, r8
    622a:	4860      	ldr	r0, [pc, #384]	; (63ac <promisc_recover_hop_interval+0x370>)
			interval = 0;
    622c:	f8c6 80bc 	str.w	r8, [r6, #188]	; 0xbc
            sindex = 0;
    6230:	f8a6 80ba 	strh.w	r8, [r6, #186]	; 0xba
            memset(seq, 0, sizeof seq);
    6234:	f7fd ffe4 	bl	4200 <memset>
            memset(time_array1, 0, sizeof time_array1);        
    6238:	2220      	movs	r2, #32
    623a:	4641      	mov	r1, r8
    623c:	485c      	ldr	r0, [pc, #368]	; (63b0 <promisc_recover_hop_interval+0x374>)
    623e:	f7fd ffdf 	bl	4200 <memset>
			calc = 1;
    6242:	2301      	movs	r3, #1
            step = 0;
    6244:	f886 80c0 	strb.w	r8, [r6, #192]	; 0xc0
			calc = 1;
    6248:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            count = 1;
    624c:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
            match = 0;
    6250:	f886 80b8 	strb.w	r8, [r6, #184]	; 0xb8
            seq[count] = (clk_diff/10000);
    6254:	f8c6 9070 	str.w	r9, [r6, #112]	; 0x70
    6258:	e76a      	b.n	6130 <promisc_recover_hop_interval+0xf4>
    else if (channel == btle_channel_index_to_phys(idx2) && calc == 3) {
    625a:	4628      	mov	r0, r5
    625c:	f001 f956 	bl	750c <btle_channel_index_to_phys>
    6260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    6264:	b29b      	uxth	r3, r3
    6266:	4298      	cmp	r0, r3
    6268:	d149      	bne.n	62fe <promisc_recover_hop_interval+0x2c2>
    626a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    626e:	2b03      	cmp	r3, #3
    6270:	d145      	bne.n	62fe <promisc_recover_hop_interval+0x2c2>
		u32 second_ts = CLK100NS;
    6272:	f640 4135 	movw	r1, #3125	; 0xc35
    6276:	4a48      	ldr	r2, [pc, #288]	; (6398 <promisc_recover_hop_interval+0x35c>)
    6278:	6823      	ldr	r3, [r4, #0]
    627a:	6812      	ldr	r2, [r2, #0]
    627c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6280:	fb01 2303 	mla	r3, r1, r3, r2
        time_array2[count1] = diff/10000;//
    6284:	f242 7110 	movw	r1, #10000	; 0x2710
		if (second_ts < first_ts){
    6288:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
    628c:	4293      	cmp	r3, r2
			second_ts += 3276800000;
    628e:	bf3c      	itt	cc
    6290:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6294:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
        diff = (second_ts - first_ts);
    6298:	1a9b      	subs	r3, r3, r2
        time_array2[count1] = diff/10000;//
    629a:	fbb3 f1f1 	udiv	r1, r3, r1
    629e:	f896 20ec 	ldrb.w	r2, [r6, #236]	; 0xec
    62a2:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    62a6:	f8a2 10cc 	strh.w	r1, [r2, #204]	; 0xcc
		channels_hopped = DIVIDE_ROUND(diff,le.conn_interval * LE_BASECLK);
    62aa:	f641 026a 	movw	r2, #6250	; 0x186a
    62ae:	8bf9      	ldrh	r1, [r7, #30]
    62b0:	fb02 3301 	mla	r3, r2, r1, r3
    62b4:	f243 02d4 	movw	r2, #12500	; 0x30d4
    62b8:	434a      	muls	r2, r1
    62ba:	fbb3 f3f2 	udiv	r3, r3, r2
		if (channels_hopped > 37) {
    62be:	2b25      	cmp	r3, #37	; 0x25
    62c0:	d915      	bls.n	62ee <promisc_recover_hop_interval+0x2b2>
            first_ts = CLK100NS; 
    62c2:	f640 4135 	movw	r1, #3125	; 0xc35
    62c6:	4a34      	ldr	r2, [pc, #208]	; (6398 <promisc_recover_hop_interval+0x35c>)
    62c8:	6823      	ldr	r3, [r4, #0]
    62ca:	6812      	ldr	r2, [r2, #0]
    62cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    62d0:	fb01 2303 	mla	r3, r1, r3, r2
            hop_direct_channel = btle_channel_index_to_phys(idx3);
    62d4:	f897 0071 	ldrb.w	r0, [r7, #113]	; 0x71
            first_ts = CLK100NS; 
    62d8:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
            hop_direct_channel = btle_channel_index_to_phys(idx3);
    62dc:	f001 f916 	bl	750c <btle_channel_index_to_phys>
		    hop_mode = HOP_DIRECT;
    62e0:	2304      	movs	r3, #4
	        do_hop = 1;
    62e2:	2201      	movs	r2, #1
            hop_direct_channel = btle_channel_index_to_phys(idx3);
    62e4:	81b0      	strh	r0, [r6, #12]
            calc = 4;
    62e6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		    hop_mode = HOP_DIRECT;
    62ea:	72b3      	strb	r3, [r6, #10]
	        do_hop = 1;
    62ec:	72f2      	strb	r2, [r6, #11]
		do_hop = 1;
    62ee:	2301      	movs	r3, #1
    62f0:	72f3      	strb	r3, [r6, #11]
        ++count1;
    62f2:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
    62f6:	3301      	adds	r3, #1
    62f8:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
    else if (channel == btle_channel_index_to_phys(idx2) && calc == 3) {
    62fc:	e787      	b.n	620e <promisc_recover_hop_interval+0x1d2>
    else if(channel == btle_channel_index_to_phys(idx3) && calc == 4){
    62fe:	f897 0071 	ldrb.w	r0, [r7, #113]	; 0x71
    6302:	f001 f903 	bl	750c <btle_channel_index_to_phys>
    6306:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    630a:	b29b      	uxth	r3, r3
    630c:	4298      	cmp	r0, r3
    630e:	d151      	bne.n	63b4 <promisc_recover_hop_interval+0x378>
    6310:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    6314:	2b04      	cmp	r3, #4
    6316:	d14d      	bne.n	63b4 <promisc_recover_hop_interval+0x378>
        u32 second_ts2 = CLK100NS;
    6318:	f640 4135 	movw	r1, #3125	; 0xc35
    631c:	4a1e      	ldr	r2, [pc, #120]	; (6398 <promisc_recover_hop_interval+0x35c>)
    631e:	6823      	ldr	r3, [r4, #0]
    6320:	6812      	ldr	r2, [r2, #0]
    6322:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6326:	fb01 2303 	mla	r3, r1, r3, r2
		if (second_ts2 < first_ts){
    632a:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
        time_array3[count2] = ((diff/10000)+ time_array2[0])%(37*obsv_hop_interval);
    632e:	f8b6 00cc 	ldrh.w	r0, [r6, #204]	; 0xcc
		if (second_ts2 < first_ts){
    6332:	4293      	cmp	r3, r2
			second_ts2 += 3276800000;
    6334:	bf3c      	itt	cc
    6336:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    633a:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
        diff = (second_ts2 - first_ts);
    633e:	1a9b      	subs	r3, r3, r2
        time_array3[count2] = ((diff/10000)+ time_array2[0])%(37*obsv_hop_interval);
    6340:	f242 7210 	movw	r2, #10000	; 0x2710
    6344:	fbb3 f2f2 	udiv	r2, r3, r2
    6348:	4402      	add	r2, r0
    634a:	2025      	movs	r0, #37	; 0x25
    634c:	f8b6 40c4 	ldrh.w	r4, [r6, #196]	; 0xc4
    6350:	f896 103d 	ldrb.w	r1, [r6, #61]	; 0x3d
    6354:	4360      	muls	r0, r4
    6356:	fbb2 f4f0 	udiv	r4, r2, r0
    635a:	fb00 2214 	mls	r2, r0, r4, r2
    635e:	eb06 0541 	add.w	r5, r6, r1, lsl #1
    6362:	f8a5 20ee 	strh.w	r2, [r5, #238]	; 0xee
		channels_hopped = DIVIDE_ROUND(diff,le.conn_interval * LE_BASECLK);
    6366:	f641 026a 	movw	r2, #6250	; 0x186a
    636a:	8bf8      	ldrh	r0, [r7, #30]
    636c:	fb02 3300 	mla	r3, r2, r0, r3
    6370:	f243 02d4 	movw	r2, #12500	; 0x30d4
    6374:	4342      	muls	r2, r0
    6376:	fbb3 f3f2 	udiv	r3, r3, r2
		if (channels_hopped > 37) {
    637a:	2b25      	cmp	r3, #37	; 0x25
            calc = 5;
    637c:	bf84      	itt	hi
    637e:	2305      	movhi	r3, #5
    6380:	f887 3072 	strbhi.w	r3, [r7, #114]	; 0x72
		do_hop = 1;
    6384:	2301      	movs	r3, #1
        ++count2;
    6386:	4419      	add	r1, r3
		do_hop = 1;
    6388:	72f3      	strb	r3, [r6, #11]
        ++count2;
    638a:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
    else if(channel == btle_channel_index_to_phys(idx3) && calc == 4){
    638e:	e73e      	b.n	620e <promisc_recover_hop_interval+0x1d2>
    6390:	10000a4c 	.word	0x10000a4c
    6394:	10001464 	.word	0x10001464
    6398:	40004008 	.word	0x40004008
    639c:	000124f7 	.word	0x000124f7
    63a0:	10000450 	.word	0x10000450
    63a4:	3fe40000 	.word	0x3fe40000
    63a8:	3ff40000 	.word	0x3ff40000
    63ac:	10000ab8 	.word	0x10000ab8
    63b0:	10000a94 	.word	0x10000a94
    else if(calc == 5){
    63b4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    63b8:	2b05      	cmp	r3, #5
    63ba:	f040 81a5 	bne.w	6708 <promisc_recover_hop_interval+0x6cc>
        for( ta1 = 0; ta1 < eindex; ta1++){
    63be:	2500      	movs	r5, #0
    63c0:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
    63c4:	f896 210f 	ldrb.w	r2, [r6, #271]	; 0x10f
    63c8:	9310      	str	r3, [sp, #64]	; 0x40
            for( ta2 = 0; ta2 < count1-1; ta2++){
    63ca:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
        for( ta1 = 0; ta1 < eindex; ta1++){
    63ce:	46ae      	mov	lr, r5
            for( ta2 = 0; ta2 < count1-1; ta2++){
    63d0:	3b01      	subs	r3, #1
    63d2:	9311      	str	r3, [sp, #68]	; 0x44
                    diff = (le.conn_interval*1.25*37) - time_array1[ta1] + time_array2[ta2];
    63d4:	8bfb      	ldrh	r3, [r7, #30]
    63d6:	f896 a110 	ldrb.w	sl, [r6, #272]	; 0x110
    63da:	9308      	str	r3, [sp, #32]
    63dc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
    63e0:	f8b6 4112 	ldrh.w	r4, [r6, #274]	; 0x112
                if((idx2 - idx1) > 0){
    63e4:	1a99      	subs	r1, r3, r2
    63e6:	9109      	str	r1, [sp, #36]	; 0x24
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    63e8:	f103 0125 	add.w	r1, r3, #37	; 0x25
    63ec:	1a8a      	subs	r2, r1, r2
    63ee:	f897 1071 	ldrb.w	r1, [r7, #113]	; 0x71
        for( ta1 = 0; ta1 < eindex; ta1++){
    63f2:	462f      	mov	r7, r5
                        if((idx3 - idx2) > 0){
    63f4:	1ac8      	subs	r0, r1, r3
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    63f6:	3125      	adds	r1, #37	; 0x25
    63f8:	1acb      	subs	r3, r1, r3
                        if((idx3 - idx2) > 0){
    63fa:	900c      	str	r0, [sp, #48]	; 0x30
        for( ta1 = 0; ta1 < eindex; ta1++){
    63fc:	4629      	mov	r1, r5
    63fe:	4628      	mov	r0, r5
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6400:	9212      	str	r2, [sp, #72]	; 0x48
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6402:	9314      	str	r3, [sp, #80]	; 0x50
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    6404:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
    6408:	f896 3116 	ldrb.w	r3, [r6, #278]	; 0x116
    640c:	3a01      	subs	r2, #1
    640e:	930e      	str	r3, [sp, #56]	; 0x38
    6410:	f896 3117 	ldrb.w	r3, [r6, #279]	; 0x117
    6414:	9213      	str	r2, [sp, #76]	; 0x4c
    6416:	f896 8114 	ldrb.w	r8, [r6, #276]	; 0x114
    641a:	f896 2111 	ldrb.w	r2, [r6, #273]	; 0x111
    641e:	f896 9115 	ldrb.w	r9, [r6, #277]	; 0x115
        for( ta1 = 0; ta1 < eindex; ta1++){
    6422:	f886 510e 	strb.w	r5, [r6, #270]	; 0x10e
    6426:	9304      	str	r3, [sp, #16]
    6428:	950f      	str	r5, [sp, #60]	; 0x3c
    642a:	950d      	str	r5, [sp, #52]	; 0x34
    642c:	950a      	str	r5, [sp, #40]	; 0x28
    642e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6430:	429d      	cmp	r5, r3
    6432:	f080 80e9 	bcs.w	6608 <promisc_recover_hop_interval+0x5cc>
    6436:	2300      	movs	r3, #0
    6438:	9305      	str	r3, [sp, #20]
                if(time_array1[ta1] > time_array2[ta2]){
    643a:	4bac      	ldr	r3, [pc, #688]	; (66ec <promisc_recover_hop_interval+0x6b0>)
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    643c:	2625      	movs	r6, #37	; 0x25
                if(time_array1[ta1] > time_array2[ta2]){
    643e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6442:	9315      	str	r3, [sp, #84]	; 0x54
    6444:	e075      	b.n	6532 <promisc_recover_hop_interval+0x4f6>
    6446:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6448:	f8b3 4048 	ldrh.w	r4, [r3, #72]	; 0x48
    644c:	4ba7      	ldr	r3, [pc, #668]	; (66ec <promisc_recover_hop_interval+0x6b0>)
    644e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    6452:	f8b2 b0cc 	ldrh.w	fp, [r2, #204]	; 0xcc
    6456:	455c      	cmp	r4, fp
    6458:	d974      	bls.n	6544 <promisc_recover_hop_interval+0x508>
                    diff = (le.conn_interval*1.25*37) - time_array1[ta1] + time_array2[ta2];
    645a:	9808      	ldr	r0, [sp, #32]
    645c:	f003 ff1e 	bl	a29c <__aeabi_i2d>
    6460:	2200      	movs	r2, #0
    6462:	4ba3      	ldr	r3, [pc, #652]	; (66f0 <promisc_recover_hop_interval+0x6b4>)
    6464:	f003 ff80 	bl	a368 <__aeabi_dmul>
    6468:	2200      	movs	r2, #0
    646a:	4ba2      	ldr	r3, [pc, #648]	; (66f4 <promisc_recover_hop_interval+0x6b8>)
    646c:	f003 ff7c 	bl	a368 <__aeabi_dmul>
    6470:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6474:	4620      	mov	r0, r4
    6476:	f003 ff11 	bl	a29c <__aeabi_i2d>
    647a:	4602      	mov	r2, r0
    647c:	460b      	mov	r3, r1
    647e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6482:	f003 fdbd 	bl	a000 <__aeabi_dsub>
    6486:	e9cd 0102 	strd	r0, r1, [sp, #8]
    648a:	4658      	mov	r0, fp
    648c:	f003 ff06 	bl	a29c <__aeabi_i2d>
    6490:	4602      	mov	r2, r0
    6492:	460b      	mov	r3, r1
    6494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6498:	f003 fdb4 	bl	a004 <__adddf3>
    649c:	f004 f976 	bl	a78c <__aeabi_d2uiz>
    64a0:	b284      	uxth	r4, r0
                u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    64a2:	9808      	ldr	r0, [sp, #32]
    64a4:	f003 fefa 	bl	a29c <__aeabi_i2d>
    64a8:	2200      	movs	r2, #0
    64aa:	4b91      	ldr	r3, [pc, #580]	; (66f0 <promisc_recover_hop_interval+0x6b4>)
    64ac:	f003 ff5c 	bl	a368 <__aeabi_dmul>
    64b0:	2200      	movs	r2, #0
    64b2:	4b91      	ldr	r3, [pc, #580]	; (66f8 <promisc_recover_hop_interval+0x6bc>)
    64b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    64b8:	f003 ff56 	bl	a368 <__aeabi_dmul>
    64bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    64c0:	4620      	mov	r0, r4
    64c2:	f003 feeb 	bl	a29c <__aeabi_i2d>
    64c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    64ca:	f003 fd9b 	bl	a004 <__adddf3>
    64ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    64d2:	f004 f873 	bl	a5bc <__aeabi_ddiv>
    64d6:	f004 f959 	bl	a78c <__aeabi_d2uiz>
                if((idx2 - idx1) > 0){
    64da:	9b09      	ldr	r3, [sp, #36]	; 0x24
                u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    64dc:	b2c0      	uxtb	r0, r0
                if((idx2 - idx1) > 0){
    64de:	2b00      	cmp	r3, #0
                    hops = ((idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    64e0:	4b86      	ldr	r3, [pc, #536]	; (66fc <promisc_recover_hop_interval+0x6c0>)
    64e2:	bfc8      	it	gt
    64e4:	9a09      	ldrgt	r2, [sp, #36]	; 0x24
    64e6:	4418      	add	r0, r3
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    64e8:	bfd8      	it	le
    64ea:	9a12      	ldrle	r2, [sp, #72]	; 0x48
                    hops = ((idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    64ec:	f890 387c 	ldrb.w	r3, [r0, #2172]	; 0x87c
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    64f0:	4353      	muls	r3, r2
    64f2:	fb93 faf6 	sdiv	sl, r3, r6
    64f6:	fb06 3a1a 	mls	sl, r6, sl, r3
    64fa:	fa5f fa8a 	uxtb.w	sl, sl
                if ((hops > 4) && (hops < 17)){
    64fe:	f1aa 0305 	sub.w	r3, sl, #5
    6502:	2b0b      	cmp	r3, #11
    6504:	d810      	bhi.n	6528 <promisc_recover_hop_interval+0x4ec>
    6506:	2700      	movs	r7, #0
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    6508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    650a:	b2fb      	uxtb	r3, r7
    650c:	4293      	cmp	r3, r2
    650e:	9304      	str	r3, [sp, #16]
                        if(time_array2[ta2] > time_array3[ta3]){
    6510:	4b76      	ldr	r3, [pc, #472]	; (66ec <promisc_recover_hop_interval+0x6b0>)
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    6512:	db1b      	blt.n	654c <promisc_recover_hop_interval+0x510>
                     index += 1;
    6514:	2701      	movs	r7, #1
                     ch_hop[index] = hops;
    6516:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    651a:	f8a3 a118 	strh.w	sl, [r3, #280]	; 0x118
                     index += 1;
    651e:	f109 0301 	add.w	r3, r9, #1
    6522:	fa5f f983 	uxtb.w	r9, r3
    6526:	970a      	str	r7, [sp, #40]	; 0x28
    6528:	2101      	movs	r1, #1
    652a:	468e      	mov	lr, r1
    652c:	9b05      	ldr	r3, [sp, #20]
    652e:	3301      	adds	r3, #1
    6530:	9305      	str	r3, [sp, #20]
    6532:	f89d 2014 	ldrb.w	r2, [sp, #20]
            for( ta2 = 0; ta2 < count1-1; ta2++){
    6536:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6538:	429a      	cmp	r2, r3
    653a:	db84      	blt.n	6446 <promisc_recover_hop_interval+0x40a>
    653c:	3501      	adds	r5, #1
    653e:	b2ed      	uxtb	r5, r5
    6540:	2001      	movs	r0, #1
    6542:	e774      	b.n	642e <promisc_recover_hop_interval+0x3f2>
                    diff = time_array2[ta2] - time_array1[ta1];
    6544:	ebab 0404 	sub.w	r4, fp, r4
    6548:	b2a4      	uxth	r4, r4
    654a:	e7aa      	b.n	64a2 <promisc_recover_hop_interval+0x466>
                        if(time_array2[ta2] > time_array3[ta3]){
    654c:	9a04      	ldr	r2, [sp, #16]
    654e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    6552:	f8b3 40ee 	ldrh.w	r4, [r3, #238]	; 0xee
    6556:	45a3      	cmp	fp, r4
    6558:	d952      	bls.n	6600 <promisc_recover_hop_interval+0x5c4>
                            diff = (le.conn_interval*1.25*37) - time_array2[ta2] + time_array3[ta3];
    655a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    655e:	2200      	movs	r2, #0
    6560:	4b64      	ldr	r3, [pc, #400]	; (66f4 <promisc_recover_hop_interval+0x6b8>)
    6562:	f003 ff01 	bl	a368 <__aeabi_dmul>
    6566:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    656a:	4658      	mov	r0, fp
    656c:	f003 fe96 	bl	a29c <__aeabi_i2d>
    6570:	4602      	mov	r2, r0
    6572:	460b      	mov	r3, r1
    6574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6578:	f003 fd42 	bl	a000 <__aeabi_dsub>
    657c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    6580:	4620      	mov	r0, r4
    6582:	f003 fe8b 	bl	a29c <__aeabi_i2d>
    6586:	4602      	mov	r2, r0
    6588:	460b      	mov	r3, r1
    658a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    658e:	f003 fd39 	bl	a004 <__adddf3>
    6592:	f004 f8fb 	bl	a78c <__aeabi_d2uiz>
    6596:	b284      	uxth	r4, r0
                        u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    6598:	4620      	mov	r0, r4
    659a:	f003 fe7f 	bl	a29c <__aeabi_i2d>
    659e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    65a2:	f003 fd2f 	bl	a004 <__adddf3>
    65a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    65aa:	f004 f807 	bl	a5bc <__aeabi_ddiv>
    65ae:	f004 f8ed 	bl	a78c <__aeabi_d2uiz>
                        if((idx3 - idx2) > 0){
    65b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    65b4:	b2c0      	uxtb	r0, r0
                        if((idx3 - idx2) > 0){
    65b6:	2b00      	cmp	r3, #0
                            hops2 = ((idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    65b8:	4b50      	ldr	r3, [pc, #320]	; (66fc <promisc_recover_hop_interval+0x6c0>)
    65ba:	bfc8      	it	gt
    65bc:	9a0c      	ldrgt	r2, [sp, #48]	; 0x30
    65be:	4418      	add	r0, r3
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    65c0:	bfd8      	it	le
    65c2:	9a14      	ldrle	r2, [sp, #80]	; 0x50
                            hops2 = ((idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    65c4:	f890 387c 	ldrb.w	r3, [r0, #2172]	; 0x87c
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    65c8:	4353      	muls	r3, r2
    65ca:	fb93 f2f6 	sdiv	r2, r3, r6
    65ce:	fb06 3312 	mls	r3, r6, r2, r3
    65d2:	fa5f f883 	uxtb.w	r8, r3
                        if (hops2 == hops){
    65d6:	45d0      	cmp	r8, sl
    65d8:	d10e      	bne.n	65f8 <promisc_recover_hop_interval+0x5bc>
                              ch_hop[index] = hops;
    65da:	4b44      	ldr	r3, [pc, #272]	; (66ec <promisc_recover_hop_interval+0x6b0>)
    65dc:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    65e0:	f8a3 8118 	strh.w	r8, [r3, #280]	; 0x118
    65e4:	9b04      	ldr	r3, [sp, #16]
    65e6:	3301      	adds	r3, #1
    65e8:	b2db      	uxtb	r3, r3
    65ea:	930e      	str	r3, [sp, #56]	; 0x38
                              index += 1;
    65ec:	f109 0301 	add.w	r3, r9, #1
    65f0:	fa5f f983 	uxtb.w	r9, r3
    65f4:	2301      	movs	r3, #1
    65f6:	930f      	str	r3, [sp, #60]	; 0x3c
    65f8:	2301      	movs	r3, #1
    65fa:	3701      	adds	r7, #1
    65fc:	930d      	str	r3, [sp, #52]	; 0x34
    65fe:	e783      	b.n	6508 <promisc_recover_hop_interval+0x4cc>
                            diff = time_array3[ta3] - time_array2[ta2];
    6600:	eba4 040b 	sub.w	r4, r4, fp
    6604:	b2a4      	uxth	r4, r4
    6606:	e7c7      	b.n	6598 <promisc_recover_hop_interval+0x55c>
    6608:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    660a:	4b38      	ldr	r3, [pc, #224]	; (66ec <promisc_recover_hop_interval+0x6b0>)
    660c:	b10e      	cbz	r6, 6612 <promisc_recover_hop_interval+0x5d6>
    660e:	f883 9115 	strb.w	r9, [r3, #277]	; 0x115
    6612:	b109      	cbz	r1, 6618 <promisc_recover_hop_interval+0x5dc>
    6614:	f8a3 4112 	strh.w	r4, [r3, #274]	; 0x112
    6618:	990d      	ldr	r1, [sp, #52]	; 0x34
    661a:	b109      	cbz	r1, 6620 <promisc_recover_hop_interval+0x5e4>
    661c:	f883 8114 	strb.w	r8, [r3, #276]	; 0x114
    6620:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6622:	b119      	cbz	r1, 662c <promisc_recover_hop_interval+0x5f0>
    6624:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6628:	f883 1116 	strb.w	r1, [r3, #278]	; 0x116
    662c:	b11f      	cbz	r7, 6636 <promisc_recover_hop_interval+0x5fa>
    662e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    6632:	f883 1117 	strb.w	r1, [r3, #279]	; 0x117
    6636:	f1be 0f00 	cmp.w	lr, #0
    663a:	d001      	beq.n	6640 <promisc_recover_hop_interval+0x604>
    663c:	f883 a110 	strb.w	sl, [r3, #272]	; 0x110
    6640:	b118      	cbz	r0, 664a <promisc_recover_hop_interval+0x60e>
    6642:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    6646:	f883 510e 	strb.w	r5, [r3, #270]	; 0x10e
        for( j = 0; j< index; j++){
    664a:	2200      	movs	r2, #0
    664c:	4696      	mov	lr, r2
    664e:	4692      	mov	sl, r2
    6650:	4615      	mov	r5, r2
    6652:	482b      	ldr	r0, [pc, #172]	; (6700 <promisc_recover_hop_interval+0x6c4>)
    6654:	f893 c115 	ldrb.w	ip, [r3, #277]	; 0x115
    6658:	f8b0 4074 	ldrh.w	r4, [r0, #116]	; 0x74
    665c:	f8b3 715a 	ldrh.w	r7, [r3, #346]	; 0x15a
    6660:	f8b3 115c 	ldrh.w	r1, [r3, #348]	; 0x15c
    6664:	f893 815e 	ldrb.w	r8, [r3, #350]	; 0x15e
            val = ch_hop[j];
    6668:	f8df b098 	ldr.w	fp, [pc, #152]	; 6704 <promisc_recover_hop_interval+0x6c8>
        for( j = 0; j< index; j++){
    666c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    6670:	b2d6      	uxtb	r6, r2
    6672:	45b4      	cmp	ip, r6
    6674:	d818      	bhi.n	66a8 <promisc_recover_hop_interval+0x66c>
    6676:	b11d      	cbz	r5, 6680 <promisc_recover_hop_interval+0x644>
    6678:	f8a3 115c 	strh.w	r1, [r3, #348]	; 0x15c
    667c:	f883 815e 	strb.w	r8, [r3, #350]	; 0x15e
    6680:	f1ba 0f00 	cmp.w	sl, #0
    6684:	d001      	beq.n	668a <promisc_recover_hop_interval+0x64e>
    6686:	f8a0 4074 	strh.w	r4, [r0, #116]	; 0x74
    668a:	f1be 0f00 	cmp.w	lr, #0
    668e:	d001      	beq.n	6694 <promisc_recover_hop_interval+0x658>
    6690:	f8a3 715a 	strh.w	r7, [r3, #346]	; 0x15a
    6694:	b10d      	cbz	r5, 669a <promisc_recover_hop_interval+0x65e>
    6696:	f883 6158 	strb.w	r6, [r3, #344]	; 0x158
        le.channel_increment = max_val;
    669a:	f8b3 315a 	ldrh.w	r3, [r3, #346]	; 0x15a
    669e:	7583      	strb	r3, [r0, #22]
        calc = 6;
    66a0:	2306      	movs	r3, #6
    66a2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    66a6:	e5b2      	b.n	620e <promisc_recover_hop_interval+0x1d2>
            for( i = j; i < index; i++){
    66a8:	2500      	movs	r5, #0
            val = ch_hop[j];
    66aa:	f83b 8012 	ldrh.w	r8, [fp, r2, lsl #1]
            for( i = j; i < index; i++){
    66ae:	eb06 0905 	add.w	r9, r6, r5
    66b2:	fa5f f989 	uxtb.w	r9, r9
    66b6:	45e1      	cmp	r9, ip
    66b8:	d30e      	bcc.n	66d8 <promisc_recover_hop_interval+0x69c>
            if(curr_count > max_count){
    66ba:	428c      	cmp	r4, r1
    66bc:	bf26      	itte	cs
    66be:	46b8      	movcs	r8, r7
    66c0:	4621      	movcs	r1, r4
    66c2:	f04f 0e01 	movcc.w	lr, #1
            curr_count = 0;
    66c6:	4647      	mov	r7, r8
    66c8:	460c      	mov	r4, r1
    66ca:	bf38      	it	cc
    66cc:	46f2      	movcc	sl, lr
    66ce:	3201      	adds	r2, #1
    66d0:	2501      	movs	r5, #1
    66d2:	46e0      	mov	r8, ip
    66d4:	2100      	movs	r1, #0
    66d6:	e7cb      	b.n	6670 <promisc_recover_hop_interval+0x634>
                if(val == ch_hop[i]){
    66d8:	eb05 0902 	add.w	r9, r5, r2
    66dc:	f83b 9019 	ldrh.w	r9, [fp, r9, lsl #1]
    66e0:	3501      	adds	r5, #1
    66e2:	45c1      	cmp	r9, r8
                    curr_count++;
    66e4:	bf04      	itt	eq
    66e6:	3101      	addeq	r1, #1
    66e8:	b289      	uxtheq	r1, r1
    66ea:	e7e0      	b.n	66ae <promisc_recover_hop_interval+0x672>
    66ec:	10000a4c 	.word	0x10000a4c
    66f0:	3ff40000 	.word	0x3ff40000
    66f4:	40428000 	.word	0x40428000
    66f8:	3fe00000 	.word	0x3fe00000
    66fc:	0000ac34 	.word	0x0000ac34
    6700:	10000450 	.word	0x10000450
    6704:	10000b64 	.word	0x10000b64
    else if(calc == 6){
    6708:	2b06      	cmp	r3, #6
    670a:	f47f ad80 	bne.w	620e <promisc_recover_hop_interval+0x1d2>
        if(count3  == sync_count){
    670e:	f896 203c 	ldrb.w	r2, [r6, #60]	; 0x3c
    6712:	f896 3116 	ldrb.w	r3, [r6, #278]	; 0x116
    6716:	429a      	cmp	r2, r3
    6718:	f47f ad79 	bne.w	620e <promisc_recover_hop_interval+0x1d2>
            le.conn_count = 0;
    671c:	2400      	movs	r4, #0
            le.interval_timer = le.conn_interval / 2;
    671e:	8bfb      	ldrh	r3, [r7, #30]
	    le_promisc_state(3, &le.channel_increment, 1);    
    6720:	2201      	movs	r2, #1
            le.interval_timer = le.conn_interval / 2;
    6722:	085b      	lsrs	r3, r3, #1
	    le_promisc_state(3, &le.channel_increment, 1);    
    6724:	4913      	ldr	r1, [pc, #76]	; (6774 <promisc_recover_hop_interval+0x738>)
    6726:	2003      	movs	r0, #3
            le.interval_timer = le.conn_interval / 2;
    6728:	83bb      	strh	r3, [r7, #28]
            le.conn_epoch = 0;
    672a:	61bc      	str	r4, [r7, #24]
            le.conn_count = 0;
    672c:	843c      	strh	r4, [r7, #32]
	    le_promisc_state(3, &le.channel_increment, 1);    
    672e:	f7ff fa45 	bl	5bbc <le_promisc_state>
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    6732:	2125      	movs	r1, #37	; 0x25
    6734:	7dba      	ldrb	r2, [r7, #22]
    6736:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
            le.crc_verify = 0;
    673a:	613c      	str	r4, [r7, #16]
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    673c:	4413      	add	r3, r2
    673e:	fb93 f2f1 	sdiv	r2, r3, r1
    6742:	fb01 3312 	mls	r3, r1, r2, r3
    6746:	757b      	strb	r3, [r7, #21]
            le.link_state = LINK_CONNECTED;
    6748:	2303      	movs	r3, #3
            le_promisc_state(2, &le.conn_interval, 2);
    674a:	2202      	movs	r2, #2
	    send_clock = 1;
    674c:	2401      	movs	r4, #1
            le.link_state = LINK_CONNECTED;
    674e:	753b      	strb	r3, [r7, #20]
            hop_mode = HOP_BTLE;
    6750:	72b3      	strb	r3, [r6, #10]
            packet_cb = connection_follow_cb;
    6752:	4b09      	ldr	r3, [pc, #36]	; (6778 <promisc_recover_hop_interval+0x73c>)
            le_promisc_state(2, &le.conn_interval, 2);
    6754:	4610      	mov	r0, r2
    6756:	4909      	ldr	r1, [pc, #36]	; (677c <promisc_recover_hop_interval+0x740>)
	    send_clock = 1;
    6758:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
            packet_cb = connection_follow_cb;
    675c:	61b3      	str	r3, [r6, #24]
            le_promisc_state(2, &le.conn_interval, 2);
    675e:	f7ff fa2d 	bl	5bbc <le_promisc_state>
	    le_promisc_state(4, &le.channel_idx, 1);    
    6762:	4622      	mov	r2, r4
    6764:	2004      	movs	r0, #4
    6766:	4906      	ldr	r1, [pc, #24]	; (6780 <promisc_recover_hop_interval+0x744>)
}
    6768:	b017      	add	sp, #92	; 0x5c
    676a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    le_promisc_state(4, &le.channel_idx, 1);    
    676e:	f7ff ba25 	b.w	5bbc <le_promisc_state>
    6772:	bf00      	nop
    6774:	10000466 	.word	0x10000466
    6778:	0000437f 	.word	0x0000437f
    677c:	1000046e 	.word	0x1000046e
    6780:	10000465 	.word	0x10000465

00006784 <promisc_follow_cb>:


//sopan
void promisc_follow_cb(u8 *packet) {
    6784:	b570      	push	{r4, r5, r6, lr}
    //debug_printf("promisc_follow_cb\n");
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6786:	4d17      	ldr	r5, [pc, #92]	; (67e4 <promisc_follow_cb+0x60>)
    6788:	692c      	ldr	r4, [r5, #16]
    678a:	bb54      	cbnz	r4, 67e2 <promisc_follow_cb+0x5e>
    678c:	7903      	ldrb	r3, [r0, #4]
    678e:	2b01      	cmp	r3, #1
    6790:	d127      	bne.n	67e2 <promisc_follow_cb+0x5e>
    6792:	7943      	ldrb	r3, [r0, #5]
    6794:	bb2b      	cbnz	r3, 67e2 <promisc_follow_cb+0x5e>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6796:	79c3      	ldrb	r3, [r0, #7]
    6798:	7a02      	ldrb	r2, [r0, #8]
    679a:	7986      	ldrb	r6, [r0, #6]
    679c:	021b      	lsls	r3, r3, #8
    679e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    67a2:	1d01      	adds	r1, r0, #4
    67a4:	2202      	movs	r2, #2
    67a6:	ea43 0006 	orr.w	r0, r3, r6
    67aa:	f000 fed7 	bl	755c <btle_reverse_crc>
    67ae:	4622      	mov	r2, r4
    67b0:	60a8      	str	r0, [r5, #8]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    67b2:	fa20 f304 	lsr.w	r3, r0, r4
    67b6:	f1c4 0117 	rsb	r1, r4, #23
    67ba:	f003 0301 	and.w	r3, r3, #1
		for (i = 0; i < 24; ++i)
    67be:	3401      	adds	r4, #1
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    67c0:	408b      	lsls	r3, r1
		for (i = 0; i < 24; ++i)
    67c2:	2c18      	cmp	r4, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    67c4:	ea42 0203 	orr.w	r2, r2, r3
		for (i = 0; i < 24; ++i)
    67c8:	d1f3      	bne.n	67b2 <promisc_follow_cb+0x2e>
		le.crc_verify = 1;
    67ca:	2001      	movs	r0, #1
    67cc:	60ea      	str	r2, [r5, #12]
		packet_cb = promisc_recover_hop_interval;
    67ce:	4b06      	ldr	r3, [pc, #24]	; (67e8 <promisc_follow_cb+0x64>)
    67d0:	4a06      	ldr	r2, [pc, #24]	; (67ec <promisc_follow_cb+0x68>)
		le.crc_verify = 1;
    67d2:	6128      	str	r0, [r5, #16]
		packet_cb = promisc_recover_hop_interval;
    67d4:	619a      	str	r2, [r3, #24]
		le_promisc_state(1, &le.crc_init, 3);
    67d6:	4906      	ldr	r1, [pc, #24]	; (67f0 <promisc_follow_cb+0x6c>)
    67d8:	2203      	movs	r2, #3
	}
}
    67da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		le_promisc_state(1, &le.crc_init, 3);
    67de:	f7ff b9ed 	b.w	5bbc <le_promisc_state>
    67e2:	bd70      	pop	{r4, r5, r6, pc}
    67e4:	10000450 	.word	0x10000450
    67e8:	10000a4c 	.word	0x10000a4c
    67ec:	0000603d 	.word	0x0000603d
    67f0:	10000458 	.word	0x10000458

000067f4 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    67f4:	b530      	push	{r4, r5, lr}
    //debug_printf("see_aa\n");
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].aa == aa) {
    67f6:	4913      	ldr	r1, [pc, #76]	; (6844 <see_aa+0x50>)
	for (i = 0; i < AA_LIST_SIZE; ++i)
    67f8:	2300      	movs	r3, #0
    67fa:	460a      	mov	r2, r1
		if (le_promisc.active_aa[i].aa == aa) {
    67fc:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    6800:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
    6804:	4285      	cmp	r5, r0
    6806:	d103      	bne.n	6810 <see_aa+0x1c>
			++le_promisc.active_aa[i].count;
    6808:	6863      	ldr	r3, [r4, #4]
    680a:	3301      	adds	r3, #1
    680c:	6063      	str	r3, [r4, #4]
			return;
    680e:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6810:	3301      	adds	r3, #1
    6812:	2b20      	cmp	r3, #32
    6814:	d1f2      	bne.n	67fc <see_aa+0x8>
    6816:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    681a:	2300      	movs	r3, #0
    681c:	460c      	mov	r4, r1
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    681e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    6822:	686d      	ldr	r5, [r5, #4]
    6824:	42a5      	cmp	r5, r4
    6826:	db01      	blt.n	682c <see_aa+0x38>
    6828:	2c00      	cmp	r4, #0
    682a:	da01      	bge.n	6830 <see_aa+0x3c>
    682c:	4619      	mov	r1, r3
    682e:	462c      	mov	r4, r5
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6830:	3301      	adds	r3, #1
    6832:	2b20      	cmp	r3, #32
    6834:	d1f3      	bne.n	681e <see_aa+0x2a>
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
    6836:	2301      	movs	r3, #1
	le_promisc.active_aa[killme].aa = aa;
    6838:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    683c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6840:	6053      	str	r3, [r2, #4]
    6842:	bd30      	pop	{r4, r5, pc}
    6844:	100014a8 	.word	0x100014a8

00006848 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    684c:	b094      	sub	sp, #80	; 0x50
    
	int i, j, k;
	int idx;
	// empty data PDU: 01 00
	char desired[4][16] = {
    684e:	2240      	movs	r2, #64	; 0x40
int cb_le_promisc(char *unpacked) {
    6850:	4607      	mov	r7, r0
	char desired[4][16] = {
    6852:	2100      	movs	r1, #0
    6854:	a804      	add	r0, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];
    6856:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 6a08 <cb_le_promisc+0x1c0>
	char desired[4][16] = {
    685a:	f7fd fcd1 	bl	4200 <memset>
    685e:	2301      	movs	r3, #1
    6860:	2400      	movs	r4, #0
    6862:	4646      	mov	r6, r8
		idx = whitening_index[btle_channel_index(channel)];
    6864:	4d63      	ldr	r5, [pc, #396]	; (69f4 <cb_le_promisc+0x1ac>)
	char desired[4][16] = {
    6866:	f88d 3010 	strb.w	r3, [sp, #16]
    686a:	f88d 3020 	strb.w	r3, [sp, #32]
    686e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6872:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    6876:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    687a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    687e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6882:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		idx = whitening_index[btle_channel_index(channel)];
    6886:	f8b8 004c 	ldrh.w	r0, [r8, #76]	; 0x4c
    688a:	b280      	uxth	r0, r0
    688c:	f000 fe26 	bl	74dc <btle_channel_index>

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6890:	2200      	movs	r2, #0
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6892:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    6896:	a904      	add	r1, sp, #16
		idx = whitening_index[btle_channel_index(channel)];
    6898:	5c2b      	ldrb	r3, [r5, r0]
    689a:	1908      	adds	r0, r1, r4
			desired[i][j] ^= whitening[idx];
    689c:	eb05 0c03 	add.w	ip, r5, r3
    68a0:	5c81      	ldrb	r1, [r0, r2]
    68a2:	f89c c028 	ldrb.w	ip, [ip, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    68a6:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
    68a8:	ea81 010c 	eor.w	r1, r1, ip
    68ac:	5481      	strb	r1, [r0, r2]
			idx = (idx + 1) % sizeof(whitening);
    68ae:	fbb3 f1fe 	udiv	r1, r3, lr
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    68b2:	3201      	adds	r2, #1
			idx = (idx + 1) % sizeof(whitening);
    68b4:	ebc1 11c1 	rsb	r1, r1, r1, lsl #7
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    68b8:	2a10      	cmp	r2, #16
			idx = (idx + 1) % sizeof(whitening);
    68ba:	eba3 0301 	sub.w	r3, r3, r1
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    68be:	d1ed      	bne.n	689c <cb_le_promisc+0x54>
    68c0:	3410      	adds	r4, #16
	for (i = 0; i < 4; ++i) {
    68c2:	2c40      	cmp	r4, #64	; 0x40
    68c4:	d1df      	bne.n	6886 <cb_le_promisc+0x3e>
    68c6:	2420      	movs	r4, #32
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
    68c8:	f04f 087f 	mov.w	r8, #127	; 0x7f
		int ok[4] = { 1, 1, 1, 1 };
    68cc:	4b4a      	ldr	r3, [pc, #296]	; (69f8 <cb_le_promisc+0x1b0>)
    68ce:	46ee      	mov	lr, sp
    68d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    68d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		for (j = 0; j < 4; ++j) {
    68d6:	2300      	movs	r3, #0
					ok[j] = 0;
    68d8:	469c      	mov	ip, r3
				if (unpacked[i+k] != desired[j][k]) {
    68da:	1938      	adds	r0, r7, r4
    68dc:	aa04      	add	r2, sp, #16
    68de:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    68e2:	2200      	movs	r2, #0
    68e4:	e002      	b.n	68ec <cb_le_promisc+0xa4>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    68e6:	3201      	adds	r2, #1
    68e8:	2a10      	cmp	r2, #16
    68ea:	d007      	beq.n	68fc <cb_le_promisc+0xb4>
				if (unpacked[i+k] != desired[j][k]) {
    68ec:	f810 a002 	ldrb.w	sl, [r0, r2]
    68f0:	f811 9002 	ldrb.w	r9, [r1, r2]
    68f4:	45ca      	cmp	sl, r9
    68f6:	d0f6      	beq.n	68e6 <cb_le_promisc+0x9e>
					ok[j] = 0;
    68f8:	f84e c023 	str.w	ip, [lr, r3, lsl #2]
		for (j = 0; j < 4; ++j) {
    68fc:	3301      	adds	r3, #1
    68fe:	2b04      	cmp	r3, #4
    6900:	d1ec      	bne.n	68dc <cb_le_promisc+0x94>
    6902:	2300      	movs	r3, #0
			if (ok[j]) {
    6904:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
    6908:	2a00      	cmp	r2, #0
    690a:	d169      	bne.n	69e0 <cb_le_promisc+0x198>
		for (j = 0; j < 4; ++j) {
    690c:	3301      	adds	r3, #1
    690e:	2b04      	cmp	r3, #4
    6910:	d1f8      	bne.n	6904 <cb_le_promisc+0xbc>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    6912:	3401      	adds	r4, #1
    6914:	f5b4 7f3c 	cmp.w	r4, #752	; 0x2f0
    6918:	d1d8      	bne.n	68cc <cb_le_promisc+0x84>
    691a:	2400      	movs	r4, #0

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    691c:	4d37      	ldr	r5, [pc, #220]	; (69fc <cb_le_promisc+0x1b4>)
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    691e:	4f38      	ldr	r7, [pc, #224]	; (6a00 <cb_le_promisc+0x1b8>)
    6920:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 6a0c <cb_le_promisc+0x1c4>
		if (le_promisc.active_aa[i].count > 3) {
    6924:	1963      	adds	r3, r4, r5
    6926:	685b      	ldr	r3, [r3, #4]
    6928:	2b03      	cmp	r3, #3
    692a:	dd0e      	ble.n	694a <cb_le_promisc+0x102>
			le_set_access_address(le_promisc.active_aa[i].aa);
    692c:	5960      	ldr	r0, [r4, r5]
    692e:	f7fd fd27 	bl	4380 <le_set_access_address>
            //debug_printf("calling promisc_follow_cb\n");
			packet_cb = promisc_follow_cb;
    6932:	4b34      	ldr	r3, [pc, #208]	; (6a04 <cb_le_promisc+0x1bc>)
			le.crc_verify = 0;
    6934:	2000      	movs	r0, #0
			packet_cb = promisc_follow_cb;
    6936:	61bb      	str	r3, [r7, #24]
            le.target_set = 1;
    6938:	2301      	movs	r3, #1
			le_promisc_state(0, &le.access_address, 4);
    693a:	2204      	movs	r2, #4
    693c:	4932      	ldr	r1, [pc, #200]	; (6a08 <cb_le_promisc+0x1c0>)
			data_cb = cb_follow_le;
    693e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
			le.crc_verify = 0;
    6942:	6130      	str	r0, [r6, #16]
            le.target_set = 1;
    6944:	6473      	str	r3, [r6, #68]	; 0x44
			le_promisc_state(0, &le.access_address, 4);
    6946:	f7ff f939 	bl	5bbc <le_promisc_state>
    694a:	3408      	adds	r4, #8
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    694c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    6950:	d1e8      	bne.n	6924 <cb_le_promisc+0xdc>
			// quit using the old stuff and switch to sync mode
		}
	}
	return 1;
}
    6952:	2001      	movs	r0, #1
    6954:	b014      	add	sp, #80	; 0x50
    6956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				int bit = unpacked[offset];
    695a:	eb00 030c 	add.w	r3, r0, ip
    695e:	443b      	add	r3, r7
				if (j >= 4) { // unwhiten data bytes
    6960:	2a03      	cmp	r2, #3
				int bit = unpacked[offset];
    6962:	f813 3c20 	ldrb.w	r3, [r3, #-32]
				if (j >= 4) { // unwhiten data bytes
    6966:	dd0c      	ble.n	6982 <cb_le_promisc+0x13a>
					bit ^= whitening[idx];
    6968:	eb05 0a01 	add.w	sl, r5, r1
    696c:	f89a a028 	ldrb.w	sl, [sl, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    6970:	3101      	adds	r1, #1
					bit ^= whitening[idx];
    6972:	ea83 030a 	eor.w	r3, r3, sl
					idx = (idx + 1) % sizeof(whitening);
    6976:	fbb1 faf8 	udiv	sl, r1, r8
    697a:	ebca 1aca 	rsb	sl, sl, sl, lsl #7
    697e:	eba1 010a 	sub.w	r1, r1, sl
				byte |= bit << k;
    6982:	4083      	lsls	r3, r0
			for (k = 0; k < 8; k++) {
    6984:	3001      	adds	r0, #1
				byte |= bit << k;
    6986:	ea43 030e 	orr.w	r3, r3, lr
			for (k = 0; k < 8; k++) {
    698a:	2808      	cmp	r0, #8
				byte |= bit << k;
    698c:	fa5f fe83 	uxtb.w	lr, r3
			for (k = 0; k < 8; k++) {
    6990:	d1e3      	bne.n	695a <cb_le_promisc+0x112>
			idle_rxbuf[j] = byte;
    6992:	f8d9 3000 	ldr.w	r3, [r9]
    6996:	f803 e002 	strb.w	lr, [r3, r2]
		for (j = 0; j < 4+3+3; ++j) {
    699a:	3201      	adds	r2, #1
    699c:	2a0a      	cmp	r2, #10
    699e:	d005      	beq.n	69ac <cb_le_promisc+0x164>
    69a0:	f04f 0e00 	mov.w	lr, #0
    69a4:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
    69a8:	4670      	mov	r0, lr
    69aa:	e7d6      	b.n	695a <cb_le_promisc+0x112>
		u32 aa = (idle_rxbuf[3] << 24) |
    69ac:	f8d9 3000 	ldr.w	r3, [r9]
    69b0:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    69b2:	f8d9 3000 	ldr.w	r3, [r9]
    69b6:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    69b8:	f8d9 2000 	ldr.w	r2, [r9]
				 (idle_rxbuf[2] << 16) |
    69bc:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    69be:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    69c0:	f8d9 2000 	ldr.w	r2, [r9]
		u32 aa = (idle_rxbuf[3] << 24) |
    69c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[0]);
    69c8:	7812      	ldrb	r2, [r2, #0]
				 (idle_rxbuf[1] <<  8) |
    69ca:	4313      	orrs	r3, r2
		see_aa(aa);
    69cc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    69d0:	f7ff ff10 	bl	67f4 <see_aa>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    69d4:	f8d9 1000 	ldr.w	r1, [r9]
    69d8:	2001      	movs	r0, #1
    69da:	f7fd fd8b 	bl	44f4 <enqueue>
    69de:	e798      	b.n	6912 <cb_le_promisc+0xca>
		idx = whitening_index[btle_channel_index(channel)];
    69e0:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
			idle_rxbuf[j] = byte;
    69e4:	f8df 9028 	ldr.w	r9, [pc, #40]	; 6a10 <cb_le_promisc+0x1c8>
		idx = whitening_index[btle_channel_index(channel)];
    69e8:	b280      	uxth	r0, r0
    69ea:	f000 fd77 	bl	74dc <btle_channel_index>
		for (j = 0; j < 4+3+3; ++j) {
    69ee:	2200      	movs	r2, #0
		idx = whitening_index[btle_channel_index(channel)];
    69f0:	5c29      	ldrb	r1, [r5, r0]
    69f2:	e7d5      	b.n	69a0 <cb_le_promisc+0x158>
    69f4:	0000ac34 	.word	0x0000ac34
    69f8:	0000b4d8 	.word	0x0000b4d8
    69fc:	100014a8 	.word	0x100014a8
    6a00:	10000a4c 	.word	0x10000a4c
    6a04:	00006785 	.word	0x00006785
    6a08:	10000450 	.word	0x10000450
    6a0c:	00004639 	.word	0x00004639
    6a10:	10001684 	.word	0x10001684

00006a14 <bt_promisc_le>:

void bt_promisc_le() {
    6a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	while (requested_mode == MODE_BT_PROMISC_LE) {
    6a18:	4e1a      	ldr	r6, [pc, #104]	; (6a84 <bt_promisc_le+0x70>)
		reset_le_promisc();
		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1){
			le.crc_init_reversed = 0xa71541;
    6a1a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6a94 <bt_promisc_le+0x80>
    6a1e:	4637      	mov	r7, r6
	while (requested_mode == MODE_BT_PROMISC_LE) {
    6a20:	7cb3      	ldrb	r3, [r6, #18]
    6a22:	2b0a      	cmp	r3, #10
    6a24:	d001      	beq.n	6a2a <bt_promisc_le+0x16>
    6a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((channel & 1) == 1){
    6a2a:	4c17      	ldr	r4, [pc, #92]	; (6a88 <bt_promisc_le+0x74>)
		reset_le_promisc();
    6a2c:	f7fe ffb8 	bl	59a0 <reset_le_promisc>
		if ((channel & 1) == 1){
    6a30:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    6a34:	07db      	lsls	r3, r3, #31
    6a36:	d507      	bpl.n	6a48 <bt_promisc_le+0x34>
			channel = btle_channel_index_to_phys(idx1);// sopan
    6a38:	f896 010f 	ldrb.w	r0, [r6, #271]	; 0x10f
			le.crc_init_reversed = 0xa71541;
    6a3c:	f8c4 800c 	str.w	r8, [r4, #12]
			channel = btle_channel_index_to_phys(idx1);// sopan
    6a40:	f000 fd64 	bl	750c <btle_channel_index_to_phys>
    6a44:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
               		//debug_printf("Channel: %d\n", channel);
            	}

		if (!le.target_set) {
    6a48:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6a4a:	b94b      	cbnz	r3, 6a60 <bt_promisc_le+0x4c>
			cs_threshold_calc_and_set(channel);
    6a4c:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    6a50:	b280      	uxth	r0, r0
    6a52:	f000 ff25 	bl	78a0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6a56:	4b0d      	ldr	r3, [pc, #52]	; (6a8c <bt_promisc_le+0x78>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6a58:	200a      	movs	r0, #10
			data_cb = cb_le_promisc;
    6a5a:	633b      	str	r3, [r7, #48]	; 0x30
			bt_generic_le(MODE_BT_PROMISC_LE);
    6a5c:	f7fe ffb0 	bl	59c0 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    6a60:	7cbd      	ldrb	r5, [r7, #18]
    6a62:	b2ed      	uxtb	r5, r5
    6a64:	2d0a      	cmp	r5, #10
    6a66:	d1de      	bne.n	6a26 <bt_promisc_le+0x12>
			break;
		le_promisc_state(0, &le.access_address, 4);
    6a68:	2204      	movs	r2, #4
    6a6a:	4907      	ldr	r1, [pc, #28]	; (6a88 <bt_promisc_le+0x74>)
    6a6c:	2000      	movs	r0, #0
    6a6e:	f7ff f8a5 	bl	5bbc <le_promisc_state>
		packet_cb = promisc_follow_cb;
    6a72:	4b07      	ldr	r3, [pc, #28]	; (6a90 <bt_promisc_le+0x7c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6a74:	4628      	mov	r0, r5
		packet_cb = promisc_follow_cb;
    6a76:	61bb      	str	r3, [r7, #24]
		le.crc_verify = 0;
    6a78:	2300      	movs	r3, #0
    6a7a:	6123      	str	r3, [r4, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6a7c:	f7ff f8ba 	bl	5bf4 <bt_le_sync>
    6a80:	e7ce      	b.n	6a20 <bt_promisc_le+0xc>
    6a82:	bf00      	nop
    6a84:	10000a4c 	.word	0x10000a4c
    6a88:	10000450 	.word	0x10000450
    6a8c:	00006849 	.word	0x00006849
    6a90:	00006785 	.word	0x00006785
    6a94:	00a71541 	.word	0x00a71541

00006a98 <bt_transmit_le>:
	}
}

void bt_transmit_le(){
    6a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a9c:	b085      	sub	sp, #20
	
	clkn_start();
    6a9e:	f000 ff97 	bl	79d0 <clkn_start>

	uint8_t data[2] = {0x00,0x00};
    6aa2:	2300      	movs	r3, #0

	unsigned i, j;
	int bit;
	u8 txbuf[2];
	u8 byte;
	uint32_t sync = rbit(le.access_address);
    6aa4:	4c68      	ldr	r4, [pc, #416]	; (6c48 <bt_transmit_le+0x1b0>)
	uint8_t data[2] = {0x00,0x00};
    6aa6:	f88d 3008 	strb.w	r3, [sp, #8]
	uint32_t sync = rbit(le.access_address);
    6aaa:	6820      	ldr	r0, [r4, #0]
	uint8_t data[2] = {0x00,0x00};
    6aac:	f88d 3009 	strb.w	r3, [sp, #9]
	uint32_t sync = rbit(le.access_address);
    6ab0:	f002 fc0c 	bl	92cc <rbit>

	ISER0 = ISER0_ISE_USB;
	while (requested_mode == MODE_BT_TRANSMIT_LE) {
    6ab4:	4e65      	ldr	r6, [pc, #404]	; (6c4c <bt_transmit_le+0x1b4>)
	ISER0 = ISER0_ISE_USB;
    6ab6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	uint32_t sync = rbit(le.access_address);
    6aba:	4680      	mov	r8, r0
    6abc:	4637      	mov	r7, r6
	ISER0 = ISER0_ISE_USB;
    6abe:	4b64      	ldr	r3, [pc, #400]	; (6c50 <bt_transmit_le+0x1b8>)
    6ac0:	601a      	str	r2, [r3, #0]
			cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

			// set sync word to bit-reversed AA

			cc2400_set(SYNCL,   sync & 0xffff);
			cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    6ac2:	0c03      	lsrs	r3, r0, #16
    6ac4:	9301      	str	r3, [sp, #4]
	while (requested_mode == MODE_BT_TRANSMIT_LE) {
    6ac6:	7cb3      	ldrb	r3, [r6, #18]
    6ac8:	2b11      	cmp	r3, #17
    6aca:	d006      	beq.n	6ada <bt_transmit_le+0x42>
			do_transmit = 0;
			do_hop = 1;
		}
	}
	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6ad0:	4b60      	ldr	r3, [pc, #384]	; (6c54 <bt_transmit_le+0x1bc>)
    6ad2:	601a      	str	r2, [r3, #0]
}
    6ad4:	b005      	add	sp, #20
    6ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (do_hop)
    6ada:	7af3      	ldrb	r3, [r6, #11]
    6adc:	b10b      	cbz	r3, 6ae2 <bt_transmit_le+0x4a>
			hop();
    6ade:	f7fe fc53 	bl	5388 <hop>
		if(do_transmit){
    6ae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d0ed      	beq.n	6ac6 <bt_transmit_le+0x2e>
			int idx = whitening_index[btle_channel_index(channel)];
    6aea:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
			for (i = 0; i < len; ++i) {
    6aee:	2500      	movs	r5, #0
			int idx = whitening_index[btle_channel_index(channel)];
    6af0:	b280      	uxth	r0, r0
    6af2:	f000 fcf3 	bl	74dc <btle_channel_index>
					idx = (idx + 1) % sizeof(whitening);
    6af6:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
			int idx = whitening_index[btle_channel_index(channel)];
    6afa:	4957      	ldr	r1, [pc, #348]	; (6c58 <bt_transmit_le+0x1c0>)
    6afc:	f10d 0e0b 	add.w	lr, sp, #11
    6b00:	5c0b      	ldrb	r3, [r1, r0]
				byte = data[i];
    6b02:	aa02      	add	r2, sp, #8
    6b04:	f812 9005 	ldrb.w	r9, [r2, r5]
				txbuf[i] = 0;
    6b08:	f04f 0200 	mov.w	r2, #0
    6b0c:	2007      	movs	r0, #7
    6b0e:	f04f 0c00 	mov.w	ip, #0
    6b12:	f88e 2001 	strb.w	r2, [lr, #1]
					bit = (byte & 1) ^ whitening[idx];
    6b16:	18ca      	adds	r2, r1, r3
    6b18:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
    6b1c:	f009 0b01 	and.w	fp, r9, #1
    6b20:	ea8b 0202 	eor.w	r2, fp, r2
					idx = (idx + 1) % sizeof(whitening);
    6b24:	f103 0b01 	add.w	fp, r3, #1
    6b28:	fbbb f3fa 	udiv	r3, fp, sl
					txbuf[i] |= bit << (7 - j);
    6b2c:	4082      	lsls	r2, r0
					idx = (idx + 1) % sizeof(whitening);
    6b2e:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
					txbuf[i] |= bit << (7 - j);
    6b32:	ea42 020c 	orr.w	r2, r2, ip
				for (j = 0; j < 8; ++j) {
    6b36:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
					idx = (idx + 1) % sizeof(whitening);
    6b3a:	ebab 0303 	sub.w	r3, fp, r3
					byte >>= 1;
    6b3e:	ea4f 0959 	mov.w	r9, r9, lsr #1
					txbuf[i] |= bit << (7 - j);
    6b42:	fa5f fc82 	uxtb.w	ip, r2
				for (j = 0; j < 8; ++j) {
    6b46:	d2e6      	bcs.n	6b16 <bt_transmit_le+0x7e>
			for (i = 0; i < len; ++i) {
    6b48:	3501      	adds	r5, #1
    6b4a:	2d02      	cmp	r5, #2
    6b4c:	f80e cf01 	strb.w	ip, [lr, #1]!
    6b50:	d1d7      	bne.n	6b02 <bt_transmit_le+0x6a>
			cc2400_set(MANAND,  0x7fff);
    6b52:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6b56:	200d      	movs	r0, #13
    6b58:	f002 fcaf 	bl	94ba <cc2400_set>
			cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    6b5c:	f642 3122 	movw	r1, #11042	; 0x2b22
    6b60:	2012      	movs	r0, #18
    6b62:	f002 fcaa 	bl	94ba <cc2400_set>
			cc2400_set(MDMTST0, 0x134b);    // no PRNG
    6b66:	f241 314b 	movw	r1, #4939	; 0x134b
    6b6a:	2014      	movs	r0, #20
    6b6c:	f002 fca5 	bl	94ba <cc2400_set>
			cc2400_set(GRMDM,   0x0ce1);
    6b70:	f640 41e1 	movw	r1, #3297	; 0xce1
    6b74:	2020      	movs	r0, #32
    6b76:	f002 fca0 	bl	94ba <cc2400_set>
			cc2400_set(FSDIV,   channel);
    6b7a:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    6b7e:	4628      	mov	r0, r5
    6b80:	b289      	uxth	r1, r1
    6b82:	f002 fc9a 	bl	94ba <cc2400_set>
			cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6b86:	210b      	movs	r1, #11
    6b88:	2005      	movs	r0, #5
    6b8a:	f002 fc96 	bl	94ba <cc2400_set>
			cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6b8e:	2140      	movs	r1, #64	; 0x40
    6b90:	2003      	movs	r0, #3
    6b92:	f002 fc92 	bl	94ba <cc2400_set>
			cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    6b96:	2114      	movs	r1, #20
    6b98:	2023      	movs	r0, #35	; 0x23
    6b9a:	f002 fc8e 	bl	94ba <cc2400_set>
			cc2400_set(SYNCL,   sync & 0xffff);
    6b9e:	fa1f f188 	uxth.w	r1, r8
    6ba2:	202c      	movs	r0, #44	; 0x2c
    6ba4:	f002 fc89 	bl	94ba <cc2400_set>
			cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    6ba8:	9901      	ldr	r1, [sp, #4]
    6baa:	202d      	movs	r0, #45	; 0x2d
    6bac:	f002 fc85 	bl	94ba <cc2400_set>
			while (!(cc2400_status() & XOSC16M_STABLE));
    6bb0:	f002 fd1e 	bl	95f0 <cc2400_status>
    6bb4:	0642      	lsls	r2, r0, #25
    6bb6:	d5fb      	bpl.n	6bb0 <bt_transmit_le+0x118>
			cc2400_strobe(SFSON);
    6bb8:	2061      	movs	r0, #97	; 0x61
    6bba:	f002 fd20 	bl	95fe <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6bbe:	f002 fd17 	bl	95f0 <cc2400_status>
    6bc2:	0743      	lsls	r3, r0, #29
    6bc4:	d5fb      	bpl.n	6bbe <bt_transmit_le+0x126>
			TXLED_SET;
    6bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
    6bca:	4a24      	ldr	r2, [pc, #144]	; (6c5c <bt_transmit_le+0x1c4>)
    6bcc:	6013      	str	r3, [r2, #0]
			PAEN_SET;
    6bce:	2280      	movs	r2, #128	; 0x80
    6bd0:	4b23      	ldr	r3, [pc, #140]	; (6c60 <bt_transmit_le+0x1c8>)
    6bd2:	601a      	str	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6bd4:	200e      	movs	r0, #14
    6bd6:	f002 fc67 	bl	94a8 <cc2400_get>
    6bda:	f000 001f 	and.w	r0, r0, #31
    6bde:	280f      	cmp	r0, #15
    6be0:	d1f8      	bne.n	6bd4 <bt_transmit_le+0x13c>
			debug_printf("channel: %d	%d\n", channel, CLK100NS);
    6be2:	f640 4035 	movw	r0, #3125	; 0xc35
    6be6:	4b1f      	ldr	r3, [pc, #124]	; (6c64 <bt_transmit_le+0x1cc>)
    6be8:	4a1f      	ldr	r2, [pc, #124]	; (6c68 <bt_transmit_le+0x1d0>)
    6bea:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    6bee:	681b      	ldr	r3, [r3, #0]
    6bf0:	6812      	ldr	r2, [r2, #0]
    6bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6bf6:	fb00 2203 	mla	r2, r0, r3, r2
    6bfa:	b289      	uxth	r1, r1
    6bfc:	481b      	ldr	r0, [pc, #108]	; (6c6c <bt_transmit_le+0x1d4>)
    6bfe:	f002 f80f 	bl	8c20 <debug_printf>
			cc2400_fifo_write(len, txbuf);
    6c02:	2002      	movs	r0, #2
    6c04:	a903      	add	r1, sp, #12
    6c06:	f002 fc6b 	bl	94e0 <cc2400_fifo_write>
			cc2400_strobe(STX);
    6c0a:	2063      	movs	r0, #99	; 0x63
    6c0c:	f002 fcf7 	bl	95fe <cc2400_strobe>
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6c10:	200e      	movs	r0, #14
    6c12:	f002 fc49 	bl	94a8 <cc2400_get>
    6c16:	f000 001f 	and.w	r0, r0, #31
    6c1a:	280f      	cmp	r0, #15
    6c1c:	d1f8      	bne.n	6c10 <bt_transmit_le+0x178>
			TXLED_CLR;
    6c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c22:	4b13      	ldr	r3, [pc, #76]	; (6c70 <bt_transmit_le+0x1d8>)
			cc2400_strobe(SRFOFF);
    6c24:	2064      	movs	r0, #100	; 0x64
			TXLED_CLR;
    6c26:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRFOFF);
    6c28:	f002 fce9 	bl	95fe <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6c2c:	f002 fce0 	bl	95f0 <cc2400_status>
    6c30:	f010 0004 	ands.w	r0, r0, #4
    6c34:	d1fa      	bne.n	6c2c <bt_transmit_le+0x194>
			PAEN_CLR;
    6c36:	2280      	movs	r2, #128	; 0x80
    6c38:	4b0e      	ldr	r3, [pc, #56]	; (6c74 <bt_transmit_le+0x1dc>)
    6c3a:	601a      	str	r2, [r3, #0]
			do_hop = 1;
    6c3c:	2301      	movs	r3, #1
			do_transmit = 0;
    6c3e:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
			do_hop = 1;
    6c42:	72fb      	strb	r3, [r7, #11]
    6c44:	e73f      	b.n	6ac6 <bt_transmit_le+0x2e>
    6c46:	bf00      	nop
    6c48:	10000450 	.word	0x10000450
    6c4c:	10000a4c 	.word	0x10000a4c
    6c50:	e000e100 	.word	0xe000e100
    6c54:	e000e180 	.word	0xe000e180
    6c58:	0000ac34 	.word	0x0000ac34
    6c5c:	2009c038 	.word	0x2009c038
    6c60:	2009c058 	.word	0x2009c058
    6c64:	10001464 	.word	0x10001464
    6c68:	40004008 	.word	0x40004008
    6c6c:	0000b55f 	.word	0x0000b55f
    6c70:	2009c03c 	.word	0x2009c03c
    6c74:	2009c05c 	.word	0x2009c05c

00006c78 <bt_slave_le>:

void bt_slave_le() {
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	b088      	sub	sp, #32
	//debug_printf("Le adv\n");
	channel = btle_channel_index_to_phys(37);// for test
    6c7c:	2025      	movs	r0, #37	; 0x25
    6c7e:	f000 fc45 	bl	750c <btle_channel_index_to_phys>
	u32 calc_crc;
	int i;
	uint8_t adv_ind[26] = {0x00,0x15,0x31,0x56,0xAF,0x50,0xA0,0x00,0x02,0x01,0x06,0x07,0x09,0x63,0x61,0x70,0x6C,0x65,0x64,0x03,0x03,0x00,0x80,0x11,0xC0,0xCB};
    6c82:	aa01      	add	r2, sp, #4
    6c84:	4615      	mov	r5, r2
	channel = btle_channel_index_to_phys(37);// for test
    6c86:	4b19      	ldr	r3, [pc, #100]	; (6cec <bt_slave_le+0x74>)
    6c88:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	uint8_t adv_ind[26] = {0x00,0x15,0x31,0x56,0xAF,0x50,0xA0,0x00,0x02,0x01,0x06,0x07,0x09,0x63,0x61,0x70,0x6C,0x65,0x64,0x03,0x03,0x00,0x80,0x11,0xC0,0xCB};
    6c8c:	4b18      	ldr	r3, [pc, #96]	; (6cf0 <bt_slave_le+0x78>)
    6c8e:	f103 0618 	add.w	r6, r3, #24
    6c92:	4614      	mov	r4, r2
    6c94:	6818      	ldr	r0, [r3, #0]
    6c96:	6859      	ldr	r1, [r3, #4]
    6c98:	3308      	adds	r3, #8
    6c9a:	c403      	stmia	r4!, {r0, r1}
    6c9c:	42b3      	cmp	r3, r6
    6c9e:	4622      	mov	r2, r4
    6ca0:	d1f7      	bne.n	6c92 <bt_slave_le+0x1a>
    6ca2:	881b      	ldrh	r3, [r3, #0]
	// enable USB interrupts due to busy waits
	ISER0 = ISER0_ISE_USB;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		le_transmit(0x8e89bed6, adv_ind_len, adv_ind);
    6ca4:	4e13      	ldr	r6, [pc, #76]	; (6cf4 <bt_slave_le+0x7c>)
	uint8_t adv_ind[26] = {0x00,0x15,0x31,0x56,0xAF,0x50,0xA0,0x00,0x02,0x01,0x06,0x07,0x09,0x63,0x61,0x70,0x6C,0x65,0x64,0x03,0x03,0x00,0x80,0x11,0xC0,0xCB};
    6ca6:	8023      	strh	r3, [r4, #0]
	clkn_start();
    6ca8:	f000 fe92 	bl	79d0 <clkn_start>
	ISER0 = ISER0_ISE_USB;
    6cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6cb0:	4b11      	ldr	r3, [pc, #68]	; (6cf8 <bt_slave_le+0x80>)
	uint32_t now = (clkn & 0xffffff);
    6cb2:	4c12      	ldr	r4, [pc, #72]	; (6cfc <bt_slave_le+0x84>)
	ISER0 = ISER0_ISE_USB;
    6cb4:	601a      	str	r2, [r3, #0]
	while (requested_mode == MODE_BT_SLAVE_LE) {
    6cb6:	4b12      	ldr	r3, [pc, #72]	; (6d00 <bt_slave_le+0x88>)
    6cb8:	7c9b      	ldrb	r3, [r3, #18]
    6cba:	2b0c      	cmp	r3, #12
    6cbc:	d005      	beq.n	6cca <bt_slave_le+0x52>
		msleep(100);
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6cbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6cc2:	4b10      	ldr	r3, [pc, #64]	; (6d04 <bt_slave_le+0x8c>)
    6cc4:	601a      	str	r2, [r3, #0]
}
    6cc6:	b008      	add	sp, #32
    6cc8:	bd70      	pop	{r4, r5, r6, pc}
		le_transmit(0x8e89bed6, adv_ind_len, adv_ind);
    6cca:	462a      	mov	r2, r5
    6ccc:	211a      	movs	r1, #26
    6cce:	4630      	mov	r0, r6
    6cd0:	f7fe fa6c 	bl	51ac <le_transmit>
	uint32_t now = (clkn & 0xffffff);
    6cd4:	6823      	ldr	r3, [r4, #0]
    6cd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    6cda:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		while ((clkn & 0xffffff) < stop_at);
    6cde:	6822      	ldr	r2, [r4, #0]
    6ce0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6ce4:	4293      	cmp	r3, r2
    6ce6:	d8fa      	bhi.n	6cde <bt_slave_le+0x66>
    6ce8:	e7e5      	b.n	6cb6 <bt_slave_le+0x3e>
    6cea:	bf00      	nop
    6cec:	10000450 	.word	0x10000450
    6cf0:	0000b4e8 	.word	0x0000b4e8
    6cf4:	8e89bed6 	.word	0x8e89bed6
    6cf8:	e000e100 	.word	0xe000e100
    6cfc:	10001464 	.word	0x10001464
    6d00:	10000a4c 	.word	0x10000a4c
    6d04:	e000e180 	.word	0xe000e180

00006d08 <rx_generic_sync>:

void rx_generic_sync(void) {
    6d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d0a:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6d0c:	202d      	movs	r0, #45	; 0x2d
    6d0e:	f002 fbcb 	bl	94a8 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6d12:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6d14:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6d18:	202c      	movs	r0, #44	; 0x2c
	buf[0] = (reg_val >> 8) & 0xFF;
    6d1a:	f88d 3004 	strb.w	r3, [sp, #4]
	reg_val = cc2400_get(SYNCL);
    6d1e:	f002 fbc3 	bl	94a8 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6d22:	0a03      	lsrs	r3, r0, #8
    6d24:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6d28:	f88d 0007 	strb.w	r0, [sp, #7]

	usb_queue_init();
    6d2c:	f000 fcca 	bl	76c4 <usb_queue_init>
	clkn_start();
    6d30:	f000 fe4e 	bl	79d0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6d34:	f002 fc5c 	bl	95f0 <cc2400_status>
    6d38:	0641      	lsls	r1, r0, #25
    6d3a:	d5fb      	bpl.n	6d34 <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6d3c:	2061      	movs	r0, #97	; 0x61
    6d3e:	f002 fc5e 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6d42:	f002 fc55 	bl	95f0 <cc2400_status>
    6d46:	0742      	lsls	r2, r0, #29
    6d48:	d5fb      	bpl.n	6d42 <rx_generic_sync+0x3a>
	RXLED_SET;
    6d4a:	2210      	movs	r2, #16
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6d4c:	2180      	movs	r1, #128	; 0x80
	RXLED_SET;
    6d4e:	4c13      	ldr	r4, [pc, #76]	; (6d9c <rx_generic_sync+0x94>)
		HGM_SET;
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		USRLED_CLR;
    6d50:	2502      	movs	r5, #2
	RXLED_SET;
    6d52:	6022      	str	r2, [r4, #0]
		PAEN_SET;
    6d54:	4a12      	ldr	r2, [pc, #72]	; (6da0 <rx_generic_sync+0x98>)
		USRLED_CLR;
    6d56:	4f13      	ldr	r7, [pc, #76]	; (6da4 <rx_generic_sync+0x9c>)
		PAEN_SET;
    6d58:	6011      	str	r1, [r2, #0]
		HGM_SET;
    6d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;

		cc2400_fifo_read(len, buf+4);
		enqueue(BR_PACKET, buf);
		handle_usb(clkn);
    6d5e:	4e12      	ldr	r6, [pc, #72]	; (6da8 <rx_generic_sync+0xa0>)
		HGM_SET;
    6d60:	6011      	str	r1, [r2, #0]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6d62:	200e      	movs	r0, #14
    6d64:	f002 fba0 	bl	94a8 <cc2400_get>
    6d68:	f000 001f 	and.w	r0, r0, #31
    6d6c:	280f      	cmp	r0, #15
    6d6e:	d1f8      	bne.n	6d62 <rx_generic_sync+0x5a>
		cc2400_strobe(SRX);
    6d70:	2062      	movs	r0, #98	; 0x62
    6d72:	f002 fc44 	bl	95fe <cc2400_strobe>
		USRLED_CLR;
    6d76:	603d      	str	r5, [r7, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6d78:	f002 fc3a 	bl	95f0 <cc2400_status>
    6d7c:	06c3      	lsls	r3, r0, #27
    6d7e:	d5fb      	bpl.n	6d78 <rx_generic_sync+0x70>
		cc2400_fifo_read(len, buf+4);
    6d80:	a902      	add	r1, sp, #8
		USRLED_SET;
    6d82:	6025      	str	r5, [r4, #0]
		cc2400_fifo_read(len, buf+4);
    6d84:	2020      	movs	r0, #32
    6d86:	f002 fbef 	bl	9568 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6d8a:	a901      	add	r1, sp, #4
    6d8c:	2000      	movs	r0, #0
    6d8e:	f7fd fbb1 	bl	44f4 <enqueue>
		handle_usb(clkn);
    6d92:	6830      	ldr	r0, [r6, #0]
    6d94:	f000 fcf8 	bl	7788 <handle_usb>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6d98:	e7e3      	b.n	6d62 <rx_generic_sync+0x5a>
    6d9a:	bf00      	nop
    6d9c:	2009c038 	.word	0x2009c038
    6da0:	2009c058 	.word	0x2009c058
    6da4:	2009c03c 	.word	0x2009c03c
    6da8:	10001464 	.word	0x10001464

00006dac <rx_generic>:
	}
}

void rx_generic(void) {
    6dac:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6dae:	2020      	movs	r0, #32
    6db0:	f002 fb7a 	bl	94a8 <cc2400_get>
    6db4:	b108      	cbz	r0, 6dba <rx_generic+0xe>
		rx_generic_sync();
    6db6:	f7ff ffa7 	bl	6d08 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6dba:	2203      	movs	r2, #3
    6dbc:	4b02      	ldr	r3, [pc, #8]	; (6dc8 <rx_generic+0x1c>)
    6dbe:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_stream_rx();
    6dc4:	f7fe bbca 	b.w	555c <bt_stream_rx>
    6dc8:	10000a4c 	.word	0x10000a4c

00006dcc <tx_generic>:

void tx_generic(void) {
    6dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;

	mode = MODE_TX_GENERIC;
    6dd0:	2310      	movs	r3, #16
	u8 prev_mode = mode;
    6dd2:	4d35      	ldr	r5, [pc, #212]	; (6ea8 <tx_generic+0xdc>)

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6dd4:	202d      	movs	r0, #45	; 0x2d
	u8 prev_mode = mode;
    6dd6:	7c6e      	ldrb	r6, [r5, #17]
	mode = MODE_TX_GENERIC;
    6dd8:	746b      	strb	r3, [r5, #17]
	synch = cc2400_get(SYNCH);
    6dda:	f002 fb65 	bl	94a8 <cc2400_get>
    6dde:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6de0:	202c      	movs	r0, #44	; 0x2c
    6de2:	f002 fb61 	bl	94a8 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    6de6:	4c31      	ldr	r4, [pc, #196]	; (6eac <tx_generic+0xe0>)
	syncl = cc2400_get(SYNCL);
    6de8:	4607      	mov	r7, r0
	cc2400_set(SYNCH, tx_pkt.synch);
    6dea:	8821      	ldrh	r1, [r4, #0]
    6dec:	202d      	movs	r0, #45	; 0x2d
    6dee:	f002 fb64 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6df2:	8861      	ldrh	r1, [r4, #2]
    6df4:	202c      	movs	r0, #44	; 0x2c
    6df6:	f002 fb60 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6dfa:	2157      	movs	r1, #87	; 0x57
    6dfc:	2003      	movs	r0, #3
    6dfe:	f002 fb5c 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6e02:	f241 314b 	movw	r1, #4939	; 0x134b
    6e06:	2014      	movs	r0, #20
    6e08:	f002 fb57 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6e0c:	f640 7161 	movw	r1, #3937	; 0xf61
    6e10:	2020      	movs	r0, #32
    6e12:	f002 fb52 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6e16:	88a1      	ldrh	r1, [r4, #4]
    6e18:	2002      	movs	r0, #2
    6e1a:	f002 fb4e 	bl	94ba <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6e1e:	79e1      	ldrb	r1, [r4, #7]
    6e20:	2005      	movs	r0, #5
	u8 prev_mode = mode;
    6e22:	b2f6      	uxtb	r6, r6
	cc2400_set(FREND, tx_pkt.pa_level);
    6e24:	f002 fb49 	bl	94ba <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6e28:	f002 fbe2 	bl	95f0 <cc2400_status>
    6e2c:	0641      	lsls	r1, r0, #25
    6e2e:	d5fb      	bpl.n	6e28 <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6e30:	2061      	movs	r0, #97	; 0x61
    6e32:	f002 fbe4 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6e36:	f002 fbdb 	bl	95f0 <cc2400_status>
    6e3a:	0742      	lsls	r2, r0, #29
    6e3c:	d5fb      	bpl.n	6e36 <tx_generic+0x6a>
	TXLED_SET;
    6e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e42:	4b1b      	ldr	r3, [pc, #108]	; (6eb0 <tx_generic+0xe4>)
    6e44:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6e46:	2280      	movs	r2, #128	; 0x80
    6e48:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6e4a:	200e      	movs	r0, #14
    6e4c:	f002 fb2c 	bl	94a8 <cc2400_get>
    6e50:	f000 001f 	and.w	r0, r0, #31
    6e54:	280f      	cmp	r0, #15
    6e56:	d1f8      	bne.n	6e4a <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6e58:	79a0      	ldrb	r0, [r4, #6]
    6e5a:	4916      	ldr	r1, [pc, #88]	; (6eb4 <tx_generic+0xe8>)
    6e5c:	f002 fb40 	bl	94e0 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6e60:	2063      	movs	r0, #99	; 0x63
    6e62:	f002 fbcc 	bl	95fe <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6e66:	200e      	movs	r0, #14
    6e68:	f002 fb1e 	bl	94a8 <cc2400_get>
    6e6c:	f000 001f 	and.w	r0, r0, #31
    6e70:	280f      	cmp	r0, #15
    6e72:	d1f8      	bne.n	6e66 <tx_generic+0x9a>
	TXLED_CLR;
    6e74:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e78:	4b0f      	ldr	r3, [pc, #60]	; (6eb8 <tx_generic+0xec>)

	cc2400_strobe(SRFOFF);
    6e7a:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    6e7c:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    6e7e:	f002 fbbe 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6e82:	f002 fbb5 	bl	95f0 <cc2400_status>
    6e86:	0743      	lsls	r3, r0, #29
    6e88:	d4fb      	bmi.n	6e82 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6e8a:	2280      	movs	r2, #128	; 0x80
    6e8c:	4b0b      	ldr	r3, [pc, #44]	; (6ebc <tx_generic+0xf0>)
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6e8e:	4641      	mov	r1, r8
	PAEN_CLR;
    6e90:	601a      	str	r2, [r3, #0]
	cc2400_set(SYNCH, synch);
    6e92:	202d      	movs	r0, #45	; 0x2d
    6e94:	f002 fb11 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6e98:	4639      	mov	r1, r7
    6e9a:	202c      	movs	r0, #44	; 0x2c
    6e9c:	f002 fb0d 	bl	94ba <cc2400_set>
	requested_mode = prev_mode;
    6ea0:	74ae      	strb	r6, [r5, #18]
    6ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ea6:	bf00      	nop
    6ea8:	10000a4c 	.word	0x10000a4c
    6eac:	10001468 	.word	0x10001468
    6eb0:	2009c038 	.word	0x2009c038
    6eb4:	10001470 	.word	0x10001470
    6eb8:	2009c03c 	.word	0x2009c03c
    6ebc:	2009c05c 	.word	0x2009c05c

00006ec0 <specan>:
}

/* spectrum analysis */
void specan()
{
    6ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ec4:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    6ec6:	2210      	movs	r2, #16
    6ec8:	4b3c      	ldr	r3, [pc, #240]	; (6fbc <specan+0xfc>)
    6eca:	601a      	str	r2, [r3, #0]

	usb_queue_init();
    6ecc:	f000 fbfa 	bl	76c4 <usb_queue_init>
	clkn_start();
    6ed0:	f000 fd7e 	bl	79d0 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6ed4:	2280      	movs	r2, #128	; 0x80
    6ed6:	4b3a      	ldr	r3, [pc, #232]	; (6fc0 <specan+0x100>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6ed8:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6edc:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6ede:	2012      	movs	r0, #18
    6ee0:	f002 faeb 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6ee4:	f241 314b 	movw	r1, #4939	; 0x134b
    6ee8:	2014      	movs	r0, #20
    6eea:	f002 fae6 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6eee:	f240 1101 	movw	r1, #257	; 0x101
    6ef2:	2020      	movs	r0, #32
    6ef4:	f002 fae1 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6ef8:	2129      	movs	r1, #41	; 0x29
    6efa:	2003      	movs	r0, #3
    6efc:	f002 fadd 	bl	94ba <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6f00:	f002 fb76 	bl	95f0 <cc2400_status>
    6f04:	0641      	lsls	r1, r0, #25
    6f06:	d5fb      	bpl.n	6f00 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6f08:	f002 fb72 	bl	95f0 <cc2400_status>
    6f0c:	f010 0404 	ands.w	r4, r0, #4
    6f10:	d1fa      	bne.n	6f08 <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6f12:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6fc8 <specan+0x108>
		for (f = low_freq; f < high_freq + 1; f++) {
    6f16:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6fcc <specan+0x10c>
	while (requested_mode == MODE_SPECAN) {
    6f1a:	f899 3012 	ldrb.w	r3, [r9, #18]
    6f1e:	2b04      	cmp	r3, #4
    6f20:	d005      	beq.n	6f2e <specan+0x6e>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6f22:	2210      	movs	r2, #16
    6f24:	4b27      	ldr	r3, [pc, #156]	; (6fc4 <specan+0x104>)
    6f26:	601a      	str	r2, [r3, #0]
}
    6f28:	b00e      	add	sp, #56	; 0x38
    6f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (f = low_freq; f < high_freq + 1; f++) {
    6f2e:	f8b8 5052 	ldrh.w	r5, [r8, #82]	; 0x52
				handle_usb(clkn);
    6f32:	f8df a09c 	ldr.w	sl, [pc, #156]	; 6fd0 <specan+0x110>
		for (f = low_freq; f < high_freq + 1; f++) {
    6f36:	b2ad      	uxth	r5, r5
    6f38:	f8b8 3054 	ldrh.w	r3, [r8, #84]	; 0x54
    6f3c:	b29b      	uxth	r3, r3
    6f3e:	42ab      	cmp	r3, r5
    6f40:	dbeb      	blt.n	6f1a <specan+0x5a>
			cc2400_set(FSDIV, f - 1);
    6f42:	1e69      	subs	r1, r5, #1
    6f44:	2002      	movs	r0, #2
    6f46:	b289      	uxth	r1, r1
    6f48:	f002 fab7 	bl	94ba <cc2400_set>
			cc2400_strobe(SFSON);
    6f4c:	2061      	movs	r0, #97	; 0x61
    6f4e:	f002 fb56 	bl	95fe <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6f52:	f002 fb4d 	bl	95f0 <cc2400_status>
    6f56:	0742      	lsls	r2, r0, #29
    6f58:	d5fb      	bpl.n	6f52 <specan+0x92>
			cc2400_strobe(SRX);
    6f5a:	2062      	movs	r0, #98	; 0x62
    6f5c:	f002 fb4f 	bl	95fe <cc2400_strobe>
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6f60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6f64:	9300      	str	r3, [sp, #0]
    6f66:	9e00      	ldr	r6, [sp, #0]
    6f68:	3e01      	subs	r6, #1
    6f6a:	9600      	str	r6, [sp, #0]
    6f6c:	2e00      	cmp	r6, #0
    6f6e:	d1fa      	bne.n	6f66 <specan+0xa6>
			buf[3 * i] = (f >> 8) & 0xFF;
    6f70:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    6f74:	ab0e      	add	r3, sp, #56	; 0x38
    6f76:	441f      	add	r7, r3
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f78:	2006      	movs	r0, #6
			buf[3 * i] = (f >> 8) & 0xFF;
    6f7a:	0a2b      	lsrs	r3, r5, #8
    6f7c:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6f80:	f807 5c33 	strb.w	r5, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f84:	f002 fa90 	bl	94a8 <cc2400_get>
			i++;
    6f88:	3401      	adds	r4, #1
    6f8a:	b2e4      	uxtb	r4, r4
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f8c:	0a00      	lsrs	r0, r0, #8
			if (i == 16) {
    6f8e:	2c10      	cmp	r4, #16
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f90:	f807 0c32 	strb.w	r0, [r7, #-50]
			if (i == 16) {
    6f94:	d108      	bne.n	6fa8 <specan+0xe8>
				enqueue(SPECAN, buf);
    6f96:	a901      	add	r1, sp, #4
    6f98:	2004      	movs	r0, #4
    6f9a:	f7fd faab 	bl	44f4 <enqueue>
				handle_usb(clkn);
    6f9e:	f8da 0000 	ldr.w	r0, [sl]
    6fa2:	f000 fbf1 	bl	7788 <handle_usb>
				i = 0;
    6fa6:	4634      	mov	r4, r6
			cc2400_strobe(SRFOFF);
    6fa8:	2064      	movs	r0, #100	; 0x64
    6faa:	f002 fb28 	bl	95fe <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6fae:	f002 fb1f 	bl	95f0 <cc2400_status>
    6fb2:	0743      	lsls	r3, r0, #29
    6fb4:	d4fb      	bmi.n	6fae <specan+0xee>
		for (f = low_freq; f < high_freq + 1; f++) {
    6fb6:	3501      	adds	r5, #1
    6fb8:	b2ad      	uxth	r5, r5
    6fba:	e7bd      	b.n	6f38 <specan+0x78>
    6fbc:	2009c038 	.word	0x2009c038
    6fc0:	2009c058 	.word	0x2009c058
    6fc4:	2009c03c 	.word	0x2009c03c
    6fc8:	10000a4c 	.word	0x10000a4c
    6fcc:	10000450 	.word	0x10000450
    6fd0:	10001464 	.word	0x10001464

00006fd4 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    6fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fd6:	b085      	sub	sp, #20
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6fd8:	f640 136c 	movw	r3, #2412	; 0x96c
    6fdc:	f8ad 3008 	strh.w	r3, [sp, #8]
    6fe0:	f640 1385 	movw	r3, #2437	; 0x985
    6fe4:	f8ad 300a 	strh.w	r3, [sp, #10]
    6fe8:	f640 139e 	movw	r3, #2462	; 0x99e
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6fec:	2280      	movs	r2, #128	; 0x80
	u16 channels[3] = {2412, 2437, 2462};
    6fee:	f8ad 300c 	strh.w	r3, [sp, #12]
	PAEN_SET;
    6ff2:	4b3f      	ldr	r3, [pc, #252]	; (70f0 <led_specan+0x11c>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6ff4:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6ff8:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6ffa:	2012      	movs	r0, #18
    6ffc:	f002 fa5d 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7000:	f241 314b 	movw	r1, #4939	; 0x134b
    7004:	2014      	movs	r0, #20
    7006:	f002 fa58 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    700a:	f240 1101 	movw	r1, #257	; 0x101
    700e:	2020      	movs	r0, #32
    7010:	f002 fa53 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7014:	2129      	movs	r1, #41	; 0x29
    7016:	2003      	movs	r0, #3
    7018:	f002 fa4f 	bl	94ba <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    701c:	21f1      	movs	r1, #241	; 0xf1
    701e:	2006      	movs	r0, #6
    7020:	f002 fa4b 	bl	94ba <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7024:	f002 fae4 	bl	95f0 <cc2400_status>
    7028:	0641      	lsls	r1, r0, #25
    702a:	d5fb      	bpl.n	7024 <led_specan+0x50>
	while ((cc2400_status() & FS_LOCK));
    702c:	f002 fae0 	bl	95f0 <cc2400_status>
    7030:	f010 0404 	ands.w	r4, r0, #4
    7034:	d1fa      	bne.n	702c <led_specan+0x58>

	while (requested_mode == MODE_LED_SPECAN) {
    7036:	4f2f      	ldr	r7, [pc, #188]	; (70f4 <led_specan+0x120>)
			switch (i) {
				case 0:
					TXLED_CLR;
					break;
				case 1:
					RXLED_CLR;
    7038:	4d2f      	ldr	r5, [pc, #188]	; (70f8 <led_specan+0x124>)
					RXLED_SET;
    703a:	4e30      	ldr	r6, [pc, #192]	; (70fc <led_specan+0x128>)
	while (requested_mode == MODE_LED_SPECAN) {
    703c:	7cbb      	ldrb	r3, [r7, #18]
    703e:	2b07      	cmp	r3, #7
    7040:	d001      	beq.n	7046 <led_specan+0x72>
		handle_usb(clkn);

		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
}
    7042:	b005      	add	sp, #20
    7044:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cc2400_set(FSDIV, channels[i] - 1);
    7046:	ab04      	add	r3, sp, #16
    7048:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    704c:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    7050:	2002      	movs	r0, #2
    7052:	3901      	subs	r1, #1
    7054:	b289      	uxth	r1, r1
    7056:	f002 fa30 	bl	94ba <cc2400_set>
		cc2400_strobe(SFSON);
    705a:	2061      	movs	r0, #97	; 0x61
    705c:	f002 facf 	bl	95fe <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7060:	f002 fac6 	bl	95f0 <cc2400_status>
    7064:	0742      	lsls	r2, r0, #29
    7066:	d5fb      	bpl.n	7060 <led_specan+0x8c>
		cc2400_strobe(SRX);
    7068:	2062      	movs	r0, #98	; 0x62
    706a:	f002 fac8 	bl	95fe <cc2400_strobe>
		volatile u32 j = 500; while (--j); //FIXME crude delay
    706e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7072:	9301      	str	r3, [sp, #4]
    7074:	9b01      	ldr	r3, [sp, #4]
    7076:	3b01      	subs	r3, #1
    7078:	9301      	str	r3, [sp, #4]
    707a:	2b00      	cmp	r3, #0
    707c:	d1fa      	bne.n	7074 <led_specan+0xa0>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    707e:	2006      	movs	r0, #6
    7080:	f002 fa12 	bl	94a8 <cc2400_get>
		if (lvl > rssi_threshold) {
    7084:	4b1e      	ldr	r3, [pc, #120]	; (7100 <led_specan+0x12c>)
    7086:	f340 2007 	sbfx	r0, r0, #8, #8
    708a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
    708e:	b25b      	sxtb	r3, r3
    7090:	4298      	cmp	r0, r3
    7092:	dd20      	ble.n	70d6 <led_specan+0x102>
			switch (i) {
    7094:	2c01      	cmp	r4, #1
    7096:	d01a      	beq.n	70ce <led_specan+0xfa>
    7098:	d315      	bcc.n	70c6 <led_specan+0xf2>
    709a:	2c02      	cmp	r4, #2
    709c:	d019      	beq.n	70d2 <led_specan+0xfe>
		i = (i+1) % 3;
    709e:	2303      	movs	r3, #3
    70a0:	3401      	adds	r4, #1
    70a2:	fb94 f3f3 	sdiv	r3, r4, r3
    70a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    70aa:	1ae4      	subs	r4, r4, r3
		handle_usb(clkn);
    70ac:	4b15      	ldr	r3, [pc, #84]	; (7104 <led_specan+0x130>)
		i = (i+1) % 3;
    70ae:	b2e4      	uxtb	r4, r4
		handle_usb(clkn);
    70b0:	6818      	ldr	r0, [r3, #0]
    70b2:	f000 fb69 	bl	7788 <handle_usb>
		cc2400_strobe(SRFOFF);
    70b6:	2064      	movs	r0, #100	; 0x64
    70b8:	f002 faa1 	bl	95fe <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    70bc:	f002 fa98 	bl	95f0 <cc2400_status>
    70c0:	0743      	lsls	r3, r0, #29
    70c2:	d4fb      	bmi.n	70bc <led_specan+0xe8>
    70c4:	e7ba      	b.n	703c <led_specan+0x68>
					TXLED_SET;
    70c6:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_SET;
    70ca:	6033      	str	r3, [r6, #0]
					break;
    70cc:	e7e7      	b.n	709e <led_specan+0xca>
					RXLED_SET;
    70ce:	2310      	movs	r3, #16
    70d0:	e7fb      	b.n	70ca <led_specan+0xf6>
					USRLED_SET;
    70d2:	6034      	str	r4, [r6, #0]
					break;
    70d4:	e7e3      	b.n	709e <led_specan+0xca>
			switch (i) {
    70d6:	2c01      	cmp	r4, #1
    70d8:	d008      	beq.n	70ec <led_specan+0x118>
    70da:	d303      	bcc.n	70e4 <led_specan+0x110>
    70dc:	2c02      	cmp	r4, #2
    70de:	d1de      	bne.n	709e <led_specan+0xca>
					USRLED_CLR;
    70e0:	602c      	str	r4, [r5, #0]
					break;
    70e2:	e7dc      	b.n	709e <led_specan+0xca>
					TXLED_CLR;
    70e4:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_CLR;
    70e8:	602b      	str	r3, [r5, #0]
					break;
    70ea:	e7d8      	b.n	709e <led_specan+0xca>
					RXLED_CLR;
    70ec:	2310      	movs	r3, #16
    70ee:	e7fb      	b.n	70e8 <led_specan+0x114>
    70f0:	2009c058 	.word	0x2009c058
    70f4:	10000a4c 	.word	0x10000a4c
    70f8:	2009c03c 	.word	0x2009c03c
    70fc:	2009c038 	.word	0x2009c038
    7100:	10000450 	.word	0x10000450
    7104:	10001464 	.word	0x10001464

00007108 <main>:

int main()
{
    7108:	b508      	push	{r3, lr}
	ubertooth_init();
    710a:	f002 fb35 	bl	9778 <ubertooth_init>
	clkn_init();
    710e:	f000 fc65 	bl	79dc <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7112:	4846      	ldr	r0, [pc, #280]	; (722c <main+0x124>)
    7114:	f000 fab0 	bl	7678 <ubertooth_usb_init>
	debug_uart_init(0);
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);

	while (1) {
		handle_usb(clkn);
		if(requested_mode != mode) {
    7118:	4d45      	ldr	r5, [pc, #276]	; (7230 <main+0x128>)
	cc2400_idle();
    711a:	f7fd fa37 	bl	458c <cc2400_idle>
	dma_poweron();
    711e:	f000 fc71 	bl	7a04 <dma_poweron>
	debug_uart_init(0);
    7122:	2000      	movs	r0, #0
    7124:	f001 fd1e 	bl	8b64 <debug_uart_init>
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);
    7128:	4942      	ldr	r1, [pc, #264]	; (7234 <main+0x12c>)
    712a:	4843      	ldr	r0, [pc, #268]	; (7238 <main+0x130>)
    712c:	f001 fd78 	bl	8c20 <debug_printf>
    7130:	462c      	mov	r4, r5
		handle_usb(clkn);
    7132:	4e42      	ldr	r6, [pc, #264]	; (723c <main+0x134>)
    7134:	6830      	ldr	r0, [r6, #0]
    7136:	f000 fb27 	bl	7788 <handle_usb>
		if(requested_mode != mode) {
    713a:	7caa      	ldrb	r2, [r5, #18]
    713c:	7c6b      	ldrb	r3, [r5, #17]
    713e:	429a      	cmp	r2, r3
    7140:	d0f8      	beq.n	7134 <main+0x2c>
			switch (requested_mode) {
    7142:	7cab      	ldrb	r3, [r5, #18]
    7144:	2b11      	cmp	r3, #17
    7146:	d8f5      	bhi.n	7134 <main+0x2c>
    7148:	a201      	add	r2, pc, #4	; (adr r2, 7150 <main+0x48>)
    714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    714e:	bf00      	nop
    7150:	00007225 	.word	0x00007225
    7154:	000071af 	.word	0x000071af
    7158:	000071b3 	.word	0x000071b3
    715c:	000071d3 	.word	0x000071d3
    7160:	000071fd 	.word	0x000071fd
    7164:	000071e1 	.word	0x000071e1
    7168:	000071f1 	.word	0x000071f1
    716c:	00007203 	.word	0x00007203
    7170:	000071bd 	.word	0x000071bd
    7174:	00007135 	.word	0x00007135
    7178:	000071c1 	.word	0x000071c1
    717c:	00007199 	.word	0x00007199
    7180:	000071c7 	.word	0x000071c7
    7184:	00007209 	.word	0x00007209
    7188:	000071a5 	.word	0x000071a5
    718c:	00007215 	.word	0x00007215
    7190:	0000721f 	.word	0x0000721f
    7194:	000071cd 	.word	0x000071cd
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7198:	2001      	movs	r0, #1
    719a:	f002 f8b1 	bl	9300 <wait>
					reset();
    719e:	f002 faf5 	bl	978c <reset>
					break;
    71a2:	e7c7      	b.n	7134 <main+0x2c>
				case MODE_AFH:
					mode = MODE_AFH;
    71a4:	230e      	movs	r3, #14
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    71a6:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    71a8:	f7fe f9d8 	bl	555c <bt_stream_rx>
					break;
    71ac:	e7c2      	b.n	7134 <main+0x2c>
					mode = MODE_RX_SYMBOLS;
    71ae:	2301      	movs	r3, #1
    71b0:	e7f9      	b.n	71a6 <main+0x9e>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    71b2:	2302      	movs	r3, #2
    71b4:	7463      	strb	r3, [r4, #17]
					br_transmit();
    71b6:	f7fe fa89 	bl	56cc <br_transmit>
					break;
    71ba:	e7bb      	b.n	7134 <main+0x2c>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    71bc:	2308      	movs	r3, #8
    71be:	e7f2      	b.n	71a6 <main+0x9e>
				case MODE_BT_FOLLOW_LE:
					//mode = MODE_BT_FOLLOW_LE;
					//bt_follow_le();
					break;
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    71c0:	f7ff fc28 	bl	6a14 <bt_promisc_le>
					break;
    71c4:	e7b6      	b.n	7134 <main+0x2c>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    71c6:	f7ff fd57 	bl	6c78 <bt_slave_le>
					break;
    71ca:	e7b3      	b.n	7134 <main+0x2c>
				case MODE_BT_TRANSMIT_LE:
					bt_transmit_le();
    71cc:	f7ff fc64 	bl	6a98 <bt_transmit_le>
					break;
    71d0:	e7b0      	b.n	7134 <main+0x2c>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    71d2:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    71d4:	491a      	ldr	r1, [pc, #104]	; (7240 <main+0x138>)
    71d6:	4628      	mov	r0, r5
					mode = MODE_TX_TEST;
    71d8:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    71da:	f001 fa25 	bl	8628 <cc2400_txtest>
					break;
    71de:	e7a9      	b.n	7134 <main+0x2c>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    71e0:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    71e2:	4817      	ldr	r0, [pc, #92]	; (7240 <main+0x138>)
					mode = MODE_RANGE_TEST;
    71e4:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    71e6:	f001 f817 	bl	8218 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    71ea:	2300      	movs	r3, #0
    71ec:	74a3      	strb	r3, [r4, #18]
					break;
    71ee:	e7a1      	b.n	7134 <main+0x2c>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    71f0:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    71f2:	4813      	ldr	r0, [pc, #76]	; (7240 <main+0x138>)
					mode = MODE_REPEATER;
    71f4:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    71f6:	f001 f959 	bl	84ac <cc2400_repeater>
					break;
    71fa:	e79b      	b.n	7134 <main+0x2c>
				case MODE_SPECAN:
					specan();
    71fc:	f7ff fe60 	bl	6ec0 <specan>
					break;
    7200:	e798      	b.n	7134 <main+0x2c>
				case MODE_LED_SPECAN:
					led_specan();
    7202:	f7ff fee7 	bl	6fd4 <led_specan>
					break;
    7206:	e795      	b.n	7134 <main+0x2c>
				case MODE_EGO:
					mode = MODE_EGO;
    7208:	230d      	movs	r3, #13
    720a:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    720c:	7d20      	ldrb	r0, [r4, #20]
    720e:	f001 fc6b 	bl	8ae8 <ego_main>
					break;
    7212:	e78f      	b.n	7134 <main+0x2c>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    7214:	230f      	movs	r3, #15
    7216:	7463      	strb	r3, [r4, #17]
					rx_generic();
    7218:	f7ff fdc8 	bl	6dac <rx_generic>
					break;
    721c:	e78a      	b.n	7134 <main+0x2c>
				case MODE_TX_GENERIC:
					tx_generic();
    721e:	f7ff fdd5 	bl	6dcc <tx_generic>
					break;
    7222:	e787      	b.n	7134 <main+0x2c>
				case MODE_IDLE:
					cc2400_idle();
    7224:	f7fd f9b2 	bl	458c <cc2400_idle>
					break;
    7228:	e784      	b.n	7134 <main+0x2c>
    722a:	bf00      	nop
    722c:	00004751 	.word	0x00004751
    7230:	10000a4c 	.word	0x10000a4c
    7234:	0000acdb 	.word	0x0000acdb
    7238:	0000b56f 	.word	0x0000b56f
    723c:	10001464 	.word	0x10001464
    7240:	1000049c 	.word	0x1000049c

00007244 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    7244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;
    7248:	2000      	movs	r0, #0
    724a:	2100      	movs	r1, #0
    724c:	4a45      	ldr	r2, [pc, #276]	; (7364 <precalc+0x120>)

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    724e:	4c46      	ldr	r4, [pc, #280]	; (7368 <precalc+0x124>)
	syncword = 0;
    7250:	e9c2 0100 	strd	r0, r1, [r2]
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    7254:	254f      	movs	r5, #79	; 0x4f
	syncword = 0;
    7256:	2200      	movs	r2, #0
    7258:	4620      	mov	r0, r4
	address = target.address & 0xffffffff;
    725a:	4b44      	ldr	r3, [pc, #272]	; (736c <precalc+0x128>)
    725c:	681b      	ldr	r3, [r3, #0]
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    725e:	0056      	lsls	r6, r2, #1
    7260:	fb96 f1f5 	sdiv	r1, r6, r5
    7264:	fb05 6111 	mls	r1, r5, r1, r6
    7268:	5511      	strb	r1, [r2, r4]
    726a:	3201      	adds	r2, #1
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    726c:	2a4f      	cmp	r2, #79	; 0x4f
    726e:	d1f6      	bne.n	725e <precalc+0x1a>
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    7270:	4a3f      	ldr	r2, [pc, #252]	; (7370 <precalc+0x12c>)
    7272:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    7276:	7011      	strb	r1, [r2, #0]
	b = (address >> 19) & 0x0f;
    7278:	4a3e      	ldr	r2, [pc, #248]	; (7374 <precalc+0x130>)
    727a:	f3c3 41c3 	ubfx	r1, r3, #19, #4
	c1 = ((address >> 4) & 0x10) +
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
    727e:	f3c3 0787 	ubfx	r7, r3, #2, #8
		((address >> 1) & 0x02) +
    7282:	f3c3 0647 	ubfx	r6, r3, #1, #8
	b = (address >> 19) & 0x0f;
    7286:	7011      	strb	r1, [r2, #0]
	c1 = ((address >> 4) & 0x10) +
    7288:	f3c3 1507 	ubfx	r5, r3, #4, #8
		((address >> 3) & 0x08) +
    728c:	f3c3 01c7 	ubfx	r1, r3, #3, #8
		((address >> 1) & 0x02) +
    7290:	f006 0202 	and.w	r2, r6, #2
		((address >> 2) & 0x04) +
    7294:	f007 0404 	and.w	r4, r7, #4
		((address >> 1) & 0x02) +
    7298:	4314      	orrs	r4, r2
		((address >> 3) & 0x08) +
    729a:	f001 0e08 	and.w	lr, r1, #8
	c1 = ((address >> 4) & 0x10) +
    729e:	f005 0210 	and.w	r2, r5, #16
    72a2:	ea42 020e 	orr.w	r2, r2, lr
		((address >> 1) & 0x02) +
    72a6:	4414      	add	r4, r2
		(address & 0x01);
    72a8:	f003 0201 	and.w	r2, r3, #1
		((address >> 1) & 0x02) +
    72ac:	4414      	add	r4, r2
	c1 = ((address >> 4) & 0x10) +
    72ae:	4a32      	ldr	r2, [pc, #200]	; (7378 <precalc+0x134>)
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    72b0:	f001 0104 	and.w	r1, r1, #4
	c1 = ((address >> 4) & 0x10) +
    72b4:	7014      	strb	r4, [r2, #0]
	d1 = (address >> 10) & 0x1ff;
    72b6:	4a31      	ldr	r2, [pc, #196]	; (737c <precalc+0x138>)
    72b8:	f3c3 2488 	ubfx	r4, r3, #10, #9
    72bc:	8014      	strh	r4, [r2, #0]
		((address >> 2) & 0x02) +
    72be:	f007 0702 	and.w	r7, r7, #2
	e = ((address >> 7) & 0x40) +
    72c2:	09da      	lsrs	r2, r3, #7
		((address >> 6) & 0x20) +
    72c4:	099c      	lsrs	r4, r3, #6
	e = ((address >> 7) & 0x40) +
    72c6:	f002 0240 	and.w	r2, r2, #64	; 0x40
		((address >> 6) & 0x20) +
    72ca:	f004 0420 	and.w	r4, r4, #32
		((address >> 2) & 0x02) +
    72ce:	4339      	orrs	r1, r7
		((address >> 1) & 0x01);
    72d0:	f006 0601 	and.w	r6, r6, #1
		((address >> 5) & 0x10) +
    72d4:	095b      	lsrs	r3, r3, #5
	e = ((address >> 7) & 0x40) +
    72d6:	4322      	orrs	r2, r4
		((address >> 2) & 0x02) +
    72d8:	4431      	add	r1, r6
		((address >> 5) & 0x10) +
    72da:	f003 0310 	and.w	r3, r3, #16
		((address >> 4) & 0x08) +
    72de:	f005 0508 	and.w	r5, r5, #8
		((address >> 2) & 0x02) +
    72e2:	440a      	add	r2, r1
    72e4:	432b      	orrs	r3, r5
    72e6:	4413      	add	r3, r2
	e = ((address >> 7) & 0x40) +
    72e8:	4a25      	ldr	r2, [pc, #148]	; (7380 <precalc+0x13c>)
    72ea:	7013      	strb	r3, [r2, #0]

	if(afh_enabled) {
    72ec:	4b25      	ldr	r3, [pc, #148]	; (7384 <precalc+0x140>)
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	b363      	cbz	r3, 734c <precalc+0x108>
    72f2:	2200      	movs	r2, #0
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    72f4:	4f24      	ldr	r7, [pc, #144]	; (7388 <precalc+0x144>)
    72f6:	4613      	mov	r3, r2
    72f8:	463e      	mov	r6, r7
    72fa:	2500      	movs	r5, #0
    72fc:	2100      	movs	r1, #0
    72fe:	5dd4      	ldrb	r4, [r2, r7]
	for (i = 0; n != 0; i++)
    7300:	ea54 0c05 	orrs.w	ip, r4, r5
    7304:	fa5f fe81 	uxtb.w	lr, r1
    7308:	f101 0101 	add.w	r1, r1, #1
    730c:	d120      	bne.n	7350 <precalc+0x10c>
    730e:	3201      	adds	r2, #1
			used_channels += count_bits((uint64_t) afh_map[i]);
    7310:	4473      	add	r3, lr
		for(i = 0; i < 10; i++)
    7312:	2a0a      	cmp	r2, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    7314:	b2db      	uxtb	r3, r3
		for(i = 0; i < 10; i++)
    7316:	d1f0      	bne.n	72fa <precalc+0xb6>
    7318:	4a1c      	ldr	r2, [pc, #112]	; (738c <precalc+0x148>)
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    731a:	254f      	movs	r5, #79	; 0x4f
    731c:	7013      	strb	r3, [r2, #0]
		for(i = 0; i < 10; i++)
    731e:	2300      	movs	r3, #0
    7320:	4619      	mov	r1, r3
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    7322:	fb93 f2f5 	sdiv	r2, r3, r5
    7326:	fb05 3212 	mls	r2, r5, r2, r3
    732a:	b2d7      	uxtb	r7, r2
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    732c:	08fc      	lsrs	r4, r7, #3
    732e:	5d34      	ldrb	r4, [r6, r4]
    7330:	f002 0207 	and.w	r2, r2, #7
    7334:	fa44 f202 	asr.w	r2, r4, r2
    7338:	07d2      	lsls	r2, r2, #31
				bank[j++] = chan;
    733a:	bf48      	it	mi
    733c:	1c4a      	addmi	r2, r1, #1
    733e:	f103 0302 	add.w	r3, r3, #2
    7342:	bf44      	itt	mi
    7344:	5447      	strbmi	r7, [r0, r1]
    7346:	b2d1      	uxtbmi	r1, r2
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    7348:	2b9e      	cmp	r3, #158	; 0x9e
    734a:	d1ea      	bne.n	7322 <precalc+0xde>
    734c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		n &= n - 1;
    7350:	f114 38ff 	adds.w	r8, r4, #4294967295	; 0xffffffff
    7354:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
    7358:	ea04 0408 	and.w	r4, r4, r8
    735c:	ea05 0509 	and.w	r5, r5, r9
    7360:	e7ce      	b.n	7300 <precalc+0xbc>
    7362:	bf00      	nop
    7364:	10001678 	.word	0x10001678
    7368:	10001a8d 	.word	0x10001a8d
    736c:	10001a28 	.word	0x10001a28
    7370:	10001a8b 	.word	0x10001a8b
    7374:	10001a38 	.word	0x10001a38
    7378:	10001a8c 	.word	0x10001a8c
    737c:	10001a3a 	.word	0x10001a3a
    7380:	10001adc 	.word	0x10001adc
    7384:	100019ab 	.word	0x100019ab
    7388:	1000138b 	.word	0x1000138b
    738c:	10001389 	.word	0x10001389

00007390 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    7390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7394:	b086      	sub	sp, #24
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    7396:	4b46      	ldr	r3, [pc, #280]	; (74b0 <next_hop+0x120>)
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    7398:	4c46      	ldr	r4, [pc, #280]	; (74b4 <next_hop+0x124>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    739a:	881e      	ldrh	r6, [r3, #0]
	f = base_f % 79;
    739c:	234f      	movs	r3, #79	; 0x4f
	base_f = (clock >> 3) & 0x1fffff0;
    739e:	ea04 04d0 	and.w	r4, r4, r0, lsr #3
	f = base_f % 79;
    73a2:	fbb4 f2f3 	udiv	r2, r4, r3
    73a6:	fb03 4112 	mls	r1, r3, r2, r4
	c = (c1 ^ (clock >> 16)) & 0x1f;
    73aa:	4b43      	ldr	r3, [pc, #268]	; (74b8 <next_hop+0x128>)
	y1 = (clock >> 1) & 0x01;
    73ac:	f3c0 0e40 	ubfx	lr, r0, #1, #1
	c = (c1 ^ (clock >> 16)) & 0x1f;
    73b0:	781a      	ldrb	r2, [r3, #0]
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73b2:	4b42      	ldr	r3, [pc, #264]	; (74bc <next_hop+0x12c>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    73b4:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73b8:	781b      	ldrb	r3, [r3, #0]
	c = (c1 ^ (clock >> 16)) & 0x1f;
    73ba:	ea82 4210 	eor.w	r2, r2, r0, lsr #16
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73be:	ea83 5350 	eor.w	r3, r3, r0, lsr #21

	perm = perm5(
		((x + a) % 32) ^ b,
    73c2:	eb03 0090 	add.w	r0, r3, r0, lsr #2
    73c6:	4b3e      	ldr	r3, [pc, #248]	; (74c0 <next_hop+0x130>)
	y2 = y1 << 5;
    73c8:	ea4f 174e 	mov.w	r7, lr, lsl #5
		((x + a) % 32) ^ b,
    73cc:	781b      	ldrb	r3, [r3, #0]
	y2 = y1 << 5;
    73ce:	b2bd      	uxth	r5, r7
		((x + a) % 32) ^ b,
    73d0:	4058      	eors	r0, r3
	for (i = 0; i < 9; i++)
    73d2:	2300      	movs	r3, #0
		(y1 * 0x1f) ^ c,
    73d4:	eba7 070e 	sub.w	r7, r7, lr
	c = (c1 ^ (clock >> 16)) & 0x1f;
    73d8:	f002 021f 	and.w	r2, r2, #31
		(y1 * 0x1f) ^ c,
    73dc:	407a      	eors	r2, r7
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    73de:	f3c6 0608 	ubfx	r6, r6, #0, #9
	z &= 0x1f;
    73e2:	f000 001f 	and.w	r0, r0, #31
		p[i] = (p_low >> i) & 0x01;
    73e6:	af02      	add	r7, sp, #8
    73e8:	fa46 fe03 	asr.w	lr, r6, r3
    73ec:	f00e 0e01 	and.w	lr, lr, #1
    73f0:	f803 e007 	strb.w	lr, [r3, r7]
	for (i = 0; i < 9; i++)
    73f4:	3301      	adds	r3, #1
    73f6:	2b09      	cmp	r3, #9
    73f8:	d1f6      	bne.n	73e8 <next_hop+0x58>
    73fa:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;
    73fc:	eb07 0e03 	add.w	lr, r7, r3
    7400:	fa42 f603 	asr.w	r6, r2, r3
	for (i = 0; i < 5; i++)
    7404:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    7406:	f006 0601 	and.w	r6, r6, #1
	for (i = 0; i < 5; i++)
    740a:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    740c:	f88e 6009 	strb.w	r6, [lr, #9]
	for (i = 0; i < 5; i++)
    7410:	d1f4      	bne.n	73fc <next_hop+0x6c>
    7412:	2200      	movs	r2, #0
		z_bit[i] = (z >> i) & 0x01;
    7414:	fa40 f302 	asr.w	r3, r0, r2
    7418:	f003 0301 	and.w	r3, r3, #1
    741c:	f80d 3002 	strb.w	r3, [sp, r2]
	for (i = 0; i < 5; i++)
    7420:	3201      	adds	r2, #1
    7422:	2a05      	cmp	r2, #5
    7424:	d1f6      	bne.n	7414 <next_hop+0x84>
    7426:	220d      	movs	r2, #13
			tmp = z_bit[index1[i]];
    7428:	4e26      	ldr	r6, [pc, #152]	; (74c4 <next_hop+0x134>)
			z_bit[index1[i]] = z_bit[index2[i]];
    742a:	f106 0e0e 	add.w	lr, r6, #14
		if (p[i]) {
    742e:	5cbb      	ldrb	r3, [r7, r2]
    7430:	b17b      	cbz	r3, 7452 <next_hop+0xc2>
			tmp = z_bit[index1[i]];
    7432:	5d90      	ldrb	r0, [r2, r6]
    7434:	ab06      	add	r3, sp, #24
    7436:	4418      	add	r0, r3
			z_bit[index1[i]] = z_bit[index2[i]];
    7438:	f812 300e 	ldrb.w	r3, [r2, lr]
    743c:	f10d 0818 	add.w	r8, sp, #24
    7440:	4443      	add	r3, r8
			tmp = z_bit[index1[i]];
    7442:	f810 cc18 	ldrb.w	ip, [r0, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    7446:	f813 8c18 	ldrb.w	r8, [r3, #-24]
    744a:	f800 8c18 	strb.w	r8, [r0, #-24]
			z_bit[index2[i]] = tmp;
    744e:	f803 cc18 	strb.w	ip, [r3, #-24]
	for (i = 13; i >= 0; i--) {
    7452:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    7456:	d2ea      	bcs.n	742e <next_hop+0x9e>
    7458:	2200      	movs	r2, #0
    745a:	4610      	mov	r0, r2
		output += z_bit[i] << i;
    745c:	f81d 3000 	ldrb.w	r3, [sp, r0]
    7460:	4083      	lsls	r3, r0
	for (i = 0; i < 5; i++)
    7462:	3001      	adds	r0, #1
		output += z_bit[i] << i;
    7464:	441a      	add	r2, r3
	for (i = 0; i < 5; i++)
    7466:	2805      	cmp	r0, #5
		output += z_bit[i] << i;
    7468:	b2d2      	uxtb	r2, r2
	for (i = 0; i < 5; i++)
    746a:	d1f7      	bne.n	745c <next_hop+0xcc>
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    746c:	4b16      	ldr	r3, [pc, #88]	; (74c8 <next_hop+0x138>)
    746e:	781b      	ldrb	r3, [r3, #0]
    7470:	189e      	adds	r6, r3, r2
    7472:	194a      	adds	r2, r1, r5
    7474:	214f      	movs	r1, #79	; 0x4f
    7476:	4432      	add	r2, r6
    7478:	fbb2 f3f1 	udiv	r3, r2, r1
    747c:	fb01 2213 	mls	r2, r1, r3, r2
    7480:	4b12      	ldr	r3, [pc, #72]	; (74cc <next_hop+0x13c>)
    7482:	5c98      	ldrb	r0, [r3, r2]
	if(afh_enabled) {
    7484:	4b12      	ldr	r3, [pc, #72]	; (74d0 <next_hop+0x140>)
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	b16b      	cbz	r3, 74a6 <next_hop+0x116>
		f_dash = base_f % used_channels;
    748a:	4b12      	ldr	r3, [pc, #72]	; (74d4 <next_hop+0x144>)
    748c:	7819      	ldrb	r1, [r3, #0]
    748e:	fbb4 f3f1 	udiv	r3, r4, r1
    7492:	fb01 4313 	mls	r3, r1, r3, r4
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    7496:	442b      	add	r3, r5
    7498:	4433      	add	r3, r6
    749a:	fbb3 f2f1 	udiv	r2, r3, r1
    749e:	fb01 3312 	mls	r3, r1, r2, r3
    74a2:	4a0d      	ldr	r2, [pc, #52]	; (74d8 <next_hop+0x148>)
    74a4:	5cd0      	ldrb	r0, [r2, r3]
	}
	return (2402 + next_channel);

}
    74a6:	f600 1062 	addw	r0, r0, #2402	; 0x962
    74aa:	b006      	add	sp, #24
    74ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74b0:	10001a3a 	.word	0x10001a3a
    74b4:	01fffff0 	.word	0x01fffff0
    74b8:	10001a8c 	.word	0x10001a8c
    74bc:	10001a8b 	.word	0x10001a8b
    74c0:	10001a38 	.word	0x10001a38
    74c4:	0000b58c 	.word	0x0000b58c
    74c8:	10001adc 	.word	0x10001adc
    74cc:	10001a8d 	.word	0x10001a8d
    74d0:	100019ab 	.word	0x100019ab
    74d4:	10001389 	.word	0x10001389
    74d8:	10001a3c 	.word	0x10001a3c

000074dc <btle_channel_index>:

// calculate channel index from physical channel
// channel is in range [2402, 2480]
uint8_t btle_channel_index(uint16_t channel) {
	uint8_t idx;
	channel = (channel - 2402) / 2;
    74dc:	2302      	movs	r3, #2
    74de:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    74e2:	fb90 f0f3 	sdiv	r0, r0, r3
    74e6:	b283      	uxth	r3, r0
	if (channel == 0)
    74e8:	b153      	cbz	r3, 7500 <btle_channel_index+0x24>
		idx = 37;
	else if (channel < 12)
    74ea:	2b0b      	cmp	r3, #11
    74ec:	d802      	bhi.n	74f4 <btle_channel_index+0x18>
		idx = channel - 1;
    74ee:	3801      	subs	r0, #1
	else if (channel == 12)
		idx = 38;
	else if (channel < 39)
		idx = channel - 2;
    74f0:	b2c0      	uxtb	r0, r0
    74f2:	4770      	bx	lr
	else if (channel == 12)
    74f4:	2b0c      	cmp	r3, #12
    74f6:	d005      	beq.n	7504 <btle_channel_index+0x28>
	else if (channel < 39)
    74f8:	2b26      	cmp	r3, #38	; 0x26
    74fa:	d805      	bhi.n	7508 <btle_channel_index+0x2c>
		idx = channel - 2;
    74fc:	3802      	subs	r0, #2
    74fe:	e7f7      	b.n	74f0 <btle_channel_index+0x14>
		idx = 37;
    7500:	2025      	movs	r0, #37	; 0x25
    7502:	4770      	bx	lr
		idx = 38;
    7504:	2026      	movs	r0, #38	; 0x26
    7506:	4770      	bx	lr
	else
		idx = 39;
    7508:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    750a:	4770      	bx	lr

0000750c <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    750c:	280a      	cmp	r0, #10
    750e:	d803      	bhi.n	7518 <btle_channel_index_to_phys+0xc>
		phys = 2404 + 2 * idx;
    7510:	0040      	lsls	r0, r0, #1
    7512:	f600 1064 	addw	r0, r0, #2404	; 0x964
    7516:	4770      	bx	lr
	else if (idx < 37)
    7518:	2824      	cmp	r0, #36	; 0x24
    751a:	d803      	bhi.n	7524 <btle_channel_index_to_phys+0x18>
		phys = 2428 + 2 * (idx - 11);
    751c:	0040      	lsls	r0, r0, #1
    751e:	f600 1066 	addw	r0, r0, #2406	; 0x966
    7522:	4770      	bx	lr
	else if (idx == 37)
    7524:	2825      	cmp	r0, #37	; 0x25
    7526:	d006      	beq.n	7536 <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
    7528:	2826      	cmp	r0, #38	; 0x26
		phys = 2426;
	else
		phys = 2480;
    752a:	f640 107a 	movw	r0, #2426	; 0x97a
    752e:	bf18      	it	ne
    7530:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    7534:	4770      	bx	lr
		phys = 2402;
    7536:	f640 1062 	movw	r0, #2402	; 0x962
	return phys;
}
    753a:	4770      	bx	lr

0000753c <btle_next_hop>:
{
    753c:	b510      	push	{r4, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    753e:	7d41      	ldrb	r1, [r0, #21]
{
    7540:	4602      	mov	r2, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7542:	4608      	mov	r0, r1
    7544:	f7ff ffe2 	bl	750c <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    7548:	2425      	movs	r4, #37	; 0x25
    754a:	7d93      	ldrb	r3, [r2, #22]
    754c:	440b      	add	r3, r1
    754e:	fb93 f1f4 	sdiv	r1, r3, r4
    7552:	fb04 3311 	mls	r3, r4, r1, r3
    7556:	7553      	strb	r3, [r2, #21]
}
    7558:	bd10      	pop	{r4, pc}
    755a:	0000      	movs	r0, r0

0000755c <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    755c:	b5f0      	push	{r4, r5, r6, r7, lr}
    755e:	4603      	mov	r3, r0
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
			state = (state << 1) & 0xffffff;
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
			if (top_bit)
				state ^= lfsr_mask;
    7560:	4e12      	ldr	r6, [pc, #72]	; (75ac <btle_reverse_crc+0x50>)
	for (i = len - 1; i >= 0; --i) {
    7562:	3a01      	subs	r2, #1
    7564:	2a00      	cmp	r2, #0
    7566:	da0e      	bge.n	7586 <btle_reverse_crc+0x2a>
    7568:	2200      	movs	r2, #0
    756a:	4610      	mov	r0, r2
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    756c:	fa23 f102 	lsr.w	r1, r3, r2
    7570:	f1c2 0417 	rsb	r4, r2, #23
    7574:	f001 0101 	and.w	r1, r1, #1
	for (i = 0; i < 24; ++i)
    7578:	3201      	adds	r2, #1
		ret |= ((state >> i) & 1) << (23 - i);
    757a:	40a1      	lsls	r1, r4
	for (i = 0; i < 24; ++i)
    757c:	2a18      	cmp	r2, #24
		ret |= ((state >> i) & 1) << (23 - i);
    757e:	ea40 0001 	orr.w	r0, r0, r1
	for (i = 0; i < 24; ++i)
    7582:	d1f3      	bne.n	756c <btle_reverse_crc+0x10>

	return ret;
}
    7584:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8 cur = data[i];
    7586:	2407      	movs	r4, #7
    7588:	5c8f      	ldrb	r7, [r1, r2]
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    758a:	fa47 f004 	asr.w	r0, r7, r4
			int top_bit = state >> 23;
    758e:	0ddd      	lsrs	r5, r3, #23
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    7590:	f000 0001 	and.w	r0, r0, #1
			state = (state << 1) & 0xffffff;
    7594:	005b      	lsls	r3, r3, #1
    7596:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    759a:	4068      	eors	r0, r5
    759c:	4303      	orrs	r3, r0
			if (top_bit)
    759e:	b105      	cbz	r5, 75a2 <btle_reverse_crc+0x46>
				state ^= lfsr_mask;
    75a0:	4073      	eors	r3, r6
		for (j = 0; j < 8; ++j) {
    75a2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    75a6:	d2f0      	bcs.n	758a <btle_reverse_crc+0x2e>
	for (i = len - 1; i >= 0; --i) {
    75a8:	3a01      	subs	r2, #1
    75aa:	e7db      	b.n	7564 <btle_reverse_crc+0x8>
    75ac:	00b4c000 	.word	0x00b4c000

000075b0 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    75b0:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    75b2:	460c      	mov	r4, r1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    75b4:	4d07      	ldr	r5, [pc, #28]	; (75d4 <btle_crcgen_lut+0x24>)
	state = crc_init & 0xffffff;
    75b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    75ba:	1a63      	subs	r3, r4, r1
    75bc:	429a      	cmp	r2, r3
    75be:	dc00      	bgt.n	75c2 <btle_crcgen_lut+0x12>
	}
	return state;
}
    75c0:	bd30      	pop	{r4, r5, pc}
		key = data[i] ^ (state & 0xff);
    75c2:	f814 3b01 	ldrb.w	r3, [r4], #1
    75c6:	4043      	eors	r3, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    75c8:	b2db      	uxtb	r3, r3
    75ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    75ce:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    75d2:	e7f2      	b.n	75ba <btle_crcgen_lut+0xa>
    75d4:	100004c8 	.word	0x100004c8

000075d8 <le_map_channel>:

/*
 * Map a channel index to a used index given a remapping struct.
 */
uint8_t le_map_channel(uint8_t channel_idx, le_channel_remapping_t *remapping) {
	if (remapping->channel_in_use[channel_idx])
    75d8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    75dc:	b943      	cbnz	r3, 75f0 <le_map_channel+0x18>
		return channel_idx;
	else
		return remapping->remapping_index[channel_idx % remapping->total_channels];
    75de:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    75e2:	fbb0 f3f2 	udiv	r3, r0, r2
    75e6:	fb02 0013 	mls	r0, r2, r3, r0
    75ea:	4401      	add	r1, r0
    75ec:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
}
    75f0:	4770      	bx	lr
    75f2:	0000      	movs	r0, r0

000075f4 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    75f4:	b513      	push	{r0, r1, r4, lr}
	int rv;
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    75f6:	8843      	ldrh	r3, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    75f8:	6812      	ldr	r2, [r2, #0]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    75fa:	f8ad 3000 	strh.w	r3, [sp]
    75fe:	8883      	ldrh	r3, [r0, #4]
    7600:	f8ad 3002 	strh.w	r3, [sp, #2]
    7604:	88c3      	ldrh	r3, [r0, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7606:	7840      	ldrb	r0, [r0, #1]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    7608:	f8ad 3004 	strh.w	r3, [sp, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    760c:	4b04      	ldr	r3, [pc, #16]	; (7620 <usb_vendor_request_handler+0x2c>)
    760e:	681c      	ldr	r4, [r3, #0]
    7610:	460b      	mov	r3, r1
    7612:	4669      	mov	r1, sp
    7614:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    7616:	1e43      	subs	r3, r0, #1
    7618:	4258      	negs	r0, r3
    761a:	4158      	adcs	r0, r3
    761c:	b002      	add	sp, #8
    761e:	bd10      	pop	{r4, pc}
    7620:	10003be4 	.word	0x10003be4

00007624 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7624:	b570      	push	{r4, r5, r6, lr}
    7626:	b086      	sub	sp, #24
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7628:	ad01      	add	r5, sp, #4
void set_serial_descriptor(u8 *descriptors) {
    762a:	4604      	mov	r4, r0
	get_device_serial(buf, &len);
    762c:	4669      	mov	r1, sp
    762e:	4628      	mov	r0, r5
    7630:	f002 f8e2 	bl	97f8 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7634:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7638:	b9db      	cbnz	r3, 7672 <set_serial_descriptor+0x4e>
    763a:	4620      	mov	r0, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    763c:	461e      	mov	r6, r3
    763e:	461c      	mov	r4, r3
			nibble  = (buf[i+1]>>4) & 0xF;
    7640:	3301      	adds	r3, #1
    7642:	5cea      	ldrb	r2, [r5, r3]
			desc[1+ i * 4] = 0;
    7644:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
			nibble  = (buf[i+1]>>4) & 0xF;
    7648:	0911      	lsrs	r1, r2, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    764a:	2909      	cmp	r1, #9
			nibble = buf[i+1]&0xF;
    764c:	f002 020f 	and.w	r2, r2, #15
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7650:	bf8c      	ite	hi
    7652:	3157      	addhi	r1, #87	; 0x57
    7654:	3130      	addls	r1, #48	; 0x30
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7656:	2a09      	cmp	r2, #9
    7658:	bf8c      	ite	hi
    765a:	3257      	addhi	r2, #87	; 0x57
    765c:	3230      	addls	r2, #48	; 0x30
		for(i=0; i<16; i++) {
    765e:	2b10      	cmp	r3, #16
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7660:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7664:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    7668:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
    766c:	f100 0004 	add.w	r0, r0, #4
		for(i=0; i<16; i++) {
    7670:	d1e6      	bne.n	7640 <set_serial_descriptor+0x1c>
		}
	}
}
    7672:	b006      	add	sp, #24
    7674:	bd70      	pop	{r4, r5, r6, pc}
    7676:	0000      	movs	r0, r0

00007678 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7678:	b538      	push	{r3, r4, r5, lr}
    767a:	4605      	mov	r5, r0
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    767c:	4c0c      	ldr	r4, [pc, #48]	; (76b0 <ubertooth_usb_init+0x38>)
	USBInit();
    767e:	f002 f98f 	bl	99a0 <USBInit>
	set_serial_descriptor(abDescriptors);
    7682:	4620      	mov	r0, r4
    7684:	f7ff ffce 	bl	7624 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    7688:	4620      	mov	r0, r4
    768a:	f002 fbc9 	bl	9e20 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    768e:	4b09      	ldr	r3, [pc, #36]	; (76b4 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7690:	4a09      	ldr	r2, [pc, #36]	; (76b8 <ubertooth_usb_init+0x40>)
    7692:	490a      	ldr	r1, [pc, #40]	; (76bc <ubertooth_usb_init+0x44>)
    7694:	2002      	movs	r0, #2
	v_req_handler = vendor_req_handler;
    7696:	601d      	str	r5, [r3, #0]
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7698:	f002 f978 	bl	998c <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    769c:	4908      	ldr	r1, [pc, #32]	; (76c0 <ubertooth_usb_init+0x48>)
    769e:	20ff      	movs	r0, #255	; 0xff
    76a0:	f002 fba8 	bl	9df4 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    76a4:	2001      	movs	r0, #1
    76a6:	f002 fa12 	bl	9ace <USBHwConnect>

	return 0;
}
    76aa:	2000      	movs	r0, #0
    76ac:	bd38      	pop	{r3, r4, r5, pc}
    76ae:	bf00      	nop
    76b0:	100008c8 	.word	0x100008c8
    76b4:	10003be4 	.word	0x10003be4
    76b8:	10003ae0 	.word	0x10003ae0
    76bc:	000075f5 	.word	0x000075f5
    76c0:	0000b5a8 	.word	0x0000b5a8

000076c4 <usb_queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void usb_queue_init(void)
{
	head = 0;
    76c4:	2100      	movs	r1, #0
    76c6:	4b04      	ldr	r3, [pc, #16]	; (76d8 <usb_queue_init+0x14>)
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    76c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    76cc:	4803      	ldr	r0, [pc, #12]	; (76dc <usb_queue_init+0x18>)
	head = 0;
    76ce:	6019      	str	r1, [r3, #0]
	tail = 0;
    76d0:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    76d2:	f7fc bd95 	b.w	4200 <memset>
    76d6:	bf00      	nop
    76d8:	10000bb4 	.word	0x10000bb4
    76dc:	10001ae0 	.word	0x10001ae0

000076e0 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
    76e0:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
    76e2:	4a0a      	ldr	r2, [pc, #40]	; (770c <usb_enqueue+0x2c>)
    76e4:	6814      	ldr	r4, [r2, #0]
	u8 t = tail & 0x7F;
    76e6:	6853      	ldr	r3, [r2, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    76e8:	f004 007f 	and.w	r0, r4, #127	; 0x7f
	u8 t = tail & 0x7F;
    76ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    76f0:	1c59      	adds	r1, r3, #1
	if (h == n) {
    76f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    76f6:	4288      	cmp	r0, r1
		return NULL;
	}

	++tail;
    76f8:	bf1f      	itttt	ne
    76fa:	6851      	ldrne	r1, [r2, #4]
	return &fifo[t];
    76fc:	4804      	ldrne	r0, [pc, #16]	; (7710 <usb_enqueue+0x30>)
	++tail;
    76fe:	3101      	addne	r1, #1
	return &fifo[t];
    7700:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
	++tail;
    7704:	bf14      	ite	ne
    7706:	6051      	strne	r1, [r2, #4]
		return NULL;
    7708:	2000      	moveq	r0, #0

}
    770a:	bd10      	pop	{r4, pc}
    770c:	10000bb4 	.word	0x10000bb4
    7710:	10001ae0 	.word	0x10001ae0

00007714 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7714:	4a08      	ldr	r2, [pc, #32]	; (7738 <dequeue+0x24>)
    7716:	6813      	ldr	r3, [r2, #0]
	u8 t = tail & 0x7F;
    7718:	6851      	ldr	r1, [r2, #4]
	u8 h = head & 0x7F;
    771a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

	/* fail if queue is empty */
	if (h == t) {
    771e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7722:	428b      	cmp	r3, r1
		return NULL;
	}

	++head;
    7724:	bf1f      	itttt	ne
    7726:	6811      	ldrne	r1, [r2, #0]
	return &fifo[h];
    7728:	4804      	ldrne	r0, [pc, #16]	; (773c <dequeue+0x28>)
	++head;
    772a:	3101      	addne	r1, #1
	return &fifo[h];
    772c:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
	++head;
    7730:	bf14      	ite	ne
    7732:	6011      	strne	r1, [r2, #0]
		return NULL;
    7734:	2000      	moveq	r0, #0
}
    7736:	4770      	bx	lr
    7738:	10000bb4 	.word	0x10000bb4
    773c:	10001ae0 	.word	0x10001ae0

00007740 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7740:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7742:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7744:	f7ff ffe6 	bl	7714 <dequeue>
    7748:	4b0d      	ldr	r3, [pc, #52]	; (7780 <dequeue_send+0x40>)
	if (pkt != NULL) {
    774a:	4604      	mov	r4, r0
    774c:	b140      	cbz	r0, 7760 <dequeue_send+0x20>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    774e:	4601      	mov	r1, r0
    7750:	2240      	movs	r2, #64	; 0x40
    7752:	2082      	movs	r0, #130	; 0x82
		last_usb_pkt = clkn;
    7754:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7756:	f002 f9eb 	bl	9b30 <USBHwEPWrite>
		return 1;
    775a:	2001      	movs	r0, #1
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
		}
		return 0;
	}
}
    775c:	b003      	add	sp, #12
    775e:	bd30      	pop	{r4, r5, pc}
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    7760:	689a      	ldr	r2, [r3, #8]
    7762:	4908      	ldr	r1, [pc, #32]	; (7784 <dequeue_send+0x44>)
    7764:	1aaa      	subs	r2, r5, r2
    7766:	428a      	cmp	r2, r1
    7768:	d908      	bls.n	777c <dequeue_send+0x3c>
			u8 pkt_type = KEEP_ALIVE;
    776a:	2203      	movs	r2, #3
    776c:	a902      	add	r1, sp, #8
    776e:	f801 2d01 	strb.w	r2, [r1, #-1]!
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7772:	2082      	movs	r0, #130	; 0x82
    7774:	2201      	movs	r2, #1
			last_usb_pkt = clkn;
    7776:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7778:	f002 f9da 	bl	9b30 <USBHwEPWrite>
		return 0;
    777c:	4620      	mov	r0, r4
    777e:	e7ed      	b.n	775c <dequeue_send+0x1c>
    7780:	10000bb4 	.word	0x10000bb4
    7784:	00061a80 	.word	0x00061a80

00007788 <handle_usb>:

void handle_usb(u32 clkn)
{
    7788:	b538      	push	{r3, r4, r5, lr}
    778a:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    778c:	2082      	movs	r0, #130	; 0x82
    778e:	f002 f9a9 	bl	9ae4 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    7792:	0682      	lsls	r2, r0, #26
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7794:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    7796:	d402      	bmi.n	779e <handle_usb+0x16>
		dequeue_send(clkn);
    7798:	4620      	mov	r0, r4
    779a:	f7ff ffd1 	bl	7740 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    779e:	066b      	lsls	r3, r5, #25
    77a0:	d402      	bmi.n	77a8 <handle_usb+0x20>
		dequeue_send(clkn);
    77a2:	4620      	mov	r0, r4
    77a4:	f7ff ffcc 	bl	7740 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    77a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USBHwISR();
    77ac:	f002 ba28 	b.w	9c00 <USBHwISR>

000077b0 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    77b0:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    77b2:	229e      	movs	r2, #158	; 0x9e
    77b4:	2100      	movs	r1, #0
    77b6:	4807      	ldr	r0, [pc, #28]	; (77d4 <rssi_reset+0x24>)
    77b8:	f7fc fd22 	bl	4200 <memset>

	rssi_count = 0;
    77bc:	2300      	movs	r3, #0
    77be:	4a06      	ldr	r2, [pc, #24]	; (77d8 <rssi_reset+0x28>)
    77c0:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    77c2:	4a06      	ldr	r2, [pc, #24]	; (77dc <rssi_reset+0x2c>)
    77c4:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    77c6:	2280      	movs	r2, #128	; 0x80
    77c8:	4b05      	ldr	r3, [pc, #20]	; (77e0 <rssi_reset+0x30>)
    77ca:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    77cc:	227f      	movs	r2, #127	; 0x7f
    77ce:	4b05      	ldr	r3, [pc, #20]	; (77e4 <rssi_reset+0x34>)
    77d0:	701a      	strb	r2, [r3, #0]
    77d2:	bd08      	pop	{r3, pc}
    77d4:	10000bc0 	.word	0x10000bc0
    77d8:	100019aa 	.word	0x100019aa
    77dc:	10003be8 	.word	0x10003be8
    77e0:	10001388 	.word	0x10001388
    77e4:	1000138a 	.word	0x1000138a

000077e8 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    77e8:	4a0b      	ldr	r2, [pc, #44]	; (7818 <rssi_add+0x30>)
    77ea:	f992 3000 	ldrsb.w	r3, [r2]
    77ee:	4283      	cmp	r3, r0
    77f0:	bfb8      	it	lt
    77f2:	4603      	movlt	r3, r0
    77f4:	7013      	strb	r3, [r2, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    77f6:	4a09      	ldr	r2, [pc, #36]	; (781c <rssi_add+0x34>)
    77f8:	f992 3000 	ldrsb.w	r3, [r2]
    77fc:	4283      	cmp	r3, r0
    77fe:	bfa8      	it	ge
    7800:	4603      	movge	r3, r0
    7802:	7013      	strb	r3, [r2, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7804:	4a06      	ldr	r2, [pc, #24]	; (7820 <rssi_add+0x38>)
    7806:	6813      	ldr	r3, [r2, #0]
    7808:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    780c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    780e:	4a05      	ldr	r2, [pc, #20]	; (7824 <rssi_add+0x3c>)
    7810:	7813      	ldrb	r3, [r2, #0]
    7812:	3301      	adds	r3, #1
    7814:	7013      	strb	r3, [r2, #0]
    7816:	4770      	bx	lr
    7818:	10001388 	.word	0x10001388
    781c:	1000138a 	.word	0x1000138a
    7820:	10003be8 	.word	0x10003be8
    7824:	100019aa 	.word	0x100019aa

00007828 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    7828:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    782a:	f640 1362 	movw	r3, #2402	; 0x962
    782e:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7832:	bf38      	it	cc
    7834:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7836:	4b0d      	ldr	r3, [pc, #52]	; (786c <rssi_iir_update+0x44>)
	int i = channel - 2402;
    7838:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
	if (rssi_count != 0)
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	b123      	cbz	r3, 784a <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7840:	4a0b      	ldr	r2, [pc, #44]	; (7870 <rssi_iir_update+0x48>)
    7842:	6812      	ldr	r2, [r2, #0]
    7844:	3280      	adds	r2, #128	; 0x80
    7846:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    784a:	24fd      	movs	r4, #253	; 0xfd
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    784c:	4909      	ldr	r1, [pc, #36]	; (7874 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    784e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7852:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7856:	fb04 3302 	mla	r3, r4, r2, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    785a:	f44f 7280 	mov.w	r2, #256	; 0x100
    785e:	3380      	adds	r3, #128	; 0x80
    7860:	fb93 f3f2 	sdiv	r3, r3, r2
    7864:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    7868:	bd10      	pop	{r4, pc}
    786a:	bf00      	nop
    786c:	100019aa 	.word	0x100019aa
    7870:	10003be8 	.word	0x10003be8
    7874:	10000bc0 	.word	0x10000bc0

00007878 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    7878:	f640 1362 	movw	r3, #2402	; 0x962
    787c:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7880:	bf38      	it	cc
    7882:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    7884:	4b05      	ldr	r3, [pc, #20]	; (789c <rssi_get_avg+0x24>)
    7886:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    788a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
    788e:	f44f 7380 	mov.w	r3, #256	; 0x100
    7892:	3080      	adds	r0, #128	; 0x80
    7894:	fb90 f0f3 	sdiv	r0, r0, r3
}
    7898:	b240      	sxtb	r0, r0
    789a:	4770      	bx	lr
    789c:	10000bc0 	.word	0x10000bc0

000078a0 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    78a0:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    78a2:	4d13      	ldr	r5, [pc, #76]	; (78f0 <cs_threshold_calc_and_set+0x50>)
    78a4:	f995 4000 	ldrsb.w	r4, [r5]
    78a8:	2c00      	cmp	r4, #0
    78aa:	dd05      	ble.n	78b8 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    78ac:	f7ff ffe4 	bl	7878 <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    78b0:	782c      	ldrb	r4, [r5, #0]
    78b2:	3c36      	subs	r4, #54	; 0x36
    78b4:	4404      	add	r4, r0
    78b6:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    78b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    78bc:	4284      	cmp	r4, r0
    78be:	bfb8      	it	lt
    78c0:	4604      	movlt	r4, r0
    78c2:	f06f 0013 	mvn.w	r0, #19
    78c6:	4284      	cmp	r4, r0
    78c8:	bfa8      	it	ge
    78ca:	4604      	movge	r4, r0
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    78cc:	f104 0138 	add.w	r1, r4, #56	; 0x38
    78d0:	f041 0103 	orr.w	r1, r1, #3
    78d4:	b2c9      	uxtb	r1, r1
    78d6:	2006      	movs	r0, #6
    78d8:	f001 fdef 	bl	94ba <cc2400_set>
	cs_threshold_cur = level;
    78dc:	4b05      	ldr	r3, [pc, #20]	; (78f4 <cs_threshold_calc_and_set+0x54>)
	cs_no_squelch = (level <= -120);
    78de:	f114 0f77 	cmn.w	r4, #119	; 0x77
	cs_threshold_cur = level;
    78e2:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    78e4:	bfac      	ite	ge
    78e6:	2400      	movge	r4, #0
    78e8:	2401      	movlt	r4, #1
    78ea:	4b03      	ldr	r3, [pc, #12]	; (78f8 <cs_threshold_calc_and_set+0x58>)
    78ec:	701c      	strb	r4, [r3, #0]
    78ee:	bd38      	pop	{r3, r4, r5, pc}
    78f0:	100019ac 	.word	0x100019ac
    78f4:	10001a20 	.word	0x10001a20
    78f8:	10001670 	.word	0x10001670

000078fc <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    78fc:	2200      	movs	r2, #0
    78fe:	4b07      	ldr	r3, [pc, #28]	; (791c <cs_trigger_enable+0x20>)
    7900:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    7902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7906:	4b06      	ldr	r3, [pc, #24]	; (7920 <cs_trigger_enable+0x24>)
    7908:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    790a:	2204      	movs	r2, #4
    790c:	4b05      	ldr	r3, [pc, #20]	; (7924 <cs_trigger_enable+0x28>)
    790e:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7910:	4a05      	ldr	r2, [pc, #20]	; (7928 <cs_trigger_enable+0x2c>)
    7912:	6813      	ldr	r3, [r2, #0]
    7914:	f043 0304 	orr.w	r3, r3, #4
    7918:	6013      	str	r3, [r2, #0]
    791a:	4770      	bx	lr
    791c:	10001a21 	.word	0x10001a21
    7920:	e000e100 	.word	0xe000e100
    7924:	400280ac 	.word	0x400280ac
    7928:	400280b4 	.word	0x400280b4

0000792c <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    792c:	4a07      	ldr	r2, [pc, #28]	; (794c <cs_trigger_disable+0x20>)
    792e:	6813      	ldr	r3, [r2, #0]
    7930:	f023 0304 	bic.w	r3, r3, #4
    7934:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7936:	2204      	movs	r2, #4
    7938:	4b05      	ldr	r3, [pc, #20]	; (7950 <cs_trigger_disable+0x24>)
    793a:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    793c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7940:	4b04      	ldr	r3, [pc, #16]	; (7954 <cs_trigger_disable+0x28>)
    7942:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    7944:	2200      	movs	r2, #0
    7946:	4b04      	ldr	r3, [pc, #16]	; (7958 <cs_trigger_disable+0x2c>)
    7948:	701a      	strb	r2, [r3, #0]
    794a:	4770      	bx	lr
    794c:	400280b4 	.word	0x400280b4
    7950:	400280ac 	.word	0x400280ac
    7954:	e000e180 	.word	0xe000e180
    7958:	10001a21 	.word	0x10001a21

0000795c <cs_reset>:
}

void cs_reset(void)
{
    795c:	b508      	push	{r3, lr}
	cs_trigger_disable();
    795e:	f7ff ffe5 	bl	792c <cs_trigger_disable>

	cs_no_squelch = 0;
    7962:	2200      	movs	r2, #0
    7964:	4b03      	ldr	r3, [pc, #12]	; (7974 <cs_reset+0x18>)
    7966:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7968:	2388      	movs	r3, #136	; 0x88
    796a:	4a03      	ldr	r2, [pc, #12]	; (7978 <cs_reset+0x1c>)
    796c:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    796e:	4a03      	ldr	r2, [pc, #12]	; (797c <cs_reset+0x20>)
    7970:	7013      	strb	r3, [r2, #0]
    7972:	bd08      	pop	{r3, pc}
    7974:	10001670 	.word	0x10001670
    7978:	100019ac 	.word	0x100019ac
    797c:	10001a20 	.word	0x10001a20

00007980 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7980:	2202      	movs	r2, #2
    7982:	4b0a      	ldr	r3, [pc, #40]	; (79ac <clkn_stop+0x2c>)
    7984:	601a      	str	r2, [r3, #0]

	clkn = 0;
    7986:	2300      	movs	r3, #0
    7988:	4a09      	ldr	r2, [pc, #36]	; (79b0 <clkn_stop+0x30>)
    798a:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    798c:	4a09      	ldr	r2, [pc, #36]	; (79b4 <clkn_stop+0x34>)
    798e:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    7990:	4a09      	ldr	r2, [pc, #36]	; (79b8 <clkn_stop+0x38>)
    7992:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    7994:	4a09      	ldr	r2, [pc, #36]	; (79bc <clkn_stop+0x3c>)
    7996:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    7998:	4a09      	ldr	r2, [pc, #36]	; (79c0 <clkn_stop+0x40>)
    799a:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    799c:	4a09      	ldr	r2, [pc, #36]	; (79c4 <clkn_stop+0x44>)
    799e:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    79a0:	4a09      	ldr	r2, [pc, #36]	; (79c8 <clkn_stop+0x48>)
    79a2:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    79a4:	4a09      	ldr	r2, [pc, #36]	; (79cc <clkn_stop+0x4c>)
    79a6:	6013      	str	r3, [r2, #0]
    79a8:	4770      	bx	lr
    79aa:	bf00      	nop
    79ac:	40004004 	.word	0x40004004
    79b0:	10001464 	.word	0x10001464
    79b4:	10001380 	.word	0x10001380
    79b8:	10001398 	.word	0x10001398
    79bc:	10001672 	.word	0x10001672
    79c0:	100019a8 	.word	0x100019a8
    79c4:	10001460 	.word	0x10001460
    79c8:	1000145c 	.word	0x1000145c
    79cc:	100019e0 	.word	0x100019e0

000079d0 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    79d0:	2201      	movs	r2, #1
    79d2:	4b01      	ldr	r3, [pc, #4]	; (79d8 <clkn_start+0x8>)
    79d4:	601a      	str	r2, [r3, #0]
    79d6:	4770      	bx	lr
    79d8:	40004004 	.word	0x40004004

000079dc <clkn_init>:
}

void clkn_init()
{
    79dc:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    79de:	f7ff ffcf 	bl	7980 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    79e2:	2204      	movs	r2, #4
    79e4:	4b05      	ldr	r3, [pc, #20]	; (79fc <clkn_init+0x20>)
    79e6:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    79e8:	f640 4234 	movw	r2, #3124	; 0xc34
    79ec:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0I;
    79ee:	2201      	movs	r2, #1
    79f0:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    79f2:	2202      	movs	r2, #2
    79f4:	4b02      	ldr	r3, [pc, #8]	; (7a00 <clkn_init+0x24>)
    79f6:	601a      	str	r2, [r3, #0]
    79f8:	bd08      	pop	{r3, pc}
    79fa:	bf00      	nop
    79fc:	4000400c 	.word	0x4000400c
    7a00:	e000e100 	.word	0xe000e100

00007a04 <dma_poweron>:
dma_lli le_dma_lli[11]; // 11 x 4 bytes


void dma_poweron(void) {
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 616
	PCONP |= PCONP_PCGPDMA;
    7a04:	4a11      	ldr	r2, [pc, #68]	; (7a4c <dma_poweron+0x48>)
    7a06:	6813      	ldr	r3, [r2, #0]
    7a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    7a0c:	6013      	str	r3, [r2, #0]

	// enable DMA interrupts
	ISER0 = ISER0_ISE_DMA;
    7a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7a12:	4b0f      	ldr	r3, [pc, #60]	; (7a50 <dma_poweron+0x4c>)
    7a14:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7a16:	2300      	movs	r3, #0
    7a18:	4a0e      	ldr	r2, [pc, #56]	; (7a54 <dma_poweron+0x50>)
    7a1a:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7a1c:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7a1e:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    7a20:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    7a22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7a26:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7a2a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    7a32:	23ff      	movs	r3, #255	; 0xff
    7a34:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7a38:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7a3a:	6093      	str	r3, [r2, #8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7a3c:	2201      	movs	r2, #1
    7a3e:	4b06      	ldr	r3, [pc, #24]	; (7a58 <dma_poweron+0x54>)
    7a40:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7a42:	681a      	ldr	r2, [r3, #0]
    7a44:	07d2      	lsls	r2, r2, #31
    7a46:	d5fc      	bpl.n	7a42 <dma_poweron+0x3e>
}
    7a48:	4770      	bx	lr
    7a4a:	bf00      	nop
    7a4c:	400fc0c4 	.word	0x400fc0c4
    7a50:	e000e100 	.word	0xe000e100
    7a54:	50004110 	.word	0x50004110
    7a58:	50004030 	.word	0x50004030

00007a5c <dma_init_rx_symbols>:
void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
	DMACIntErrClr  = 1 << channel;
}

void dma_init_rx_symbols(void) {
    7a5c:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    7a5e:	2301      	movs	r3, #1
    7a60:	4a13      	ldr	r2, [pc, #76]	; (7ab0 <dma_init_rx_symbols+0x54>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    7a62:	4814      	ldr	r0, [pc, #80]	; (7ab4 <dma_init_rx_symbols+0x58>)
	DMACIntTCClear = 1 << channel;
    7a64:	6013      	str	r3, [r2, #0]
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7a66:	4c14      	ldr	r4, [pc, #80]	; (7ab8 <dma_init_rx_symbols+0x5c>)
	DMACIntErrClr  = 1 << channel;
    7a68:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7a6a:	4914      	ldr	r1, [pc, #80]	; (7abc <dma_init_rx_symbols+0x60>)
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7a6c:	4b14      	ldr	r3, [pc, #80]	; (7ac0 <dma_init_rx_symbols+0x64>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7a6e:	4a15      	ldr	r2, [pc, #84]	; (7ac4 <dma_init_rx_symbols+0x68>)
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7a70:	4d15      	ldr	r5, [pc, #84]	; (7ac8 <dma_init_rx_symbols+0x6c>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7a72:	6014      	str	r4, [r2, #0]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7a74:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7a76:	6051      	str	r1, [r2, #4]
	rx_dma_lli1.control = (DMA_SIZE) |
    7a78:	60d0      	str	r0, [r2, #12]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7a7a:	609a      	str	r2, [r3, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7a7c:	4a13      	ldr	r2, [pc, #76]	; (7acc <dma_init_rx_symbols+0x70>)
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7a7e:	605d      	str	r5, [r3, #4]
	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7a80:	601c      	str	r4, [r3, #0]
	rx_dma_lli2.control = (DMA_SIZE) |
    7a82:	60d8      	str	r0, [r3, #12]
	DMACC0SrcAddr = rx_dma_lli1.src;
    7a84:	6014      	str	r4, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    7a86:	6051      	str	r1, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7a88:	6093      	str	r3, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    7a8a:	f24d 0206 	movw	r2, #53254	; 0xd006
	DMACC0Control = rx_dma_lli1.control;
    7a8e:	4b10      	ldr	r3, [pc, #64]	; (7ad0 <dma_init_rx_symbols+0x74>)
    7a90:	6018      	str	r0, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7a92:	605a      	str	r2, [r3, #4]
	               | (0x2 << 11)       /* peripheral to memory */
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */

	rx_tc = 0;
    7a94:	2200      	movs	r2, #0
    7a96:	480f      	ldr	r0, [pc, #60]	; (7ad4 <dma_init_rx_symbols+0x78>)
    7a98:	6002      	str	r2, [r0, #0]
	rx_err = 0;
    7a9a:	480f      	ldr	r0, [pc, #60]	; (7ad8 <dma_init_rx_symbols+0x7c>)
    7a9c:	6002      	str	r2, [r0, #0]

	active_rxbuf = &rxbuf1[0];
    7a9e:	4a0f      	ldr	r2, [pc, #60]	; (7adc <dma_init_rx_symbols+0x80>)
    7aa0:	6011      	str	r1, [r2, #0]
	idle_rxbuf = &rxbuf2[0];
    7aa2:	4a0f      	ldr	r2, [pc, #60]	; (7ae0 <dma_init_rx_symbols+0x84>)
    7aa4:	6015      	str	r5, [r2, #0]

	// enable channel
	DMACC0Config |= 1;
    7aa6:	685a      	ldr	r2, [r3, #4]
    7aa8:	f042 0201 	orr.w	r2, r2, #1
    7aac:	605a      	str	r2, [r3, #4]
	DMACC0Config = DIO_SSP_SRC
    7aae:	bd30      	pop	{r4, r5, pc}
    7ab0:	50004008 	.word	0x50004008
    7ab4:	88009032 	.word	0x88009032
    7ab8:	40030008 	.word	0x40030008
    7abc:	100019e9 	.word	0x100019e9
    7ac0:	10003c9c 	.word	0x10003c9c
    7ac4:	10003cac 	.word	0x10003cac
    7ac8:	100019ad 	.word	0x100019ad
    7acc:	50004100 	.word	0x50004100
    7ad0:	5000410c 	.word	0x5000410c
    7ad4:	10001384 	.word	0x10001384
    7ad8:	10001a1c 	.word	0x10001a1c
    7adc:	100014a4 	.word	0x100014a4
    7ae0:	10001684 	.word	0x10001684

00007ae4 <dma_init_le>:
}

void dma_init_le(void) {
    7ae4:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    7ae6:	2301      	movs	r3, #1
    7ae8:	4a13      	ldr	r2, [pc, #76]	; (7b38 <dma_init_le+0x54>)
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7aea:	4d14      	ldr	r5, [pc, #80]	; (7b3c <dma_init_le+0x58>)
	DMACIntTCClear = 1 << channel;
    7aec:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7aee:	6093      	str	r3, [r2, #8]
	for (i = 0; i < 11; ++i) {
    7af0:	2200      	movs	r2, #0
    7af2:	4b13      	ldr	r3, [pc, #76]	; (7b40 <dma_init_le+0x5c>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7af4:	4c13      	ldr	r4, [pc, #76]	; (7b44 <dma_init_le+0x60>)
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7af6:	4914      	ldr	r1, [pc, #80]	; (7b48 <dma_init_le+0x64>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7af8:	eb04 0082 	add.w	r0, r4, r2, lsl #2
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7afc:	2a0a      	cmp	r2, #10
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7afe:	f843 0c0c 	str.w	r0, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7b02:	bf14      	ite	ne
    7b04:	4618      	movne	r0, r3
    7b06:	2000      	moveq	r0, #0
	for (i = 0; i < 11; ++i) {
    7b08:	3201      	adds	r2, #1
    7b0a:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7b0c:	f843 5c10 	str.w	r5, [r3, #-16]
		le_dma_lli[i].control = 4 |
    7b10:	e903 0003 	stmdb	r3, {r0, r1}
    7b14:	f103 0310 	add.w	r3, r3, #16
	for (i = 0; i < 11; ++i) {
    7b18:	d1ee      	bne.n	7af8 <dma_init_le+0x14>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7b1a:	4b0c      	ldr	r3, [pc, #48]	; (7b4c <dma_init_le+0x68>)
    7b1c:	4a0c      	ldr	r2, [pc, #48]	; (7b50 <dma_init_le+0x6c>)
    7b1e:	6819      	ldr	r1, [r3, #0]
    7b20:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7b22:	6859      	ldr	r1, [r3, #4]
    7b24:	6051      	str	r1, [r2, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7b26:	6899      	ldr	r1, [r3, #8]
    7b28:	6091      	str	r1, [r2, #8]
	DMACC0Control = le_dma_lli[0].control;
    7b2a:	68da      	ldr	r2, [r3, #12]
    7b2c:	4b09      	ldr	r3, [pc, #36]	; (7b54 <dma_init_le+0x70>)
    7b2e:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7b30:	f24d 0206 	movw	r2, #53254	; 0xd006
    7b34:	605a      	str	r2, [r3, #4]
    7b36:	bd30      	pop	{r4, r5, pc}
    7b38:	50004008 	.word	0x50004008
    7b3c:	40030008 	.word	0x40030008
    7b40:	10003bfc 	.word	0x10003bfc
    7b44:	100019e9 	.word	0x100019e9
    7b48:	88001004 	.word	0x88001004
    7b4c:	10003bec 	.word	0x10003bec
    7b50:	50004100 	.word	0x50004100
    7b54:	5000410c 	.word	0x5000410c

00007b58 <dio_ssp_start>:
}

void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b5c:	4b0a      	ldr	r3, [pc, #40]	; (7b88 <dio_ssp_start+0x30>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7b5e:	490b      	ldr	r1, [pc, #44]	; (7b8c <dio_ssp_start+0x34>)
	DIO_SSEL_SET;
    7b60:	601a      	str	r2, [r3, #0]
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7b62:	680b      	ldr	r3, [r1, #0]
    7b64:	f043 0301 	orr.w	r3, r3, #1
    7b68:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7b6a:	f851 3c20 	ldr.w	r3, [r1, #-32]
    7b6e:	f043 0302 	orr.w	r3, r3, #2
    7b72:	f841 3c20 	str.w	r3, [r1, #-32]

	// enable channel
	DMACC0Config |= 1;
    7b76:	4906      	ldr	r1, [pc, #24]	; (7b90 <dio_ssp_start+0x38>)
    7b78:	680b      	ldr	r3, [r1, #0]
    7b7a:	f043 0301 	orr.w	r3, r3, #1
    7b7e:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7b80:	4b04      	ldr	r3, [pc, #16]	; (7b94 <dio_ssp_start+0x3c>)
    7b82:	601a      	str	r2, [r3, #0]
    7b84:	4770      	bx	lr
    7b86:	bf00      	nop
    7b88:	2009c098 	.word	0x2009c098
    7b8c:	40030024 	.word	0x40030024
    7b90:	50004110 	.word	0x50004110
    7b94:	2009c09c 	.word	0x2009c09c

00007b98 <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b9c:	4b0a      	ldr	r3, [pc, #40]	; (7bc8 <dio_ssp_stop+0x30>)
    7b9e:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP ; disable DMA channel
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7ba0:	4a0a      	ldr	r2, [pc, #40]	; (7bcc <dio_ssp_stop+0x34>)
    7ba2:	6813      	ldr	r3, [r2, #0]
    7ba4:	f023 0301 	bic.w	r3, r3, #1
    7ba8:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7baa:	f852 3c20 	ldr.w	r3, [r2, #-32]
    7bae:	f023 0302 	bic.w	r3, r3, #2
    7bb2:	f842 3c20 	str.w	r3, [r2, #-32]
	DMACC0Config = 0;
    7bb6:	2200      	movs	r2, #0
    7bb8:	4b05      	ldr	r3, [pc, #20]	; (7bd0 <dio_ssp_stop+0x38>)
    7bba:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 1 << channel;
    7bbc:	2301      	movs	r3, #1
    7bbe:	4a05      	ldr	r2, [pc, #20]	; (7bd4 <dio_ssp_stop+0x3c>)
    7bc0:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7bc2:	6093      	str	r3, [r2, #8]
    7bc4:	4770      	bx	lr
    7bc6:	bf00      	nop
    7bc8:	2009c098 	.word	0x2009c098
    7bcc:	40030024 	.word	0x40030024
    7bd0:	50004110 	.word	0x50004110
    7bd4:	50004008 	.word	0x50004008

00007bd8 <le_dma_init>:
			DMACIntErrClr = (1 << 0);
		}
	}
}

static void le_dma_init(void) {
    7bd8:	b530      	push	{r4, r5, lr}
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7bda:	4b0c      	ldr	r3, [pc, #48]	; (7c0c <le_dma_init+0x34>)
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7bdc:	490c      	ldr	r1, [pc, #48]	; (7c10 <le_dma_init+0x38>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    7bde:	4a0d      	ldr	r2, [pc, #52]	; (7c14 <le_dma_init+0x3c>)
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7be0:	480d      	ldr	r0, [pc, #52]	; (7c18 <le_dma_init+0x40>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7be2:	f103 0410 	add.w	r4, r3, #16
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7be6:	1c4d      	adds	r5, r1, #1
		le_dma_lli[i].control = 1 |
    7be8:	60da      	str	r2, [r3, #12]
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7bea:	6018      	str	r0, [r3, #0]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7bec:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7bee:	609c      	str	r4, [r3, #8]
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7bf0:	6118      	str	r0, [r3, #16]
		le_dma_lli[i].control = 1 |
    7bf2:	61da      	str	r2, [r3, #28]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7bf4:	615d      	str	r5, [r3, #20]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7bf6:	619b      	str	r3, [r3, #24]
				(0 << 21) |        // destination width 8 bits
				DMACCxControl_I;   // terminal count interrupt enable
	}

	// configure DMA channel 0
	DMACC0SrcAddr = le_dma_lli[0].src;
    7bf8:	4b08      	ldr	r3, [pc, #32]	; (7c1c <le_dma_init+0x44>)
    7bfa:	6018      	str	r0, [r3, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7bfc:	6059      	str	r1, [r3, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7bfe:	609c      	str	r4, [r3, #8]
	DMACC0Control = le_dma_lli[0].control;
    7c00:	60da      	str	r2, [r3, #12]
	DMACC0Config =
    7c02:	f24d 0206 	movw	r2, #53254	; 0xd006
    7c06:	611a      	str	r2, [r3, #16]
    7c08:	bd30      	pop	{r4, r5, pc}
    7c0a:	bf00      	nop
    7c0c:	10000c60 	.word	0x10000c60
    7c10:	10003cfc 	.word	0x10003cfc
    7c14:	80000001 	.word	0x80000001
    7c18:	40030008 	.word	0x40030008
    7c1c:	50004100 	.word	0x50004100

00007c20 <timer1_set_match>:
	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
}

static void timer1_set_match(uint32_t match) {
	T1MR0 = match;
    7c20:	4b03      	ldr	r3, [pc, #12]	; (7c30 <timer1_set_match+0x10>)
	T1MCR |= TMCR_MR0I;
    7c22:	4a04      	ldr	r2, [pc, #16]	; (7c34 <timer1_set_match+0x14>)
	T1MR0 = match;
    7c24:	6018      	str	r0, [r3, #0]
	T1MCR |= TMCR_MR0I;
    7c26:	6813      	ldr	r3, [r2, #0]
    7c28:	f043 0301 	orr.w	r3, r3, #1
    7c2c:	6013      	str	r3, [r2, #0]
    7c2e:	4770      	bx	lr
    7c30:	40008018 	.word	0x40008018
    7c34:	40008014 	.word	0x40008014

00007c38 <timer1_wait_fs_lock>:
static void timer1_clear_match(void) {
	T1MCR &= ~TMCR_MR0I;
}

static void timer1_wait_fs_lock(void) {
	T1MR2 = NOW + USEC(3);
    7c38:	4b05      	ldr	r3, [pc, #20]	; (7c50 <timer1_wait_fs_lock+0x18>)
    7c3a:	4a06      	ldr	r2, [pc, #24]	; (7c54 <timer1_wait_fs_lock+0x1c>)
    7c3c:	681b      	ldr	r3, [r3, #0]
    7c3e:	331e      	adds	r3, #30
    7c40:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR2I;
    7c42:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    7c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c4a:	f842 3c0c 	str.w	r3, [r2, #-12]
    7c4e:	4770      	bx	lr
    7c50:	40008008 	.word	0x40008008
    7c54:	40008020 	.word	0x40008020

00007c58 <reset_conn>:
static void reset_conn(void) {
    7c58:	b510      	push	{r4, lr}
	memset(&conn, 0, sizeof(conn));
    7c5a:	4c05      	ldr	r4, [pc, #20]	; (7c70 <reset_conn+0x18>)
    7c5c:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    7c60:	2100      	movs	r1, #0
    7c62:	f104 0020 	add.w	r0, r4, #32
    7c66:	f7fc facb 	bl	4200 <memset>
	conn.access_address = ADVERTISING_AA;
    7c6a:	4b02      	ldr	r3, [pc, #8]	; (7c74 <reset_conn+0x1c>)
    7c6c:	6223      	str	r3, [r4, #32]
    7c6e:	bd10      	pop	{r4, pc}
    7c70:	10000c60 	.word	0x10000c60
    7c74:	8e89bed6 	.word	0x8e89bed6

00007c78 <buffer_get>:
static le_rx_t *buffer_get(void) {
    7c78:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    7c7a:	2300      	movs	r3, #0
    7c7c:	f44f 7592 	mov.w	r5, #292	; 0x124
    7c80:	4c12      	ldr	r4, [pc, #72]	; (7ccc <buffer_get+0x54>)
    7c82:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
    7c86:	fb05 f203 	mul.w	r2, r5, r3
    7c8a:	188e      	adds	r6, r1, r2
		if (le_buffer_pool[i].available) {
    7c8c:	f8d6 0118 	ldr.w	r0, [r6, #280]	; 0x118
    7c90:	b1b8      	cbz	r0, 7cc2 <buffer_get+0x4a>
			le_buffer_pool[i].available = 0;
    7c92:	2500      	movs	r5, #0
    7c94:	4414      	add	r4, r2
    7c96:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
	buf->pos = 0;
    7c9a:	f8c4 52f0 	str.w	r5, [r4, #752]	; 0x2f0
	buf->size = 0;
    7c9e:	f8c4 52ec 	str.w	r5, [r4, #748]	; 0x2ec
	memset(buf->data, 0, sizeof(buf->data));
    7ca2:	f44f 7282 	mov.w	r2, #260	; 0x104
    7ca6:	4629      	mov	r1, r5
    7ca8:	4630      	mov	r0, r6
    7caa:	f7fc faa9 	bl	4200 <memset>
	buf->rssi_min = INT8_MAX;
    7cae:	237f      	movs	r3, #127	; 0x7f
    7cb0:	f884 3304 	strb.w	r3, [r4, #772]	; 0x304
	buf->rssi_max = INT8_MIN;
    7cb4:	2380      	movs	r3, #128	; 0x80
	buf->rssi_sum = 0;
    7cb6:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
	buf->rssi_max = INT8_MIN;
    7cba:	f884 3305 	strb.w	r3, [r4, #773]	; 0x305
	buf->rssi_sum = 0;
    7cbe:	4630      	mov	r0, r6
    7cc0:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    7cc2:	3301      	adds	r3, #1
    7cc4:	2b04      	cmp	r3, #4
    7cc6:	d1de      	bne.n	7c86 <buffer_get+0xe>
}
    7cc8:	bd70      	pop	{r4, r5, r6, pc}
    7cca:	bf00      	nop
    7ccc:	10000c60 	.word	0x10000c60

00007cd0 <le_cc2400_init_rf>:
static void le_cc2400_init_rf(void) {
    7cd0:	b510      	push	{r4, lr}
	uint32_t sync = rbit(conn.access_address);
    7cd2:	4b1b      	ldr	r3, [pc, #108]	; (7d40 <le_cc2400_init_rf+0x70>)
    7cd4:	6a18      	ldr	r0, [r3, #32]
    7cd6:	f001 faf9 	bl	92cc <rbit>
    7cda:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7ffe);
    7cdc:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    7ce0:	200d      	movs	r0, #13
    7ce2:	f001 fbea 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7ce6:	f642 3122 	movw	r1, #11042	; 0x2b22
    7cea:	2012      	movs	r0, #18
    7cec:	f001 fbe5 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    7cf0:	f241 214b 	movw	r1, #4683	; 0x124b
    7cf4:	2014      	movs	r0, #20
    7cf6:	f001 fbe0 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    7cfa:	f244 41e1 	movw	r1, #17633	; 0x44e1
    7cfe:	2020      	movs	r0, #32
    7d00:	f001 fbdb 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    7d04:	b2a1      	uxth	r1, r4
    7d06:	202c      	movs	r0, #44	; 0x2c
    7d08:	f001 fbd7 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    7d0c:	0c21      	lsrs	r1, r4, #16
    7d0e:	202d      	movs	r0, #45	; 0x2d
    7d10:	f001 fbd3 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   rf_channel - 1); // 1 MHz IF
    7d14:	4b0b      	ldr	r3, [pc, #44]	; (7d44 <le_cc2400_init_rf+0x74>)
    7d16:	2002      	movs	r0, #2
    7d18:	8819      	ldrh	r1, [r3, #0]
    7d1a:	3901      	subs	r1, #1
    7d1c:	b289      	uxth	r1, r1
    7d1e:	f001 fbcc 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    7d22:	2140      	movs	r1, #64	; 0x40
    7d24:	2003      	movs	r0, #3
    7d26:	f001 fbc8 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7d2a:	f001 fc61 	bl	95f0 <cc2400_status>
    7d2e:	0643      	lsls	r3, r0, #25
    7d30:	d5fb      	bpl.n	7d2a <le_cc2400_init_rf+0x5a>
	cc2400_strobe(SFSON);
    7d32:	2061      	movs	r0, #97	; 0x61
    7d34:	f001 fc63 	bl	95fe <cc2400_strobe>
}
    7d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer1_wait_fs_lock();
    7d3c:	f7ff bf7c 	b.w	7c38 <timer1_wait_fs_lock>
    7d40:	10000c60 	.word	0x10000c60
    7d44:	10003cec 	.word	0x10003cec

00007d48 <change_channel>:
static void change_channel(void) {
    7d48:	b570      	push	{r4, r5, r6, lr}
	cc2400_strobe(SRFOFF);
    7d4a:	2064      	movs	r0, #100	; 0x64
    7d4c:	f001 fc57 	bl	95fe <cc2400_strobe>
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7d50:	4a28      	ldr	r2, [pc, #160]	; (7df4 <change_channel+0xac>)
    7d52:	6813      	ldr	r3, [r2, #0]
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7d54:	3a1c      	subs	r2, #28
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7d56:	f023 0301 	bic.w	r3, r3, #1
    7d5a:	61d3      	str	r3, [r2, #28]
	while (SSP1SR & SSPSR_RNE) {
    7d5c:	4b26      	ldr	r3, [pc, #152]	; (7df8 <change_channel+0xb0>)
    7d5e:	681c      	ldr	r4, [r3, #0]
    7d60:	f014 0404 	ands.w	r4, r4, #4
    7d64:	d130      	bne.n	7dc8 <change_channel+0x80>
	buffer_clear(current_rxbuf);
    7d66:	4d25      	ldr	r5, [pc, #148]	; (7dfc <change_channel+0xb4>)
	memset(buf->data, 0, sizeof(buf->data));
    7d68:	f44f 7282 	mov.w	r2, #260	; 0x104
	buffer_clear(current_rxbuf);
    7d6c:	f8d5 6678 	ldr.w	r6, [r5, #1656]	; 0x678
	memset(buf->data, 0, sizeof(buf->data));
    7d70:	4621      	mov	r1, r4
	buf->pos = 0;
    7d72:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	buf->size = 0;
    7d76:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
	memset(buf->data, 0, sizeof(buf->data));
    7d7a:	4630      	mov	r0, r6
    7d7c:	f7fc fa40 	bl	4200 <memset>
	buf->rssi_min = INT8_MAX;
    7d80:	237f      	movs	r3, #127	; 0x7f
    7d82:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
	buf->rssi_max = INT8_MIN;
    7d86:	2380      	movs	r3, #128	; 0x80
	buf->rssi_sum = 0;
    7d88:	f8c6 4120 	str.w	r4, [r6, #288]	; 0x120
	buf->rssi_max = INT8_MIN;
    7d8c:	f886 311d 	strb.w	r3, [r6, #285]	; 0x11d
	le_dma_init();
    7d90:	f7ff ff22 	bl	7bd8 <le_dma_init>
	dio_ssp_start();
    7d94:	f7ff fee0 	bl	7b58 <dio_ssp_start>
	if (conn.access_address == ADVERTISING_AA) {
    7d98:	6a2a      	ldr	r2, [r5, #32]
    7d9a:	4b19      	ldr	r3, [pc, #100]	; (7e00 <change_channel+0xb8>)
    7d9c:	429a      	cmp	r2, r3
    7d9e:	d117      	bne.n	7dd0 <change_channel+0x88>
		switch (le_adv_channel) {
    7da0:	f640 127a 	movw	r2, #2426	; 0x97a
    7da4:	4b17      	ldr	r3, [pc, #92]	; (7e04 <change_channel+0xbc>)
    7da6:	881b      	ldrh	r3, [r3, #0]
    7da8:	b29b      	uxth	r3, r3
    7daa:	4293      	cmp	r3, r2
    7dac:	d00e      	beq.n	7dcc <change_channel+0x84>
			case 2402: channel_idx = 37; break;
    7dae:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    7db2:	bf0c      	ite	eq
    7db4:	2027      	moveq	r0, #39	; 0x27
    7db6:	2025      	movne	r0, #37	; 0x25
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7db8:	f7ff fba8 	bl	750c <btle_channel_index_to_phys>
}
    7dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7dc0:	4b11      	ldr	r3, [pc, #68]	; (7e08 <change_channel+0xc0>)
    7dc2:	8018      	strh	r0, [r3, #0]
	le_cc2400_init_rf();
    7dc4:	f7ff bf84 	b.w	7cd0 <le_cc2400_init_rf>
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7dc8:	6811      	ldr	r1, [r2, #0]
    7dca:	e7c8      	b.n	7d5e <change_channel+0x16>
			case 2426: channel_idx = 38; break;
    7dcc:	2026      	movs	r0, #38	; 0x26
    7dce:	e7f3      	b.n	7db8 <change_channel+0x70>
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7dd0:	2225      	movs	r2, #37	; 0x25
    7dd2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7dd6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7dda:	f105 0140 	add.w	r1, r5, #64	; 0x40
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7dde:	4403      	add	r3, r0
    7de0:	fb93 f0f2 	sdiv	r0, r3, r2
    7de4:	fb02 3010 	mls	r0, r2, r0, r3
    7de8:	b2c0      	uxtb	r0, r0
    7dea:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7dee:	f7ff fbf3 	bl	75d8 <le_map_channel>
    7df2:	e7e1      	b.n	7db8 <change_channel+0x70>
    7df4:	40030024 	.word	0x40030024
    7df8:	4003000c 	.word	0x4003000c
    7dfc:	10000c60 	.word	0x10000c60
    7e00:	8e89bed6 	.word	0x8e89bed6
    7e04:	100004a0 	.word	0x100004a0
    7e08:	10003cec 	.word	0x10003cec

00007e0c <finish_conn_event>:
static void finish_conn_event(void) {
    7e0c:	b538      	push	{r3, r4, r5, lr}
	if (conn_event.num_packets == 2) {
    7e0e:	4a2a      	ldr	r2, [pc, #168]	; (7eb8 <finish_conn_event+0xac>)
    7e10:	4b2a      	ldr	r3, [pc, #168]	; (7ebc <finish_conn_event+0xb0>)
    7e12:	6850      	ldr	r0, [r2, #4]
    7e14:	2802      	cmp	r0, #2
    7e16:	d106      	bne.n	7e26 <finish_conn_event+0x1a>
		last_anchor = conn_event.anchor;
    7e18:	6814      	ldr	r4, [r2, #0]
		conn.anchor_set = 1;
    7e1a:	2101      	movs	r1, #1
		conn.last_anchor = last_anchor;
    7e1c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		conn.anchor_set = 1;
    7e20:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7e24:	e01e      	b.n	7e64 <finish_conn_event+0x58>
	else if (conn_event.num_packets == 1 && conn.anchor_set) {
    7e26:	2801      	cmp	r0, #1
    7e28:	d10b      	bne.n	7e42 <finish_conn_event+0x36>
    7e2a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7e2e:	b141      	cbz	r1, 7e42 <finish_conn_event+0x36>
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    7e30:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    7e34:	6b1d      	ldr	r5, [r3, #48]	; 0x30
		uint32_t delta = estimated_anchor - conn_event.anchor;
    7e36:	6814      	ldr	r4, [r2, #0]
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    7e38:	4429      	add	r1, r5
		delta += ANCHOR_EPSILON;
    7e3a:	311e      	adds	r1, #30
    7e3c:	1b09      	subs	r1, r1, r4
		if (delta < 2 * ANCHOR_EPSILON) {
    7e3e:	293b      	cmp	r1, #59	; 0x3b
    7e40:	d9eb      	bls.n	7e1a <finish_conn_event+0xe>
	else if (conn.anchor_set) {
    7e42:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7e46:	b939      	cbnz	r1, 7e58 <finish_conn_event+0x4c>
		conn.last_anchor = conn_event.anchor;
    7e48:	6811      	ldr	r1, [r2, #0]
    7e4a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		conn.last_packet_ts = NOW; // FIXME gross hack
    7e4e:	491c      	ldr	r1, [pc, #112]	; (7ec0 <finish_conn_event+0xb4>)
    7e50:	6809      	ldr	r1, [r1, #0]
    7e52:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    7e56:	e005      	b.n	7e64 <finish_conn_event+0x58>
		conn.last_anchor += conn.conn_interval;
    7e58:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    7e5c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    7e5e:	4421      	add	r1, r4
    7e60:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7e64:	4c16      	ldr	r4, [pc, #88]	; (7ec0 <finish_conn_event+0xb4>)
	if (conn_event.num_packets > 0) {
    7e66:	b110      	cbz	r0, 7e6e <finish_conn_event+0x62>
		conn.last_packet_ts = NOW;
    7e68:	6821      	ldr	r1, [r4, #0]
    7e6a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	conn_event.num_packets = 0;
    7e6e:	2100      	movs	r1, #0
    7e70:	6051      	str	r1, [r2, #4]
	conn_event.opened = 0;
    7e72:	6091      	str	r1, [r2, #8]
	++conn.conn_event_counter;
    7e74:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    7e78:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
	++conn.conn_event_counter;
    7e7c:	3201      	adds	r2, #1
    7e7e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    7e82:	6822      	ldr	r2, [r4, #0]
    7e84:	1a12      	subs	r2, r2, r0
    7e86:	6b58      	ldr	r0, [r3, #52]	; 0x34
    7e88:	4282      	cmp	r2, r0
    7e8a:	d905      	bls.n	7e98 <finish_conn_event+0x8c>
		reset_conn();
    7e8c:	f7ff fee4 	bl	7c58 <reset_conn>
}
    7e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		change_channel();
    7e94:	f7ff bf58 	b.w	7d48 <change_channel>
	else if (cancel_follow) {
    7e98:	4a0a      	ldr	r2, [pc, #40]	; (7ec4 <finish_conn_event+0xb8>)
    7e9a:	6810      	ldr	r0, [r2, #0]
    7e9c:	b108      	cbz	r0, 7ea2 <finish_conn_event+0x96>
		cancel_follow = 0;
    7e9e:	6011      	str	r1, [r2, #0]
    7ea0:	e7f4      	b.n	7e8c <finish_conn_event+0x80>
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7ea2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    7ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7ea8:	4418      	add	r0, r3
    7eaa:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
}
    7eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7eb2:	f7ff beb5 	b.w	7c20 <timer1_set_match>
    7eb6:	bf00      	nop
    7eb8:	10003cf0 	.word	0x10003cf0
    7ebc:	10000c60 	.word	0x10000c60
    7ec0:	40008008 	.word	0x40008008
    7ec4:	10000a74 	.word	0x10000a74

00007ec8 <le_DMA_IRQHandler>:
void le_DMA_IRQHandler(void) {
    7ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    debug_printf("le_DMA_IRQHandler\n");
    7eca:	4869      	ldr	r0, [pc, #420]	; (8070 <le_DMA_IRQHandler+0x1a8>)
    7ecc:	f000 fea8 	bl	8c20 <debug_printf>
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7ed0:	4d68      	ldr	r5, [pc, #416]	; (8074 <le_DMA_IRQHandler+0x1ac>)
	if (DMACIntStat & (1 << 0)) {
    7ed2:	4b69      	ldr	r3, [pc, #420]	; (8078 <le_DMA_IRQHandler+0x1b0>)
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7ed4:	682f      	ldr	r7, [r5, #0]
	if (DMACIntStat & (1 << 0)) {
    7ed6:	681b      	ldr	r3, [r3, #0]
    7ed8:	07de      	lsls	r6, r3, #31
    7eda:	d549      	bpl.n	7f70 <le_DMA_IRQHandler+0xa8>
		if (DMACIntTCStat & (1 << 0)) {
    7edc:	4b67      	ldr	r3, [pc, #412]	; (807c <le_DMA_IRQHandler+0x1b4>)
    7ede:	681b      	ldr	r3, [r3, #0]
    7ee0:	07dc      	lsls	r4, r3, #31
    7ee2:	d53e      	bpl.n	7f62 <le_DMA_IRQHandler+0x9a>
			DMACIntTCClear = (1 << 0);
    7ee4:	2301      	movs	r3, #1
    7ee6:	4e66      	ldr	r6, [pc, #408]	; (8080 <le_DMA_IRQHandler+0x1b8>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7ee8:	2006      	movs	r0, #6
			DMACIntTCClear = (1 << 0);
    7eea:	6033      	str	r3, [r6, #0]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7eec:	f001 fadc 	bl	94a8 <cc2400_get>
			current_rxbuf->rssi_sum += rssi;
    7ef0:	4c64      	ldr	r4, [pc, #400]	; (8084 <le_DMA_IRQHandler+0x1bc>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7ef2:	f340 2007 	sbfx	r0, r0, #8, #8
			current_rxbuf->rssi_sum += rssi;
    7ef6:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7efa:	f993 211c 	ldrsb.w	r2, [r3, #284]	; 0x11c
			current_rxbuf->rssi_sum += rssi;
    7efe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7f02:	4282      	cmp	r2, r0
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f04:	f993 211d 	ldrsb.w	r2, [r3, #285]	; 0x11d
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7f08:	bfc8      	it	gt
    7f0a:	f883 011c 	strbgt.w	r0, [r3, #284]	; 0x11c
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f0e:	4282      	cmp	r2, r0
			pos = current_rxbuf->pos;
    7f10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			current_rxbuf->rssi_sum += rssi;
    7f14:	4401      	add	r1, r0
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f16:	bfb8      	it	lt
    7f18:	f883 011d 	strblt.w	r0, [r3, #285]	; 0x11d
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    7f1c:	485a      	ldr	r0, [pc, #360]	; (8088 <le_DMA_IRQHandler+0x1c0>)
			current_rxbuf->rssi_sum += rssi;
    7f1e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    7f22:	f002 0101 	and.w	r1, r2, #1
    7f26:	5c41      	ldrb	r1, [r0, r1]
    7f28:	5499      	strb	r1, [r3, r2]
			pos += 1;
    7f2a:	3201      	adds	r2, #1
			if (pos == 1) {
    7f2c:	2a01      	cmp	r2, #1
			current_rxbuf->pos = pos;
    7f2e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (pos == 1) {
    7f32:	d11e      	bne.n	7f72 <le_DMA_IRQHandler+0xaa>
				current_rxbuf->channel = rf_channel;
    7f34:	4955      	ldr	r1, [pc, #340]	; (808c <le_DMA_IRQHandler+0x1c4>)
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7f36:	f5a7 77c8 	sub.w	r7, r7, #400	; 0x190
				current_rxbuf->channel = rf_channel;
    7f3a:	880a      	ldrh	r2, [r1, #0]
				if (btle_channel_index(rf_channel) < 37) {
    7f3c:	8808      	ldrh	r0, [r1, #0]
				current_rxbuf->channel = rf_channel;
    7f3e:	b292      	uxth	r2, r2
    7f40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				current_rxbuf->access_address = conn.access_address;
    7f44:	6a22      	ldr	r2, [r4, #32]
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7f46:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
				current_rxbuf->access_address = conn.access_address;
    7f4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
				if (btle_channel_index(rf_channel) < 37) {
    7f4e:	b280      	uxth	r0, r0
    7f50:	f7ff fac4 	bl	74dc <btle_channel_index>
    7f54:	2824      	cmp	r0, #36	; 0x24
    7f56:	d804      	bhi.n	7f62 <le_DMA_IRQHandler+0x9a>
	T1MCR &= ~TMCR_MR0I;
    7f58:	4a4d      	ldr	r2, [pc, #308]	; (8090 <le_DMA_IRQHandler+0x1c8>)
    7f5a:	6813      	ldr	r3, [r2, #0]
    7f5c:	f023 0301 	bic.w	r3, r3, #1
    7f60:	6013      	str	r3, [r2, #0]
		if (DMACIntErrStat & (1 << 0)) {
    7f62:	4b4c      	ldr	r3, [pc, #304]	; (8094 <le_DMA_IRQHandler+0x1cc>)
    7f64:	681b      	ldr	r3, [r3, #0]
    7f66:	07db      	lsls	r3, r3, #31
			DMACIntErrClr = (1 << 0);
    7f68:	bf42      	ittt	mi
    7f6a:	2201      	movmi	r2, #1
    7f6c:	4b4a      	ldrmi	r3, [pc, #296]	; (8098 <le_DMA_IRQHandler+0x1d0>)
    7f6e:	601a      	strmi	r2, [r3, #0]
    7f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pos == 2) {
    7f72:	2a02      	cmp	r2, #2
    7f74:	d12e      	bne.n	7fd4 <le_DMA_IRQHandler+0x10c>

// helper function to dewhiten length from whitened data (only used
// during DMA)
static uint8_t dewhiten_length(unsigned channel, uint8_t data) {
	unsigned int i, bit;
	int idx = whitening_index[btle_channel_index(channel)];
    7f76:	f8b3 0110 	ldrh.w	r0, [r3, #272]	; 0x110
				uint8_t length = dewhiten_length(current_rxbuf->channel, current_rxbuf->data[1]);
    7f7a:	785e      	ldrb	r6, [r3, #1]
	int idx = whitening_index[btle_channel_index(channel)];
    7f7c:	f7ff faae 	bl	74dc <btle_channel_index>
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);
    7f80:	277f      	movs	r7, #127	; 0x7f
	uint8_t out = 0;
    7f82:	2100      	movs	r1, #0
	int idx = whitening_index[btle_channel_index(channel)];
    7f84:	4d45      	ldr	r5, [pc, #276]	; (809c <le_DMA_IRQHandler+0x1d4>)
    7f86:	5c2b      	ldrb	r3, [r5, r0]
    7f88:	46ae      	mov	lr, r5
	idx = (idx + 8) % sizeof(whitening);
    7f8a:	3308      	adds	r3, #8
    7f8c:	fbb3 f2f7 	udiv	r2, r3, r7

	for (i = 0; i < 8; ++i) {
    7f90:	4608      	mov	r0, r1
	idx = (idx + 8) % sizeof(whitening);
    7f92:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    7f96:	1a9b      	subs	r3, r3, r2
		bit = (data >> (7-i)) & 1;
    7f98:	f1c0 0207 	rsb	r2, r0, #7
    7f9c:	fa46 f202 	asr.w	r2, r6, r2
    7fa0:	f002 0501 	and.w	r5, r2, #1
		bit ^= whitening[idx];
    7fa4:	eb0e 0203 	add.w	r2, lr, r3
    7fa8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
		idx = (idx + 1) % sizeof(whitening);
    7fac:	3301      	adds	r3, #1
		bit ^= whitening[idx];
    7fae:	406a      	eors	r2, r5
		idx = (idx + 1) % sizeof(whitening);
    7fb0:	fbb3 f5f7 	udiv	r5, r3, r7
		out |= bit << i;
    7fb4:	4082      	lsls	r2, r0
	for (i = 0; i < 8; ++i) {
    7fb6:	3001      	adds	r0, #1
		idx = (idx + 1) % sizeof(whitening);
    7fb8:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
		out |= bit << i;
    7fbc:	430a      	orrs	r2, r1
	for (i = 0; i < 8; ++i) {
    7fbe:	2808      	cmp	r0, #8
		idx = (idx + 1) % sizeof(whitening);
    7fc0:	eba3 0305 	sub.w	r3, r3, r5
		out |= bit << i;
    7fc4:	b2d1      	uxtb	r1, r2
	for (i = 0; i < 8; ++i) {
    7fc6:	d1e7      	bne.n	7f98 <le_DMA_IRQHandler+0xd0>
				current_rxbuf->size = length + 2 + 3; // two bytes for header and three for CRC
    7fc8:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    7fcc:	3105      	adds	r1, #5
    7fce:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7fd2:	e7c6      	b.n	7f62 <le_DMA_IRQHandler+0x9a>
			if (pos > 2 && pos >= current_rxbuf->size) {
    7fd4:	d9c5      	bls.n	7f62 <le_DMA_IRQHandler+0x9a>
    7fd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7fda:	429a      	cmp	r2, r3
    7fdc:	d3c1      	bcc.n	7f62 <le_DMA_IRQHandler+0x9a>
				cc2400_strobe(SFSON);
    7fde:	2061      	movs	r0, #97	; 0x61
    7fe0:	f001 fb0d 	bl	95fe <cc2400_strobe>
				DMACC0Config = 0;
    7fe4:	2200      	movs	r2, #0
    7fe6:	4b2e      	ldr	r3, [pc, #184]	; (80a0 <le_DMA_IRQHandler+0x1d8>)
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7fe8:	492e      	ldr	r1, [pc, #184]	; (80a4 <le_DMA_IRQHandler+0x1dc>)
				DMACC0Config = 0;
    7fea:	601a      	str	r2, [r3, #0]
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7fec:	2301      	movs	r3, #1
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7fee:	4a2e      	ldr	r2, [pc, #184]	; (80a8 <le_DMA_IRQHandler+0x1e0>)
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7ff0:	6033      	str	r3, [r6, #0]
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7ff2:	6813      	ldr	r3, [r2, #0]
				while (SSP1SR & SSPSR_RNE) {
    7ff4:	3a18      	subs	r2, #24
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7ff6:	f023 0301 	bic.w	r3, r3, #1
    7ffa:	6193      	str	r3, [r2, #24]
				while (SSP1SR & SSPSR_RNE) {
    7ffc:	6813      	ldr	r3, [r2, #0]
    7ffe:	0758      	lsls	r0, r3, #29
    8000:	d426      	bmi.n	8050 <le_DMA_IRQHandler+0x188>
				queue_insert(&packet_queue, current_rxbuf);
    8002:	f8d4 1678 	ldr.w	r1, [r4, #1656]	; 0x678
    8006:	4829      	ldr	r0, [pc, #164]	; (80ac <le_DMA_IRQHandler+0x1e4>)
    8008:	f000 f8f8 	bl	81fc <queue_insert>
				if (btle_channel_index(rf_channel) < 37) {
    800c:	4b1f      	ldr	r3, [pc, #124]	; (808c <le_DMA_IRQHandler+0x1c4>)
    800e:	8818      	ldrh	r0, [r3, #0]
    8010:	b280      	uxth	r0, r0
    8012:	f7ff fa63 	bl	74dc <btle_channel_index>
    8016:	2824      	cmp	r0, #36	; 0x24
    8018:	d80f      	bhi.n	803a <le_DMA_IRQHandler+0x172>
					++conn_event.num_packets;
    801a:	4a25      	ldr	r2, [pc, #148]	; (80b0 <le_DMA_IRQHandler+0x1e8>)
    801c:	6853      	ldr	r3, [r2, #4]
    801e:	3301      	adds	r3, #1
					if (conn_event.num_packets == 1) {
    8020:	2b01      	cmp	r3, #1
					++conn_event.num_packets;
    8022:	6053      	str	r3, [r2, #4]
					if (conn_event.num_packets == 1) {
    8024:	d116      	bne.n	8054 <le_DMA_IRQHandler+0x18c>
						conn_event.anchor = current_rxbuf->timestamp;
    8026:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    802a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    802e:	6013      	str	r3, [r2, #0]
						timer1_set_match(NOW + IFS_TIMEOUT); // set a timeout for next packet
    8030:	6828      	ldr	r0, [r5, #0]
    8032:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
    8036:	f7ff fdf3 	bl	7c20 <timer1_set_match>
				current_rxbuf = buffer_get();
    803a:	f7ff fe1d 	bl	7c78 <buffer_get>
    803e:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
				le_dma_init();
    8042:	f7ff fdc9 	bl	7bd8 <le_dma_init>
				dio_ssp_start();
    8046:	f7ff fd87 	bl	7b58 <dio_ssp_start>
				timer1_wait_fs_lock();
    804a:	f7ff fdf5 	bl	7c38 <timer1_wait_fs_lock>
    804e:	e788      	b.n	7f62 <le_DMA_IRQHandler+0x9a>
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    8050:	680b      	ldr	r3, [r1, #0]
    8052:	e7d3      	b.n	7ffc <le_DMA_IRQHandler+0x134>
					else if (conn_event.num_packets == 2) {
    8054:	2b02      	cmp	r3, #2
    8056:	d1f0      	bne.n	803a <le_DMA_IRQHandler+0x172>
						cc2400_strobe(SRFOFF);
    8058:	2064      	movs	r0, #100	; 0x64
    805a:	f001 fad0 	bl	95fe <cc2400_strobe>
						current_rxbuf = buffer_get();
    805e:	f7ff fe0b 	bl	7c78 <buffer_get>
    8062:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
}
    8066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						finish_conn_event();
    806a:	f7ff becf 	b.w	7e0c <finish_conn_event>
    806e:	bf00      	nop
    8070:	0000b676 	.word	0x0000b676
    8074:	40008008 	.word	0x40008008
    8078:	50004000 	.word	0x50004000
    807c:	50004004 	.word	0x50004004
    8080:	50004008 	.word	0x50004008
    8084:	10000c60 	.word	0x10000c60
    8088:	10003cfc 	.word	0x10003cfc
    808c:	10003cec 	.word	0x10003cec
    8090:	40008014 	.word	0x40008014
    8094:	5000400c 	.word	0x5000400c
    8098:	50004010 	.word	0x50004010
    809c:	0000b5cf 	.word	0x0000b5cf
    80a0:	50004110 	.word	0x50004110
    80a4:	40030008 	.word	0x40030008
    80a8:	40030024 	.word	0x40030024
    80ac:	10003cbc 	.word	0x10003cbc
    80b0:	10003cf0 	.word	0x10003cf0

000080b4 <TIMER1_IRQHandler>:
void TIMER1_IRQHandler(void) {
    80b4:	b538      	push	{r3, r4, r5, lr}
	if (T1IR & TIR_MR0_Interrupt) {
    80b6:	4b49      	ldr	r3, [pc, #292]	; (81dc <TIMER1_IRQHandler+0x128>)
    80b8:	681a      	ldr	r2, [r3, #0]
    80ba:	07d0      	lsls	r0, r2, #31
    80bc:	d55a      	bpl.n	8174 <TIMER1_IRQHandler+0xc0>
		T1IR = TIR_MR0_Interrupt;
    80be:	2101      	movs	r1, #1
    80c0:	6019      	str	r1, [r3, #0]
		if (conn.conn_update_pending &&
    80c2:	4b47      	ldr	r3, [pc, #284]	; (81e0 <TIMER1_IRQHandler+0x12c>)
    80c4:	4d47      	ldr	r5, [pc, #284]	; (81e4 <TIMER1_IRQHandler+0x130>)
    80c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    80ca:	461c      	mov	r4, r3
    80cc:	b392      	cbz	r2, 8134 <TIMER1_IRQHandler+0x80>
    80ce:	f8b3 010c 	ldrh.w	r0, [r3, #268]	; 0x10c
    80d2:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
    80d6:	4290      	cmp	r0, r2
    80d8:	d12c      	bne.n	8134 <TIMER1_IRQHandler+0x80>
			if (!conn_event.opened && conn.win_offset > 0) {
    80da:	68aa      	ldr	r2, [r5, #8]
    80dc:	b962      	cbnz	r2, 80f8 <TIMER1_IRQHandler+0x44>
    80de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    80e0:	b150      	cbz	r0, 80f8 <TIMER1_IRQHandler+0x44>
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    80e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    80e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    80e8:	4410      	add	r0, r2
    80ea:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    80ee:	4418      	add	r0, r3
    80f0:	f7ff fd96 	bl	7c20 <timer1_set_match>
				conn_event.opened = 1;
    80f4:	60a9      	str	r1, [r5, #8]
    80f6:	bd38      	pop	{r3, r4, r5, pc}
				conn_event.opened = 1;
    80f8:	2301      	movs	r3, #1
    80fa:	60ab      	str	r3, [r5, #8]
				conn.anchor_set = 0;
    80fc:	2300      	movs	r3, #0
				conn.conn_interval = conn.conn_update_pending_interval;
    80fe:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
				conn.anchor_set = 0;
    8102:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
				conn.conn_update_pending = 0;
    8106:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    810a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
				conn.conn_interval = conn.conn_update_pending_interval;
    810e:	6320      	str	r0, [r4, #48]	; 0x30
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    8110:	4418      	add	r0, r3
    8112:	f500 40a5 	add.w	r0, r0, #21120	; 0x5280
    8116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8118:	3050      	adds	r0, #80	; 0x50
    811a:	4418      	add	r0, r3
						conn.win_offset + conn.win_size + USEC(2120));
    811c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    8120:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    8124:	4418      	add	r0, r3
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    8126:	6362      	str	r2, [r4, #52]	; 0x34
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    8128:	f7ff fd7a 	bl	7c20 <timer1_set_match>
}
    812c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				change_channel();
    8130:	f7ff be0a 	b.w	7d48 <change_channel>
		if (conn.channel_map_update_pending &&
    8134:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8138:	b173      	cbz	r3, 8158 <TIMER1_IRQHandler+0xa4>
    813a:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    813e:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
    8142:	429a      	cmp	r2, r3
    8144:	d108      	bne.n	8158 <TIMER1_IRQHandler+0xa4>
			conn.remapping = conn.pending_remapping;
    8146:	4928      	ldr	r1, [pc, #160]	; (81e8 <TIMER1_IRQHandler+0x134>)
    8148:	22c0      	movs	r2, #192	; 0xc0
    814a:	f1a1 00e8 	sub.w	r0, r1, #232	; 0xe8
    814e:	f002 fcc9 	bl	aae4 <memcpy>
			conn.channel_map_update_pending = 0;
    8152:	2300      	movs	r3, #0
    8154:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		if (!conn_event.opened) {
    8158:	68ab      	ldr	r3, [r5, #8]
    815a:	2b00      	cmp	r3, #0
    815c:	d135      	bne.n	81ca <TIMER1_IRQHandler+0x116>
			conn_event.opened = 1;
    815e:	2301      	movs	r3, #1
    8160:	60ab      	str	r3, [r5, #8]
			timer1_set_match(NOW + USEC(2120) + RX_WARMUP_TIME);
    8162:	4b22      	ldr	r3, [pc, #136]	; (81ec <TIMER1_IRQHandler+0x138>)
    8164:	6818      	ldr	r0, [r3, #0]
    8166:	f500 40bd 	add.w	r0, r0, #24192	; 0x5e80
    816a:	3008      	adds	r0, #8
    816c:	f7ff fd58 	bl	7c20 <timer1_set_match>
			change_channel();
    8170:	f7ff fdea 	bl	7d48 <change_channel>
	if (T1IR & TIR_MR1_Interrupt) {
    8174:	4b19      	ldr	r3, [pc, #100]	; (81dc <TIMER1_IRQHandler+0x128>)
    8176:	681a      	ldr	r2, [r3, #0]
    8178:	0791      	lsls	r1, r2, #30
    817a:	d50d      	bpl.n	8198 <TIMER1_IRQHandler+0xe4>
		T1IR = TIR_MR1_Interrupt;
    817c:	2202      	movs	r2, #2
		T1MCR &= ~TMCR_MR1I;
    817e:	491c      	ldr	r1, [pc, #112]	; (81f0 <TIMER1_IRQHandler+0x13c>)
		T1IR = TIR_MR1_Interrupt;
    8180:	601a      	str	r2, [r3, #0]
		T1MCR &= ~TMCR_MR1I;
    8182:	680b      	ldr	r3, [r1, #0]
    8184:	f023 0308 	bic.w	r3, r3, #8
    8188:	600b      	str	r3, [r1, #0]
		TXLED_CLR;
    818a:	f44f 7180 	mov.w	r1, #256	; 0x100
    818e:	4b19      	ldr	r3, [pc, #100]	; (81f4 <TIMER1_IRQHandler+0x140>)
    8190:	6019      	str	r1, [r3, #0]
		RXLED_CLR;
    8192:	2110      	movs	r1, #16
    8194:	6019      	str	r1, [r3, #0]
		USRLED_CLR;
    8196:	601a      	str	r2, [r3, #0]
	if (T1IR & TIR_MR2_Interrupt) {
    8198:	4b10      	ldr	r3, [pc, #64]	; (81dc <TIMER1_IRQHandler+0x128>)
    819a:	681a      	ldr	r2, [r3, #0]
    819c:	0752      	lsls	r2, r2, #29
    819e:	d51b      	bpl.n	81d8 <TIMER1_IRQHandler+0x124>
		T1IR = TIR_MR2_Interrupt;
    81a0:	2204      	movs	r2, #4
    81a2:	601a      	str	r2, [r3, #0]
		if (cc2400_status() & FS_LOCK) {
    81a4:	f001 fa24 	bl	95f0 <cc2400_status>
    81a8:	0743      	lsls	r3, r0, #29
    81aa:	d511      	bpl.n	81d0 <TIMER1_IRQHandler+0x11c>
	cc2400_strobe(SRX);
    81ac:	2062      	movs	r0, #98	; 0x62
    81ae:	f001 fa26 	bl	95fe <cc2400_strobe>
	PAEN_SET;
    81b2:	2280      	movs	r2, #128	; 0x80
    81b4:	4b10      	ldr	r3, [pc, #64]	; (81f8 <TIMER1_IRQHandler+0x144>)
    81b6:	601a      	str	r2, [r3, #0]
	HGM_SET;
    81b8:	f44f 7280 	mov.w	r2, #256	; 0x100
    81bc:	601a      	str	r2, [r3, #0]
			T1MCR &= ~TMCR_MR2I;
    81be:	4a0c      	ldr	r2, [pc, #48]	; (81f0 <TIMER1_IRQHandler+0x13c>)
    81c0:	6813      	ldr	r3, [r2, #0]
    81c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    81c6:	6013      	str	r3, [r2, #0]
    81c8:	bd38      	pop	{r3, r4, r5, pc}
				finish_conn_event();
    81ca:	f7ff fe1f 	bl	7e0c <finish_conn_event>
    81ce:	e7d1      	b.n	8174 <TIMER1_IRQHandler+0xc0>
}
    81d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			timer1_wait_fs_lock();
    81d4:	f7ff bd30 	b.w	7c38 <timer1_wait_fs_lock>
    81d8:	bd38      	pop	{r3, r4, r5, pc}
    81da:	bf00      	nop
    81dc:	40008000 	.word	0x40008000
    81e0:	10000c60 	.word	0x10000c60
    81e4:	10003cf0 	.word	0x10003cf0
    81e8:	10000d88 	.word	0x10000d88
    81ec:	40008008 	.word	0x40008008
    81f0:	40008014 	.word	0x40008014
    81f4:	2009c03c 	.word	0x2009c03c
    81f8:	2009c058 	.word	0x2009c058

000081fc <queue_insert>:

// insert
int queue_insert(queue_t *f, void *x) {
	unsigned newtail;
	// access next free element
	newtail = f->tail + 1;
    81fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    81fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
	newtail = f->tail + 1;
    8200:	3301      	adds	r3, #1
	if (newtail >= FIFOSIZE) { newtail = 0; }
    8202:	2b0a      	cmp	r3, #10
    8204:	bf28      	it	cs
    8206:	2300      	movcs	r3, #0
	if (newtail == f->head) { return 0; }
    8208:	4293      	cmp	r3, r2

	// write data before updating pointer
	f->data[newtail] = x;
    820a:	bf1d      	ittte	ne
    820c:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
	f->tail = newtail;
    8210:	62c3      	strne	r3, [r0, #44]	; 0x2c

	return 1;
    8212:	2001      	movne	r0, #1
	if (newtail == f->head) { return 0; }
    8214:	2000      	moveq	r0, #0
}
    8216:	4770      	bx	lr

00008218 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    821c:	b098      	sub	sp, #96	; 0x60
    821e:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    8220:	2315      	movs	r3, #21
    8222:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	txbuf[1] = 0; // request
    8226:	2300      	movs	r3, #0
    8228:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	// read device serial number
	command[0] = 58;
    822c:	233a      	movs	r3, #58	; 0x3a
    822e:	60bb      	str	r3, [r7, #8]
	iap_entry(command, result);
    8230:	4b98      	ldr	r3, [pc, #608]	; (8494 <cc2400_rangetest+0x27c>)
{
    8232:	4682      	mov	sl, r0
	iap_entry(command, result);
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	f107 011c 	add.w	r1, r7, #28
    823a:	f107 0008 	add.w	r0, r7, #8
{
    823e:	f8c7 d004 	str.w	sp, [r7, #4]
	iap_entry(command, result);
    8242:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8244:	7f3b      	ldrb	r3, [r7, #28]
    8246:	2b00      	cmp	r3, #0
    8248:	f040 8120 	bne.w	848c <cc2400_rangetest+0x274>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    824c:	6a3b      	ldr	r3, [r7, #32]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    824e:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8252:	0e1a      	lsrs	r2, r3, #24
    8254:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8258:	0c1a      	lsrs	r2, r3, #16
    825a:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
	txbuf[5] = result[1] & 0xFF;
    825e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8262:	0a1a      	lsrs	r2, r3, #8
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8266:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
	txbuf[6] = (result[2] >> 24) & 0xFF;
    826a:	0e1a      	lsrs	r2, r3, #24
    826c:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8270:	0c1a      	lsrs	r2, r3, #16
    8272:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
	txbuf[9] = result[2] & 0xFF;
    8276:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	txbuf[8] = (result[2] >> 8) & 0xFF;
    827a:	0a1a      	lsrs	r2, r3, #8
	txbuf[10] = (result[3] >> 24) & 0xFF;
    827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[8] = (result[2] >> 8) & 0xFF;
    827e:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8282:	0e1a      	lsrs	r2, r3, #24
    8284:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8288:	0c1a      	lsrs	r2, r3, #16
    828a:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
	txbuf[13] = result[3] & 0xFF;
    828e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8292:	0a1a      	lsrs	r2, r3, #8
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8296:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
	txbuf[14] = (result[4] >> 24) & 0xFF;
    829a:	0e1a      	lsrs	r2, r3, #24
    829c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    82a0:	0c1a      	lsrs	r2, r3, #16
    82a2:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
	txbuf[17] = result[4] & 0xFF;
    82a6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	txbuf[16] = (result[4] >> 8) & 0xFF;
    82aa:	0a1a      	lsrs	r2, r3, #8
	txbuf[20] = 0xff; // reply pa
    82ac:	23ff      	movs	r3, #255	; 0xff
	cc2400_set(LMTST,   0x2b22);
    82ae:	2012      	movs	r0, #18
	txbuf[16] = (result[4] >> 8) & 0xFF;
    82b0:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
	txbuf[20] = 0xff; // reply pa
    82b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	txbuf[21] = 0xff; // reply number
    82b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	cc2400_set(LMTST,   0x2b22);
    82bc:	f001 f8fd 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    82c0:	f241 314b 	movw	r1, #4939	; 0x134b
    82c4:	2014      	movs	r0, #20
    82c6:	f001 f8f8 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    82ca:	f640 51f1 	movw	r1, #3569	; 0xdf1
    82ce:	2020      	movs	r0, #32
    82d0:	f001 f8f3 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    82d4:	f8ba 1000 	ldrh.w	r1, [sl]
    82d8:	2002      	movs	r0, #2
    82da:	b289      	uxth	r1, r1
    82dc:	f001 f8ed 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    82e0:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    82e4:	202d      	movs	r0, #45	; 0x2d
    82e6:	f001 f8e8 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    82ea:	f241 5184 	movw	r1, #5508	; 0x1584
    82ee:	202c      	movs	r0, #44	; 0x2c
    82f0:	f001 f8e3 	bl	94ba <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    82f4:	2108      	movs	r1, #8
    82f6:	2005      	movs	r0, #5
    82f8:	f001 f8df 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    82fc:	2129      	movs	r1, #41	; 0x29
    82fe:	2003      	movs	r0, #3
    8300:	f001 f8db 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8304:	f001 f974 	bl	95f0 <cc2400_status>
    8308:	0642      	lsls	r2, r0, #25
    830a:	d5fb      	bpl.n	8304 <cc2400_rangetest+0xec>
	cc2400_strobe(SFSON);
    830c:	2061      	movs	r0, #97	; 0x61
    830e:	f001 f976 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8312:	f001 f96d 	bl	95f0 <cc2400_status>
    8316:	0743      	lsls	r3, r0, #29
    8318:	d5fb      	bpl.n	8312 <cc2400_rangetest+0xfa>
	TXLED_SET;
    831a:	f44f 7280 	mov.w	r2, #256	; 0x100
    831e:	4b5e      	ldr	r3, [pc, #376]	; (8498 <cc2400_rangetest+0x280>)
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8320:	2180      	movs	r1, #128	; 0x80
    8322:	2400      	movs	r4, #0
    8324:	4698      	mov	r8, r3
	TXLED_SET;
    8326:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    8328:	4a5c      	ldr	r2, [pc, #368]	; (849c <cc2400_rangetest+0x284>)
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    832a:	f107 0530 	add.w	r5, r7, #48	; 0x30
	PAEN_SET;
    832e:	6011      	str	r1, [r2, #0]
    8330:	b2e6      	uxtb	r6, r4
		cc2400_set(FREND, 8 | pa);
    8332:	f046 0108 	orr.w	r1, r6, #8
    8336:	2005      	movs	r0, #5
    8338:	f001 f8bf 	bl	94ba <cc2400_set>
		txbuf[18] = pa;
    833c:	f887 6042 	strb.w	r6, [r7, #66]	; 0x42
		for (i = 0; i < 16; i++) {
    8340:	2600      	movs	r6, #0
			txbuf[19] = i;
    8342:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8346:	200e      	movs	r0, #14
    8348:	f001 f8ae 	bl	94a8 <cc2400_get>
    834c:	f000 001f 	and.w	r0, r0, #31
    8350:	280f      	cmp	r0, #15
    8352:	d1f8      	bne.n	8346 <cc2400_rangetest+0x12e>
    8354:	f04f 0900 	mov.w	r9, #0
				cc2400_set8(FIFOREG, txbuf[j]);
    8358:	f815 1009 	ldrb.w	r1, [r5, r9]
    835c:	2070      	movs	r0, #112	; 0x70
			for (j = 0; j < len; j++)
    835e:	f109 0901 	add.w	r9, r9, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    8362:	f001 f8b8 	bl	94d6 <cc2400_set8>
			for (j = 0; j < len; j++)
    8366:	f1b9 0f16 	cmp.w	r9, #22
    836a:	d1f5      	bne.n	8358 <cc2400_rangetest+0x140>
			cc2400_strobe(STX);
    836c:	2063      	movs	r0, #99	; 0x63
		for (i = 0; i < 16; i++) {
    836e:	3601      	adds	r6, #1
			cc2400_strobe(STX);
    8370:	f001 f945 	bl	95fe <cc2400_strobe>
		for (i = 0; i < 16; i++) {
    8374:	2e10      	cmp	r6, #16
    8376:	d1e4      	bne.n	8342 <cc2400_rangetest+0x12a>
    8378:	3401      	adds	r4, #1
	for (pa = 0; pa < 8; pa++) {
    837a:	2c08      	cmp	r4, #8
    837c:	d1d8      	bne.n	8330 <cc2400_rangetest+0x118>
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    837e:	200e      	movs	r0, #14
    8380:	f001 f892 	bl	94a8 <cc2400_get>
    8384:	f000 001f 	and.w	r0, r0, #31
    8388:	280f      	cmp	r0, #15
    838a:	d1f8      	bne.n	837e <cc2400_rangetest+0x166>
	TXLED_CLR;
    838c:	f44f 7380 	mov.w	r3, #256	; 0x100
    8390:	4c43      	ldr	r4, [pc, #268]	; (84a0 <cc2400_rangetest+0x288>)
	cc2400_strobe(SRFOFF);
    8392:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    8394:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
    8396:	f001 f932 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    839a:	f001 f929 	bl	95f0 <cc2400_status>
    839e:	0746      	lsls	r6, r0, #29
    83a0:	d4fb      	bmi.n	839a <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    83a2:	f8ba 1000 	ldrh.w	r1, [sl]
    83a6:	2002      	movs	r0, #2
    83a8:	3901      	subs	r1, #1
    83aa:	b289      	uxth	r1, r1
    83ac:	f001 f885 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    83b0:	f001 f91e 	bl	95f0 <cc2400_status>
    83b4:	0640      	lsls	r0, r0, #25
    83b6:	d5fb      	bpl.n	83b0 <cc2400_rangetest+0x198>
	cc2400_strobe(SFSON);
    83b8:	2061      	movs	r0, #97	; 0x61
    83ba:	f001 f920 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    83be:	f001 f917 	bl	95f0 <cc2400_status>
    83c2:	0741      	lsls	r1, r0, #29
    83c4:	d5fb      	bpl.n	83be <cc2400_rangetest+0x1a6>
	RXLED_SET;
    83c6:	2310      	movs	r3, #16
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
    83c8:	f107 0648 	add.w	r6, r7, #72	; 0x48
	RXLED_SET;
    83cc:	f8c8 3000 	str.w	r3, [r8]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    83d0:	200e      	movs	r0, #14
    83d2:	f001 f869 	bl	94a8 <cc2400_get>
    83d6:	f000 001f 	and.w	r0, r0, #31
    83da:	280f      	cmp	r0, #15
    83dc:	d1f8      	bne.n	83d0 <cc2400_rangetest+0x1b8>
		cc2400_strobe(SRX);
    83de:	2062      	movs	r0, #98	; 0x62
    83e0:	f001 f90d 	bl	95fe <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    83e4:	f001 f904 	bl	95f0 <cc2400_status>
    83e8:	06c2      	lsls	r2, r0, #27
    83ea:	d5fb      	bpl.n	83e4 <cc2400_rangetest+0x1cc>
		USRLED_SET;
    83ec:	2302      	movs	r3, #2
		for (j = 0; j < len; j++)
    83ee:	f04f 0900 	mov.w	r9, #0
		USRLED_SET;
    83f2:	f8c8 3000 	str.w	r3, [r8]
			rxbuf[j] = cc2400_get8(FIFOREG);
    83f6:	2070      	movs	r0, #112	; 0x70
    83f8:	f001 f864 	bl	94c4 <cc2400_get8>
    83fc:	f806 0009 	strb.w	r0, [r6, r9]
		for (j = 0; j < len; j++)
    8400:	f109 0901 	add.w	r9, r9, #1
    8404:	f1b9 0f16 	cmp.w	r9, #22
    8408:	d1f5      	bne.n	83f6 <cc2400_rangetest+0x1de>
		if (cc2400_status() & STATUS_CRC_OK)
    840a:	f001 f8f1 	bl	95f0 <cc2400_status>
    840e:	0703      	lsls	r3, r0, #28
    8410:	d402      	bmi.n	8418 <cc2400_rangetest+0x200>
			break;
		USRLED_CLR;
    8412:	2302      	movs	r3, #2
    8414:	6023      	str	r3, [r4, #0]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8416:	e7db      	b.n	83d0 <cc2400_rangetest+0x1b8>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8418:	200e      	movs	r0, #14
    841a:	f001 f845 	bl	94a8 <cc2400_get>
    841e:	f000 001f 	and.w	r0, r0, #31
    8422:	280f      	cmp	r0, #15
    8424:	d1f8      	bne.n	8418 <cc2400_rangetest+0x200>
	cc2400_strobe(SRFOFF);
    8426:	2064      	movs	r0, #100	; 0x64
    8428:	f001 f8e9 	bl	95fe <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    842c:	f001 f8e0 	bl	95f0 <cc2400_status>
    8430:	f010 0004 	ands.w	r0, r0, #4
    8434:	d1fa      	bne.n	842c <cc2400_rangetest+0x214>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8436:	2280      	movs	r2, #128	; 0x80
    8438:	4b1a      	ldr	r3, [pc, #104]	; (84a4 <cc2400_rangetest+0x28c>)
    843a:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    843c:	2310      	movs	r3, #16
    843e:	6023      	str	r3, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    8440:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
	rr.valid       = 1;
    8444:	4b18      	ldr	r3, [pc, #96]	; (84a8 <cc2400_rangetest+0x290>)
    8446:	2201      	movs	r2, #1
	rr.request_pa  = rxbuf[18];
    8448:	7059      	strb	r1, [r3, #1]
	rr.request_num = rxbuf[19];
    844a:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
	rr.valid       = 1;
    844e:	701a      	strb	r2, [r3, #0]
	rr.request_num = rxbuf[19];
    8450:	7099      	strb	r1, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8452:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8456:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
	rr.reply_pa    = rxbuf[20];
    845a:	70d9      	strb	r1, [r3, #3]
	rr.reply_num   = rxbuf[21];
    845c:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
    8460:	7119      	strb	r1, [r3, #4]
	for (i = 0; i < 18; i++)
    8462:	4601      	mov	r1, r0
		if (rxbuf[i] != txbuf[i])
    8464:	f816 c001 	ldrb.w	ip, [r6, r1]
    8468:	f815 e001 	ldrb.w	lr, [r5, r1]
    846c:	45f4      	cmp	ip, lr
    846e:	bf18      	it	ne
    8470:	1c8a      	addne	r2, r1, #2
	for (i = 0; i < 18; i++)
    8472:	f101 0101 	add.w	r1, r1, #1
    8476:	bf1c      	itt	ne
    8478:	b2d2      	uxtbne	r2, r2
		if (rxbuf[i] != txbuf[i])
    847a:	2001      	movne	r0, #1
	for (i = 0; i < 18; i++)
    847c:	2912      	cmp	r1, #18
    847e:	d1f1      	bne.n	8464 <cc2400_rangetest+0x24c>
    8480:	b100      	cbz	r0, 8484 <cc2400_rangetest+0x26c>
    8482:	701a      	strb	r2, [r3, #0]
			rr.valid = 2 + i;

	USRLED_CLR;
    8484:	2302      	movs	r3, #2
    8486:	6023      	str	r3, [r4, #0]
    8488:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
    848c:	3760      	adds	r7, #96	; 0x60
    848e:	46bd      	mov	sp, r7
    8490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8494:	0000b6e0 	.word	0x0000b6e0
    8498:	2009c038 	.word	0x2009c038
    849c:	2009c058 	.word	0x2009c058
    84a0:	2009c03c 	.word	0x2009c03c
    84a4:	2009c05c 	.word	0x2009c05c
    84a8:	100019e4 	.word	0x100019e4

000084ac <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    84ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84b0:	b087      	sub	sp, #28
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
    84b2:	f8df a170 	ldr.w	sl, [pc, #368]	; 8624 <cc2400_repeater+0x178>
{
    84b6:	4681      	mov	r9, r0
		cc2400_set(FSDIV,   *chan_ptr - 1);
    84b8:	2502      	movs	r5, #2
    84ba:	46d3      	mov	fp, sl
		cc2400_set(LMTST,   0x2b22);
    84bc:	f642 3122 	movw	r1, #11042	; 0x2b22
    84c0:	2012      	movs	r0, #18
    84c2:	f000 fffa 	bl	94ba <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    84c6:	f241 314b 	movw	r1, #4939	; 0x134b
    84ca:	2014      	movs	r0, #20
    84cc:	f000 fff5 	bl	94ba <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    84d0:	f8b9 1000 	ldrh.w	r1, [r9]
    84d4:	2002      	movs	r0, #2
    84d6:	3901      	subs	r1, #1
    84d8:	b289      	uxth	r1, r1
    84da:	f000 ffee 	bl	94ba <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    84de:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    84e2:	202d      	movs	r0, #45	; 0x2d
    84e4:	f000 ffe9 	bl	94ba <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    84e8:	f241 5184 	movw	r1, #5508	; 0x1584
    84ec:	202c      	movs	r0, #44	; 0x2c
    84ee:	f000 ffe4 	bl	94ba <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    84f2:	2108      	movs	r1, #8
    84f4:	2005      	movs	r0, #5
    84f6:	f000 ffe0 	bl	94ba <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    84fa:	2129      	movs	r1, #41	; 0x29
    84fc:	2003      	movs	r0, #3
    84fe:	f000 ffdc 	bl	94ba <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8502:	f001 f875 	bl	95f0 <cc2400_status>
    8506:	0641      	lsls	r1, r0, #25
    8508:	d5fb      	bpl.n	8502 <cc2400_repeater+0x56>
		cc2400_strobe(SFSON);
    850a:	2061      	movs	r0, #97	; 0x61
    850c:	f001 f877 	bl	95fe <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8510:	f001 f86e 	bl	95f0 <cc2400_status>
    8514:	0742      	lsls	r2, r0, #29
    8516:	d5fb      	bpl.n	8510 <cc2400_repeater+0x64>
		RXLED_SET;
    8518:	2310      	movs	r3, #16
    851a:	f8ca 3000 	str.w	r3, [sl]
		TXLED_CLR;
    851e:	f44f 7380 	mov.w	r3, #256	; 0x100
    8522:	4c3e      	ldr	r4, [pc, #248]	; (861c <cc2400_repeater+0x170>)
		USRLED_CLR;
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8524:	2280      	movs	r2, #128	; 0x80
    8526:	4627      	mov	r7, r4
		TXLED_CLR;
    8528:	6023      	str	r3, [r4, #0]
		PAEN_SET;
    852a:	4b3d      	ldr	r3, [pc, #244]	; (8620 <cc2400_repeater+0x174>)
		USRLED_CLR;
    852c:	6025      	str	r5, [r4, #0]
		PAEN_SET;
    852e:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8530:	200e      	movs	r0, #14
    8532:	f000 ffb9 	bl	94a8 <cc2400_get>
    8536:	f000 001f 	and.w	r0, r0, #31
    853a:	280f      	cmp	r0, #15
    853c:	d1f8      	bne.n	8530 <cc2400_repeater+0x84>
			USRLED_CLR;
    853e:	603d      	str	r5, [r7, #0]
			cc2400_strobe(SRX);
    8540:	2062      	movs	r0, #98	; 0x62
    8542:	f001 f85c 	bl	95fe <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8546:	f001 f853 	bl	95f0 <cc2400_status>
    854a:	06c3      	lsls	r3, r0, #27
    854c:	d5fb      	bpl.n	8546 <cc2400_repeater+0x9a>
			USRLED_SET;
			for (i = 0; i < len; i++)
    854e:	2600      	movs	r6, #0
			USRLED_SET;
    8550:	f8cb 5000 	str.w	r5, [fp]
				buf[i] = cc2400_get8(FIFOREG);
    8554:	2070      	movs	r0, #112	; 0x70
    8556:	f000 ffb5 	bl	94c4 <cc2400_get8>
    855a:	f80d 0006 	strb.w	r0, [sp, r6]
			for (i = 0; i < len; i++)
    855e:	3601      	adds	r6, #1
    8560:	2e16      	cmp	r6, #22
    8562:	d1f7      	bne.n	8554 <cc2400_repeater+0xa8>
			if (cc2400_status() & STATUS_CRC_OK)
    8564:	f001 f844 	bl	95f0 <cc2400_status>
    8568:	0706      	lsls	r6, r0, #28
    856a:	d5e1      	bpl.n	8530 <cc2400_repeater+0x84>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
		RXLED_CLR;
    856c:	2310      	movs	r3, #16
		USRLED_CLR;
    856e:	6025      	str	r5, [r4, #0]
		cc2400_strobe(SRFOFF);
    8570:	2064      	movs	r0, #100	; 0x64
		RXLED_CLR;
    8572:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    8574:	f001 f843 	bl	95fe <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8578:	f001 f83a 	bl	95f0 <cc2400_status>
    857c:	0740      	lsls	r0, r0, #29
    857e:	d4fb      	bmi.n	8578 <cc2400_repeater+0xcc>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8580:	f001 f836 	bl	95f0 <cc2400_status>
    8584:	0641      	lsls	r1, r0, #25
    8586:	d5fb      	bpl.n	8580 <cc2400_repeater+0xd4>
		cc2400_set(FSDIV, *chan_ptr);
    8588:	f8b9 1000 	ldrh.w	r1, [r9]
    858c:	2002      	movs	r0, #2
    858e:	b289      	uxth	r1, r1
    8590:	f000 ff93 	bl	94ba <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8594:	f001 f82c 	bl	95f0 <cc2400_status>
    8598:	0642      	lsls	r2, r0, #25
    859a:	d5fb      	bpl.n	8594 <cc2400_repeater+0xe8>
		cc2400_strobe(SFSON);
    859c:	2061      	movs	r0, #97	; 0x61
    859e:	f001 f82e 	bl	95fe <cc2400_strobe>
		TXLED_SET;
    85a2:	f44f 7380 	mov.w	r3, #256	; 0x100
    85a6:	f8cb 3000 	str.w	r3, [fp]
		buf[0] = len - 1; // length of data (rest of payload)
    85aa:	2315      	movs	r3, #21
    85ac:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    85b0:	2301      	movs	r3, #1
    85b2:	2600      	movs	r6, #0
    85b4:	f88d 3001 	strb.w	r3, [sp, #1]
    85b8:	b2f7      	uxtb	r7, r6
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
    85ba:	f047 0108 	orr.w	r1, r7, #8
    85be:	2005      	movs	r0, #5
    85c0:	f000 ff7b 	bl	94ba <cc2400_set>
			buf[20] = pa;
    85c4:	f88d 7014 	strb.w	r7, [sp, #20]
			for (i = 0; i < 16; i++) {
    85c8:	2700      	movs	r7, #0
				buf[21] = i;
    85ca:	f88d 7015 	strb.w	r7, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    85ce:	200e      	movs	r0, #14
    85d0:	f000 ff6a 	bl	94a8 <cc2400_get>
    85d4:	f000 001f 	and.w	r0, r0, #31
    85d8:	280f      	cmp	r0, #15
    85da:	d1f8      	bne.n	85ce <cc2400_repeater+0x122>
    85dc:	f04f 0800 	mov.w	r8, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    85e0:	f81d 1008 	ldrb.w	r1, [sp, r8]
    85e4:	2070      	movs	r0, #112	; 0x70
				for (j = 0; j < len; j++)
    85e6:	f108 0801 	add.w	r8, r8, #1
					cc2400_set8(FIFOREG, buf[j]);
    85ea:	f000 ff74 	bl	94d6 <cc2400_set8>
				for (j = 0; j < len; j++)
    85ee:	f1b8 0f16 	cmp.w	r8, #22
    85f2:	d1f5      	bne.n	85e0 <cc2400_repeater+0x134>
				cc2400_strobe(STX);
    85f4:	2063      	movs	r0, #99	; 0x63
			for (i = 0; i < 16; i++) {
    85f6:	3701      	adds	r7, #1
				cc2400_strobe(STX);
    85f8:	f001 f801 	bl	95fe <cc2400_strobe>
			for (i = 0; i < 16; i++) {
    85fc:	2f10      	cmp	r7, #16
    85fe:	d1e4      	bne.n	85ca <cc2400_repeater+0x11e>
    8600:	3601      	adds	r6, #1
		for (pa = 0; pa < 8; pa++) {
    8602:	2e08      	cmp	r6, #8
    8604:	d1d8      	bne.n	85b8 <cc2400_repeater+0x10c>
			}
		}
		TXLED_CLR;
    8606:	f44f 7380 	mov.w	r3, #256	; 0x100
		cc2400_strobe(SRFOFF);
    860a:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    860c:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    860e:	f000 fff6 	bl	95fe <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8612:	f000 ffed 	bl	95f0 <cc2400_status>
    8616:	0743      	lsls	r3, r0, #29
    8618:	d4fb      	bmi.n	8612 <cc2400_repeater+0x166>
    861a:	e74f      	b.n	84bc <cc2400_repeater+0x10>
    861c:	2009c03c 	.word	0x2009c03c
    8620:	2009c058 	.word	0x2009c058
    8624:	2009c038 	.word	0x2009c038

00008628 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8628:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    862a:	7803      	ldrb	r3, [r0, #0]
{
    862c:	460d      	mov	r5, r1
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    862e:	b38b      	cbz	r3, 8694 <cc2400_txtest+0x6c>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8630:	7803      	ldrb	r3, [r0, #0]
    8632:	2b01      	cmp	r3, #1
    8634:	d12d      	bne.n	8692 <cc2400_txtest+0x6a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8636:	2440      	movs	r4, #64	; 0x40
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    8638:	f642 3122 	movw	r1, #11042	; 0x2b22
    863c:	2012      	movs	r0, #18
    863e:	f000 ff3c 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8642:	f243 314b 	movw	r1, #13131	; 0x334b
    8646:	2014      	movs	r0, #20
    8648:	f000 ff37 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    864c:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8650:	2020      	movs	r0, #32
    8652:	f000 ff32 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8656:	8829      	ldrh	r1, [r5, #0]
    8658:	2002      	movs	r0, #2
    865a:	b289      	uxth	r1, r1
    865c:	f000 ff2d 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    8660:	4621      	mov	r1, r4
    8662:	2003      	movs	r0, #3
    8664:	f000 ff29 	bl	94ba <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8668:	f000 ffc2 	bl	95f0 <cc2400_status>
    866c:	0642      	lsls	r2, r0, #25
    866e:	d5fb      	bpl.n	8668 <cc2400_txtest+0x40>
	cc2400_strobe(SFSON);
    8670:	2061      	movs	r0, #97	; 0x61
    8672:	f000 ffc4 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8676:	f000 ffbb 	bl	95f0 <cc2400_status>
    867a:	0743      	lsls	r3, r0, #29
    867c:	d5fb      	bpl.n	8676 <cc2400_txtest+0x4e>
	TXLED_SET;
    867e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8682:	4b05      	ldr	r3, [pc, #20]	; (8698 <cc2400_txtest+0x70>)
	cc2400_strobe(STX);
    8684:	2063      	movs	r0, #99	; 0x63
	TXLED_SET;
    8686:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8688:	f000 ffb9 	bl	95fe <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    868c:	2280      	movs	r2, #128	; 0x80
    868e:	4b03      	ldr	r3, [pc, #12]	; (869c <cc2400_txtest+0x74>)
    8690:	601a      	str	r2, [r3, #0]
    8692:	bd38      	pop	{r3, r4, r5, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    8694:	2429      	movs	r4, #41	; 0x29
    8696:	e7cf      	b.n	8638 <cc2400_txtest+0x10>
    8698:	2009c038 	.word	0x2009c038
    869c:	2009c058 	.word	0x2009c058

000086a0 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    86a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    86a4:	4b03      	ldr	r3, [pc, #12]	; (86b4 <ssp_stop+0x14>)
    86a6:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    86a8:	4a03      	ldr	r2, [pc, #12]	; (86b8 <ssp_stop+0x18>)
    86aa:	6813      	ldr	r3, [r2, #0]
    86ac:	f023 0302 	bic.w	r3, r3, #2
    86b0:	6013      	str	r3, [r2, #0]
    86b2:	4770      	bx	lr
    86b4:	2009c098 	.word	0x2009c098
    86b8:	40030004 	.word	0x40030004

000086bc <do_rx>:
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
    86bc:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    86be:	4c06      	ldr	r4, [pc, #24]	; (86d8 <do_rx+0x1c>)
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    86c0:	4906      	ldr	r1, [pc, #24]	; (86dc <do_rx+0x20>)
    86c2:	1e43      	subs	r3, r0, #1
    86c4:	3023      	adds	r0, #35	; 0x23
		while (!(SSP1SR & SSPSR_RNE)) ;
    86c6:	6822      	ldr	r2, [r4, #0]
    86c8:	0752      	lsls	r2, r2, #29
    86ca:	d5fc      	bpl.n	86c6 <do_rx+0xa>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    86cc:	680a      	ldr	r2, [r1, #0]
    86ce:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    86d2:	4283      	cmp	r3, r0
    86d4:	d1f7      	bne.n	86c6 <do_rx+0xa>
	}
}
    86d6:	bd10      	pop	{r4, pc}
    86d8:	4003000c 	.word	0x4003000c
    86dc:	40030008 	.word	0x40030008

000086e0 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    86e0:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    86e2:	f640 4435 	movw	r4, #3125	; 0xc35
    86e6:	4b07      	ldr	r3, [pc, #28]	; (8704 <sleep_ms+0x24>)
    86e8:	4a07      	ldr	r2, [pc, #28]	; (8708 <sleep_ms+0x28>)
    86ea:	681b      	ldr	r3, [r3, #0]
    86ec:	6812      	ldr	r2, [r2, #0]
    86ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
    86f2:	fb04 2303 	mla	r3, r4, r3, r2
    86f6:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    86f8:	f242 7310 	movw	r3, #10000	; 0x2710
    86fc:	4359      	muls	r1, r3
    86fe:	60c1      	str	r1, [r0, #12]
    8700:	bd10      	pop	{r4, pc}
    8702:	bf00      	nop
    8704:	10001464 	.word	0x10001464
    8708:	40004008 	.word	0x40004008

0000870c <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    870c:	f640 4135 	movw	r1, #3125	; 0xc35
    8710:	4b0a      	ldr	r3, [pc, #40]	; (873c <sleep_elapsed+0x30>)
    8712:	4a0b      	ldr	r2, [pc, #44]	; (8740 <sleep_elapsed+0x34>)
    8714:	681b      	ldr	r3, [r3, #0]
    8716:	6812      	ldr	r2, [r2, #0]
    8718:	f3c3 0313 	ubfx	r3, r3, #0, #20
    871c:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    8720:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8722:	68c0      	ldr	r0, [r0, #12]
	if (now < state->sleep_start)
    8724:	4293      	cmp	r3, r2
		now += 3276800000;
    8726:	bf3c      	itt	cc
    8728:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    872c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8730:	1a9b      	subs	r3, r3, r2
}
    8732:	4283      	cmp	r3, r0
    8734:	bf34      	ite	cc
    8736:	2000      	movcc	r0, #0
    8738:	2001      	movcs	r0, #1
    873a:	4770      	bx	lr
    873c:	10001464 	.word	0x10001464
    8740:	40004008 	.word	0x40004008

00008744 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    8744:	4770      	bx	lr
    8746:	0000      	movs	r0, r0

00008748 <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    8748:	2300      	movs	r3, #0
	channel = channels[state->channel_index];
    874a:	f640 1268 	movw	r2, #2408	; 0x968
	state->channel_index = 0;
    874e:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    8750:	4b02      	ldr	r3, [pc, #8]	; (875c <init_state+0x14>)
    8752:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8754:	2301      	movs	r3, #1
    8756:	7003      	strb	r3, [r0, #0]
    8758:	4770      	bx	lr
    875a:	bf00      	nop
    875c:	1000049c 	.word	0x1000049c

00008760 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8760:	2301      	movs	r3, #1
    8762:	7003      	strb	r3, [r0, #0]
    8764:	4770      	bx	lr
    8766:	0000      	movs	r0, r0

00008768 <cap_state>:
static void cap_state(ego_fsm_state_t *state) {
    8768:	b530      	push	{r4, r5, lr}
    876a:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    876c:	2228      	movs	r2, #40	; 0x28
static void cap_state(ego_fsm_state_t *state) {
    876e:	4604      	mov	r4, r0
	ego_packet_t packet = {
    8770:	2100      	movs	r1, #0
    8772:	4668      	mov	r0, sp
    8774:	f7fb fd44 	bl	4200 <memset>
		.rxtime = CLK100NS,
    8778:	f640 4135 	movw	r1, #3125	; 0xc35
    877c:	4b1a      	ldr	r3, [pc, #104]	; (87e8 <cap_state+0x80>)
    877e:	4a1b      	ldr	r2, [pc, #108]	; (87ec <cap_state+0x84>)
    8780:	681b      	ldr	r3, [r3, #0]
    8782:	6812      	ldr	r2, [r2, #0]
    8784:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8788:	fb01 2303 	mla	r3, r1, r3, r2
	if (sleep_elapsed(state)) {
    878c:	4620      	mov	r0, r4
	ego_packet_t packet = {
    878e:	9309      	str	r3, [sp, #36]	; 0x24
	if (sleep_elapsed(state)) {
    8790:	f7ff ffbc 	bl	870c <sleep_elapsed>
    8794:	b128      	cbz	r0, 87a2 <cap_state+0x3a>
		sleep_ms(state, 4);
    8796:	2104      	movs	r1, #4
    8798:	4620      	mov	r0, r4
    879a:	f7ff ffa1 	bl	86e0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    879e:	2303      	movs	r3, #3
    87a0:	7023      	strb	r3, [r4, #0]
	return cc2400_status() & SYNC_RECEIVED;
    87a2:	f000 ff25 	bl	95f0 <cc2400_status>
	if (sync_received()) {
    87a6:	06c3      	lsls	r3, r0, #27
    87a8:	d512      	bpl.n	87d0 <cap_state+0x68>
		RXLED_SET;
    87aa:	2510      	movs	r5, #16
    87ac:	4b10      	ldr	r3, [pc, #64]	; (87f0 <cap_state+0x88>)
		do_rx(&packet);
    87ae:	4668      	mov	r0, sp
		RXLED_SET;
    87b0:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    87b2:	f7ff ff83 	bl	86bc <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    87b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    87b8:	4669      	mov	r1, sp
    87ba:	2006      	movs	r0, #6
    87bc:	f7fc fb82 	bl	4ec4 <enqueue_with_ts>
		RXLED_CLR;
    87c0:	4b0c      	ldr	r3, [pc, #48]	; (87f4 <cap_state+0x8c>)
		sleep_ms(state, 6);
    87c2:	2106      	movs	r1, #6
		RXLED_CLR;
    87c4:	601d      	str	r5, [r3, #0]
		sleep_ms(state, 6);
    87c6:	4620      	mov	r0, r4
    87c8:	f7ff ff8a 	bl	86e0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    87cc:	2303      	movs	r3, #3
    87ce:	7023      	strb	r3, [r4, #0]
	if (state->state != EGO_ST_CAP) {
    87d0:	7823      	ldrb	r3, [r4, #0]
    87d2:	2b02      	cmp	r3, #2
    87d4:	d006      	beq.n	87e4 <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    87d6:	2064      	movs	r0, #100	; 0x64
    87d8:	f000 ff11 	bl	95fe <cc2400_strobe>
		ssp_stop();
    87dc:	f7ff ff60 	bl	86a0 <ssp_stop>
		state->timer_active = 1;
    87e0:	2301      	movs	r3, #1
    87e2:	6123      	str	r3, [r4, #16]
}
    87e4:	b00b      	add	sp, #44	; 0x2c
    87e6:	bd30      	pop	{r4, r5, pc}
    87e8:	10001464 	.word	0x10001464
    87ec:	40004008 	.word	0x40004008
    87f0:	2009c038 	.word	0x2009c038
    87f4:	2009c03c 	.word	0x2009c03c

000087f8 <start_rf_state>:
static void start_rf_state(ego_fsm_state_t *state) {
    87f8:	b510      	push	{r4, lr}
	cc2400_set(MANAND,  0x7fff);
    87fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_rf_state(ego_fsm_state_t *state) {
    87fe:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    8800:	200d      	movs	r0, #13
    8802:	f000 fe5a 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8806:	f642 3122 	movw	r1, #11042	; 0x2b22
    880a:	2012      	movs	r0, #18
    880c:	f000 fe55 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8810:	f241 314b 	movw	r1, #4939	; 0x134b
    8814:	2014      	movs	r0, #20
    8816:	f000 fe50 	bl	94ba <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    881a:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    881e:	2020      	movs	r0, #32
    8820:	f000 fe4b 	bl	94ba <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8824:	4b1d      	ldr	r3, [pc, #116]	; (889c <start_rf_state+0xa4>)
    8826:	2002      	movs	r0, #2
    8828:	8819      	ldrh	r1, [r3, #0]
    882a:	3901      	subs	r1, #1
    882c:	b289      	uxth	r1, r1
    882e:	f000 fe44 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8832:	2126      	movs	r1, #38	; 0x26
    8834:	2003      	movs	r0, #3
    8836:	f000 fe40 	bl	94ba <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    883a:	2103      	movs	r1, #3
    883c:	2021      	movs	r0, #33	; 0x21
    883e:	f000 fe3c 	bl	94ba <cc2400_set>
	cc2400_set(SYNCH,   0x630f);
    8842:	f246 310f 	movw	r1, #25359	; 0x630f
    8846:	202d      	movs	r0, #45	; 0x2d
    8848:	f000 fe37 	bl	94ba <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    884c:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8850:	202c      	movs	r0, #44	; 0x2c
    8852:	f000 fe32 	bl	94ba <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8856:	f000 fecb 	bl	95f0 <cc2400_status>
    885a:	0642      	lsls	r2, r0, #25
    885c:	d5fb      	bpl.n	8856 <start_rf_state+0x5e>
	DIO_SSEL_SET;
    885e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8862:	4b0f      	ldr	r3, [pc, #60]	; (88a0 <start_rf_state+0xa8>)
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8864:	490f      	ldr	r1, [pc, #60]	; (88a4 <start_rf_state+0xac>)
	DIO_SSEL_SET;
    8866:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8868:	680b      	ldr	r3, [r1, #0]
	cc2400_strobe(SFSON);
    886a:	2061      	movs	r0, #97	; 0x61
	DIO_SSP_CR1 |= SSPCR1_SSE;
    886c:	f043 0302 	orr.w	r3, r3, #2
    8870:	600b      	str	r3, [r1, #0]
	DIO_SSEL_CLR;
    8872:	4b0d      	ldr	r3, [pc, #52]	; (88a8 <start_rf_state+0xb0>)
    8874:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
    8876:	f000 fec2 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    887a:	f000 feb9 	bl	95f0 <cc2400_status>
    887e:	0743      	lsls	r3, r0, #29
    8880:	d5fb      	bpl.n	887a <start_rf_state+0x82>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8882:	200e      	movs	r0, #14
    8884:	f000 fe10 	bl	94a8 <cc2400_get>
    8888:	f000 001f 	and.w	r0, r0, #31
    888c:	280f      	cmp	r0, #15
    888e:	d1f8      	bne.n	8882 <start_rf_state+0x8a>
	cc2400_strobe(SRX);
    8890:	2062      	movs	r0, #98	; 0x62
    8892:	f000 feb4 	bl	95fe <cc2400_strobe>
	state->state = EGO_ST_CAP;
    8896:	2302      	movs	r3, #2
    8898:	7023      	strb	r3, [r4, #0]
    889a:	bd10      	pop	{r4, pc}
    889c:	1000049c 	.word	0x1000049c
    88a0:	2009c098 	.word	0x2009c098
    88a4:	40030004 	.word	0x40030004
    88a8:	2009c09c 	.word	0x2009c09c

000088ac <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    88ac:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    88ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_jamming_state(ego_fsm_state_t *state) {
    88b2:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    88b4:	200d      	movs	r0, #13
    88b6:	f000 fe00 	bl	94ba <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    88ba:	f642 3122 	movw	r1, #11042	; 0x2b22
    88be:	2012      	movs	r0, #18
    88c0:	f000 fdfb 	bl	94ba <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    88c4:	f243 314b 	movw	r1, #13131	; 0x334b
    88c8:	2014      	movs	r0, #20
    88ca:	f000 fdf6 	bl	94ba <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    88ce:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    88d2:	2020      	movs	r0, #32
    88d4:	f000 fdf1 	bl	94ba <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    88d8:	4b1a      	ldr	r3, [pc, #104]	; (8944 <start_jamming_state+0x98>)
    88da:	2002      	movs	r0, #2
    88dc:	8819      	ldrh	r1, [r3, #0]
    88de:	b289      	uxth	r1, r1
    88e0:	f000 fdeb 	bl	94ba <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    88e4:	2126      	movs	r1, #38	; 0x26
    88e6:	2003      	movs	r0, #3
    88e8:	f000 fde7 	bl	94ba <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    88ec:	2103      	movs	r1, #3
    88ee:	2021      	movs	r0, #33	; 0x21
    88f0:	f000 fde3 	bl	94ba <cc2400_set>
	cc2400_set(FREND, 0xf);
    88f4:	210f      	movs	r1, #15
    88f6:	2005      	movs	r0, #5
    88f8:	f000 fddf 	bl	94ba <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    88fc:	f000 fe78 	bl	95f0 <cc2400_status>
    8900:	0642      	lsls	r2, r0, #25
    8902:	d5fb      	bpl.n	88fc <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8904:	2061      	movs	r0, #97	; 0x61
    8906:	f000 fe7a 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    890a:	f000 fe71 	bl	95f0 <cc2400_status>
    890e:	0743      	lsls	r3, r0, #29
    8910:	d5fb      	bpl.n	890a <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8912:	200e      	movs	r0, #14
    8914:	f000 fdc8 	bl	94a8 <cc2400_get>
    8918:	f000 001f 	and.w	r0, r0, #31
    891c:	280f      	cmp	r0, #15
    891e:	d1f8      	bne.n	8912 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8920:	2280      	movs	r2, #128	; 0x80
    8922:	4b09      	ldr	r3, [pc, #36]	; (8948 <start_jamming_state+0x9c>)
#endif

	cc2400_strobe(STX);
    8924:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
    8926:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8928:	f000 fe69 	bl	95fe <cc2400_strobe>
	TXLED_SET;
    892c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8930:	4b06      	ldr	r3, [pc, #24]	; (894c <start_jamming_state+0xa0>)
    8932:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    8934:	2305      	movs	r3, #5
    8936:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    8938:	69a3      	ldr	r3, [r4, #24]
    893a:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    893c:	f644 6320 	movw	r3, #20000	; 0x4e20
    8940:	60e3      	str	r3, [r4, #12]
    8942:	bd10      	pop	{r4, pc}
    8944:	1000049c 	.word	0x1000049c
    8948:	2009c058 	.word	0x2009c058
    894c:	2009c038 	.word	0x2009c038

00008950 <sleep_state>:
static void sleep_state(ego_fsm_state_t *state) {
    8950:	b510      	push	{r4, lr}
    8952:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8954:	f7ff feda 	bl	870c <sleep_elapsed>
    8958:	b1a8      	cbz	r0, 8986 <sleep_state+0x36>
		state->channel_index = (state->channel_index + 1) % 4;
    895a:	6863      	ldr	r3, [r4, #4]
		sleep_ms(state, 7);
    895c:	2107      	movs	r1, #7
		state->channel_index = (state->channel_index + 1) % 4;
    895e:	3301      	adds	r3, #1
    8960:	425a      	negs	r2, r3
    8962:	f002 0203 	and.w	r2, r2, #3
    8966:	f003 0303 	and.w	r3, r3, #3
    896a:	bf58      	it	pl
    896c:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    896e:	4a06      	ldr	r2, [pc, #24]	; (8988 <sleep_state+0x38>)
		state->channel_index = (state->channel_index + 1) % 4;
    8970:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8972:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8976:	4b05      	ldr	r3, [pc, #20]	; (898c <sleep_state+0x3c>)
		sleep_ms(state, 7);
    8978:	4620      	mov	r0, r4
		channel = channels[state->channel_index];
    897a:	801a      	strh	r2, [r3, #0]
		sleep_ms(state, 7);
    897c:	f7ff feb0 	bl	86e0 <sleep_ms>
		state->timer_active = 1;
    8980:	2301      	movs	r3, #1
    8982:	6123      	str	r3, [r4, #16]
		state->state = EGO_ST_START_RX;
    8984:	7023      	strb	r3, [r4, #0]
    8986:	bd10      	pop	{r4, pc}
    8988:	0000b68c 	.word	0x0000b68c
    898c:	1000049c 	.word	0x1000049c

00008990 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    8990:	b510      	push	{r4, lr}
    8992:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8994:	f7ff feba 	bl	870c <sleep_elapsed>
    8998:	b130      	cbz	r0, 89a8 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    899a:	2301      	movs	r3, #1
    899c:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    899e:	6123      	str	r3, [r4, #16]
	state->sleep_start = state->anchor;
    89a0:	69a3      	ldr	r3, [r4, #24]
    89a2:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    89a4:	4b01      	ldr	r3, [pc, #4]	; (89ac <jam_sleep_state+0x1c>)
    89a6:	60e3      	str	r3, [r4, #12]
    89a8:	bd10      	pop	{r4, pc}
    89aa:	bf00      	nop
    89ac:	0001adb0 	.word	0x0001adb0

000089b0 <jamming_state>:
void jamming_state(ego_fsm_state_t *state) {
    89b0:	b510      	push	{r4, lr}
    89b2:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    89b4:	f7ff feaa 	bl	870c <sleep_elapsed>
    89b8:	b1f8      	cbz	r0, 89fa <jamming_state+0x4a>
		cc2400_strobe(SRFOFF);
    89ba:	2064      	movs	r0, #100	; 0x64
    89bc:	f000 fe1f 	bl	95fe <cc2400_strobe>
		PAEN_CLR;
    89c0:	2280      	movs	r2, #128	; 0x80
    89c2:	4b0e      	ldr	r3, [pc, #56]	; (89fc <jamming_state+0x4c>)
    89c4:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    89c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    89ca:	f843 2c20 	str.w	r2, [r3, #-32]
		state->channel_index = (state->channel_index + 1) % 4;
    89ce:	6863      	ldr	r3, [r4, #4]
    89d0:	3301      	adds	r3, #1
    89d2:	425a      	negs	r2, r3
    89d4:	f002 0203 	and.w	r2, r2, #3
    89d8:	f003 0303 	and.w	r3, r3, #3
    89dc:	bf58      	it	pl
    89de:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    89e0:	4a07      	ldr	r2, [pc, #28]	; (8a00 <jamming_state+0x50>)
		state->channel_index = (state->channel_index + 1) % 4;
    89e2:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    89e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    89e8:	4b06      	ldr	r3, [pc, #24]	; (8a04 <jamming_state+0x54>)
    89ea:	801a      	strh	r2, [r3, #0]
		state->state = EGO_ST_SLEEP;
    89ec:	2303      	movs	r3, #3
    89ee:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    89f0:	69a3      	ldr	r3, [r4, #24]
    89f2:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    89f4:	f64e 2360 	movw	r3, #60000	; 0xea60
    89f8:	60e3      	str	r3, [r4, #12]
    89fa:	bd10      	pop	{r4, pc}
    89fc:	2009c05c 	.word	0x2009c05c
    8a00:	0000b68c 	.word	0x0000b68c
    8a04:	1000049c 	.word	0x1000049c

00008a08 <jam_cap_state>:
static void jam_cap_state(ego_fsm_state_t *state) {
    8a08:	b510      	push	{r4, lr}
    8a0a:	4604      	mov	r4, r0
	return cc2400_status() & SYNC_RECEIVED;
    8a0c:	f000 fdf0 	bl	95f0 <cc2400_status>
	if (sync_received()) {
    8a10:	06c3      	lsls	r3, r0, #27
    8a12:	d50e      	bpl.n	8a32 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    8a14:	2304      	movs	r3, #4
    8a16:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    8a18:	2301      	movs	r3, #1
		state->anchor = CLK100NS;
    8a1a:	f640 4135 	movw	r1, #3125	; 0xc35
		state->packet_observed = 1;
    8a1e:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    8a20:	4b10      	ldr	r3, [pc, #64]	; (8a64 <jam_cap_state+0x5c>)
    8a22:	4a11      	ldr	r2, [pc, #68]	; (8a68 <jam_cap_state+0x60>)
    8a24:	681b      	ldr	r3, [r3, #0]
    8a26:	6812      	ldr	r2, [r2, #0]
    8a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8a2c:	fb01 2303 	mla	r3, r1, r3, r2
    8a30:	61a3      	str	r3, [r4, #24]
	if (state->timer_active && sleep_elapsed(state)) {
    8a32:	6923      	ldr	r3, [r4, #16]
    8a34:	b15b      	cbz	r3, 8a4e <jam_cap_state+0x46>
    8a36:	4620      	mov	r0, r4
    8a38:	f7ff fe68 	bl	870c <sleep_elapsed>
    8a3c:	b138      	cbz	r0, 8a4e <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    8a3e:	2304      	movs	r3, #4
    8a40:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    8a42:	2300      	movs	r3, #0
		sleep_ms(state, 11); // 11 ms hop interval
    8a44:	210b      	movs	r1, #11
		state->packet_observed = 0;
    8a46:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    8a48:	4620      	mov	r0, r4
    8a4a:	f7ff fe49 	bl	86e0 <sleep_ms>
	if (state->state != EGO_ST_CAP) {
    8a4e:	7823      	ldrb	r3, [r4, #0]
    8a50:	2b02      	cmp	r3, #2
    8a52:	d006      	beq.n	8a62 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    8a54:	2064      	movs	r0, #100	; 0x64
    8a56:	f000 fdd2 	bl	95fe <cc2400_strobe>
}
    8a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ssp_stop();
    8a5e:	f7ff be1f 	b.w	86a0 <ssp_stop>
    8a62:	bd10      	pop	{r4, pc}
    8a64:	10001464 	.word	0x10001464
    8a68:	40004008 	.word	0x40004008

00008a6c <continuous_cap_state>:
static void continuous_cap_state(ego_fsm_state_t *state) {
    8a6c:	b510      	push	{r4, lr}
    8a6e:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    8a70:	2228      	movs	r2, #40	; 0x28
    8a72:	2100      	movs	r1, #0
    8a74:	4668      	mov	r0, sp
    8a76:	f7fb fbc3 	bl	4200 <memset>
		.rxtime = CLK100NS,
    8a7a:	f640 4135 	movw	r1, #3125	; 0xc35
    8a7e:	4b16      	ldr	r3, [pc, #88]	; (8ad8 <continuous_cap_state+0x6c>)
    8a80:	4a16      	ldr	r2, [pc, #88]	; (8adc <continuous_cap_state+0x70>)
    8a82:	681b      	ldr	r3, [r3, #0]
    8a84:	6812      	ldr	r2, [r2, #0]
    8a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8a8a:	fb01 2303 	mla	r3, r1, r3, r2
	ego_packet_t packet = {
    8a8e:	9309      	str	r3, [sp, #36]	; 0x24
	return cc2400_status() & SYNC_RECEIVED;
    8a90:	f000 fdae 	bl	95f0 <cc2400_status>
	if (sync_received()) {
    8a94:	06c2      	lsls	r2, r0, #27
    8a96:	d51d      	bpl.n	8ad4 <continuous_cap_state+0x68>
		RXLED_SET;
    8a98:	2410      	movs	r4, #16
    8a9a:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <continuous_cap_state+0x74>)
		do_rx(&packet);
    8a9c:	4668      	mov	r0, sp
		RXLED_SET;
    8a9e:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    8aa0:	f7ff fe0c 	bl	86bc <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8aa6:	4669      	mov	r1, sp
    8aa8:	2006      	movs	r0, #6
    8aaa:	f7fc fa0b 	bl	4ec4 <enqueue_with_ts>
		RXLED_CLR;
    8aae:	4b0d      	ldr	r3, [pc, #52]	; (8ae4 <continuous_cap_state+0x78>)
		cc2400_strobe(SFSON);
    8ab0:	2061      	movs	r0, #97	; 0x61
		RXLED_CLR;
    8ab2:	601c      	str	r4, [r3, #0]
		cc2400_strobe(SFSON);
    8ab4:	f000 fda3 	bl	95fe <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8ab8:	f000 fd9a 	bl	95f0 <cc2400_status>
    8abc:	0743      	lsls	r3, r0, #29
    8abe:	d5fb      	bpl.n	8ab8 <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ac0:	200e      	movs	r0, #14
    8ac2:	f000 fcf1 	bl	94a8 <cc2400_get>
    8ac6:	f000 001f 	and.w	r0, r0, #31
    8aca:	280f      	cmp	r0, #15
    8acc:	d1f8      	bne.n	8ac0 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    8ace:	2062      	movs	r0, #98	; 0x62
    8ad0:	f000 fd95 	bl	95fe <cc2400_strobe>
}
    8ad4:	b00a      	add	sp, #40	; 0x28
    8ad6:	bd10      	pop	{r4, pc}
    8ad8:	10001464 	.word	0x10001464
    8adc:	40004008 	.word	0x40004008
    8ae0:	2009c038 	.word	0x2009c038
    8ae4:	2009c03c 	.word	0x2009c03c

00008ae8 <ego_main>:
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    8ae8:	b530      	push	{r4, r5, lr}
    8aea:	b089      	sub	sp, #36	; 0x24
    8aec:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8aee:	221c      	movs	r2, #28
    8af0:	2100      	movs	r1, #0
    8af2:	a801      	add	r0, sp, #4
    8af4:	f7fb fb84 	bl	4200 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    8af8:	2c01      	cmp	r4, #1
    8afa:	4d14      	ldr	r5, [pc, #80]	; (8b4c <ego_main+0x64>)
    8afc:	d006      	beq.n	8b0c <ego_main+0x24>
    8afe:	d316      	bcc.n	8b2e <ego_main+0x46>
    8b00:	2c02      	cmp	r4, #2
    8b02:	d016      	beq.n	8b32 <ego_main+0x4a>
		case EGO_JAM:
			handler = jam_handler;
			break;
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    8b04:	2300      	movs	r3, #0
    8b06:	702b      	strb	r3, [r5, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    8b08:	b009      	add	sp, #36	; 0x24
    8b0a:	bd30      	pop	{r4, r5, pc}
			handler = continuous_rx_handler;
    8b0c:	4c10      	ldr	r4, [pc, #64]	; (8b50 <ego_main+0x68>)
	ISER0 = ISER0_ISE_USB;
    8b0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8b12:	4b10      	ldr	r3, [pc, #64]	; (8b54 <ego_main+0x6c>)
    8b14:	601a      	str	r2, [r3, #0]
	dio_ssp_init();
    8b16:	f000 fc3d 	bl	9394 <dio_ssp_init>
		if (requested_mode != MODE_EGO)
    8b1a:	782b      	ldrb	r3, [r5, #0]
    8b1c:	2b0d      	cmp	r3, #13
    8b1e:	d10a      	bne.n	8b36 <ego_main+0x4e>
		handler[state.state](&state);
    8b20:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8b24:	a801      	add	r0, sp, #4
    8b26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    8b2a:	4798      	blx	r3
		if (requested_mode != MODE_EGO)
    8b2c:	e7f5      	b.n	8b1a <ego_main+0x32>
			handler = follow_handler;
    8b2e:	4c0a      	ldr	r4, [pc, #40]	; (8b58 <ego_main+0x70>)
    8b30:	e7ed      	b.n	8b0e <ego_main+0x26>
			handler = jam_handler;
    8b32:	4c0a      	ldr	r4, [pc, #40]	; (8b5c <ego_main+0x74>)
    8b34:	e7eb      	b.n	8b0e <ego_main+0x26>
	cc2400_strobe(SRFOFF);
    8b36:	2064      	movs	r0, #100	; 0x64
    8b38:	f000 fd61 	bl	95fe <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8b3c:	f7ff fdb0 	bl	86a0 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8b44:	4b06      	ldr	r3, [pc, #24]	; (8b60 <ego_main+0x78>)
    8b46:	601a      	str	r2, [r3, #0]
    8b48:	e7de      	b.n	8b08 <ego_main+0x20>
    8b4a:	bf00      	nop
    8b4c:	10000a5e 	.word	0x10000a5e
    8b50:	0000b6b0 	.word	0x0000b6b0
    8b54:	e000e100 	.word	0xe000e100
    8b58:	0000b694 	.word	0x0000b694
    8b5c:	0000b6c8 	.word	0x0000b6c8
    8b60:	e000e180 	.word	0xe000e180

00008b64 <debug_uart_init>:
int debug_dma_active = 0;
char debug_buffer[256];

void debug_uart_init(int flow_control) {
	// power on UART1 peripheral
	PCONP |= PCONP_PCUART1;
    8b64:	4a28      	ldr	r2, [pc, #160]	; (8c08 <debug_uart_init+0xa4>)

	// 8N1, enable access to divisor latches
	U1LCR = 0b10000011;

	// divisor: 11, fractional: 3/13. final baud: 115,411
	U1DLL = 11;
    8b66:	210b      	movs	r1, #11
	PCONP |= PCONP_PCUART1;
    8b68:	6813      	ldr	r3, [r2, #0]
    8b6a:	f043 0310 	orr.w	r3, r3, #16
    8b6e:	6013      	str	r3, [r2, #0]
	U1LCR = 0b10000011;
    8b70:	2283      	movs	r2, #131	; 0x83
    8b72:	4b26      	ldr	r3, [pc, #152]	; (8c0c <debug_uart_init+0xa8>)
    8b74:	601a      	str	r2, [r3, #0]
	U1DLL = 11;
    8b76:	4a26      	ldr	r2, [pc, #152]	; (8c10 <debug_uart_init+0xac>)
    8b78:	3304      	adds	r3, #4
    8b7a:	6011      	str	r1, [r2, #0]
	U1DLM = 0;
    8b7c:	2100      	movs	r1, #0
    8b7e:	6051      	str	r1, [r2, #4]
	U1FDR = (3 << 0) | (13 << 4);
    8b80:	21d3      	movs	r1, #211	; 0xd3
    8b82:	6291      	str	r1, [r2, #40]	; 0x28

	// block access to divisor latches
	U1LCR &= ~0b10000000;
    8b84:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8b8c:	f843 2c04 	str.w	r2, [r3, #-4]

	// enable auto RTS/CTS
	if (flow_control)
    8b90:	2800      	cmp	r0, #0
    8b92:	d036      	beq.n	8c02 <debug_uart_init+0x9e>
		U1MCR = 0b11000000;
    8b94:	22c0      	movs	r2, #192	; 0xc0
    8b96:	601a      	str	r2, [r3, #0]
	else
		U1MCR = 0;

	// enable FIFO and DMA
	U1FCR = 0b1001;
    8b98:	2209      	movs	r2, #9
    8b9a:	4b1e      	ldr	r3, [pc, #120]	; (8c14 <debug_uart_init+0xb0>)
    8b9c:	601a      	str	r2, [r3, #0]

	// set P0.15 as TXD1, with pullup
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    8b9e:	4a1e      	ldr	r2, [pc, #120]	; (8c18 <debug_uart_init+0xb4>)
    8ba0:	6813      	ldr	r3, [r2, #0]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);

	// set P0.16 as RXD1, with pullup
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    8ba2:	3204      	adds	r2, #4
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    8ba4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    8ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8bac:	f842 3c04 	str.w	r3, [r2, #-4]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);
    8bb0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8bb2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    8bb6:	63d3      	str	r3, [r2, #60]	; 0x3c
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    8bb8:	6813      	ldr	r3, [r2, #0]
    8bba:	f023 0303 	bic.w	r3, r3, #3
    8bbe:	f043 0301 	orr.w	r3, r3, #1
    8bc2:	6013      	str	r3, [r2, #0]
	PINMODE1 = (PINMODE1 & ~(0b11 <<  0)) | (0b00 <<  0);
    8bc4:	4b15      	ldr	r3, [pc, #84]	; (8c1c <debug_uart_init+0xb8>)
    8bc6:	6819      	ldr	r1, [r3, #0]
    8bc8:	f021 0103 	bic.w	r1, r1, #3
    8bcc:	6019      	str	r1, [r3, #0]

	if (flow_control) {
    8bce:	b1b8      	cbz	r0, 8c00 <debug_uart_init+0x9c>
		// set P0.17 as CTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 <<  2)) | (0b01 <<  2);
    8bd0:	6811      	ldr	r1, [r2, #0]
    8bd2:	f021 010c 	bic.w	r1, r1, #12
    8bd6:	f041 0104 	orr.w	r1, r1, #4
    8bda:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 <<  2)) | (0b10 <<  2);
    8bdc:	6819      	ldr	r1, [r3, #0]
    8bde:	f021 010c 	bic.w	r1, r1, #12
    8be2:	f041 0108 	orr.w	r1, r1, #8
    8be6:	6019      	str	r1, [r3, #0]

		// set P0.22 as RTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 << 12)) | (0b01 << 12);
    8be8:	6811      	ldr	r1, [r2, #0]
    8bea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
    8bee:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8bf2:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 << 12)) | (0b10 << 12);
    8bf4:	681a      	ldr	r2, [r3, #0]
    8bf6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    8bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8bfe:	601a      	str	r2, [r3, #0]
    8c00:	4770      	bx	lr
		U1MCR = 0;
    8c02:	6018      	str	r0, [r3, #0]
    8c04:	e7c8      	b.n	8b98 <debug_uart_init+0x34>
    8c06:	bf00      	nop
    8c08:	400fc0c4 	.word	0x400fc0c4
    8c0c:	4001000c 	.word	0x4001000c
    8c10:	40010000 	.word	0x40010000
    8c14:	40010008 	.word	0x40010008
    8c18:	4002c000 	.word	0x4002c000
    8c1c:	4002c044 	.word	0x4002c044

00008c20 <debug_printf>:
			DMACCxConfig_ITC  ; // allow terminal count interrupts

	DMACC7Config |= 1;
}

void debug_printf(char *fmt, ...) {
    8c20:	b40f      	push	{r0, r1, r2, r3}
    8c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
	va_list ap;
	void *ret;

	// TODO warn user?
	if (debug_dma_active)
    8c24:	4b13      	ldr	r3, [pc, #76]	; (8c74 <debug_printf+0x54>)
    8c26:	681d      	ldr	r5, [r3, #0]
    8c28:	b9fd      	cbnz	r5, 8c6a <debug_printf+0x4a>
		return;
	debug_dma_active = 1;
    8c2a:	2201      	movs	r2, #1

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8c2c:	4c12      	ldr	r4, [pc, #72]	; (8c78 <debug_printf+0x58>)
	debug_dma_active = 1;
    8c2e:	601a      	str	r2, [r3, #0]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8c30:	21ff      	movs	r1, #255	; 0xff
	va_start(ap, fmt);
    8c32:	ab07      	add	r3, sp, #28
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8c34:	9a06      	ldr	r2, [sp, #24]
    8c36:	4620      	mov	r0, r4
	va_start(ap, fmt);
    8c38:	9301      	str	r3, [sp, #4]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8c3a:	f000 faf3 	bl	9224 <tfp_vsnprintf>
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;

	size_t len = strlen(debug_buffer);
    8c3e:	4620      	mov	r0, r4
	debug_buffer[sizeof(debug_buffer) - 1] = 0;
    8c40:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
	size_t len = strlen(debug_buffer);
    8c44:	f001 ffc4 	bl	abd0 <strlen>
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    8c48:	4b0c      	ldr	r3, [pc, #48]	; (8c7c <debug_printf+0x5c>)
	DMACC7DestAddr = (uint32_t)&U1THR;
    8c4a:	4a0d      	ldr	r2, [pc, #52]	; (8c80 <debug_printf+0x60>)
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    8c4c:	601c      	str	r4, [r3, #0]
	DMACC7DestAddr = (uint32_t)&U1THR;
    8c4e:	605a      	str	r2, [r3, #4]
	DMACC7Config =
    8c50:	f64c 2280 	movw	r2, #51840	; 0xca80
			(0b000 << 12)    | // source burst: 1 byte
    8c54:	f3c0 000b 	ubfx	r0, r0, #0, #12
			DMACCxControl_SI | // source increment
    8c58:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
	DMACC7LLI = 0;
    8c5c:	609d      	str	r5, [r3, #8]
	DMACC7Control =
    8c5e:	60d8      	str	r0, [r3, #12]
	DMACC7Config =
    8c60:	611a      	str	r2, [r3, #16]
	DMACC7Config |= 1;
    8c62:	691a      	ldr	r2, [r3, #16]
    8c64:	f042 0201 	orr.w	r2, r2, #1
    8c68:	611a      	str	r2, [r3, #16]
	debug_send_dma(len);
}
    8c6a:	b003      	add	sp, #12
    8c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8c70:	b004      	add	sp, #16
    8c72:	4770      	bx	lr
    8c74:	100012dc 	.word	0x100012dc
    8c78:	10003cfe 	.word	0x10003cfe
    8c7c:	500041e0 	.word	0x500041e0
    8c80:	40010000 	.word	0x40010000

00008c84 <ulli2a>:


#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
    8c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    8c88:	2700      	movs	r7, #0
{
    8c8a:	4680      	mov	r8, r0
    8c8c:	4689      	mov	r9, r1
    8c8e:	4693      	mov	fp, r2
    unsigned long long int d = 1;
    8c90:	2401      	movs	r4, #1
    8c92:	2500      	movs	r5, #0
    char *bf = p->bf;
    8c94:	f8d2 a010 	ldr.w	sl, [r2, #16]
    while (num / d >= p->base)
    8c98:	68d6      	ldr	r6, [r2, #12]
    8c9a:	4622      	mov	r2, r4
    8c9c:	462b      	mov	r3, r5
    8c9e:	4640      	mov	r0, r8
    8ca0:	4649      	mov	r1, r9
    8ca2:	f001 fd93 	bl	a7cc <__aeabi_uldivmod>
    8ca6:	42b9      	cmp	r1, r7
    8ca8:	bf08      	it	eq
    8caa:	42b0      	cmpeq	r0, r6
    8cac:	d208      	bcs.n	8cc0 <ulli2a+0x3c>
    8cae:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    8cb0:	ea54 0305 	orrs.w	r3, r4, r5
    8cb4:	d10c      	bne.n	8cd0 <ulli2a+0x4c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    8cb6:	2300      	movs	r3, #0
    8cb8:	f88a 3000 	strb.w	r3, [sl]
    8cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    8cc0:	fb04 f307 	mul.w	r3, r4, r7
    8cc4:	fb06 3305 	mla	r3, r6, r5, r3
    8cc8:	fba4 4506 	umull	r4, r5, r4, r6
    8ccc:	441d      	add	r5, r3
    8cce:	e7e4      	b.n	8c9a <ulli2a+0x16>
        int dgt = num / d;
    8cd0:	4622      	mov	r2, r4
    8cd2:	462b      	mov	r3, r5
    8cd4:	4640      	mov	r0, r8
    8cd6:	4649      	mov	r1, r9
    8cd8:	f001 fd78 	bl	a7cc <__aeabi_uldivmod>
        num %= d;
    8cdc:	4622      	mov	r2, r4
    8cde:	462b      	mov	r3, r5
    8ce0:	4649      	mov	r1, r9
        int dgt = num / d;
    8ce2:	4607      	mov	r7, r0
        num %= d;
    8ce4:	4640      	mov	r0, r8
    8ce6:	f001 fd71 	bl	a7cc <__aeabi_uldivmod>
        d /= p->base;
    8cea:	4620      	mov	r0, r4
    8cec:	4629      	mov	r1, r5
        num %= d;
    8cee:	4690      	mov	r8, r2
    8cf0:	4699      	mov	r9, r3
        d /= p->base;
    8cf2:	f8db 200c 	ldr.w	r2, [fp, #12]
    8cf6:	2300      	movs	r3, #0
    8cf8:	f001 fd68 	bl	a7cc <__aeabi_uldivmod>
    8cfc:	4604      	mov	r4, r0
    8cfe:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    8d00:	b926      	cbnz	r6, 8d0c <ulli2a+0x88>
    8d02:	2f00      	cmp	r7, #0
    8d04:	dc02      	bgt.n	8d0c <ulli2a+0x88>
    8d06:	ea54 0305 	orrs.w	r3, r4, r5
    8d0a:	d1d1      	bne.n	8cb0 <ulli2a+0x2c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8d0c:	2f09      	cmp	r7, #9
    8d0e:	f10a 0201 	add.w	r2, sl, #1
    8d12:	dd0c      	ble.n	8d2e <ulli2a+0xaa>
    8d14:	f89b 3000 	ldrb.w	r3, [fp]
    8d18:	f013 0f04 	tst.w	r3, #4
    8d1c:	bf14      	ite	ne
    8d1e:	2337      	movne	r3, #55	; 0x37
    8d20:	2357      	moveq	r3, #87	; 0x57
    8d22:	441f      	add	r7, r3
    8d24:	f88a 7000 	strb.w	r7, [sl]
            ++n;
    8d28:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8d2a:	4692      	mov	sl, r2
    8d2c:	e7c0      	b.n	8cb0 <ulli2a+0x2c>
    8d2e:	2330      	movs	r3, #48	; 0x30
    8d30:	e7f7      	b.n	8d22 <ulli2a+0x9e>

00008d32 <uli2a>:
}
#endif

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
    8d32:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned long int d = 1;
    8d34:	2301      	movs	r3, #1
    char *bf = p->bf;
    8d36:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    8d38:	68cc      	ldr	r4, [r1, #12]
    8d3a:	fbb0 f5f3 	udiv	r5, r0, r3
    8d3e:	42a5      	cmp	r5, r4
    8d40:	d203      	bcs.n	8d4a <uli2a+0x18>
    8d42:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    8d44:	b91b      	cbnz	r3, 8d4e <uli2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    8d46:	7013      	strb	r3, [r2, #0]
    8d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    8d4a:	4363      	muls	r3, r4
    8d4c:	e7f5      	b.n	8d3a <uli2a+0x8>
        int dgt = num / d;
    8d4e:	fbb0 f5f3 	udiv	r5, r0, r3
        d /= p->base;
    8d52:	68cc      	ldr	r4, [r1, #12]
        num %= d;
    8d54:	fb03 0015 	mls	r0, r3, r5, r0
        d /= p->base;
    8d58:	fbb3 f3f4 	udiv	r3, r3, r4
        if (n || dgt > 0 || d == 0) {
    8d5c:	b91e      	cbnz	r6, 8d66 <uli2a+0x34>
    8d5e:	2d00      	cmp	r5, #0
    8d60:	dc01      	bgt.n	8d66 <uli2a+0x34>
    8d62:	2b00      	cmp	r3, #0
    8d64:	d1ee      	bne.n	8d44 <uli2a+0x12>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8d66:	2d09      	cmp	r5, #9
    8d68:	f102 0701 	add.w	r7, r2, #1
    8d6c:	dd0a      	ble.n	8d84 <uli2a+0x52>
    8d6e:	780c      	ldrb	r4, [r1, #0]
    8d70:	f014 0f04 	tst.w	r4, #4
    8d74:	bf14      	ite	ne
    8d76:	2437      	movne	r4, #55	; 0x37
    8d78:	2457      	moveq	r4, #87	; 0x57
    8d7a:	442c      	add	r4, r5
    8d7c:	7014      	strb	r4, [r2, #0]
            ++n;
    8d7e:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8d80:	463a      	mov	r2, r7
    8d82:	e7df      	b.n	8d44 <uli2a+0x12>
    8d84:	2430      	movs	r4, #48	; 0x30
    8d86:	e7f8      	b.n	8d7a <uli2a+0x48>

00008d88 <ui2a>:
    uli2a(num, p);
}
#endif

static void ui2a(unsigned int num, struct param *p)
{
    8d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned int d = 1;
    8d8a:	2301      	movs	r3, #1
    char *bf = p->bf;
    8d8c:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    8d8e:	68cc      	ldr	r4, [r1, #12]
    8d90:	fbb0 f5f3 	udiv	r5, r0, r3
    8d94:	42a5      	cmp	r5, r4
    8d96:	d203      	bcs.n	8da0 <ui2a+0x18>
    8d98:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    8d9a:	b91b      	cbnz	r3, 8da4 <ui2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    8d9c:	7013      	strb	r3, [r2, #0]
    8d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    8da0:	4363      	muls	r3, r4
    8da2:	e7f5      	b.n	8d90 <ui2a+0x8>
        int dgt = num / d;
    8da4:	fbb0 f5f3 	udiv	r5, r0, r3
        d /= p->base;
    8da8:	68cc      	ldr	r4, [r1, #12]
        num %= d;
    8daa:	fb03 0015 	mls	r0, r3, r5, r0
        d /= p->base;
    8dae:	fbb3 f3f4 	udiv	r3, r3, r4
        if (n || dgt > 0 || d == 0) {
    8db2:	b91e      	cbnz	r6, 8dbc <ui2a+0x34>
    8db4:	2d00      	cmp	r5, #0
    8db6:	dc01      	bgt.n	8dbc <ui2a+0x34>
    8db8:	2b00      	cmp	r3, #0
    8dba:	d1ee      	bne.n	8d9a <ui2a+0x12>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8dbc:	2d09      	cmp	r5, #9
    8dbe:	f102 0701 	add.w	r7, r2, #1
    8dc2:	dd0a      	ble.n	8dda <ui2a+0x52>
    8dc4:	780c      	ldrb	r4, [r1, #0]
    8dc6:	f014 0f04 	tst.w	r4, #4
    8dca:	bf14      	ite	ne
    8dcc:	2437      	movne	r4, #55	; 0x37
    8dce:	2457      	moveq	r4, #87	; 0x57
    8dd0:	442c      	add	r4, r5
    8dd2:	7014      	strb	r4, [r2, #0]
            ++n;
    8dd4:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8dd6:	463a      	mov	r2, r7
    8dd8:	e7df      	b.n	8d9a <ui2a+0x12>
    8dda:	2430      	movs	r4, #48	; 0x30
    8ddc:	e7f8      	b.n	8dd0 <ui2a+0x48>

00008dde <putchw>:
    *nump = num;
    return ch;
}

static void putchw(void *putp, putcf putf, struct param *p)
{
    8dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8de2:	4606      	mov	r6, r0
    8de4:	460f      	mov	r7, r1
    8de6:	4615      	mov	r5, r2
    char ch;
    int n = p->width;
    8de8:	6854      	ldr	r4, [r2, #4]
    char *bf = p->bf;
    8dea:	6913      	ldr	r3, [r2, #16]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    8dec:	f813 2b01 	ldrb.w	r2, [r3], #1
    8df0:	2a00      	cmp	r2, #0
    8df2:	d144      	bne.n	8e7e <putchw+0xa0>
        n--;
    if (p->sign)
    8df4:	7a2b      	ldrb	r3, [r5, #8]
    8df6:	2b00      	cmp	r3, #0
    8df8:	d145      	bne.n	8e86 <putchw+0xa8>
        n--;
    if (p->alt && p->base == 16)
    8dfa:	782b      	ldrb	r3, [r5, #0]
    8dfc:	0799      	lsls	r1, r3, #30
    8dfe:	d503      	bpl.n	8e08 <putchw+0x2a>
    8e00:	68ea      	ldr	r2, [r5, #12]
    8e02:	2a10      	cmp	r2, #16
    8e04:	d141      	bne.n	8e8a <putchw+0xac>
        n -= 2;
    8e06:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Fill with space to align to the right, before alternate or sign */
    if (!p->lz && !p->align_left) {
    8e08:	f013 0f09 	tst.w	r3, #9
    8e0c:	d108      	bne.n	8e20 <putchw+0x42>
    8e0e:	46a0      	mov	r8, r4
        while (n-- > 0)
    8e10:	f1b8 0f00 	cmp.w	r8, #0
    8e14:	dc3e      	bgt.n	8e94 <putchw+0xb6>
    8e16:	1e63      	subs	r3, r4, #1
    8e18:	2c00      	cmp	r4, #0
    8e1a:	bfb4      	ite	lt
    8e1c:	461c      	movlt	r4, r3
    8e1e:	1b1c      	subge	r4, r3, r4
            putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    8e20:	7a29      	ldrb	r1, [r5, #8]
    8e22:	b109      	cbz	r1, 8e28 <putchw+0x4a>
        putf(putp, p->sign);
    8e24:	4630      	mov	r0, r6
    8e26:	47b8      	blx	r7

    /* Alternate */
    if (p->alt && p->base == 16) {
    8e28:	782b      	ldrb	r3, [r5, #0]
    8e2a:	079a      	lsls	r2, r3, #30
    8e2c:	d50d      	bpl.n	8e4a <putchw+0x6c>
    8e2e:	68eb      	ldr	r3, [r5, #12]
    8e30:	2b10      	cmp	r3, #16
    8e32:	d135      	bne.n	8ea0 <putchw+0xc2>
        putf(putp, '0');
    8e34:	2130      	movs	r1, #48	; 0x30
    8e36:	4630      	mov	r0, r6
    8e38:	47b8      	blx	r7
        putf(putp, (p->uc ? 'X' : 'x'));
    8e3a:	782b      	ldrb	r3, [r5, #0]
    8e3c:	f013 0f04 	tst.w	r3, #4
    8e40:	bf14      	ite	ne
    8e42:	2158      	movne	r1, #88	; 0x58
    8e44:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        putf(putp, '0');
    8e46:	4630      	mov	r0, r6
    8e48:	47b8      	blx	r7
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    8e4a:	782b      	ldrb	r3, [r5, #0]
    8e4c:	07db      	lsls	r3, r3, #31
    8e4e:	d508      	bpl.n	8e62 <putchw+0x84>
    8e50:	46a0      	mov	r8, r4
        while (n-- > 0)
    8e52:	f1b8 0f00 	cmp.w	r8, #0
    8e56:	dc27      	bgt.n	8ea8 <putchw+0xca>
    8e58:	1e63      	subs	r3, r4, #1
    8e5a:	2c00      	cmp	r4, #0
    8e5c:	bfb4      	ite	lt
    8e5e:	461c      	movlt	r4, r3
    8e60:	1b1c      	subge	r4, r3, r4
            putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    8e62:	f8d5 8010 	ldr.w	r8, [r5, #16]
    while ((ch = *bf++))
    8e66:	f818 1b01 	ldrb.w	r1, [r8], #1
    8e6a:	bb19      	cbnz	r1, 8eb4 <putchw+0xd6>
        putf(putp, ch);

    /* Fill with space to align to the left, after string */
    if (!p->lz && p->align_left) {
    8e6c:	782b      	ldrb	r3, [r5, #0]
    8e6e:	f003 0309 	and.w	r3, r3, #9
    8e72:	2b08      	cmp	r3, #8
    8e74:	d101      	bne.n	8e7a <putchw+0x9c>
        while (n-- > 0)
    8e76:	2c00      	cmp	r4, #0
    8e78:	dc1f      	bgt.n	8eba <putchw+0xdc>
    8e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (*bf++ && n > 0)
    8e7e:	2c00      	cmp	r4, #0
    8e80:	ddb8      	ble.n	8df4 <putchw+0x16>
        n--;
    8e82:	3c01      	subs	r4, #1
    8e84:	e7b2      	b.n	8dec <putchw+0xe>
        n--;
    8e86:	3c01      	subs	r4, #1
    8e88:	e7b7      	b.n	8dfa <putchw+0x1c>
    else if (p->alt && p->base == 8)
    8e8a:	2a08      	cmp	r2, #8
        n--;
    8e8c:	bf08      	it	eq
    8e8e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    8e92:	e7b9      	b.n	8e08 <putchw+0x2a>
            putf(putp, ' ');
    8e94:	2120      	movs	r1, #32
    8e96:	4630      	mov	r0, r6
    8e98:	47b8      	blx	r7
    8e9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8e9e:	e7b7      	b.n	8e10 <putchw+0x32>
    } else if (p->alt && p->base == 8) {
    8ea0:	2b08      	cmp	r3, #8
    8ea2:	d1d2      	bne.n	8e4a <putchw+0x6c>
        putf(putp, '0');
    8ea4:	2130      	movs	r1, #48	; 0x30
    8ea6:	e7ce      	b.n	8e46 <putchw+0x68>
            putf(putp, '0');
    8ea8:	2130      	movs	r1, #48	; 0x30
    8eaa:	4630      	mov	r0, r6
    8eac:	47b8      	blx	r7
    8eae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8eb2:	e7ce      	b.n	8e52 <putchw+0x74>
        putf(putp, ch);
    8eb4:	4630      	mov	r0, r6
    8eb6:	47b8      	blx	r7
    8eb8:	e7d5      	b.n	8e66 <putchw+0x88>
            putf(putp, ' ');
    8eba:	2120      	movs	r1, #32
    8ebc:	4630      	mov	r0, r6
    8ebe:	47b8      	blx	r7
    8ec0:	3c01      	subs	r4, #1
    8ec2:	e7d8      	b.n	8e76 <putchw+0x98>

00008ec4 <_vsnprintf_putcf>:
};

static void _vsnprintf_putcf(void *p, char c)
{
  struct _vsnprintf_putcf_data *data = (struct _vsnprintf_putcf_data*)p;
  if (data->num_chars < data->dest_capacity)
    8ec4:	6883      	ldr	r3, [r0, #8]
    8ec6:	6802      	ldr	r2, [r0, #0]
    8ec8:	4293      	cmp	r3, r2
    data->dest[data->num_chars] = c;
    8eca:	bf3c      	itt	cc
    8ecc:	6842      	ldrcc	r2, [r0, #4]
    8ece:	54d1      	strbcc	r1, [r2, r3]
  data->num_chars ++;
    8ed0:	6883      	ldr	r3, [r0, #8]
    8ed2:	3301      	adds	r3, #1
    8ed4:	6083      	str	r3, [r0, #8]
    8ed6:	4770      	bx	lr

00008ed8 <tfp_format>:
{
    8ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8edc:	b08c      	sub	sp, #48	; 0x30
    8ede:	4680      	mov	r8, r0
    8ee0:	4689      	mov	r9, r1
    8ee2:	461c      	mov	r4, r3
    p.bf = bf;
    8ee4:	ae06      	add	r6, sp, #24
    8ee6:	9605      	str	r6, [sp, #20]
    while ((ch = *(fmt++))) {
    8ee8:	7815      	ldrb	r5, [r2, #0]
    8eea:	1c57      	adds	r7, r2, #1
    8eec:	b915      	cbnz	r5, 8ef4 <tfp_format+0x1c>
}
    8eee:	b00c      	add	sp, #48	; 0x30
    8ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (ch != '%') {
    8ef4:	2d25      	cmp	r5, #37	; 0x25
    8ef6:	d008      	beq.n	8f0a <tfp_format+0x32>
			if (ch == '\n')
    8ef8:	2d0a      	cmp	r5, #10
    8efa:	d102      	bne.n	8f02 <tfp_format+0x2a>
				putf(putp, '\r');
    8efc:	210d      	movs	r1, #13
    8efe:	4640      	mov	r0, r8
    8f00:	47c8      	blx	r9
            putf(putp, ch);
    8f02:	4629      	mov	r1, r5
                putf(putp, ch);
    8f04:	4640      	mov	r0, r8
    8f06:	47c8      	blx	r9
    8f08:	e096      	b.n	9038 <tfp_format+0x160>
            p.width = 0;
    8f0a:	2200      	movs	r2, #0
            while ((ch = *(fmt++))) {
    8f0c:	4696      	mov	lr, r2
    8f0e:	4611      	mov	r1, r2
    8f10:	4694      	mov	ip, r2
    8f12:	4610      	mov	r0, r2
    8f14:	4692      	mov	sl, r2
            p.lz = 0;
    8f16:	f89d 3004 	ldrb.w	r3, [sp, #4]
            p.width = 0;
    8f1a:	9202      	str	r2, [sp, #8]
            p.align_left = 0;
    8f1c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    8f20:	f362 03c3 	bfi	r3, r2, #3, #1
    8f24:	f88d 3004 	strb.w	r3, [sp, #4]
            p.sign = 0;
    8f28:	f88d 200c 	strb.w	r2, [sp, #12]
            while ((ch = *(fmt++))) {
    8f2c:	463d      	mov	r5, r7
    8f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
    8f32:	2b00      	cmp	r3, #0
    8f34:	d149      	bne.n	8fca <tfp_format+0xf2>
    8f36:	b128      	cbz	r0, 8f44 <tfp_format+0x6c>
    8f38:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8f3c:	f36a 00c3 	bfi	r0, sl, #3, #1
    8f40:	f88d 0004 	strb.w	r0, [sp, #4]
    8f44:	b129      	cbz	r1, 8f52 <tfp_format+0x7a>
    8f46:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f4a:	f36c 0100 	bfi	r1, ip, #0, #1
    8f4e:	f88d 1004 	strb.w	r1, [sp, #4]
    8f52:	b12a      	cbz	r2, 8f60 <tfp_format+0x88>
    8f54:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8f58:	f36e 0241 	bfi	r2, lr, #1, #1
    8f5c:	f88d 2004 	strb.w	r2, [sp, #4]
            if (ch >= '0' && ch <= '9') {
    8f60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8f64:	2a09      	cmp	r2, #9
    8f66:	d80f      	bhi.n	8f88 <tfp_format+0xb0>
    8f68:	2100      	movs	r1, #0
        num = num * base + digit;
    8f6a:	200a      	movs	r0, #10
    if (ch >= '0' && ch <= '9')
    8f6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8f70:	b2d7      	uxtb	r7, r2
    8f72:	2f09      	cmp	r7, #9
    8f74:	d939      	bls.n	8fea <tfp_format+0x112>
    else if (ch >= 'a' && ch <= 'f')
    8f76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    8f7a:	2a05      	cmp	r2, #5
    8f7c:	d83a      	bhi.n	8ff4 <tfp_format+0x11c>
        return ch - 'a' + 10;
    8f7e:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
        if (digit > base)
    8f82:	2a0a      	cmp	r2, #10
    8f84:	dd31      	ble.n	8fea <tfp_format+0x112>
    *nump = num;
    8f86:	9102      	str	r1, [sp, #8]
            if (ch == '.') {
    8f88:	2b2e      	cmp	r3, #46	; 0x2e
    8f8a:	d10b      	bne.n	8fa4 <tfp_format+0xcc>
              p.lz = 1;  /* zero-padding */
    8f8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8f90:	f043 0301 	orr.w	r3, r3, #1
    8f94:	f88d 3004 	strb.w	r3, [sp, #4]
                ch = *(fmt++);
    8f98:	f815 3b01 	ldrb.w	r3, [r5], #1
              } while ((ch >= '0') && (ch <= '9'));
    8f9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8fa0:	2a09      	cmp	r2, #9
    8fa2:	d9f9      	bls.n	8f98 <tfp_format+0xc0>
            if (ch == 'z') {
    8fa4:	2b7a      	cmp	r3, #122	; 0x7a
    8fa6:	d12c      	bne.n	9002 <tfp_format+0x12a>
                ch = *(fmt++);
    8fa8:	782b      	ldrb	r3, [r5, #0]
    8faa:	1c6f      	adds	r7, r5, #1
            switch (ch) {
    8fac:	2b69      	cmp	r3, #105	; 0x69
    8fae:	d00a      	beq.n	8fc6 <tfp_format+0xee>
    8fb0:	f200 80dd 	bhi.w	916e <tfp_format+0x296>
    8fb4:	2b58      	cmp	r3, #88	; 0x58
    8fb6:	f000 80e3 	beq.w	9180 <tfp_format+0x2a8>
    8fba:	d931      	bls.n	9020 <tfp_format+0x148>
    8fbc:	2b63      	cmp	r3, #99	; 0x63
    8fbe:	f000 80c1 	beq.w	9144 <tfp_format+0x26c>
    8fc2:	2b64      	cmp	r3, #100	; 0x64
    8fc4:	d138      	bne.n	9038 <tfp_format+0x160>
    8fc6:	2301      	movs	r3, #1
    8fc8:	e07c      	b.n	90c4 <tfp_format+0x1ec>
                switch (ch) {
    8fca:	2b2d      	cmp	r3, #45	; 0x2d
    8fcc:	d006      	beq.n	8fdc <tfp_format+0x104>
    8fce:	2b30      	cmp	r3, #48	; 0x30
    8fd0:	d008      	beq.n	8fe4 <tfp_format+0x10c>
    8fd2:	2b23      	cmp	r3, #35	; 0x23
    8fd4:	d1af      	bne.n	8f36 <tfp_format+0x5e>
                    continue;
    8fd6:	2201      	movs	r2, #1
                    p.alt = 1;
    8fd8:	4696      	mov	lr, r2
                    continue;
    8fda:	e001      	b.n	8fe0 <tfp_format+0x108>
                switch (ch) {
    8fdc:	2001      	movs	r0, #1
                    p.align_left = 1;
    8fde:	4682      	mov	sl, r0
    8fe0:	462f      	mov	r7, r5
    8fe2:	e7a3      	b.n	8f2c <tfp_format+0x54>
                switch (ch) {
    8fe4:	2101      	movs	r1, #1
                    p.lz = 1;
    8fe6:	468c      	mov	ip, r1
    8fe8:	e7fa      	b.n	8fe0 <tfp_format+0x108>
        num = num * base + digit;
    8fea:	fb00 2101 	mla	r1, r0, r1, r2
        ch = *p++;
    8fee:	f815 3b01 	ldrb.w	r3, [r5], #1
    8ff2:	e7bb      	b.n	8f6c <tfp_format+0x94>
    else if (ch >= 'A' && ch <= 'F')
    8ff4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    8ff8:	2a05      	cmp	r2, #5
    8ffa:	d8c4      	bhi.n	8f86 <tfp_format+0xae>
        return ch - 'A' + 10;
    8ffc:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
    9000:	e7bf      	b.n	8f82 <tfp_format+0xaa>
            if (ch == 'l') {
    9002:	2b6c      	cmp	r3, #108	; 0x6c
    9004:	f040 80cc 	bne.w	91a0 <tfp_format+0x2c8>
                ch = *(fmt++);
    9008:	782b      	ldrb	r3, [r5, #0]
                if (ch == 'l') {
    900a:	2b6c      	cmp	r3, #108	; 0x6c
    900c:	f040 80ad 	bne.w	916a <tfp_format+0x292>
                  ch = *(fmt++);
    9010:	786b      	ldrb	r3, [r5, #1]
    9012:	1caf      	adds	r7, r5, #2
            switch (ch) {
    9014:	2b69      	cmp	r3, #105	; 0x69
    9016:	d054      	beq.n	90c2 <tfp_format+0x1ea>
    9018:	d810      	bhi.n	903c <tfp_format+0x164>
    901a:	2b58      	cmp	r3, #88	; 0x58
    901c:	d01c      	beq.n	9058 <tfp_format+0x180>
    901e:	d806      	bhi.n	902e <tfp_format+0x156>
    9020:	2b00      	cmp	r3, #0
    9022:	f43f af64 	beq.w	8eee <tfp_format+0x16>
    9026:	2b25      	cmp	r3, #37	; 0x25
    9028:	f000 809d 	beq.w	9166 <tfp_format+0x28e>
    902c:	e004      	b.n	9038 <tfp_format+0x160>
    902e:	2b63      	cmp	r3, #99	; 0x63
    9030:	f000 8088 	beq.w	9144 <tfp_format+0x26c>
    9034:	2b64      	cmp	r3, #100	; 0x64
    9036:	d044      	beq.n	90c2 <tfp_format+0x1ea>
                p.bf = va_arg(va, char *);
    9038:	463a      	mov	r2, r7
    903a:	e755      	b.n	8ee8 <tfp_format+0x10>
            switch (ch) {
    903c:	2b73      	cmp	r3, #115	; 0x73
    903e:	f000 8087 	beq.w	9150 <tfp_format+0x278>
    9042:	d805      	bhi.n	9050 <tfp_format+0x178>
    9044:	2b6f      	cmp	r3, #111	; 0x6f
    9046:	d06e      	beq.n	9126 <tfp_format+0x24e>
    9048:	2b70      	cmp	r3, #112	; 0x70
    904a:	f000 80c5 	beq.w	91d8 <tfp_format+0x300>
    904e:	e7f3      	b.n	9038 <tfp_format+0x160>
    9050:	2b75      	cmp	r3, #117	; 0x75
    9052:	d014      	beq.n	907e <tfp_format+0x1a6>
    9054:	2b78      	cmp	r3, #120	; 0x78
    9056:	d1ef      	bne.n	9038 <tfp_format+0x160>
                p.base = 16;
    9058:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    905a:	f1a3 0058 	sub.w	r0, r3, #88	; 0x58
    905e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9062:	4243      	negs	r3, r0
    9064:	4143      	adcs	r3, r0
    9066:	f363 0182 	bfi	r1, r3, #2, #1
                    ulli2a(va_arg(va, unsigned long long int), &p);
    906a:	1de3      	adds	r3, r4, #7
                p.base = 16;
    906c:	9204      	str	r2, [sp, #16]
                    ulli2a(va_arg(va, unsigned long long int), &p);
    906e:	f023 0307 	bic.w	r3, r3, #7
                p.uc = (ch == 'X')?1:0;
    9072:	aa0c      	add	r2, sp, #48	; 0x30
    9074:	f802 1d2c 	strb.w	r1, [r2, #-44]!
                    ulli2a(va_arg(va, unsigned long long int), &p);
    9078:	f103 0408 	add.w	r4, r3, #8
    907c:	e00a      	b.n	9094 <tfp_format+0x1bc>
                  lng = 2;
    907e:	2302      	movs	r3, #2
                p.base = 10;
    9080:	220a      	movs	r2, #10
                if (2 == lng)
    9082:	2b02      	cmp	r3, #2
                p.base = 10;
    9084:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    9086:	d10d      	bne.n	90a4 <tfp_format+0x1cc>
                    ulli2a(va_arg(va, unsigned long long int), &p);
    9088:	1de3      	adds	r3, r4, #7
    908a:	f023 0307 	bic.w	r3, r3, #7
    908e:	f103 0408 	add.w	r4, r3, #8
    9092:	aa01      	add	r2, sp, #4
                    ulli2a(va_arg(va, unsigned long long int), &p);
    9094:	e9d3 0100 	ldrd	r0, r1, [r3]
    9098:	e02a      	b.n	90f0 <tfp_format+0x218>
            switch (ch) {
    909a:	2301      	movs	r3, #1
    909c:	e7f0      	b.n	9080 <tfp_format+0x1a8>
    909e:	462f      	mov	r7, r5
            char lng = 0;  /* 1 for long, 2 for long long */
    90a0:	2300      	movs	r3, #0
    90a2:	e7ed      	b.n	9080 <tfp_format+0x1a8>
                  if (1 == lng)
    90a4:	2b01      	cmp	r3, #1
                    uli2a(va_arg(va, unsigned long int), &p);
    90a6:	a901      	add	r1, sp, #4
    90a8:	6820      	ldr	r0, [r4, #0]
    90aa:	f104 0504 	add.w	r5, r4, #4
                  if (1 == lng)
    90ae:	d136      	bne.n	911e <tfp_format+0x246>
    uli2a(num, p);
    90b0:	f7ff fe3f 	bl	8d32 <uli2a>
                    i2a(va_arg(va, int), &p);
    90b4:	462c      	mov	r4, r5
                putchw(putp, putf, &p);
    90b6:	aa01      	add	r2, sp, #4
    90b8:	4649      	mov	r1, r9
    90ba:	4640      	mov	r0, r8
    90bc:	f7ff fe8f 	bl	8dde <putchw>
                break;
    90c0:	e7ba      	b.n	9038 <tfp_format+0x160>
                  lng = 2;
    90c2:	2302      	movs	r3, #2
                p.base = 10;
    90c4:	220a      	movs	r2, #10
                if (2 == lng)
    90c6:	2b02      	cmp	r3, #2
                p.base = 10;
    90c8:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    90ca:	d114      	bne.n	90f6 <tfp_format+0x21e>
                    lli2a(va_arg(va, long long int), &p);
    90cc:	1de3      	adds	r3, r4, #7
    90ce:	f023 0307 	bic.w	r3, r3, #7
    90d2:	e9d3 0100 	ldrd	r0, r1, [r3]
    if (num < 0) {
    90d6:	2800      	cmp	r0, #0
                    lli2a(va_arg(va, long long int), &p);
    90d8:	f103 0408 	add.w	r4, r3, #8
    if (num < 0) {
    90dc:	f171 0300 	sbcs.w	r3, r1, #0
    90e0:	da05      	bge.n	90ee <tfp_format+0x216>
        p->sign = '-';
    90e2:	232d      	movs	r3, #45	; 0x2d
        num = -num;
    90e4:	4240      	negs	r0, r0
    90e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = '-';
    90ea:	f88d 300c 	strb.w	r3, [sp, #12]
    ulli2a(num, p);
    90ee:	aa01      	add	r2, sp, #4
                    ulli2a(va_arg(va, unsigned long long int), &p);
    90f0:	f7ff fdc8 	bl	8c84 <ulli2a>
    90f4:	e7df      	b.n	90b6 <tfp_format+0x1de>
                  if (1 == lng)
    90f6:	2b01      	cmp	r3, #1
                    li2a(va_arg(va, long int), &p);
    90f8:	6820      	ldr	r0, [r4, #0]
    90fa:	f104 0504 	add.w	r5, r4, #4
                  if (1 == lng)
    90fe:	d107      	bne.n	9110 <tfp_format+0x238>
    if (num < 0) {
    9100:	2800      	cmp	r0, #0
        p->sign = '-';
    9102:	bfbe      	ittt	lt
    9104:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    9106:	4240      	neglt	r0, r0
        p->sign = '-';
    9108:	f88d 300c 	strblt.w	r3, [sp, #12]
    uli2a(num, p);
    910c:	a901      	add	r1, sp, #4
    910e:	e7cf      	b.n	90b0 <tfp_format+0x1d8>
    if (num < 0) {
    9110:	2800      	cmp	r0, #0
        p->sign = '-';
    9112:	bfbe      	ittt	lt
    9114:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    9116:	4240      	neglt	r0, r0
        p->sign = '-';
    9118:	f88d 300c 	strblt.w	r3, [sp, #12]
    ui2a(num, p);
    911c:	a901      	add	r1, sp, #4
    911e:	f7ff fe33 	bl	8d88 <ui2a>
    9122:	e7c7      	b.n	90b4 <tfp_format+0x1dc>
            switch (ch) {
    9124:	462f      	mov	r7, r5
                p.base = 8;
    9126:	2308      	movs	r3, #8
                ui2a(va_arg(va, unsigned int), &p);
    9128:	a901      	add	r1, sp, #4
    912a:	6820      	ldr	r0, [r4, #0]
                p.base = 8;
    912c:	9304      	str	r3, [sp, #16]
                ui2a(va_arg(va, unsigned int), &p);
    912e:	f7ff fe2b 	bl	8d88 <ui2a>
                putchw(putp, putf, &p);
    9132:	aa01      	add	r2, sp, #4
    9134:	4649      	mov	r1, r9
    9136:	4640      	mov	r0, r8
                ui2a(va_arg(va, unsigned int), &p);
    9138:	1d25      	adds	r5, r4, #4
                putchw(putp, putf, &p);
    913a:	f7ff fe50 	bl	8dde <putchw>
                putf(putp, (char)(va_arg(va, int)));
    913e:	462c      	mov	r4, r5
                break;
    9140:	e77a      	b.n	9038 <tfp_format+0x160>
            switch (ch) {
    9142:	462f      	mov	r7, r5
                putf(putp, (char)(va_arg(va, int)));
    9144:	7821      	ldrb	r1, [r4, #0]
    9146:	4640      	mov	r0, r8
    9148:	1d25      	adds	r5, r4, #4
    914a:	47c8      	blx	r9
    914c:	e7f7      	b.n	913e <tfp_format+0x266>
            switch (ch) {
    914e:	462f      	mov	r7, r5
                p.bf = va_arg(va, char *);
    9150:	6823      	ldr	r3, [r4, #0]
                putchw(putp, putf, &p);
    9152:	aa01      	add	r2, sp, #4
    9154:	4649      	mov	r1, r9
    9156:	4640      	mov	r0, r8
                p.bf = va_arg(va, char *);
    9158:	9305      	str	r3, [sp, #20]
    915a:	1d25      	adds	r5, r4, #4
                putchw(putp, putf, &p);
    915c:	f7ff fe3f 	bl	8dde <putchw>
                p.bf = bf;
    9160:	9605      	str	r6, [sp, #20]
    9162:	e7ec      	b.n	913e <tfp_format+0x266>
            switch (ch) {
    9164:	462f      	mov	r7, r5
                putf(putp, ch);
    9166:	2125      	movs	r1, #37	; 0x25
    9168:	e6cc      	b.n	8f04 <tfp_format+0x2c>
                ch = *(fmt++);
    916a:	1c6f      	adds	r7, r5, #1
    916c:	e71e      	b.n	8fac <tfp_format+0xd4>
            switch (ch) {
    916e:	2b73      	cmp	r3, #115	; 0x73
    9170:	d0ee      	beq.n	9150 <tfp_format+0x278>
    9172:	f67f af67 	bls.w	9044 <tfp_format+0x16c>
    9176:	2b75      	cmp	r3, #117	; 0x75
    9178:	d08f      	beq.n	909a <tfp_format+0x1c2>
    917a:	2b78      	cmp	r3, #120	; 0x78
    917c:	f47f af5c 	bne.w	9038 <tfp_format+0x160>
                p.base = 16;
    9180:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    9182:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    9186:	424b      	negs	r3, r1
                p.base = 16;
    9188:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    918a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    918e:	414b      	adcs	r3, r1
    9190:	f363 0282 	bfi	r2, r3, #2, #1
    9194:	a90c      	add	r1, sp, #48	; 0x30
    9196:	f801 2d2c 	strb.w	r2, [r1, #-44]!
                    uli2a(va_arg(va, unsigned long int), &p);
    919a:	1d25      	adds	r5, r4, #4
    919c:	6820      	ldr	r0, [r4, #0]
    919e:	e787      	b.n	90b0 <tfp_format+0x1d8>
            switch (ch) {
    91a0:	2b69      	cmp	r3, #105	; 0x69
    91a2:	d00e      	beq.n	91c2 <tfp_format+0x2ea>
    91a4:	d810      	bhi.n	91c8 <tfp_format+0x2f0>
    91a6:	2b58      	cmp	r3, #88	; 0x58
    91a8:	d02f      	beq.n	920a <tfp_format+0x332>
    91aa:	d806      	bhi.n	91ba <tfp_format+0x2e2>
    91ac:	2b00      	cmp	r3, #0
    91ae:	f43f ae9e 	beq.w	8eee <tfp_format+0x16>
    91b2:	2b25      	cmp	r3, #37	; 0x25
    91b4:	d0d6      	beq.n	9164 <tfp_format+0x28c>
    91b6:	462f      	mov	r7, r5
    91b8:	e73e      	b.n	9038 <tfp_format+0x160>
    91ba:	2b63      	cmp	r3, #99	; 0x63
    91bc:	d0c1      	beq.n	9142 <tfp_format+0x26a>
    91be:	2b64      	cmp	r3, #100	; 0x64
    91c0:	d1f9      	bne.n	91b6 <tfp_format+0x2de>
    91c2:	462f      	mov	r7, r5
            char lng = 0;  /* 1 for long, 2 for long long */
    91c4:	2300      	movs	r3, #0
    91c6:	e77d      	b.n	90c4 <tfp_format+0x1ec>
            switch (ch) {
    91c8:	2b73      	cmp	r3, #115	; 0x73
    91ca:	d0c0      	beq.n	914e <tfp_format+0x276>
    91cc:	d818      	bhi.n	9200 <tfp_format+0x328>
    91ce:	2b6f      	cmp	r3, #111	; 0x6f
    91d0:	d0a8      	beq.n	9124 <tfp_format+0x24c>
    91d2:	2b70      	cmp	r3, #112	; 0x70
    91d4:	d1ef      	bne.n	91b6 <tfp_format+0x2de>
    91d6:	462f      	mov	r7, r5
                p.base = 16;
    91d8:	2210      	movs	r2, #16
    91da:	463d      	mov	r5, r7
                p.alt = 1;
    91dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
                p.base = 16;
    91e0:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    91e2:	f043 0302 	orr.w	r3, r3, #2
    91e6:	f36f 0382 	bfc	r3, #2, #1
    91ea:	f88d 3004 	strb.w	r3, [sp, #4]
                    ui2a(va_arg(va, unsigned int), &p);
    91ee:	6820      	ldr	r0, [r4, #0]
    91f0:	f104 0a04 	add.w	sl, r4, #4
    91f4:	a901      	add	r1, sp, #4
    91f6:	f7ff fdc7 	bl	8d88 <ui2a>
    91fa:	462f      	mov	r7, r5
    91fc:	4654      	mov	r4, sl
    91fe:	e75a      	b.n	90b6 <tfp_format+0x1de>
            switch (ch) {
    9200:	2b75      	cmp	r3, #117	; 0x75
    9202:	f43f af4c 	beq.w	909e <tfp_format+0x1c6>
    9206:	2b78      	cmp	r3, #120	; 0x78
    9208:	d1d5      	bne.n	91b6 <tfp_format+0x2de>
                p.base = 16;
    920a:	2210      	movs	r2, #16
    920c:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    920e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    9212:	4253      	negs	r3, r2
    9214:	4153      	adcs	r3, r2
    9216:	f89d 2004 	ldrb.w	r2, [sp, #4]
    921a:	f363 0282 	bfi	r2, r3, #2, #1
    921e:	f88d 2004 	strb.w	r2, [sp, #4]
    9222:	e7e4      	b.n	91ee <tfp_format+0x316>

00009224 <tfp_vsnprintf>:
}

int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
    9224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9226:	2400      	movs	r4, #0
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    9228:	b189      	cbz	r1, 924e <tfp_vsnprintf+0x2a>
    return 0;

  data.dest = str;
  data.dest_capacity = size-1;
    922a:	3901      	subs	r1, #1
  data.dest = str;
    922c:	9002      	str	r0, [sp, #8]
  data.dest_capacity = size-1;
    922e:	9101      	str	r1, [sp, #4]
  data.num_chars = 0;
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    9230:	a801      	add	r0, sp, #4
    9232:	4908      	ldr	r1, [pc, #32]	; (9254 <tfp_vsnprintf+0x30>)
  data.num_chars = 0;
    9234:	9403      	str	r4, [sp, #12]
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    9236:	f7ff fe4f 	bl	8ed8 <tfp_format>

  if (data.num_chars < data.dest_capacity)
    923a:	9903      	ldr	r1, [sp, #12]
    923c:	9b01      	ldr	r3, [sp, #4]
    923e:	9a02      	ldr	r2, [sp, #8]
    9240:	4299      	cmp	r1, r3
    data.dest[data.num_chars] = '\0';
    9242:	bf34      	ite	cc
    9244:	5454      	strbcc	r4, [r2, r1]
  else
    data.dest[data.dest_capacity] = '\0';
    9246:	54d4      	strbcs	r4, [r2, r3]

  return data.num_chars;
    9248:	9803      	ldr	r0, [sp, #12]
}
    924a:	b004      	add	sp, #16
    924c:	bd10      	pop	{r4, pc}
    return 0;
    924e:	4608      	mov	r0, r1
    9250:	e7fb      	b.n	924a <tfp_vsnprintf+0x26>
    9252:	bf00      	nop
    9254:	00008ec5 	.word	0x00008ec5

00009258 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    9258:	f000 bcd2 	b.w	9c00 <USBHwISR>

0000925c <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    925c:	b508      	push	{r3, lr}
    925e:	4a0d      	ldr	r2, [pc, #52]	; (9294 <Reset_Handler+0x38>)
    9260:	4b0d      	ldr	r3, [pc, #52]	; (9298 <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9262:	490e      	ldr	r1, [pc, #56]	; (929c <Reset_Handler+0x40>)
    9264:	428b      	cmp	r3, r1
    9266:	d30c      	bcc.n	9282 <Reset_Handler+0x26>

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
	{
		*src++ = 0;
    9268:	2100      	movs	r1, #0
    926a:	4b0d      	ldr	r3, [pc, #52]	; (92a0 <Reset_Handler+0x44>)
	while (src < &_ebss)
    926c:	4a0d      	ldr	r2, [pc, #52]	; (92a4 <Reset_Handler+0x48>)
    926e:	4293      	cmp	r3, r2
    9270:	d30c      	bcc.n	928c <Reset_Handler+0x30>
	}

	__libc_init_array();
    9272:	f7fa ff9d 	bl	41b0 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    9276:	4b0c      	ldr	r3, [pc, #48]	; (92a8 <Reset_Handler+0x4c>)
    9278:	4a0c      	ldr	r2, [pc, #48]	; (92ac <Reset_Handler+0x50>)
    927a:	601a      	str	r2, [r3, #0]

	main();
    927c:	f7fd ff44 	bl	7108 <main>
    9280:	e7fe      	b.n	9280 <Reset_Handler+0x24>
		*dest++ = *src++;
    9282:	f852 0f04 	ldr.w	r0, [r2, #4]!
    9286:	f843 0b04 	str.w	r0, [r3], #4
    928a:	e7eb      	b.n	9264 <Reset_Handler+0x8>
		*src++ = 0;
    928c:	f843 1b04 	str.w	r1, [r3], #4
    9290:	e7ed      	b.n	926e <Reset_Handler+0x12>
    9292:	bf00      	nop
    9294:	0000b734 	.word	0x0000b734
    9298:	10000020 	.word	0x10000020
    929c:	10000a29 	.word	0x10000a29
    92a0:	10000a30 	.word	0x10000a30
    92a4:	10003dfe 	.word	0x10003dfe
    92a8:	e000ed08 	.word	0xe000ed08
    92ac:	00004000 	.word	0x00004000

000092b0 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    92b0:	e7fe      	b.n	92b0 <ADC_IRQHandler>
    92b2:	0000      	movs	r0, r0

000092b4 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    92b4:	220a      	movs	r2, #10
    92b6:	4b04      	ldr	r3, [pc, #16]	; (92c8 <spi_delay+0x14>)
    92b8:	601a      	str	r2, [r3, #0]
       while (--delay_counter);
    92ba:	681a      	ldr	r2, [r3, #0]
    92bc:	3a01      	subs	r2, #1
    92be:	601a      	str	r2, [r3, #0]
    92c0:	2a00      	cmp	r2, #0
    92c2:	d1fa      	bne.n	92ba <spi_delay+0x6>
}
    92c4:	4770      	bx	lr
    92c6:	bf00      	nop
    92c8:	100012e0 	.word	0x100012e0

000092cc <rbit>:
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    92cc:	fa90 f0a0 	rbit	r0, r0
}
    92d0:	4770      	bx	lr
    92d2:	0000      	movs	r0, r0

000092d4 <wait_us>:
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    92d4:	08c3      	lsrs	r3, r0, #3
    92d6:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    92da:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    92de:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    92e2:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    92e6:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
	wait_us_counter =
    92ea:	4b04      	ldr	r3, [pc, #16]	; (92fc <wait_us+0x28>)
    92ec:	6058      	str	r0, [r3, #4]
	while(--wait_us_counter);
    92ee:	685a      	ldr	r2, [r3, #4]
    92f0:	3a01      	subs	r2, #1
    92f2:	605a      	str	r2, [r3, #4]
    92f4:	2a00      	cmp	r2, #0
    92f6:	d1fa      	bne.n	92ee <wait_us+0x1a>
}
    92f8:	4770      	bx	lr
    92fa:	bf00      	nop
    92fc:	100012e0 	.word	0x100012e0

00009300 <wait>:
	wait_us(seconds * 1000000);
    9300:	4b01      	ldr	r3, [pc, #4]	; (9308 <wait+0x8>)
    9302:	4358      	muls	r0, r3
    9304:	f7ff bfe6 	b.w	92d4 <wait_us>
    9308:	000f4240 	.word	0x000f4240

0000930c <all_pins_off>:
	PINSEL0 = 0;
    930c:	2300      	movs	r3, #0
    930e:	4a10      	ldr	r2, [pc, #64]	; (9350 <all_pins_off+0x44>)
    9310:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    9312:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    9314:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    9316:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    9318:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    931a:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    931c:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    931e:	6293      	str	r3, [r2, #40]	; 0x28
	FIO0DIR = 0;
    9320:	4a0c      	ldr	r2, [pc, #48]	; (9354 <all_pins_off+0x48>)
    9322:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    9324:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    9326:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    9328:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    932a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	PINMODE0 = 0;
    932e:	4a0a      	ldr	r2, [pc, #40]	; (9358 <all_pins_off+0x4c>)
    9330:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    9332:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    9334:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    9336:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    9338:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    933a:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    933c:	6253      	str	r3, [r2, #36]	; 0x24
	FIO0PIN = 0;
    933e:	4a07      	ldr	r2, [pc, #28]	; (935c <all_pins_off+0x50>)
    9340:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    9342:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    9344:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    9346:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    9348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    934c:	4770      	bx	lr
    934e:	bf00      	nop
    9350:	4002c000 	.word	0x4002c000
    9354:	2009c000 	.word	0x2009c000
    9358:	4002c040 	.word	0x4002c040
    935c:	2009c014 	.word	0x2009c014

00009360 <gpio_init>:
{
    9360:	b508      	push	{r3, lr}
	all_pins_off();
    9362:	f7ff ffd3 	bl	930c <all_pins_off>
	FIO0DIR = 0;
    9366:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9368:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO0DIR = 0;
    936c:	4a08      	ldr	r2, [pc, #32]	; (9390 <gpio_init+0x30>)
    936e:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9370:	6211      	str	r1, [r2, #32]
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9372:	f240 11b1 	movw	r1, #433	; 0x1b1
    9376:	6411      	str	r1, [r2, #64]	; 0x40
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9378:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	FIO3DIR = 0;
    937c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    937e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO0PIN = 0;
    9382:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    9384:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    9386:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    9388:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    938a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    938e:	bd08      	pop	{r3, pc}
    9390:	2009c000 	.word	0x2009c000

00009394 <dio_ssp_init>:
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9394:	4b11      	ldr	r3, [pc, #68]	; (93dc <dio_ssp_init+0x48>)
    9396:	681a      	ldr	r2, [r3, #0]
    9398:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    939c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    93a0:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    93a2:	681a      	ldr	r2, [r3, #0]
    93a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    93a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    93ac:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    93ae:	681a      	ldr	r2, [r3, #0]
    93b0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    93b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    93b8:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    93ba:	681a      	ldr	r2, [r3, #0]
    93bc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    93c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    93c4:	601a      	str	r2, [r3, #0]
	DIO_SSEL_SET;
    93c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    93ca:	4b05      	ldr	r3, [pc, #20]	; (93e0 <dio_ssp_init+0x4c>)
    93cc:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    93ce:	22c7      	movs	r2, #199	; 0xc7
    93d0:	4b04      	ldr	r3, [pc, #16]	; (93e4 <dio_ssp_init+0x50>)
    93d2:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    93d4:	220c      	movs	r2, #12
    93d6:	605a      	str	r2, [r3, #4]
    93d8:	4770      	bx	lr
    93da:	bf00      	nop
    93dc:	4002c000 	.word	0x4002c000
    93e0:	2009c098 	.word	0x2009c098
    93e4:	40030000 	.word	0x40030000

000093e8 <atest_init>:
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    93e8:	4a09      	ldr	r2, [pc, #36]	; (9410 <atest_init+0x28>)
    93ea:	6813      	ldr	r3, [r2, #0]
    93ec:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    93f0:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    93f2:	4a08      	ldr	r2, [pc, #32]	; (9414 <atest_init+0x2c>)
    93f4:	6813      	ldr	r3, [r2, #0]
    93f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    93fa:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    93fc:	4b06      	ldr	r3, [pc, #24]	; (9418 <atest_init+0x30>)
    93fe:	681a      	ldr	r2, [r3, #0]
    9400:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    9404:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9406:	681a      	ldr	r2, [r3, #0]
    9408:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    940c:	601a      	str	r2, [r3, #0]
    940e:	4770      	bx	lr
    9410:	4002c004 	.word	0x4002c004
    9414:	2009c000 	.word	0x2009c000
    9418:	4002c044 	.word	0x4002c044

0000941c <cc2400_spi>:
{
    941c:	b5f0      	push	{r4, r5, r6, r7, lr}
		SCLK_SET;
    941e:	2510      	movs	r5, #16
	CSN_CLR;
    9420:	2420      	movs	r4, #32
	u32 msb = 1 << (len - 1);
    9422:	2201      	movs	r2, #1
    9424:	46ae      	mov	lr, r5
	CSN_CLR;
    9426:	4b0f      	ldr	r3, [pc, #60]	; (9464 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);
    9428:	1e46      	subs	r6, r0, #1
	CSN_CLR;
    942a:	601c      	str	r4, [r3, #0]
		if (MISO)
    942c:	4f0e      	ldr	r7, [pc, #56]	; (9468 <cc2400_spi+0x4c>)
    942e:	4c0f      	ldr	r4, [pc, #60]	; (946c <cc2400_spi+0x50>)
	u32 msb = 1 << (len - 1);
    9430:	fa02 f606 	lsl.w	r6, r2, r6
	while (len--) {
    9434:	3801      	subs	r0, #1
    9436:	b2c0      	uxtb	r0, r0
    9438:	28ff      	cmp	r0, #255	; 0xff
    943a:	d103      	bne.n	9444 <cc2400_spi+0x28>
	CSN_SET;
    943c:	2320      	movs	r3, #32
}
    943e:	4608      	mov	r0, r1
	CSN_SET;
    9440:	6023      	str	r3, [r4, #0]
}
    9442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data & msb)
    9444:	4231      	tst	r1, r6
			MOSI_SET;
    9446:	bf14      	ite	ne
    9448:	6022      	strne	r2, [r4, #0]
			MOSI_CLR;
    944a:	601a      	streq	r2, [r3, #0]
		SCLK_SET;
    944c:	6025      	str	r5, [r4, #0]
		if (MISO)
    944e:	f8d7 c000 	ldr.w	ip, [r7]
		data <<= 1;
    9452:	0049      	lsls	r1, r1, #1
		if (MISO)
    9454:	f01c 0f02 	tst.w	ip, #2
			data |= 1;
    9458:	bf18      	it	ne
    945a:	f041 0101 	orrne.w	r1, r1, #1
		SCLK_CLR;
    945e:	f8c3 e000 	str.w	lr, [r3]
    9462:	e7e7      	b.n	9434 <cc2400_spi+0x18>
    9464:	2009c05c 	.word	0x2009c05c
    9468:	2009c054 	.word	0x2009c054
    946c:	2009c058 	.word	0x2009c058

00009470 <cc2400_init>:
{
    9470:	b508      	push	{r3, lr}
	atest_init();
    9472:	f7ff ffb9 	bl	93e8 <atest_init>
	CC1V8_SET;
    9476:	f44f 7300 	mov.w	r3, #512	; 0x200
    947a:	4908      	ldr	r1, [pc, #32]	; (949c <cc2400_init+0x2c>)
	wait_us(50);
    947c:	2032      	movs	r0, #50	; 0x32
	CC1V8_SET;
    947e:	600b      	str	r3, [r1, #0]
	wait_us(50);
    9480:	f7ff ff28 	bl	92d4 <wait_us>
	CSN_SET;
    9484:	2220      	movs	r2, #32
    9486:	4b06      	ldr	r3, [pc, #24]	; (94a0 <cc2400_init+0x30>)
	cc2400_spi(24, out);
    9488:	2018      	movs	r0, #24
	CSN_SET;
    948a:	601a      	str	r2, [r3, #0]
	CC3V3_SET;
    948c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    9490:	600b      	str	r3, [r1, #0]
	cc2400_spi(24, out);
    9492:	4904      	ldr	r1, [pc, #16]	; (94a4 <cc2400_init+0x34>)
}
    9494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_spi(24, out);
    9498:	f7ff bfc0 	b.w	941c <cc2400_spi>
    949c:	2009c038 	.word	0x2009c038
    94a0:	2009c058 	.word	0x2009c058
    94a4:	000d7fff 	.word	0x000d7fff

000094a8 <cc2400_get>:
{
    94a8:	b508      	push	{r3, lr}
	u32 out = (reg | 0x80) << 16;
    94aa:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    94ae:	0409      	lsls	r1, r1, #16
    94b0:	2018      	movs	r0, #24
    94b2:	f7ff ffb3 	bl	941c <cc2400_spi>
}
    94b6:	b280      	uxth	r0, r0
    94b8:	bd08      	pop	{r3, pc}

000094ba <cc2400_set>:
	cc2400_spi(24, out);
    94ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    94be:	2018      	movs	r0, #24
    94c0:	f7ff bfac 	b.w	941c <cc2400_spi>

000094c4 <cc2400_get8>:
{
    94c4:	b508      	push	{r3, lr}
	u16 out = (reg | 0x80) << 8;
    94c6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    94ca:	0209      	lsls	r1, r1, #8
    94cc:	2010      	movs	r0, #16
    94ce:	f7ff ffa5 	bl	941c <cc2400_spi>
}
    94d2:	b2c0      	uxtb	r0, r0
    94d4:	bd08      	pop	{r3, pc}

000094d6 <cc2400_set8>:
	cc2400_spi(16, out);
    94d6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    94da:	2010      	movs	r0, #16
    94dc:	f7ff bf9e 	b.w	941c <cc2400_spi>

000094e0 <cc2400_fifo_write>:


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    94e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    94e2:	2220      	movs	r2, #32
    94e4:	4b1e      	ldr	r3, [pc, #120]	; (9560 <cc2400_fifo_write+0x80>)
	u8 reg = FIFOREG;
    94e6:	2570      	movs	r5, #112	; 0x70
	CSN_CLR;
    94e8:	601a      	str	r2, [r3, #0]
    94ea:	2701      	movs	r7, #1
    94ec:	2208      	movs	r2, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    94ee:	2610      	movs	r6, #16
    94f0:	4c1c      	ldr	r4, [pc, #112]	; (9564 <cc2400_fifo_write+0x84>)
		if (reg & msb)
    94f2:	f015 0f80 	tst.w	r5, #128	; 0x80
    94f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
			MOSI_SET;
    94fa:	bf14      	ite	ne
    94fc:	6027      	strne	r7, [r4, #0]
			MOSI_CLR;
    94fe:	601f      	streq	r7, [r3, #0]
		reg <<= 1;
    9500:	006d      	lsls	r5, r5, #1
	for (i = 0; i < 8; ++i) {
    9502:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9506:	6026      	str	r6, [r4, #0]
		reg <<= 1;
    9508:	b2ed      	uxtb	r5, r5
		SCLK_CLR;
    950a:	601e      	str	r6, [r3, #0]
	for (i = 0; i < 8; ++i) {
    950c:	d1f1      	bne.n	94f2 <cc2400_fifo_write+0x12>
    950e:	460e      	mov	r6, r1
    9510:	2701      	movs	r7, #1
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
			SCLK_SET;
    9512:	f04f 0e10 	mov.w	lr, #16
	for (i = 0; i < len; ++i) {
    9516:	1a72      	subs	r2, r6, r1
    9518:	b2d2      	uxtb	r2, r2
    951a:	4290      	cmp	r0, r2
    951c:	d80c      	bhi.n	9538 <cc2400_fifo_write+0x58>
    951e:	2208      	movs	r2, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    9520:	2110      	movs	r1, #16
    9522:	3a01      	subs	r2, #1
	for (i = 0; i < 8; ++i) {
    9524:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9528:	6021      	str	r1, [r4, #0]
		SCLK_CLR;
    952a:	6019      	str	r1, [r3, #0]
	for (i = 0; i < 8; ++i) {
    952c:	d1f9      	bne.n	9522 <cc2400_fifo_write+0x42>
	}
	
	spi_delay();
    952e:	f7ff fec1 	bl	92b4 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    9532:	2320      	movs	r3, #32
    9534:	6023      	str	r3, [r4, #0]
    9536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = data[i];
    9538:	2208      	movs	r2, #8
    953a:	f816 5b01 	ldrb.w	r5, [r6], #1
			if (temp & msb)
    953e:	f015 0f80 	tst.w	r5, #128	; 0x80
    9542:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				MOSI_SET;
    9546:	bf14      	ite	ne
    9548:	6027      	strne	r7, [r4, #0]
				MOSI_CLR;
    954a:	601f      	streq	r7, [r3, #0]
			temp <<= 1;
    954c:	006d      	lsls	r5, r5, #1
		for (j = 0; j < 8; ++j) {
    954e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			SCLK_SET;
    9552:	f8c4 e000 	str.w	lr, [r4]
			temp <<= 1;
    9556:	b2ed      	uxtb	r5, r5
			SCLK_CLR;
    9558:	f8c3 e000 	str.w	lr, [r3]
		for (j = 0; j < 8; ++j) {
    955c:	d1ef      	bne.n	953e <cc2400_fifo_write+0x5e>
    955e:	e7da      	b.n	9516 <cc2400_fifo_write+0x36>
    9560:	2009c05c 	.word	0x2009c05c
    9564:	2009c058 	.word	0x2009c058

00009568 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    9568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    956c:	2320      	movs	r3, #32
    956e:	4d1d      	ldr	r5, [pc, #116]	; (95e4 <cc2400_fifo_read+0x7c>)
	reg = 0x80 | FIFOREG;
    9570:	22f0      	movs	r2, #240	; 0xf0
	CSN_CLR;
    9572:	602b      	str	r3, [r5, #0]
    9574:	2601      	movs	r6, #1
    9576:	2308      	movs	r3, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    9578:	2410      	movs	r4, #16
    957a:	4f1b      	ldr	r7, [pc, #108]	; (95e8 <cc2400_fifo_read+0x80>)
		if (reg & msb)
    957c:	f012 0f80 	tst.w	r2, #128	; 0x80
    9580:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
			MOSI_SET;
    9584:	bf14      	ite	ne
    9586:	603e      	strne	r6, [r7, #0]
			MOSI_CLR;
    9588:	602e      	streq	r6, [r5, #0]
		reg <<= 1;
    958a:	0052      	lsls	r2, r2, #1
	for (i = 0; i < 8; ++i) {
    958c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    9590:	603c      	str	r4, [r7, #0]
		reg <<= 1;
    9592:	b2d2      	uxtb	r2, r2
		SCLK_CLR;
    9594:	602c      	str	r4, [r5, #0]
	for (i = 0; i < 8; ++i) {
    9596:	d1f1      	bne.n	957c <cc2400_fifo_read+0x14>
    9598:	3801      	subs	r0, #1
    959a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    959e:	4408      	add	r0, r1

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
    95a0:	2110      	movs	r1, #16
			temp <<= 1;
			if (MISO)
    95a2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 95ec <cc2400_fifo_read+0x84>
	for (i = 0; i < len; ++i) {
    95a6:	4580      	cmp	r8, r0
    95a8:	d105      	bne.n	95b6 <cc2400_fifo_read+0x4e>
		}
		buf[i] = temp;
	}

	/* end transaction by raising CSN */
	spi_delay();
    95aa:	f7ff fe83 	bl	92b4 <spi_delay>
	CSN_SET;
    95ae:	2320      	movs	r3, #32
    95b0:	603b      	str	r3, [r7, #0]
    95b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    95b6:	2608      	movs	r6, #8
    95b8:	2400      	movs	r4, #0
			spi_delay();
    95ba:	f7ff fe7b 	bl	92b4 <spi_delay>
			SCLK_SET;
    95be:	6039      	str	r1, [r7, #0]
			if (MISO)
    95c0:	f8d9 3000 	ldr.w	r3, [r9]
			temp <<= 1;
    95c4:	0064      	lsls	r4, r4, #1
			if (MISO)
    95c6:	079b      	lsls	r3, r3, #30
			temp <<= 1;
    95c8:	b2e4      	uxtb	r4, r4
				temp |= 1;
    95ca:	bf48      	it	mi
    95cc:	f044 0401 	orrmi.w	r4, r4, #1
			spi_delay();
    95d0:	f7ff fe70 	bl	92b4 <spi_delay>
    95d4:	3e01      	subs	r6, #1
		for (j = 0; j < 8; ++j) {
    95d6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_CLR;
    95da:	6029      	str	r1, [r5, #0]
		for (j = 0; j < 8; ++j) {
    95dc:	d1ed      	bne.n	95ba <cc2400_fifo_read+0x52>
		buf[i] = temp;
    95de:	f808 4f01 	strb.w	r4, [r8, #1]!
    95e2:	e7e0      	b.n	95a6 <cc2400_fifo_read+0x3e>
    95e4:	2009c05c 	.word	0x2009c05c
    95e8:	2009c058 	.word	0x2009c058
    95ec:	2009c054 	.word	0x2009c054

000095f0 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    95f0:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    95f2:	2100      	movs	r1, #0
    95f4:	2008      	movs	r0, #8
    95f6:	f7ff ff11 	bl	941c <cc2400_spi>
}
    95fa:	b2c0      	uxtb	r0, r0
    95fc:	bd08      	pop	{r3, pc}

000095fe <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    95fe:	b508      	push	{r3, lr}
	return cc2400_spi(8, reg);
    9600:	4601      	mov	r1, r0
    9602:	2008      	movs	r0, #8
    9604:	f7ff ff0a 	bl	941c <cc2400_spi>
}
    9608:	b2c0      	uxtb	r0, r0
    960a:	bd08      	pop	{r3, pc}

0000960c <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    960c:	b508      	push	{r3, lr}
	cc2400_spi(24, out);
    960e:	2100      	movs	r1, #0
    9610:	2018      	movs	r0, #24
    9612:	f7ff ff03 	bl	941c <cc2400_spi>
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    9616:	2000      	movs	r0, #0
    9618:	f7ff ff46 	bl	94a8 <cc2400_get>
    961c:	2800      	cmp	r0, #0
    961e:	d1fa      	bne.n	9616 <cc2400_reset+0xa>
	cc2400_spi(24, out);
    9620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9624:	2018      	movs	r0, #24
    9626:	f7ff fef9 	bl	941c <cc2400_spi>
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    962a:	2000      	movs	r0, #0
    962c:	f7ff ff3c 	bl	94a8 <cc2400_get>
    9630:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9634:	d1f9      	bne.n	962a <cc2400_reset+0x1e>
}
    9636:	bd08      	pop	{r3, pc}

00009638 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    963c:	f244 023a 	movw	r2, #16442	; 0x403a
    9640:	4b3f      	ldr	r3, [pc, #252]	; (9740 <clock_start+0x108>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9642:	4e40      	ldr	r6, [pc, #256]	; (9744 <clock_start+0x10c>)
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9644:	601a      	str	r2, [r3, #0]
	CLKSRCSEL = 0;
    9646:	2300      	movs	r3, #0

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9648:	4d3f      	ldr	r5, [pc, #252]	; (9748 <clock_start+0x110>)
	CLKSRCSEL = 0;
    964a:	6033      	str	r3, [r6, #0]
	PLL0CON &= ~PLL0CON_PLLC0;
    964c:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    964e:	4c3f      	ldr	r4, [pc, #252]	; (974c <clock_start+0x114>)
	PLL0CON &= ~PLL0CON_PLLC0;
    9650:	f023 0302 	bic.w	r3, r3, #2
    9654:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9656:	23aa      	movs	r3, #170	; 0xaa
    9658:	6023      	str	r3, [r4, #0]
    965a:	2355      	movs	r3, #85	; 0x55
    965c:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    965e:	4b3c      	ldr	r3, [pc, #240]	; (9750 <clock_start+0x118>)
    9660:	461f      	mov	r7, r3
    9662:	681a      	ldr	r2, [r3, #0]
    9664:	0190      	lsls	r0, r2, #6
    9666:	d4fc      	bmi.n	9662 <clock_start+0x2a>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9668:	682b      	ldr	r3, [r5, #0]
    966a:	f023 0301 	bic.w	r3, r3, #1
    966e:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9670:	23aa      	movs	r3, #170	; 0xaa
    9672:	6023      	str	r3, [r4, #0]
    9674:	2355      	movs	r3, #85	; 0x55
    9676:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9678:	683b      	ldr	r3, [r7, #0]
    967a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    967e:	d1fb      	bne.n	9678 <clock_start+0x40>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9680:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 9774 <clock_start+0x13c>
    9684:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9688:	f7ff ffc0 	bl	960c <cc2400_reset>
	cc2400_spi(24, out);
    968c:	4931      	ldr	r1, [pc, #196]	; (9754 <clock_start+0x11c>)
    968e:	2018      	movs	r0, #24
    9690:	f7ff fec4 	bl	941c <cc2400_spi>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    9694:	2060      	movs	r0, #96	; 0x60
    9696:	f7ff ffb2 	bl	95fe <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    969a:	f7ff ffa9 	bl	95f0 <cc2400_status>
    969e:	0641      	lsls	r1, r0, #25
    96a0:	d5fb      	bpl.n	969a <clock_start+0x62>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    96a2:	2220      	movs	r2, #32
    96a4:	4b2c      	ldr	r3, [pc, #176]	; (9758 <clock_start+0x120>)
    96a6:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    96a8:	681a      	ldr	r2, [r3, #0]
    96aa:	0652      	lsls	r2, r2, #25
    96ac:	d5fc      	bpl.n	96a8 <clock_start+0x70>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    96ae:	2228      	movs	r2, #40	; 0x28
    96b0:	4b2a      	ldr	r3, [pc, #168]	; (975c <clock_start+0x124>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    96b2:	21aa      	movs	r1, #170	; 0xaa
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    96b4:	601a      	str	r2, [r3, #0]
	PCLKSEL1  = 0;
    96b6:	2200      	movs	r2, #0
    96b8:	605a      	str	r2, [r3, #4]
	CLKSRCSEL = 1;
    96ba:	2301      	movs	r3, #1
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    96bc:	4a28      	ldr	r2, [pc, #160]	; (9760 <clock_start+0x128>)
	CLKSRCSEL = 1;
    96be:	6033      	str	r3, [r6, #0]
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    96c0:	4b28      	ldr	r3, [pc, #160]	; (9764 <clock_start+0x12c>)
    96c2:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    96c4:	2255      	movs	r2, #85	; 0x55
    96c6:	6021      	str	r1, [r4, #0]
    96c8:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    96ca:	682b      	ldr	r3, [r5, #0]
    96cc:	f043 0301 	orr.w	r3, r3, #1
    96d0:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    96d2:	6021      	str	r1, [r4, #0]
    96d4:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    96d6:	683b      	ldr	r3, [r7, #0]
    96d8:	01de      	lsls	r6, r3, #7
    96da:	d5fc      	bpl.n	96d6 <clock_start+0x9e>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    96dc:	2303      	movs	r3, #3
    96de:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    96e2:	682b      	ldr	r3, [r5, #0]
    96e4:	f043 0302 	orr.w	r3, r3, #2
    96e8:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    96ea:	23aa      	movs	r3, #170	; 0xaa
    96ec:	6023      	str	r3, [r4, #0]
    96ee:	2355      	movs	r3, #85	; 0x55
    96f0:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    96f2:	683b      	ldr	r3, [r7, #0]
    96f4:	019d      	lsls	r5, r3, #6
    96f6:	d5fc      	bpl.n	96f2 <clock_start+0xba>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    96f8:	2222      	movs	r2, #34	; 0x22
	PLL1FEED_SEQUENCE;
    96fa:	2055      	movs	r0, #85	; 0x55
    96fc:	24aa      	movs	r4, #170	; 0xaa
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    96fe:	4b1a      	ldr	r3, [pc, #104]	; (9768 <clock_start+0x130>)
    9700:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9702:	3308      	adds	r3, #8

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9704:	4a19      	ldr	r2, [pc, #100]	; (976c <clock_start+0x134>)
	PLL1FEED_SEQUENCE;
    9706:	601c      	str	r4, [r3, #0]
    9708:	6018      	str	r0, [r3, #0]
	PLL1CON |= PLL1CON_PLLE1;
    970a:	6811      	ldr	r1, [r2, #0]
    970c:	f041 0101 	orr.w	r1, r1, #1
    9710:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9712:	4917      	ldr	r1, [pc, #92]	; (9770 <clock_start+0x138>)
	PLL1FEED_SEQUENCE;
    9714:	601c      	str	r4, [r3, #0]
    9716:	6018      	str	r0, [r3, #0]
    9718:	4608      	mov	r0, r1
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    971a:	680c      	ldr	r4, [r1, #0]
    971c:	05e4      	lsls	r4, r4, #23
    971e:	d5fc      	bpl.n	971a <clock_start+0xe2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9720:	6801      	ldr	r1, [r0, #0]
    9722:	0549      	lsls	r1, r1, #21
    9724:	d5fc      	bpl.n	9720 <clock_start+0xe8>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9726:	6811      	ldr	r1, [r2, #0]
    9728:	f041 0102 	orr.w	r1, r1, #2
    972c:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    972e:	22aa      	movs	r2, #170	; 0xaa
    9730:	601a      	str	r2, [r3, #0]
    9732:	2255      	movs	r2, #85	; 0x55
    9734:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9736:	6803      	ldr	r3, [r0, #0]
    9738:	059b      	lsls	r3, r3, #22
    973a:	d5fc      	bpl.n	9736 <clock_start+0xfe>
}
    973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9740:	400fc000 	.word	0x400fc000
    9744:	400fc10c 	.word	0x400fc10c
    9748:	400fc080 	.word	0x400fc080
    974c:	400fc08c 	.word	0x400fc08c
    9750:	400fc088 	.word	0x400fc088
    9754:	00081570 	.word	0x00081570
    9758:	400fc1a0 	.word	0x400fc1a0
    975c:	400fc1a8 	.word	0x400fc1a8
    9760:	00010018 	.word	0x00010018
    9764:	400fc084 	.word	0x400fc084
    9768:	400fc0a4 	.word	0x400fc0a4
    976c:	400fc0a0 	.word	0x400fc0a0
    9770:	400fc0a8 	.word	0x400fc0a8
    9774:	400fc104 	.word	0x400fc104

00009778 <ubertooth_init>:
{
    9778:	b508      	push	{r3, lr}
	gpio_init();
    977a:	f7ff fdf1 	bl	9360 <gpio_init>
	cc2400_init();
    977e:	f7ff fe77 	bl	9470 <cc2400_init>
}
    9782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_start();
    9786:	f7ff bf57 	b.w	9638 <clock_start>
    978a:	0000      	movs	r0, r0

0000978c <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    978c:	b508      	push	{r3, lr}
	all_pins_off();
    978e:	f7ff fdbd 	bl	930c <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9792:	2202      	movs	r2, #2
    9794:	4b08      	ldr	r3, [pc, #32]	; (97b8 <reset+0x2c>)
	wait_us(seconds * 1000000);
    9796:	4809      	ldr	r0, [pc, #36]	; (97bc <reset+0x30>)
	USRLED_CLR;
    9798:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    979a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    979e:	6813      	ldr	r3, [r2, #0]
    97a0:	f043 0303 	orr.w	r3, r3, #3
    97a4:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    97a6:	22aa      	movs	r2, #170	; 0xaa
    97a8:	4b05      	ldr	r3, [pc, #20]	; (97c0 <reset+0x34>)
    97aa:	601a      	str	r2, [r3, #0]
    97ac:	2255      	movs	r2, #85	; 0x55
    97ae:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    97b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wait_us(seconds * 1000000);
    97b4:	f7ff bd8e 	b.w	92d4 <wait_us>
    97b8:	2009c03c 	.word	0x2009c03c
    97bc:	000f4240 	.word	0x000f4240
    97c0:	40000008 	.word	0x40000008

000097c4 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    97c4:	b530      	push	{r4, r5, lr}
    97c6:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    97c8:	2336      	movs	r3, #54	; 0x36
{
    97ca:	4604      	mov	r4, r0
    97cc:	460d      	mov	r5, r1
	command[0] = 54; /* read part number */
    97ce:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    97d0:	a905      	add	r1, sp, #20
    97d2:	4668      	mov	r0, sp
    97d4:	4b07      	ldr	r3, [pc, #28]	; (97f4 <get_part_num+0x30>)
    97d6:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    97d8:	9b05      	ldr	r3, [sp, #20]
    97da:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    97dc:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    97de:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    97e0:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    97e2:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    97e4:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    97e6:	0e1b      	lsrs	r3, r3, #24
    97e8:	7123      	strb	r3, [r4, #4]
	*len = 5;
    97ea:	2305      	movs	r3, #5
	buffer[3] = (result[1] >> 16) & 0xFF;
    97ec:	70e2      	strb	r2, [r4, #3]
	*len = 5;
    97ee:	602b      	str	r3, [r5, #0]
	
}
    97f0:	b00b      	add	sp, #44	; 0x2c
    97f2:	bd30      	pop	{r4, r5, pc}
    97f4:	1fff1ff1 	.word	0x1fff1ff1

000097f8 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    97f8:	b530      	push	{r4, r5, lr}
    97fa:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    97fc:	233a      	movs	r3, #58	; 0x3a
{
    97fe:	4604      	mov	r4, r0
    9800:	460d      	mov	r5, r1
	command[0] = 58; /* read device serial number */
    9802:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9804:	a905      	add	r1, sp, #20
    9806:	4668      	mov	r0, sp
    9808:	4b13      	ldr	r3, [pc, #76]	; (9858 <get_device_serial+0x60>)
    980a:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    980c:	9b05      	ldr	r3, [sp, #20]
    980e:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9810:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9812:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    9814:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9816:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9818:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    981a:	0e1b      	lsrs	r3, r3, #24
    981c:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    981e:	9b07      	ldr	r3, [sp, #28]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9820:	70e2      	strb	r2, [r4, #3]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9822:	0a1a      	lsrs	r2, r3, #8
	buffer[5] = result[2] & 0xFF;
    9824:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9826:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9828:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    982a:	0e1b      	lsrs	r3, r3, #24
    982c:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    982e:	9b08      	ldr	r3, [sp, #32]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9830:	71e2      	strb	r2, [r4, #7]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9832:	0a1a      	lsrs	r2, r3, #8
	buffer[9] = result[3] & 0xFF;
    9834:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9836:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    9838:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    983a:	0e1b      	lsrs	r3, r3, #24
    983c:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[11] = (result[3] >> 16) & 0xFF;
    9840:	72e2      	strb	r2, [r4, #11]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9842:	0a1a      	lsrs	r2, r3, #8
	buffer[13] = result[4] & 0xFF;
    9844:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9846:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    9848:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    984a:	0e1b      	lsrs	r3, r3, #24
    984c:	7423      	strb	r3, [r4, #16]
	*len = 17;
    984e:	2311      	movs	r3, #17
	buffer[15] = (result[4] >> 16) & 0xFF;
    9850:	73e2      	strb	r2, [r4, #15]
	*len = 17;
    9852:	602b      	str	r3, [r5, #0]
}
    9854:	b00b      	add	sp, #44	; 0x2c
    9856:	bd30      	pop	{r4, r5, pc}
    9858:	1fff1ff1 	.word	0x1fff1ff1

0000985c <set_isp>:

void set_isp(void)
{
    985c:	b500      	push	{lr}
    985e:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    9860:	2339      	movs	r3, #57	; 0x39
	iap_entry(command, result);
    9862:	a905      	add	r1, sp, #20
	command[0] = 57;
    9864:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9866:	4668      	mov	r0, sp
    9868:	4b02      	ldr	r3, [pc, #8]	; (9874 <set_isp+0x18>)
    986a:	4798      	blx	r3
}
    986c:	b00b      	add	sp, #44	; 0x2c
    986e:	f85d fb04 	ldr.w	pc, [sp], #4
    9872:	bf00      	nop
    9874:	1fff1ff1 	.word	0x1fff1ff1

00009878 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9878:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    987a:	4c08      	ldr	r4, [pc, #32]	; (989c <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    987c:	2080      	movs	r0, #128	; 0x80
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    987e:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    9880:	6861      	ldr	r1, [r4, #4]
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9882:	2d40      	cmp	r5, #64	; 0x40
    9884:	bfa8      	it	ge
    9886:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    9888:	462a      	mov	r2, r5
    988a:	f000 f951 	bl	9b30 <USBHwEPWrite>
	pbData += iChunk;
    988e:	6863      	ldr	r3, [r4, #4]
    9890:	442b      	add	r3, r5
    9892:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    9894:	6823      	ldr	r3, [r4, #0]
    9896:	1b5d      	subs	r5, r3, r5
    9898:	6025      	str	r5, [r4, #0]
    989a:	bd38      	pop	{r3, r4, r5, pc}
    989c:	100012e8 	.word	0x100012e8

000098a0 <_HandleRequest.constprop.1>:
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    98a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    98a2:	4810      	ldr	r0, [pc, #64]	; (98e4 <_HandleRequest.constprop.1+0x44>)
    98a4:	7a04      	ldrb	r4, [r0, #8]
    98a6:	4605      	mov	r5, r0
    98a8:	f3c4 1441 	ubfx	r4, r4, #5, #2
	if(iType == REQTYPE_TYPE_VENDOR) {
    98ac:	2c02      	cmp	r4, #2
    98ae:	d10d      	bne.n	98cc <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    98b0:	2300      	movs	r3, #0
    98b2:	a902      	add	r1, sp, #8
    98b4:	f841 3d04 	str.w	r3, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    98b8:	f100 0210 	add.w	r2, r0, #16
    98bc:	1d03      	adds	r3, r0, #4
    98be:	3008      	adds	r0, #8
    98c0:	f000 fa64 	bl	9d8c <USBFilterOsVendorMessage>
    98c4:	b110      	cbz	r0, 98cc <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    98c6:	9801      	ldr	r0, [sp, #4]
}
    98c8:	b003      	add	sp, #12
    98ca:	bd30      	pop	{r4, r5, pc}
	pfnHandler = apfnReqHandlers[iType];
    98cc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    98d0:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    98d2:	b12b      	cbz	r3, 98e0 <_HandleRequest.constprop.1+0x40>
	return pfnHandler(pSetup, piLen, ppbData);
    98d4:	4a04      	ldr	r2, [pc, #16]	; (98e8 <_HandleRequest.constprop.1+0x48>)
    98d6:	f102 010c 	add.w	r1, r2, #12
    98da:	1d10      	adds	r0, r2, #4
    98dc:	4798      	blx	r3
    98de:	e7f3      	b.n	98c8 <_HandleRequest.constprop.1+0x28>
		return FALSE;
    98e0:	4618      	mov	r0, r3
    98e2:	e7f1      	b.n	98c8 <_HandleRequest.constprop.1+0x28>
    98e4:	100012e8 	.word	0x100012e8
    98e8:	100012ec 	.word	0x100012ec

000098ec <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    98ec:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    98ee:	2800      	cmp	r0, #0
    98f0:	d147      	bne.n	9982 <USBHandleControlTransfer+0x96>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    98f2:	f011 0104 	ands.w	r1, r1, #4
    98f6:	4c24      	ldr	r4, [pc, #144]	; (9988 <USBHandleControlTransfer+0x9c>)
    98f8:	d023      	beq.n	9942 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    98fa:	2208      	movs	r2, #8
    98fc:	18a1      	adds	r1, r4, r2
    98fe:	f000 f941 	bl	9b84 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9902:	7a22      	ldrb	r2, [r4, #8]
    9904:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    9908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    990e:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    9910:	89e3      	ldrh	r3, [r4, #14]
    9912:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    9914:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    9916:	b10b      	cbz	r3, 991c <USBHandleControlTransfer+0x30>
    9918:	09d3      	lsrs	r3, r2, #7
    991a:	d034      	beq.n	9986 <USBHandleControlTransfer+0x9a>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    991c:	f7ff ffc0 	bl	98a0 <_HandleRequest.constprop.1>
    9920:	b928      	cbnz	r0, 992e <USBHandleControlTransfer+0x42>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    9922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBHwEPStall(0x80, TRUE);
    9926:	2101      	movs	r1, #1
    9928:	2080      	movs	r0, #128	; 0x80
    992a:	f000 b8f5 	b.w	9b18 <USBHwEPStall>
				iResidue = MIN(iLen, Setup.wLength);
    992e:	89e2      	ldrh	r2, [r4, #14]
    9930:	6923      	ldr	r3, [r4, #16]
    9932:	429a      	cmp	r2, r3
    9934:	bfd4      	ite	le
    9936:	6022      	strle	r2, [r4, #0]
    9938:	6023      	strgt	r3, [r4, #0]
}
    993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
    993e:	f7ff bf9b 	b.w	9878 <DataIn>
			if (iResidue > 0) {
    9942:	6822      	ldr	r2, [r4, #0]
    9944:	2a00      	cmp	r2, #0
    9946:	dd17      	ble.n	9978 <USBHandleControlTransfer+0x8c>
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    9948:	6861      	ldr	r1, [r4, #4]
    994a:	f000 f91b 	bl	9b84 <USBHwEPRead>
				if (iChunk < 0) {
    994e:	2800      	cmp	r0, #0
    9950:	dbe7      	blt.n	9922 <USBHandleControlTransfer+0x36>
				pbData += iChunk;
    9952:	6863      	ldr	r3, [r4, #4]
    9954:	4403      	add	r3, r0
    9956:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    9958:	6823      	ldr	r3, [r4, #0]
    995a:	1a18      	subs	r0, r3, r0
    995c:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    995e:	b990      	cbnz	r0, 9986 <USBHandleControlTransfer+0x9a>
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9960:	7a23      	ldrb	r3, [r4, #8]
    9962:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    9966:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    996c:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    996e:	f7ff ff97 	bl	98a0 <_HandleRequest.constprop.1>
    9972:	2800      	cmp	r0, #0
    9974:	d0d5      	beq.n	9922 <USBHandleControlTransfer+0x36>
    9976:	e7e0      	b.n	993a <USBHandleControlTransfer+0x4e>
				iChunk = USBHwEPRead(0x00, NULL, 0);
    9978:	460a      	mov	r2, r1
}
    997a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				iChunk = USBHwEPRead(0x00, NULL, 0);
    997e:	f000 b901 	b.w	9b84 <USBHwEPRead>
	else if (bEP == 0x80) {
    9982:	2880      	cmp	r0, #128	; 0x80
    9984:	d0d9      	beq.n	993a <USBHandleControlTransfer+0x4e>
    9986:	bd10      	pop	{r4, pc}
    9988:	100012e8 	.word	0x100012e8

0000998c <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <USBRegisterRequestHandler+0xc>)
    998e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9992:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    9994:	6242      	str	r2, [r0, #36]	; 0x24
    9996:	4770      	bx	lr
    9998:	100012e8 	.word	0x100012e8

0000999c <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    999c:	4770      	bx	lr
    999e:	0000      	movs	r0, r0

000099a0 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    99a0:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    99a2:	4c0e      	ldr	r4, [pc, #56]	; (99dc <USBInit+0x3c>)
	USBHwInit();
    99a4:	f000 f99a 	bl	9cdc <USBHwInit>
	USBHwRegisterDevIntHandler(HandleUsbReset);
    99a8:	480d      	ldr	r0, [pc, #52]	; (99e0 <USBInit+0x40>)
    99aa:	f000 f87f 	bl	9aac <USBHwRegisterDevIntHandler>
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    99ae:	4621      	mov	r1, r4
    99b0:	2000      	movs	r0, #0
    99b2:	f000 f861 	bl	9a78 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    99b6:	4621      	mov	r1, r4
    99b8:	2080      	movs	r0, #128	; 0x80
    99ba:	f000 f85d 	bl	9a78 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    99be:	2140      	movs	r1, #64	; 0x40
    99c0:	2000      	movs	r0, #0
    99c2:	f000 f83b 	bl	9a3c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    99c6:	2140      	movs	r1, #64	; 0x40
    99c8:	2080      	movs	r0, #128	; 0x80
    99ca:	f000 f837 	bl	9a3c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    99ce:	4a05      	ldr	r2, [pc, #20]	; (99e4 <USBInit+0x44>)
    99d0:	4905      	ldr	r1, [pc, #20]	; (99e8 <USBInit+0x48>)
    99d2:	2000      	movs	r0, #0
    99d4:	f7ff ffda 	bl	998c <USBRegisterRequestHandler>

	return TRUE;
}
    99d8:	2001      	movs	r0, #1
    99da:	bd10      	pop	{r4, pc}
    99dc:	000098ed 	.word	0x000098ed
    99e0:	0000999d 	.word	0x0000999d
    99e4:	1000131c 	.word	0x1000131c
    99e8:	00009e81 	.word	0x00009e81

000099ec <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    99ec:	4a03      	ldr	r2, [pc, #12]	; (99fc <Wait4DevInt+0x10>)
    99ee:	6813      	ldr	r3, [r2, #0]
    99f0:	ea30 0303 	bics.w	r3, r0, r3
    99f4:	d1fb      	bne.n	99ee <Wait4DevInt+0x2>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    99f6:	4b02      	ldr	r3, [pc, #8]	; (9a00 <Wait4DevInt+0x14>)
    99f8:	6018      	str	r0, [r3, #0]
    99fa:	4770      	bx	lr
    99fc:	5000c200 	.word	0x5000c200
    9a00:	5000c208 	.word	0x5000c208

00009a04 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    9a04:	2230      	movs	r2, #48	; 0x30
    9a06:	4b04      	ldr	r3, [pc, #16]	; (9a18 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9a08:	0400      	lsls	r0, r0, #16
    9a0a:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    USBDevIntClr = CDFULL | CCEMTY;
    9a0e:	601a      	str	r2, [r3, #0]
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9a10:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    9a12:	2010      	movs	r0, #16
    9a14:	f7ff bfea 	b.w	99ec <Wait4DevInt>
    9a18:	5000c208 	.word	0x5000c208

00009a1c <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    9a1c:	b508      	push	{r3, lr}
    // write command code
    USBHwCmd(bCmd);
    9a1e:	f7ff fff1 	bl	9a04 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    9a22:	4b05      	ldr	r3, [pc, #20]	; (9a38 <USBHwCmdWrite+0x1c>)
    9a24:	0409      	lsls	r1, r1, #16
    9a26:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    9a2a:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CCEMTY);
    9a2c:	2010      	movs	r0, #16
}
    9a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wait4DevInt(CCEMTY);
    9a32:	f7ff bfdb 	b.w	99ec <Wait4DevInt>
    9a36:	bf00      	nop
    9a38:	5000c210 	.word	0x5000c210

00009a3c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    9a3c:	b510      	push	{r4, lr}
    USBReEp |= (1 << idx);
    9a3e:	2301      	movs	r3, #1
    9a40:	4a0b      	ldr	r2, [pc, #44]	; (9a70 <USBHwEPConfig+0x34>)
    int idx;
    
    idx = EP2IDX(bEP);
    9a42:	0044      	lsls	r4, r0, #1
    9a44:	f004 041e 	and.w	r4, r4, #30
    9a48:	ea44 14d0 	orr.w	r4, r4, r0, lsr #7
    USBReEp |= (1 << idx);
    9a4c:	6810      	ldr	r0, [r2, #0]
    9a4e:	40a3      	lsls	r3, r4
    9a50:	4303      	orrs	r3, r0
    9a52:	6013      	str	r3, [r2, #0]
    USBEpIn = idx;
    9a54:	4b07      	ldr	r3, [pc, #28]	; (9a74 <USBHwEPConfig+0x38>)
    Wait4DevInt(EP_RLZED);
    9a56:	f44f 7080 	mov.w	r0, #256	; 0x100
    USBEpIn = idx;
    9a5a:	601c      	str	r4, [r3, #0]
    USBMaxPSize = wMaxPSize;
    9a5c:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    9a5e:	f7ff ffc5 	bl	99ec <Wait4DevInt>
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9a62:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    9a66:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    9a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9a6c:	f7ff bfd6 	b.w	9a1c <USBHwCmdWrite>
    9a70:	5000c244 	.word	0x5000c244
    9a74:	5000c248 	.word	0x5000c248

00009a78 <USBHwRegisterEPIntHandler>:
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    9a78:	0042      	lsls	r2, r0, #1
    9a7a:	f002 021e 	and.w	r2, r2, #30

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    9a7e:	ea42 13d0 	orr.w	r3, r2, r0, lsr #7
    9a82:	4808      	ldr	r0, [pc, #32]	; (9aa4 <USBHwRegisterEPIntHandler+0x2c>)
    9a84:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    9a88:	2001      	movs	r0, #1
    9a8a:	4a07      	ldr	r2, [pc, #28]	; (9aa8 <USBHwRegisterEPIntHandler+0x30>)
    9a8c:	4098      	lsls	r0, r3
    9a8e:	6811      	ldr	r1, [r2, #0]
    9a90:	4308      	orrs	r0, r1
    9a92:	6010      	str	r0, [r2, #0]
    USBDevIntEn |= EP_SLOW;
    9a94:	f852 3c30 	ldr.w	r3, [r2, #-48]
    9a98:	f043 0304 	orr.w	r3, r3, #4
    9a9c:	f842 3c30 	str.w	r3, [r2, #-48]
    9aa0:	4770      	bx	lr
    9aa2:	bf00      	nop
    9aa4:	10001324 	.word	0x10001324
    9aa8:	5000c234 	.word	0x5000c234

00009aac <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    9aac:	4b03      	ldr	r3, [pc, #12]	; (9abc <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    9aae:	4a04      	ldr	r2, [pc, #16]	; (9ac0 <USBHwRegisterDevIntHandler+0x14>)
    _pfnDevIntHandler = pfnHandler;
    9ab0:	6418      	str	r0, [r3, #64]	; 0x40
    USBDevIntEn |= DEV_STAT;
    9ab2:	6813      	ldr	r3, [r2, #0]
    9ab4:	f043 0308 	orr.w	r3, r3, #8
    9ab8:	6013      	str	r3, [r2, #0]
    9aba:	4770      	bx	lr
    9abc:	10001324 	.word	0x10001324
    9ac0:	5000c204 	.word	0x5000c204

00009ac4 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    9ac4:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    9ac8:	20d0      	movs	r0, #208	; 0xd0
    9aca:	f7ff bfa7 	b.w	9a1c <USBHwCmdWrite>

00009ace <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    9ace:	1c01      	adds	r1, r0, #0
    9ad0:	bf18      	it	ne
    9ad2:	2101      	movne	r1, #1
    9ad4:	20fe      	movs	r0, #254	; 0xfe
    9ad6:	f7ff bfa1 	b.w	9a1c <USBHwCmdWrite>

00009ada <USBHwNakIntEnable>:
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    9ada:	4601      	mov	r1, r0
    9adc:	20f3      	movs	r0, #243	; 0xf3
    9ade:	f7ff bf9d 	b.w	9a1c <USBHwCmdWrite>
    9ae2:	0000      	movs	r0, r0

00009ae4 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    9ae4:	b508      	push	{r3, lr}
    int idx = EP2IDX(bEP);
    9ae6:	0041      	lsls	r1, r0, #1
    9ae8:	f001 011e 	and.w	r1, r1, #30
    9aec:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
    USBHwCmd(bCmd);
    9af0:	4608      	mov	r0, r1
    9af2:	f7ff ff87 	bl	9a04 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9af6:	4b06      	ldr	r3, [pc, #24]	; (9b10 <USBHwEPGetStatus+0x2c>)
    9af8:	0409      	lsls	r1, r1, #16
    9afa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    9afe:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CDFULL);
    9b00:	2020      	movs	r0, #32
    9b02:	f7ff ff73 	bl	99ec <Wait4DevInt>
    return USBCmdData;
    9b06:	4b03      	ldr	r3, [pc, #12]	; (9b14 <USBHwEPGetStatus+0x30>)
    9b08:	6818      	ldr	r0, [r3, #0]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    9b0a:	b2c0      	uxtb	r0, r0
    9b0c:	bd08      	pop	{r3, pc}
    9b0e:	bf00      	nop
    9b10:	5000c210 	.word	0x5000c210
    9b14:	5000c214 	.word	0x5000c214

00009b18 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    9b18:	0043      	lsls	r3, r0, #1
    9b1a:	f003 031e 	and.w	r3, r3, #30
    9b1e:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    9b22:	3100      	adds	r1, #0
    9b24:	bf18      	it	ne
    9b26:	2101      	movne	r1, #1
    9b28:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9b2c:	f7ff bf76 	b.w	9a1c <USBHwCmdWrite>

00009b30 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    9b30:	b538      	push	{r3, r4, r5, lr}
    9b32:	4603      	mov	r3, r0
    U32 idx;
    
    idx = EP2IDX(bEP);
    9b34:	0040      	lsls	r0, r0, #1
    9b36:	f000 001e 	and.w	r0, r0, #30
    9b3a:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    9b3e:	009b      	lsls	r3, r3, #2
    9b40:	4c0d      	ldr	r4, [pc, #52]	; (9b78 <USBHwEPWrite+0x48>)
    9b42:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    9b46:	f043 0302 	orr.w	r3, r3, #2
    9b4a:	6023      	str	r3, [r4, #0]
    
    // set packet length
    USBTxPLen = iLen;
    9b4c:	4b0b      	ldr	r3, [pc, #44]	; (9b7c <USBHwEPWrite+0x4c>)
{
    9b4e:	4615      	mov	r5, r2
    USBTxPLen = iLen;
    9b50:	601a      	str	r2, [r3, #0]
    9b52:	4623      	mov	r3, r4
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    9b54:	4a0a      	ldr	r2, [pc, #40]	; (9b80 <USBHwEPWrite+0x50>)
    while (USBCtrl & WR_EN) {
    9b56:	681c      	ldr	r4, [r3, #0]
    9b58:	f014 0402 	ands.w	r4, r4, #2
    9b5c:	d107      	bne.n	9b6e <USBHwEPWrite+0x3e>
        pbBuf += 4;
    }

    USBCtrl = 0;
    9b5e:	601c      	str	r4, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    9b60:	f7ff ff50 	bl	9a04 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    9b64:	20fa      	movs	r0, #250	; 0xfa
    9b66:	f7ff ff4d 	bl	9a04 <USBHwCmd>
    
    return iLen;
}
    9b6a:	4628      	mov	r0, r5
    9b6c:	bd38      	pop	{r3, r4, r5, pc}
    9b6e:	f851 4b04 	ldr.w	r4, [r1], #4
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    9b72:	6014      	str	r4, [r2, #0]
    9b74:	e7ef      	b.n	9b56 <USBHwEPWrite+0x26>
    9b76:	bf00      	nop
    9b78:	5000c228 	.word	0x5000c228
    9b7c:	5000c224 	.word	0x5000c224
    9b80:	5000c21c 	.word	0x5000c21c

00009b84 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    9b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b86:	4603      	mov	r3, r0
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    9b88:	0040      	lsls	r0, r0, #1
    9b8a:	f000 001e 	and.w	r0, r0, #30
    9b8e:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    9b92:	009b      	lsls	r3, r3, #2
    9b94:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    9b98:	4e13      	ldr	r6, [pc, #76]	; (9be8 <USBHwEPRead+0x64>)
    9b9a:	f043 0301 	orr.w	r3, r3, #1
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    9b9e:	4c13      	ldr	r4, [pc, #76]	; (9bec <USBHwEPRead+0x68>)
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    9ba0:	6033      	str	r3, [r6, #0]
        dwLen = USBRxPLen;
    9ba2:	6823      	ldr	r3, [r4, #0]
    } while ((dwLen & PKT_RDY) == 0);
    9ba4:	051d      	lsls	r5, r3, #20
    9ba6:	d5fc      	bpl.n	9ba2 <USBHwEPRead+0x1e>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    9ba8:	055c      	lsls	r4, r3, #21
    9baa:	d51a      	bpl.n	9be2 <USBHwEPRead+0x5e>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    9bac:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    9bae:	462c      	mov	r4, r5
        if ((i % 4) == 0) {
            dwData = USBRxData;
    9bb0:	4f0f      	ldr	r7, [pc, #60]	; (9bf0 <USBHwEPRead+0x6c>)
    dwLen &= PKT_LNGTH_MASK;
    9bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    for (i = 0; i < dwLen; i++) {
    9bb6:	429c      	cmp	r4, r3
    9bb8:	d108      	bne.n	9bcc <USBHwEPRead+0x48>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    9bba:	2300      	movs	r3, #0
    9bbc:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    9bbe:	f7ff ff21 	bl	9a04 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    9bc2:	20f2      	movs	r0, #242	; 0xf2
    9bc4:	f7ff ff1e 	bl	9a04 <USBHwCmd>
    
    return dwLen;
    9bc8:	4620      	mov	r0, r4
    9bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((i % 4) == 0) {
    9bcc:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    9bd0:	bf08      	it	eq
    9bd2:	683d      	ldreq	r5, [r7, #0]
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    9bd4:	b111      	cbz	r1, 9bdc <USBHwEPRead+0x58>
    9bd6:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    9bd8:	bf38      	it	cc
    9bda:	550d      	strbcc	r5, [r1, r4]
        dwData >>= 8;
    9bdc:	0a2d      	lsrs	r5, r5, #8
    for (i = 0; i < dwLen; i++) {
    9bde:	3401      	adds	r4, #1
    9be0:	e7e9      	b.n	9bb6 <USBHwEPRead+0x32>
        return -1;
    9be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9be8:	5000c228 	.word	0x5000c228
    9bec:	5000c220 	.word	0x5000c220
    9bf0:	5000c218 	.word	0x5000c218

00009bf4 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    9bf4:	1c01      	adds	r1, r0, #0
    9bf6:	bf18      	it	ne
    9bf8:	2101      	movne	r1, #1
    9bfa:	20d8      	movs	r0, #216	; 0xd8
    9bfc:	f7ff bf0e 	b.w	9a1c <USBHwCmdWrite>

00009c00 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    9c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    9c02:	4b2d      	ldr	r3, [pc, #180]	; (9cb8 <USBHwISR+0xb8>)
    9c04:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    9c06:	07e1      	lsls	r1, r4, #31
    9c08:	d511      	bpl.n	9c2e <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    9c0a:	2201      	movs	r2, #1
    9c0c:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    9c0e:	4b2b      	ldr	r3, [pc, #172]	; (9cbc <USBHwISR+0xbc>)
    9c10:	6c59      	ldr	r1, [r3, #68]	; 0x44
    9c12:	b161      	cbz	r1, 9c2e <USBHwISR+0x2e>
    USBHwCmd(bCmd);
    9c14:	20f5      	movs	r0, #245	; 0xf5
    9c16:	f7ff fef5 	bl	9a04 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9c1a:	4b29      	ldr	r3, [pc, #164]	; (9cc0 <USBHwISR+0xc0>)
    9c1c:	4a29      	ldr	r2, [pc, #164]	; (9cc4 <USBHwISR+0xc4>)
    Wait4DevInt(CDFULL);
    9c1e:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9c20:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9c22:	f7ff fee3 	bl	99ec <Wait4DevInt>
    return USBCmdData;
    9c26:	4b28      	ldr	r3, [pc, #160]	; (9cc8 <USBHwISR+0xc8>)
    9c28:	6818      	ldr	r0, [r3, #0]
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    9c2a:	b2c0      	uxtb	r0, r0
    9c2c:	4788      	blx	r1
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    9c2e:	0722      	lsls	r2, r4, #28
    9c30:	d51b      	bpl.n	9c6a <USBHwISR+0x6a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    9c32:	2208      	movs	r2, #8
    9c34:	4b25      	ldr	r3, [pc, #148]	; (9ccc <USBHwISR+0xcc>)
    USBHwCmd(bCmd);
    9c36:	20fe      	movs	r0, #254	; 0xfe
        USBDevIntClr = DEV_STAT;
    9c38:	601a      	str	r2, [r3, #0]
    USBHwCmd(bCmd);
    9c3a:	f7ff fee3 	bl	9a04 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9c3e:	4b20      	ldr	r3, [pc, #128]	; (9cc0 <USBHwISR+0xc0>)
    9c40:	4a23      	ldr	r2, [pc, #140]	; (9cd0 <USBHwISR+0xd0>)
    Wait4DevInt(CDFULL);
    9c42:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9c44:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9c46:	f7ff fed1 	bl	99ec <Wait4DevInt>
    return USBCmdData;
    9c4a:	4b1f      	ldr	r3, [pc, #124]	; (9cc8 <USBHwISR+0xc8>)
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	b2d8      	uxtb	r0, r3
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    9c50:	f010 0f1a 	tst.w	r0, #26
    9c54:	d009      	beq.n	9c6a <USBHwISR+0x6a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    9c56:	4a19      	ldr	r2, [pc, #100]	; (9cbc <USBHwISR+0xbc>)
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
    9c58:	b25b      	sxtb	r3, r3
            if (_pfnDevIntHandler != NULL) {
    9c5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    9c5c:	b12a      	cbz	r2, 9c6a <USBHwISR+0x6a>
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
    9c5e:	f003 0314 	and.w	r3, r3, #20
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    9c62:	f000 0001 	and.w	r0, r0, #1
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    9c66:	4318      	orrs	r0, r3
    9c68:	4790      	blx	r2
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    9c6a:	0763      	lsls	r3, r4, #29
    9c6c:	d522      	bpl.n	9cb4 <USBHwISR+0xb4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    9c6e:	2204      	movs	r2, #4
        // check all endpoints
        for (i = 0; i < 32; i++) {
    9c70:	2400      	movs	r4, #0
        USBDevIntClr = EP_SLOW;
    9c72:	4b16      	ldr	r3, [pc, #88]	; (9ccc <USBHwISR+0xcc>)
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    9c74:	4d17      	ldr	r5, [pc, #92]	; (9cd4 <USBHwISR+0xd4>)
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    9c76:	4e18      	ldr	r6, [pc, #96]	; (9cd8 <USBHwISR+0xd8>)
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    9c78:	4f13      	ldr	r7, [pc, #76]	; (9cc8 <USBHwISR+0xc8>)
        USBDevIntClr = EP_SLOW;
    9c7a:	601a      	str	r2, [r3, #0]
            dwIntBit = (1 << i);
    9c7c:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    9c7e:	682a      	ldr	r2, [r5, #0]
            dwIntBit = (1 << i);
    9c80:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    9c82:	4213      	tst	r3, r2
    9c84:	d013      	beq.n	9cae <USBHwISR+0xae>
                USBEpIntClr = dwIntBit;
    9c86:	6033      	str	r3, [r6, #0]
                Wait4DevInt(CDFULL);
    9c88:	2020      	movs	r0, #32
    9c8a:	f7ff feaf 	bl	99ec <Wait4DevInt>
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9c8e:	4a0b      	ldr	r2, [pc, #44]	; (9cbc <USBHwISR+0xbc>)
    9c90:	1060      	asrs	r0, r4, #1
                bEPStat = USBCmdData;
    9c92:	683b      	ldr	r3, [r7, #0]
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9c94:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
    9c98:	b259      	sxtb	r1, r3
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9c9a:	b142      	cbz	r2, 9cae <USBHwISR+0xae>
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
    9c9c:	f001 011e 	and.w	r1, r1, #30
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    9ca0:	f003 0301 	and.w	r3, r3, #1
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    9ca4:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    9ca8:	4319      	orrs	r1, r3
    9caa:	b2c0      	uxtb	r0, r0
    9cac:	4790      	blx	r2
        for (i = 0; i < 32; i++) {
    9cae:	3401      	adds	r4, #1
    9cb0:	2c20      	cmp	r4, #32
    9cb2:	d1e3      	bne.n	9c7c <USBHwISR+0x7c>
    9cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cb6:	bf00      	nop
    9cb8:	5000c200 	.word	0x5000c200
    9cbc:	10001324 	.word	0x10001324
    9cc0:	5000c210 	.word	0x5000c210
    9cc4:	00f50200 	.word	0x00f50200
    9cc8:	5000c214 	.word	0x5000c214
    9ccc:	5000c208 	.word	0x5000c208
    9cd0:	00fe0200 	.word	0x00fe0200
    9cd4:	5000c230 	.word	0x5000c230
    9cd8:	5000c238 	.word	0x5000c238

00009cdc <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    9cdc:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    9cde:	4a25      	ldr	r2, [pc, #148]	; (9d74 <USBHwInit+0x98>)
    9ce0:	6813      	ldr	r3, [r2, #0]
    9ce2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    9cea:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    9cec:	f852 3c04 	ldr.w	r3, [r2, #-4]
    9cf0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    9cf4:	f043 0310 	orr.w	r3, r3, #16
    9cf8:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    9cfc:	f852 3c04 	ldr.w	r3, [r2, #-4]
    9d00:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    9d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    9d08:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    9d0c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    9d10:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    9d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9d18:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    9d1c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    9d20:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    9d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9d28:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    9d2c:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    9d30:	32b4      	adds	r2, #180	; 0xb4
    9d32:	6813      	ldr	r3, [r2, #0]
    9d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9d38:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    9d3a:	4a0f      	ldr	r2, [pc, #60]	; (9d78 <USBHwInit+0x9c>)
    9d3c:	6813      	ldr	r3, [r2, #0]
    9d3e:	f043 0312 	orr.w	r3, r3, #18
    9d42:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    9d44:	4b0d      	ldr	r3, [pc, #52]	; (9d7c <USBHwInit+0xa0>)
    9d46:	461a      	mov	r2, r3
    9d48:	6819      	ldr	r1, [r3, #0]
    9d4a:	0789      	lsls	r1, r1, #30
    9d4c:	d5fc      	bpl.n	9d48 <USBHwInit+0x6c>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    9d4e:	6813      	ldr	r3, [r2, #0]
    9d50:	06db      	lsls	r3, r3, #27
    9d52:	d5fc      	bpl.n	9d4e <USBHwInit+0x72>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    9d54:	2000      	movs	r0, #0
    9d56:	4b0a      	ldr	r3, [pc, #40]	; (9d80 <USBHwInit+0xa4>)
    USBDevIntClr = 0xFFFFFFFF;
    9d58:	4a0a      	ldr	r2, [pc, #40]	; (9d84 <USBHwInit+0xa8>)
    USBDevIntEn = 0;
    9d5a:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    9d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d60:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    9d62:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    9d64:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    9d66:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    9d68:	4b07      	ldr	r3, [pc, #28]	; (9d88 <USBHwInit+0xac>)
    9d6a:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    9d6c:	f7ff feb5 	bl	9ada <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    9d70:	2001      	movs	r0, #1
    9d72:	bd08      	pop	{r3, pc}
    9d74:	4002c010 	.word	0x4002c010
    9d78:	5000cff4 	.word	0x5000cff4
    9d7c:	5000cff8 	.word	0x5000cff8
    9d80:	5000c204 	.word	0x5000c204
    9d84:	5000c208 	.word	0x5000c208
    9d88:	5000c240 	.word	0x5000c240

00009d8c <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    9d8c:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    9d8e:	4c16      	ldr	r4, [pc, #88]	; (9de8 <USBFilterOsVendorMessage+0x5c>)
    9d90:	7825      	ldrb	r5, [r4, #0]
    9d92:	2400      	movs	r4, #0
    9d94:	b325      	cbz	r5, 9de0 <USBFilterOsVendorMessage+0x54>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    9d96:	7846      	ldrb	r6, [r0, #1]
    9d98:	42ae      	cmp	r6, r5
    9d9a:	d123      	bne.n	9de4 <USBFilterOsVendorMessage+0x58>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    9d9c:	600c      	str	r4, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
    9d9e:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    9da0:	8844      	ldrh	r4, [r0, #2]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    9da2:	8880      	ldrh	r0, [r0, #4]
    9da4:	2804      	cmp	r0, #4
    9da6:	d003      	beq.n	9db0 <USBFilterOsVendorMessage+0x24>
    9da8:	2805      	cmp	r0, #5
    9daa:	d015      	beq.n	9dd8 <USBFilterOsVendorMessage+0x4c>
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    9dac:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    9dae:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    9db0:	480e      	ldr	r0, [pc, #56]	; (9dec <USBFilterOsVendorMessage+0x60>)
    9db2:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    9db4:	2028      	movs	r0, #40	; 0x28
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9db6:	6010      	str	r0, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    9db8:	0a20      	lsrs	r0, r4, #8
		if (*piLen < iPageOffset) {
    9dba:	6814      	ldr	r4, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    9dbc:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    9dbe:	42a0      	cmp	r0, r4
    9dc0:	dcf4      	bgt.n	9dac <USBFilterOsVendorMessage+0x20>
		*ppbData += iPageOffset;
    9dc2:	681d      	ldr	r5, [r3, #0]
    9dc4:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    9dc6:	1a20      	subs	r0, r4, r0
		*ppbData += iPageOffset;
    9dc8:	601d      	str	r5, [r3, #0]
    9dca:	42b0      	cmp	r0, r6
    9dcc:	bfd4      	ite	le
    9dce:	6010      	strle	r0, [r2, #0]
    9dd0:	6016      	strgt	r6, [r2, #0]
		*pfSuccess = TRUE;
    9dd2:	2001      	movs	r0, #1
    9dd4:	6008      	str	r0, [r1, #0]
		return TRUE;
    9dd6:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    9dd8:	4805      	ldr	r0, [pc, #20]	; (9df0 <USBFilterOsVendorMessage+0x64>)
    9dda:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9ddc:	2092      	movs	r0, #146	; 0x92
    9dde:	e7ea      	b.n	9db6 <USBFilterOsVendorMessage+0x2a>
		return FALSE;
    9de0:	4628      	mov	r0, r5
    9de2:	bd70      	pop	{r4, r5, r6, pc}
    9de4:	4620      	mov	r0, r4
    9de6:	bd70      	pop	{r4, r5, r6, pc}
    9de8:	1000136c 	.word	0x1000136c
    9dec:	0000b6e4 	.word	0x0000b6e4
    9df0:	10000985 	.word	0x10000985

00009df4 <USBRegisterWinusbInterface>:
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
	bMsVendorIndex = bVendorRequestIndex;
    9df4:	4b08      	ldr	r3, [pc, #32]	; (9e18 <USBRegisterWinusbInterface+0x24>)
    9df6:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    9df8:	b161      	cbz	r1, 9e14 <USBRegisterWinusbInterface+0x20>
    9dfa:	4b08      	ldr	r3, [pc, #32]	; (9e1c <USBRegisterWinusbInterface+0x28>)
    9dfc:	1e4a      	subs	r2, r1, #1
    9dfe:	3125      	adds	r1, #37	; 0x25
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    9e00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    9e04:	b118      	cbz	r0, 9e0e <USBRegisterWinusbInterface+0x1a>
	for(int i = 0; i < ciMaxLength; i++) {
    9e06:	428a      	cmp	r2, r1
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    9e08:	f803 0b02 	strb.w	r0, [r3], #2
	for(int i = 0; i < ciMaxLength; i++) {
    9e0c:	d1f8      	bne.n	9e00 <USBRegisterWinusbInterface+0xc>
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    9e0e:	2200      	movs	r2, #0
    9e10:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    9e12:	709a      	strb	r2, [r3, #2]
    9e14:	4770      	bx	lr
    9e16:	bf00      	nop
    9e18:	1000136c 	.word	0x1000136c
    9e1c:	100009c7 	.word	0x100009c7

00009e20 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    9e20:	4b01      	ldr	r3, [pc, #4]	; (9e28 <USBRegisterDescriptors+0x8>)
    9e22:	6058      	str	r0, [r3, #4]
    9e24:	4770      	bx	lr
    9e26:	bf00      	nop
    9e28:	1000136c 	.word	0x1000136c

00009e2c <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    9e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    9e2e:	0a01      	lsrs	r1, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    9e30:	2903      	cmp	r1, #3
	bIndex = GET_DESC_INDEX(wTypeIndex);
    9e32:	b2c4      	uxtb	r4, r0
	bType = GET_DESC_TYPE(wTypeIndex);
    9e34:	b2ce      	uxtb	r6, r1
    9e36:	4810      	ldr	r0, [pc, #64]	; (9e78 <USBGetDescriptor+0x4c>)
    if (bType == DESC_STRING &&
    9e38:	d10a      	bne.n	9e50 <USBGetDescriptor+0x24>
    9e3a:	2cee      	cmp	r4, #238	; 0xee
    9e3c:	d108      	bne.n	9e50 <USBGetDescriptor+0x24>
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    9e3e:	490f      	ldr	r1, [pc, #60]	; (9e7c <USBGetDescriptor+0x50>)
    9e40:	7800      	ldrb	r0, [r0, #0]
	*ppbData = abOsStringDescriptor;
    9e42:	3192      	adds	r1, #146	; 0x92
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    9e44:	7408      	strb	r0, [r1, #16]
	*ppbData = abOsStringDescriptor;
    9e46:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    9e48:	2312      	movs	r3, #18
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    9e4a:	6013      	str	r3, [r2, #0]
				}
				return TRUE;
    9e4c:	2001      	movs	r0, #1
    9e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	iCurIndex = 0;
    9e50:	2500      	movs	r5, #0
	pab = (U8 *)pabDescrip;
    9e52:	6841      	ldr	r1, [r0, #4]
	while (pab[DESC_bLength] != 0) {
    9e54:	7808      	ldrb	r0, [r1, #0]
    9e56:	b900      	cbnz	r0, 9e5a <USBGetDescriptor+0x2e>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    9e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pab[DESC_bDescriptorType] == bType) {
    9e5a:	784f      	ldrb	r7, [r1, #1]
    9e5c:	42b7      	cmp	r7, r6
    9e5e:	d108      	bne.n	9e72 <USBGetDescriptor+0x46>
			if (iCurIndex == bIndex) {
    9e60:	42a5      	cmp	r5, r4
    9e62:	d105      	bne.n	9e70 <USBGetDescriptor+0x44>
				*ppbData = pab;
    9e64:	6019      	str	r1, [r3, #0]
				if (bType == DESC_CONFIGURATION) {
    9e66:	2e02      	cmp	r6, #2
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    9e68:	bf0c      	ite	eq
    9e6a:	884b      	ldrheq	r3, [r1, #2]
					*piLen = pab[DESC_bLength];
    9e6c:	780b      	ldrbne	r3, [r1, #0]
    9e6e:	e7ec      	b.n	9e4a <USBGetDescriptor+0x1e>
			iCurIndex++;
    9e70:	3501      	adds	r5, #1
		pab += pab[DESC_bLength];
    9e72:	4401      	add	r1, r0
    9e74:	e7ee      	b.n	9e54 <USBGetDescriptor+0x28>
    9e76:	bf00      	nop
    9e78:	1000136c 	.word	0x1000136c
    9e7c:	10000985 	.word	0x10000985

00009e80 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9e84:	4c55      	ldr	r4, [pc, #340]	; (9fdc <USBHandleStandardRequest+0x15c>)
{
    9e86:	4605      	mov	r5, r0
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9e88:	68a3      	ldr	r3, [r4, #8]
{
    9e8a:	460f      	mov	r7, r1
    9e8c:	4691      	mov	r9, r2
    9e8e:	46a0      	mov	r8, r4
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9e90:	b953      	cbnz	r3, 9ea8 <USBHandleStandardRequest+0x28>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    9e92:	7828      	ldrb	r0, [r5, #0]
    9e94:	f000 061f 	and.w	r6, r0, #31
    9e98:	2e01      	cmp	r6, #1
    9e9a:	d06b      	beq.n	9f74 <USBHandleStandardRequest+0xf4>
    9e9c:	d30a      	bcc.n	9eb4 <USBHandleStandardRequest+0x34>
    9e9e:	2e02      	cmp	r6, #2
    9ea0:	d07c      	beq.n	9f9c <USBHandleStandardRequest+0x11c>
			return FALSE;
    9ea2:	2000      	movs	r0, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    9ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9ea8:	4798      	blx	r3
    9eaa:	2800      	cmp	r0, #0
    9eac:	d0f1      	beq.n	9e92 <USBHandleStandardRequest+0x12>
		return TRUE;
    9eae:	2001      	movs	r0, #1
    9eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pSetup->bRequest) {
    9eb4:	786a      	ldrb	r2, [r5, #1]
	U8	*pbData = *ppbData;
    9eb6:	f8d9 3000 	ldr.w	r3, [r9]
	switch (pSetup->bRequest) {
    9eba:	2a09      	cmp	r2, #9
    9ebc:	d8f1      	bhi.n	9ea2 <USBHandleStandardRequest+0x22>
    9ebe:	a101      	add	r1, pc, #4	; (adr r1, 9ec4 <USBHandleStandardRequest+0x44>)
    9ec0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    9ec4:	00009eed 	.word	0x00009eed
    9ec8:	00009ea3 	.word	0x00009ea3
    9ecc:	00009ea3 	.word	0x00009ea3
    9ed0:	00009ea3 	.word	0x00009ea3
    9ed4:	00009ea3 	.word	0x00009ea3
    9ed8:	00009ef9 	.word	0x00009ef9
    9edc:	00009f01 	.word	0x00009f01
    9ee0:	00009ea3 	.word	0x00009ea3
    9ee4:	00009f11 	.word	0x00009f11
    9ee8:	00009f1f 	.word	0x00009f1f
		pbData[0] = 0;
    9eec:	2200      	movs	r2, #0
    9eee:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    9ef0:	705a      	strb	r2, [r3, #1]
		*piLen = 2;
    9ef2:	2302      	movs	r3, #2
		*piLen = 0;
    9ef4:	603b      	str	r3, [r7, #0]
    9ef6:	e7da      	b.n	9eae <USBHandleStandardRequest+0x2e>
		USBHwSetAddress(pSetup->wValue);
    9ef8:	78a8      	ldrb	r0, [r5, #2]
    9efa:	f7ff fde3 	bl	9ac4 <USBHwSetAddress>
    9efe:	e7d6      	b.n	9eae <USBHandleStandardRequest+0x2e>
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    9f00:	464b      	mov	r3, r9
    9f02:	463a      	mov	r2, r7
    9f04:	88a9      	ldrh	r1, [r5, #4]
    9f06:	8868      	ldrh	r0, [r5, #2]
}
    9f08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    9f0c:	f7ff bf8e 	b.w	9e2c <USBGetDescriptor>
		*piLen = 1;
    9f10:	2001      	movs	r0, #1
		pbData[0] = bConfiguration;
    9f12:	f898 200c 	ldrb.w	r2, [r8, #12]
    9f16:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    9f18:	6038      	str	r0, [r7, #0]
    9f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    9f1e:	78ae      	ldrb	r6, [r5, #2]
	if (bConfigIndex == 0) {
    9f20:	b936      	cbnz	r6, 9f30 <USBHandleStandardRequest+0xb0>
		USBHwConfigDevice(FALSE);
    9f22:	4630      	mov	r0, r6
		USBHwConfigDevice(TRUE);
    9f24:	f7ff fe66 	bl	9bf4 <USBHwConfigDevice>
		bConfiguration = pSetup->wValue & 0xFF;	
    9f28:	886b      	ldrh	r3, [r5, #2]
    9f2a:	f888 300c 	strb.w	r3, [r8, #12]
    9f2e:	e7be      	b.n	9eae <USBHandleStandardRequest+0x2e>
		bCurAltSetting = 0xFF;
    9f30:	27ff      	movs	r7, #255	; 0xff
		bCurConfig = 0xFF;
    9f32:	46b9      	mov	r9, r7
		pab = (U8 *)pabDescrip;
    9f34:	f8d8 4004 	ldr.w	r4, [r8, #4]
		while (pab[DESC_bLength] != 0) {
    9f38:	7823      	ldrb	r3, [r4, #0]
    9f3a:	b90b      	cbnz	r3, 9f40 <USBHandleStandardRequest+0xc0>
		USBHwConfigDevice(TRUE);
    9f3c:	2001      	movs	r0, #1
    9f3e:	e7f1      	b.n	9f24 <USBHandleStandardRequest+0xa4>
			switch (pab[DESC_bDescriptorType]) {
    9f40:	7863      	ldrb	r3, [r4, #1]
    9f42:	2b04      	cmp	r3, #4
    9f44:	d008      	beq.n	9f58 <USBHandleStandardRequest+0xd8>
    9f46:	2b05      	cmp	r3, #5
    9f48:	d008      	beq.n	9f5c <USBHandleStandardRequest+0xdc>
    9f4a:	2b02      	cmp	r3, #2
    9f4c:	d101      	bne.n	9f52 <USBHandleStandardRequest+0xd2>
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    9f4e:	f894 9005 	ldrb.w	r9, [r4, #5]
			pab += pab[DESC_bLength];
    9f52:	7823      	ldrb	r3, [r4, #0]
    9f54:	441c      	add	r4, r3
    9f56:	e7ef      	b.n	9f38 <USBHandleStandardRequest+0xb8>
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    9f58:	78e7      	ldrb	r7, [r4, #3]
    9f5a:	e7fa      	b.n	9f52 <USBHandleStandardRequest+0xd2>
				if ((bCurConfig == bConfigIndex) &&
    9f5c:	454e      	cmp	r6, r9
    9f5e:	d1f8      	bne.n	9f52 <USBHandleStandardRequest+0xd2>
    9f60:	2f00      	cmp	r7, #0
    9f62:	d1f6      	bne.n	9f52 <USBHandleStandardRequest+0xd2>
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    9f64:	7961      	ldrb	r1, [r4, #5]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    9f66:	7923      	ldrb	r3, [r4, #4]
					USBHwEPConfig(bEP, wMaxPktSize);
    9f68:	78a0      	ldrb	r0, [r4, #2]
    9f6a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    9f6e:	f7ff fd65 	bl	9a3c <USBHwEPConfig>
    9f72:	e7ee      	b.n	9f52 <USBHandleStandardRequest+0xd2>
	switch (pSetup->bRequest) {
    9f74:	786b      	ldrb	r3, [r5, #1]
    9f76:	f8d9 2000 	ldr.w	r2, [r9]
    9f7a:	2b0a      	cmp	r3, #10
    9f7c:	d006      	beq.n	9f8c <USBHandleStandardRequest+0x10c>
    9f7e:	2b0b      	cmp	r3, #11
    9f80:	d008      	beq.n	9f94 <USBHandleStandardRequest+0x114>
    9f82:	2b00      	cmp	r3, #0
    9f84:	d18d      	bne.n	9ea2 <USBHandleStandardRequest+0x22>
		pbData[0] = 0;
    9f86:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    9f88:	7053      	strb	r3, [r2, #1]
    9f8a:	e7b2      	b.n	9ef2 <USBHandleStandardRequest+0x72>
		pbData[0] = 0;
    9f8c:	2300      	movs	r3, #0
    9f8e:	7013      	strb	r3, [r2, #0]
		*piLen = 2;
    9f90:	603e      	str	r6, [r7, #0]
    9f92:	e78c      	b.n	9eae <USBHandleStandardRequest+0x2e>
		if (pSetup->wValue != 0) {
    9f94:	886b      	ldrh	r3, [r5, #2]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d0ac      	beq.n	9ef4 <USBHandleStandardRequest+0x74>
    9f9a:	e782      	b.n	9ea2 <USBHandleStandardRequest+0x22>
	switch (pSetup->bRequest) {
    9f9c:	786c      	ldrb	r4, [r5, #1]
    9f9e:	2c01      	cmp	r4, #1
    9fa0:	d014      	beq.n	9fcc <USBHandleStandardRequest+0x14c>
    9fa2:	d308      	bcc.n	9fb6 <USBHandleStandardRequest+0x136>
    9fa4:	2c03      	cmp	r4, #3
    9fa6:	f47f af7c 	bne.w	9ea2 <USBHandleStandardRequest+0x22>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9faa:	886b      	ldrh	r3, [r5, #2]
    9fac:	2b00      	cmp	r3, #0
    9fae:	f47f af78 	bne.w	9ea2 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    9fb2:	2101      	movs	r1, #1
    9fb4:	e00e      	b.n	9fd4 <USBHandleStandardRequest+0x154>
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9fb6:	7928      	ldrb	r0, [r5, #4]
    9fb8:	f8d9 4000 	ldr.w	r4, [r9]
    9fbc:	f7ff fd92 	bl	9ae4 <USBHwEPGetStatus>
		pbData[1] = 0;
    9fc0:	2300      	movs	r3, #0
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9fc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9fc6:	7020      	strb	r0, [r4, #0]
		pbData[1] = 0;
    9fc8:	7063      	strb	r3, [r4, #1]
    9fca:	e7e1      	b.n	9f90 <USBHandleStandardRequest+0x110>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9fcc:	8869      	ldrh	r1, [r5, #2]
    9fce:	2900      	cmp	r1, #0
    9fd0:	f47f af67 	bne.w	9ea2 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    9fd4:	7928      	ldrb	r0, [r5, #4]
    9fd6:	f7ff fd9f 	bl	9b18 <USBHwEPStall>
    9fda:	e768      	b.n	9eae <USBHandleStandardRequest+0x2e>
    9fdc:	1000136c 	.word	0x1000136c

00009fe0 <__aeabi_llsl>:
    9fe0:	4091      	lsls	r1, r2
    9fe2:	1c03      	adds	r3, r0, #0
    9fe4:	4090      	lsls	r0, r2
    9fe6:	469c      	mov	ip, r3
    9fe8:	3a20      	subs	r2, #32
    9fea:	4093      	lsls	r3, r2
    9fec:	4319      	orrs	r1, r3
    9fee:	4252      	negs	r2, r2
    9ff0:	4663      	mov	r3, ip
    9ff2:	40d3      	lsrs	r3, r2
    9ff4:	4319      	orrs	r1, r3
    9ff6:	4770      	bx	lr

00009ff8 <__aeabi_drsub>:
    9ff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    9ffc:	e002      	b.n	a004 <__adddf3>
    9ffe:	bf00      	nop

0000a000 <__aeabi_dsub>:
    a000:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a004 <__adddf3>:
    a004:	b530      	push	{r4, r5, lr}
    a006:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a00a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a00e:	ea94 0f05 	teq	r4, r5
    a012:	bf08      	it	eq
    a014:	ea90 0f02 	teqeq	r0, r2
    a018:	bf1f      	itttt	ne
    a01a:	ea54 0c00 	orrsne.w	ip, r4, r0
    a01e:	ea55 0c02 	orrsne.w	ip, r5, r2
    a022:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a026:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a02a:	f000 80e2 	beq.w	a1f2 <__adddf3+0x1ee>
    a02e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a032:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a036:	bfb8      	it	lt
    a038:	426d      	neglt	r5, r5
    a03a:	dd0c      	ble.n	a056 <__adddf3+0x52>
    a03c:	442c      	add	r4, r5
    a03e:	ea80 0202 	eor.w	r2, r0, r2
    a042:	ea81 0303 	eor.w	r3, r1, r3
    a046:	ea82 0000 	eor.w	r0, r2, r0
    a04a:	ea83 0101 	eor.w	r1, r3, r1
    a04e:	ea80 0202 	eor.w	r2, r0, r2
    a052:	ea81 0303 	eor.w	r3, r1, r3
    a056:	2d36      	cmp	r5, #54	; 0x36
    a058:	bf88      	it	hi
    a05a:	bd30      	pophi	{r4, r5, pc}
    a05c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a060:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a064:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    a068:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    a06c:	d002      	beq.n	a074 <__adddf3+0x70>
    a06e:	4240      	negs	r0, r0
    a070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a074:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    a078:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a07c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    a080:	d002      	beq.n	a088 <__adddf3+0x84>
    a082:	4252      	negs	r2, r2
    a084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a088:	ea94 0f05 	teq	r4, r5
    a08c:	f000 80a7 	beq.w	a1de <__adddf3+0x1da>
    a090:	f1a4 0401 	sub.w	r4, r4, #1
    a094:	f1d5 0e20 	rsbs	lr, r5, #32
    a098:	db0d      	blt.n	a0b6 <__adddf3+0xb2>
    a09a:	fa02 fc0e 	lsl.w	ip, r2, lr
    a09e:	fa22 f205 	lsr.w	r2, r2, r5
    a0a2:	1880      	adds	r0, r0, r2
    a0a4:	f141 0100 	adc.w	r1, r1, #0
    a0a8:	fa03 f20e 	lsl.w	r2, r3, lr
    a0ac:	1880      	adds	r0, r0, r2
    a0ae:	fa43 f305 	asr.w	r3, r3, r5
    a0b2:	4159      	adcs	r1, r3
    a0b4:	e00e      	b.n	a0d4 <__adddf3+0xd0>
    a0b6:	f1a5 0520 	sub.w	r5, r5, #32
    a0ba:	f10e 0e20 	add.w	lr, lr, #32
    a0be:	2a01      	cmp	r2, #1
    a0c0:	fa03 fc0e 	lsl.w	ip, r3, lr
    a0c4:	bf28      	it	cs
    a0c6:	f04c 0c02 	orrcs.w	ip, ip, #2
    a0ca:	fa43 f305 	asr.w	r3, r3, r5
    a0ce:	18c0      	adds	r0, r0, r3
    a0d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    a0d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a0d8:	d507      	bpl.n	a0ea <__adddf3+0xe6>
    a0da:	f04f 0e00 	mov.w	lr, #0
    a0de:	f1dc 0c00 	rsbs	ip, ip, #0
    a0e2:	eb7e 0000 	sbcs.w	r0, lr, r0
    a0e6:	eb6e 0101 	sbc.w	r1, lr, r1
    a0ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a0ee:	d31b      	bcc.n	a128 <__adddf3+0x124>
    a0f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    a0f4:	d30c      	bcc.n	a110 <__adddf3+0x10c>
    a0f6:	0849      	lsrs	r1, r1, #1
    a0f8:	ea5f 0030 	movs.w	r0, r0, rrx
    a0fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    a100:	f104 0401 	add.w	r4, r4, #1
    a104:	ea4f 5244 	mov.w	r2, r4, lsl #21
    a108:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    a10c:	f080 809a 	bcs.w	a244 <__adddf3+0x240>
    a110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a114:	bf08      	it	eq
    a116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a11a:	f150 0000 	adcs.w	r0, r0, #0
    a11e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a122:	ea41 0105 	orr.w	r1, r1, r5
    a126:	bd30      	pop	{r4, r5, pc}
    a128:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    a12c:	4140      	adcs	r0, r0
    a12e:	eb41 0101 	adc.w	r1, r1, r1
    a132:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a136:	f1a4 0401 	sub.w	r4, r4, #1
    a13a:	d1e9      	bne.n	a110 <__adddf3+0x10c>
    a13c:	f091 0f00 	teq	r1, #0
    a140:	bf04      	itt	eq
    a142:	4601      	moveq	r1, r0
    a144:	2000      	moveq	r0, #0
    a146:	fab1 f381 	clz	r3, r1
    a14a:	bf08      	it	eq
    a14c:	3320      	addeq	r3, #32
    a14e:	f1a3 030b 	sub.w	r3, r3, #11
    a152:	f1b3 0220 	subs.w	r2, r3, #32
    a156:	da0c      	bge.n	a172 <__adddf3+0x16e>
    a158:	320c      	adds	r2, #12
    a15a:	dd08      	ble.n	a16e <__adddf3+0x16a>
    a15c:	f102 0c14 	add.w	ip, r2, #20
    a160:	f1c2 020c 	rsb	r2, r2, #12
    a164:	fa01 f00c 	lsl.w	r0, r1, ip
    a168:	fa21 f102 	lsr.w	r1, r1, r2
    a16c:	e00c      	b.n	a188 <__adddf3+0x184>
    a16e:	f102 0214 	add.w	r2, r2, #20
    a172:	bfd8      	it	le
    a174:	f1c2 0c20 	rsble	ip, r2, #32
    a178:	fa01 f102 	lsl.w	r1, r1, r2
    a17c:	fa20 fc0c 	lsr.w	ip, r0, ip
    a180:	bfdc      	itt	le
    a182:	ea41 010c 	orrle.w	r1, r1, ip
    a186:	4090      	lslle	r0, r2
    a188:	1ae4      	subs	r4, r4, r3
    a18a:	bfa2      	ittt	ge
    a18c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    a190:	4329      	orrge	r1, r5
    a192:	bd30      	popge	{r4, r5, pc}
    a194:	ea6f 0404 	mvn.w	r4, r4
    a198:	3c1f      	subs	r4, #31
    a19a:	da1c      	bge.n	a1d6 <__adddf3+0x1d2>
    a19c:	340c      	adds	r4, #12
    a19e:	dc0e      	bgt.n	a1be <__adddf3+0x1ba>
    a1a0:	f104 0414 	add.w	r4, r4, #20
    a1a4:	f1c4 0220 	rsb	r2, r4, #32
    a1a8:	fa20 f004 	lsr.w	r0, r0, r4
    a1ac:	fa01 f302 	lsl.w	r3, r1, r2
    a1b0:	ea40 0003 	orr.w	r0, r0, r3
    a1b4:	fa21 f304 	lsr.w	r3, r1, r4
    a1b8:	ea45 0103 	orr.w	r1, r5, r3
    a1bc:	bd30      	pop	{r4, r5, pc}
    a1be:	f1c4 040c 	rsb	r4, r4, #12
    a1c2:	f1c4 0220 	rsb	r2, r4, #32
    a1c6:	fa20 f002 	lsr.w	r0, r0, r2
    a1ca:	fa01 f304 	lsl.w	r3, r1, r4
    a1ce:	ea40 0003 	orr.w	r0, r0, r3
    a1d2:	4629      	mov	r1, r5
    a1d4:	bd30      	pop	{r4, r5, pc}
    a1d6:	fa21 f004 	lsr.w	r0, r1, r4
    a1da:	4629      	mov	r1, r5
    a1dc:	bd30      	pop	{r4, r5, pc}
    a1de:	f094 0f00 	teq	r4, #0
    a1e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    a1e6:	bf06      	itte	eq
    a1e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    a1ec:	3401      	addeq	r4, #1
    a1ee:	3d01      	subne	r5, #1
    a1f0:	e74e      	b.n	a090 <__adddf3+0x8c>
    a1f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a1f6:	bf18      	it	ne
    a1f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a1fc:	d029      	beq.n	a252 <__adddf3+0x24e>
    a1fe:	ea94 0f05 	teq	r4, r5
    a202:	bf08      	it	eq
    a204:	ea90 0f02 	teqeq	r0, r2
    a208:	d005      	beq.n	a216 <__adddf3+0x212>
    a20a:	ea54 0c00 	orrs.w	ip, r4, r0
    a20e:	bf04      	itt	eq
    a210:	4619      	moveq	r1, r3
    a212:	4610      	moveq	r0, r2
    a214:	bd30      	pop	{r4, r5, pc}
    a216:	ea91 0f03 	teq	r1, r3
    a21a:	bf1e      	ittt	ne
    a21c:	2100      	movne	r1, #0
    a21e:	2000      	movne	r0, #0
    a220:	bd30      	popne	{r4, r5, pc}
    a222:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    a226:	d105      	bne.n	a234 <__adddf3+0x230>
    a228:	0040      	lsls	r0, r0, #1
    a22a:	4149      	adcs	r1, r1
    a22c:	bf28      	it	cs
    a22e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a232:	bd30      	pop	{r4, r5, pc}
    a234:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    a238:	bf3c      	itt	cc
    a23a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    a23e:	bd30      	popcc	{r4, r5, pc}
    a240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a244:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    a248:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a24c:	f04f 0000 	mov.w	r0, #0
    a250:	bd30      	pop	{r4, r5, pc}
    a252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a256:	bf1a      	itte	ne
    a258:	4619      	movne	r1, r3
    a25a:	4610      	movne	r0, r2
    a25c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    a260:	bf1c      	itt	ne
    a262:	460b      	movne	r3, r1
    a264:	4602      	movne	r2, r0
    a266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a26a:	bf06      	itte	eq
    a26c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    a270:	ea91 0f03 	teqeq	r1, r3
    a274:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    a278:	bd30      	pop	{r4, r5, pc}
    a27a:	bf00      	nop

0000a27c <__aeabi_ui2d>:
    a27c:	f090 0f00 	teq	r0, #0
    a280:	bf04      	itt	eq
    a282:	2100      	moveq	r1, #0
    a284:	4770      	bxeq	lr
    a286:	b530      	push	{r4, r5, lr}
    a288:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a28c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a290:	f04f 0500 	mov.w	r5, #0
    a294:	f04f 0100 	mov.w	r1, #0
    a298:	e750      	b.n	a13c <__adddf3+0x138>
    a29a:	bf00      	nop

0000a29c <__aeabi_i2d>:
    a29c:	f090 0f00 	teq	r0, #0
    a2a0:	bf04      	itt	eq
    a2a2:	2100      	moveq	r1, #0
    a2a4:	4770      	bxeq	lr
    a2a6:	b530      	push	{r4, r5, lr}
    a2a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a2ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a2b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    a2b4:	bf48      	it	mi
    a2b6:	4240      	negmi	r0, r0
    a2b8:	f04f 0100 	mov.w	r1, #0
    a2bc:	e73e      	b.n	a13c <__adddf3+0x138>
    a2be:	bf00      	nop

0000a2c0 <__aeabi_f2d>:
    a2c0:	0042      	lsls	r2, r0, #1
    a2c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    a2c6:	ea4f 0131 	mov.w	r1, r1, rrx
    a2ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
    a2ce:	bf1f      	itttt	ne
    a2d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    a2d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a2d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    a2dc:	4770      	bxne	lr
    a2de:	f092 0f00 	teq	r2, #0
    a2e2:	bf14      	ite	ne
    a2e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a2e8:	4770      	bxeq	lr
    a2ea:	b530      	push	{r4, r5, lr}
    a2ec:	f44f 7460 	mov.w	r4, #896	; 0x380
    a2f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a2f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a2f8:	e720      	b.n	a13c <__adddf3+0x138>
    a2fa:	bf00      	nop

0000a2fc <__aeabi_ul2d>:
    a2fc:	ea50 0201 	orrs.w	r2, r0, r1
    a300:	bf08      	it	eq
    a302:	4770      	bxeq	lr
    a304:	b530      	push	{r4, r5, lr}
    a306:	f04f 0500 	mov.w	r5, #0
    a30a:	e00a      	b.n	a322 <__aeabi_l2d+0x16>

0000a30c <__aeabi_l2d>:
    a30c:	ea50 0201 	orrs.w	r2, r0, r1
    a310:	bf08      	it	eq
    a312:	4770      	bxeq	lr
    a314:	b530      	push	{r4, r5, lr}
    a316:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    a31a:	d502      	bpl.n	a322 <__aeabi_l2d+0x16>
    a31c:	4240      	negs	r0, r0
    a31e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a322:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a326:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a32a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    a32e:	f43f aedc 	beq.w	a0ea <__adddf3+0xe6>
    a332:	f04f 0203 	mov.w	r2, #3
    a336:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a33a:	bf18      	it	ne
    a33c:	3203      	addne	r2, #3
    a33e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a342:	bf18      	it	ne
    a344:	3203      	addne	r2, #3
    a346:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    a34a:	f1c2 0320 	rsb	r3, r2, #32
    a34e:	fa00 fc03 	lsl.w	ip, r0, r3
    a352:	fa20 f002 	lsr.w	r0, r0, r2
    a356:	fa01 fe03 	lsl.w	lr, r1, r3
    a35a:	ea40 000e 	orr.w	r0, r0, lr
    a35e:	fa21 f102 	lsr.w	r1, r1, r2
    a362:	4414      	add	r4, r2
    a364:	e6c1      	b.n	a0ea <__adddf3+0xe6>
    a366:	bf00      	nop

0000a368 <__aeabi_dmul>:
    a368:	b570      	push	{r4, r5, r6, lr}
    a36a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a36e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a376:	bf1d      	ittte	ne
    a378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a37c:	ea94 0f0c 	teqne	r4, ip
    a380:	ea95 0f0c 	teqne	r5, ip
    a384:	f000 f8de 	bleq	a544 <__aeabi_dmul+0x1dc>
    a388:	442c      	add	r4, r5
    a38a:	ea81 0603 	eor.w	r6, r1, r3
    a38e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    a392:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    a396:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    a39a:	bf18      	it	ne
    a39c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    a3a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a3a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a3a8:	d038      	beq.n	a41c <__aeabi_dmul+0xb4>
    a3aa:	fba0 ce02 	umull	ip, lr, r0, r2
    a3ae:	f04f 0500 	mov.w	r5, #0
    a3b2:	fbe1 e502 	umlal	lr, r5, r1, r2
    a3b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    a3ba:	fbe0 e503 	umlal	lr, r5, r0, r3
    a3be:	f04f 0600 	mov.w	r6, #0
    a3c2:	fbe1 5603 	umlal	r5, r6, r1, r3
    a3c6:	f09c 0f00 	teq	ip, #0
    a3ca:	bf18      	it	ne
    a3cc:	f04e 0e01 	orrne.w	lr, lr, #1
    a3d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    a3d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    a3d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    a3dc:	d204      	bcs.n	a3e8 <__aeabi_dmul+0x80>
    a3de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    a3e2:	416d      	adcs	r5, r5
    a3e4:	eb46 0606 	adc.w	r6, r6, r6
    a3e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    a3ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    a3f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    a3f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    a3f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    a3fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a400:	bf88      	it	hi
    a402:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a406:	d81e      	bhi.n	a446 <__aeabi_dmul+0xde>
    a408:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    a40c:	bf08      	it	eq
    a40e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    a412:	f150 0000 	adcs.w	r0, r0, #0
    a416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a41a:	bd70      	pop	{r4, r5, r6, pc}
    a41c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    a420:	ea46 0101 	orr.w	r1, r6, r1
    a424:	ea40 0002 	orr.w	r0, r0, r2
    a428:	ea81 0103 	eor.w	r1, r1, r3
    a42c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    a430:	bfc2      	ittt	gt
    a432:	ebd4 050c 	rsbsgt	r5, r4, ip
    a436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a43a:	bd70      	popgt	{r4, r5, r6, pc}
    a43c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a440:	f04f 0e00 	mov.w	lr, #0
    a444:	3c01      	subs	r4, #1
    a446:	f300 80ab 	bgt.w	a5a0 <__aeabi_dmul+0x238>
    a44a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    a44e:	bfde      	ittt	le
    a450:	2000      	movle	r0, #0
    a452:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    a456:	bd70      	pople	{r4, r5, r6, pc}
    a458:	f1c4 0400 	rsb	r4, r4, #0
    a45c:	3c20      	subs	r4, #32
    a45e:	da35      	bge.n	a4cc <__aeabi_dmul+0x164>
    a460:	340c      	adds	r4, #12
    a462:	dc1b      	bgt.n	a49c <__aeabi_dmul+0x134>
    a464:	f104 0414 	add.w	r4, r4, #20
    a468:	f1c4 0520 	rsb	r5, r4, #32
    a46c:	fa00 f305 	lsl.w	r3, r0, r5
    a470:	fa20 f004 	lsr.w	r0, r0, r4
    a474:	fa01 f205 	lsl.w	r2, r1, r5
    a478:	ea40 0002 	orr.w	r0, r0, r2
    a47c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    a480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    a488:	fa21 f604 	lsr.w	r6, r1, r4
    a48c:	eb42 0106 	adc.w	r1, r2, r6
    a490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a494:	bf08      	it	eq
    a496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a49a:	bd70      	pop	{r4, r5, r6, pc}
    a49c:	f1c4 040c 	rsb	r4, r4, #12
    a4a0:	f1c4 0520 	rsb	r5, r4, #32
    a4a4:	fa00 f304 	lsl.w	r3, r0, r4
    a4a8:	fa20 f005 	lsr.w	r0, r0, r5
    a4ac:	fa01 f204 	lsl.w	r2, r1, r4
    a4b0:	ea40 0002 	orr.w	r0, r0, r2
    a4b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a4b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    a4bc:	f141 0100 	adc.w	r1, r1, #0
    a4c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a4c4:	bf08      	it	eq
    a4c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a4ca:	bd70      	pop	{r4, r5, r6, pc}
    a4cc:	f1c4 0520 	rsb	r5, r4, #32
    a4d0:	fa00 f205 	lsl.w	r2, r0, r5
    a4d4:	ea4e 0e02 	orr.w	lr, lr, r2
    a4d8:	fa20 f304 	lsr.w	r3, r0, r4
    a4dc:	fa01 f205 	lsl.w	r2, r1, r5
    a4e0:	ea43 0302 	orr.w	r3, r3, r2
    a4e4:	fa21 f004 	lsr.w	r0, r1, r4
    a4e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a4ec:	fa21 f204 	lsr.w	r2, r1, r4
    a4f0:	ea20 0002 	bic.w	r0, r0, r2
    a4f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    a4f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a4fc:	bf08      	it	eq
    a4fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a502:	bd70      	pop	{r4, r5, r6, pc}
    a504:	f094 0f00 	teq	r4, #0
    a508:	d10f      	bne.n	a52a <__aeabi_dmul+0x1c2>
    a50a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    a50e:	0040      	lsls	r0, r0, #1
    a510:	eb41 0101 	adc.w	r1, r1, r1
    a514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a518:	bf08      	it	eq
    a51a:	3c01      	subeq	r4, #1
    a51c:	d0f7      	beq.n	a50e <__aeabi_dmul+0x1a6>
    a51e:	ea41 0106 	orr.w	r1, r1, r6
    a522:	f095 0f00 	teq	r5, #0
    a526:	bf18      	it	ne
    a528:	4770      	bxne	lr
    a52a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    a52e:	0052      	lsls	r2, r2, #1
    a530:	eb43 0303 	adc.w	r3, r3, r3
    a534:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    a538:	bf08      	it	eq
    a53a:	3d01      	subeq	r5, #1
    a53c:	d0f7      	beq.n	a52e <__aeabi_dmul+0x1c6>
    a53e:	ea43 0306 	orr.w	r3, r3, r6
    a542:	4770      	bx	lr
    a544:	ea94 0f0c 	teq	r4, ip
    a548:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a54c:	bf18      	it	ne
    a54e:	ea95 0f0c 	teqne	r5, ip
    a552:	d00c      	beq.n	a56e <__aeabi_dmul+0x206>
    a554:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a558:	bf18      	it	ne
    a55a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a55e:	d1d1      	bne.n	a504 <__aeabi_dmul+0x19c>
    a560:	ea81 0103 	eor.w	r1, r1, r3
    a564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a568:	f04f 0000 	mov.w	r0, #0
    a56c:	bd70      	pop	{r4, r5, r6, pc}
    a56e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a572:	bf06      	itte	eq
    a574:	4610      	moveq	r0, r2
    a576:	4619      	moveq	r1, r3
    a578:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a57c:	d019      	beq.n	a5b2 <__aeabi_dmul+0x24a>
    a57e:	ea94 0f0c 	teq	r4, ip
    a582:	d102      	bne.n	a58a <__aeabi_dmul+0x222>
    a584:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    a588:	d113      	bne.n	a5b2 <__aeabi_dmul+0x24a>
    a58a:	ea95 0f0c 	teq	r5, ip
    a58e:	d105      	bne.n	a59c <__aeabi_dmul+0x234>
    a590:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    a594:	bf1c      	itt	ne
    a596:	4610      	movne	r0, r2
    a598:	4619      	movne	r1, r3
    a59a:	d10a      	bne.n	a5b2 <__aeabi_dmul+0x24a>
    a59c:	ea81 0103 	eor.w	r1, r1, r3
    a5a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a5a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    a5a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a5ac:	f04f 0000 	mov.w	r0, #0
    a5b0:	bd70      	pop	{r4, r5, r6, pc}
    a5b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    a5b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    a5ba:	bd70      	pop	{r4, r5, r6, pc}

0000a5bc <__aeabi_ddiv>:
    a5bc:	b570      	push	{r4, r5, r6, lr}
    a5be:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a5c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a5c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a5ca:	bf1d      	ittte	ne
    a5cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a5d0:	ea94 0f0c 	teqne	r4, ip
    a5d4:	ea95 0f0c 	teqne	r5, ip
    a5d8:	f000 f8a7 	bleq	a72a <__aeabi_ddiv+0x16e>
    a5dc:	eba4 0405 	sub.w	r4, r4, r5
    a5e0:	ea81 0e03 	eor.w	lr, r1, r3
    a5e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a5e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a5ec:	f000 8088 	beq.w	a700 <__aeabi_ddiv+0x144>
    a5f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a5f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a5f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    a5fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a600:	ea4f 2202 	mov.w	r2, r2, lsl #8
    a604:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    a608:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    a60c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    a610:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    a614:	429d      	cmp	r5, r3
    a616:	bf08      	it	eq
    a618:	4296      	cmpeq	r6, r2
    a61a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    a61e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    a622:	d202      	bcs.n	a62a <__aeabi_ddiv+0x6e>
    a624:	085b      	lsrs	r3, r3, #1
    a626:	ea4f 0232 	mov.w	r2, r2, rrx
    a62a:	1ab6      	subs	r6, r6, r2
    a62c:	eb65 0503 	sbc.w	r5, r5, r3
    a630:	085b      	lsrs	r3, r3, #1
    a632:	ea4f 0232 	mov.w	r2, r2, rrx
    a636:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a63a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    a63e:	ebb6 0e02 	subs.w	lr, r6, r2
    a642:	eb75 0e03 	sbcs.w	lr, r5, r3
    a646:	bf22      	ittt	cs
    a648:	1ab6      	subcs	r6, r6, r2
    a64a:	4675      	movcs	r5, lr
    a64c:	ea40 000c 	orrcs.w	r0, r0, ip
    a650:	085b      	lsrs	r3, r3, #1
    a652:	ea4f 0232 	mov.w	r2, r2, rrx
    a656:	ebb6 0e02 	subs.w	lr, r6, r2
    a65a:	eb75 0e03 	sbcs.w	lr, r5, r3
    a65e:	bf22      	ittt	cs
    a660:	1ab6      	subcs	r6, r6, r2
    a662:	4675      	movcs	r5, lr
    a664:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    a668:	085b      	lsrs	r3, r3, #1
    a66a:	ea4f 0232 	mov.w	r2, r2, rrx
    a66e:	ebb6 0e02 	subs.w	lr, r6, r2
    a672:	eb75 0e03 	sbcs.w	lr, r5, r3
    a676:	bf22      	ittt	cs
    a678:	1ab6      	subcs	r6, r6, r2
    a67a:	4675      	movcs	r5, lr
    a67c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    a680:	085b      	lsrs	r3, r3, #1
    a682:	ea4f 0232 	mov.w	r2, r2, rrx
    a686:	ebb6 0e02 	subs.w	lr, r6, r2
    a68a:	eb75 0e03 	sbcs.w	lr, r5, r3
    a68e:	bf22      	ittt	cs
    a690:	1ab6      	subcs	r6, r6, r2
    a692:	4675      	movcs	r5, lr
    a694:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    a698:	ea55 0e06 	orrs.w	lr, r5, r6
    a69c:	d018      	beq.n	a6d0 <__aeabi_ddiv+0x114>
    a69e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    a6a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    a6a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    a6aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    a6ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    a6b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    a6b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    a6ba:	d1c0      	bne.n	a63e <__aeabi_ddiv+0x82>
    a6bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a6c0:	d10b      	bne.n	a6da <__aeabi_ddiv+0x11e>
    a6c2:	ea41 0100 	orr.w	r1, r1, r0
    a6c6:	f04f 0000 	mov.w	r0, #0
    a6ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    a6ce:	e7b6      	b.n	a63e <__aeabi_ddiv+0x82>
    a6d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a6d4:	bf04      	itt	eq
    a6d6:	4301      	orreq	r1, r0
    a6d8:	2000      	moveq	r0, #0
    a6da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a6de:	bf88      	it	hi
    a6e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a6e4:	f63f aeaf 	bhi.w	a446 <__aeabi_dmul+0xde>
    a6e8:	ebb5 0c03 	subs.w	ip, r5, r3
    a6ec:	bf04      	itt	eq
    a6ee:	ebb6 0c02 	subseq.w	ip, r6, r2
    a6f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a6f6:	f150 0000 	adcs.w	r0, r0, #0
    a6fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a6fe:	bd70      	pop	{r4, r5, r6, pc}
    a700:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    a704:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    a708:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    a70c:	bfc2      	ittt	gt
    a70e:	ebd4 050c 	rsbsgt	r5, r4, ip
    a712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a716:	bd70      	popgt	{r4, r5, r6, pc}
    a718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a71c:	f04f 0e00 	mov.w	lr, #0
    a720:	3c01      	subs	r4, #1
    a722:	e690      	b.n	a446 <__aeabi_dmul+0xde>
    a724:	ea45 0e06 	orr.w	lr, r5, r6
    a728:	e68d      	b.n	a446 <__aeabi_dmul+0xde>
    a72a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a72e:	ea94 0f0c 	teq	r4, ip
    a732:	bf08      	it	eq
    a734:	ea95 0f0c 	teqeq	r5, ip
    a738:	f43f af3b 	beq.w	a5b2 <__aeabi_dmul+0x24a>
    a73c:	ea94 0f0c 	teq	r4, ip
    a740:	d10a      	bne.n	a758 <__aeabi_ddiv+0x19c>
    a742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a746:	f47f af34 	bne.w	a5b2 <__aeabi_dmul+0x24a>
    a74a:	ea95 0f0c 	teq	r5, ip
    a74e:	f47f af25 	bne.w	a59c <__aeabi_dmul+0x234>
    a752:	4610      	mov	r0, r2
    a754:	4619      	mov	r1, r3
    a756:	e72c      	b.n	a5b2 <__aeabi_dmul+0x24a>
    a758:	ea95 0f0c 	teq	r5, ip
    a75c:	d106      	bne.n	a76c <__aeabi_ddiv+0x1b0>
    a75e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a762:	f43f aefd 	beq.w	a560 <__aeabi_dmul+0x1f8>
    a766:	4610      	mov	r0, r2
    a768:	4619      	mov	r1, r3
    a76a:	e722      	b.n	a5b2 <__aeabi_dmul+0x24a>
    a76c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a770:	bf18      	it	ne
    a772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a776:	f47f aec5 	bne.w	a504 <__aeabi_dmul+0x19c>
    a77a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    a77e:	f47f af0d 	bne.w	a59c <__aeabi_dmul+0x234>
    a782:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    a786:	f47f aeeb 	bne.w	a560 <__aeabi_dmul+0x1f8>
    a78a:	e712      	b.n	a5b2 <__aeabi_dmul+0x24a>

0000a78c <__aeabi_d2uiz>:
    a78c:	004a      	lsls	r2, r1, #1
    a78e:	d211      	bcs.n	a7b4 <__aeabi_d2uiz+0x28>
    a790:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    a794:	d211      	bcs.n	a7ba <__aeabi_d2uiz+0x2e>
    a796:	d50d      	bpl.n	a7b4 <__aeabi_d2uiz+0x28>
    a798:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    a79c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    a7a0:	d40e      	bmi.n	a7c0 <__aeabi_d2uiz+0x34>
    a7a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a7a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a7aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    a7ae:	fa23 f002 	lsr.w	r0, r3, r2
    a7b2:	4770      	bx	lr
    a7b4:	f04f 0000 	mov.w	r0, #0
    a7b8:	4770      	bx	lr
    a7ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    a7be:	d102      	bne.n	a7c6 <__aeabi_d2uiz+0x3a>
    a7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a7c4:	4770      	bx	lr
    a7c6:	f04f 0000 	mov.w	r0, #0
    a7ca:	4770      	bx	lr

0000a7cc <__aeabi_uldivmod>:
    a7cc:	b953      	cbnz	r3, a7e4 <__aeabi_uldivmod+0x18>
    a7ce:	b94a      	cbnz	r2, a7e4 <__aeabi_uldivmod+0x18>
    a7d0:	2900      	cmp	r1, #0
    a7d2:	bf08      	it	eq
    a7d4:	2800      	cmpeq	r0, #0
    a7d6:	bf1c      	itt	ne
    a7d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    a7dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a7e0:	f000 b97a 	b.w	aad8 <__aeabi_idiv0>
    a7e4:	f1ad 0c08 	sub.w	ip, sp, #8
    a7e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    a7ec:	f000 f806 	bl	a7fc <__udivmoddi4>
    a7f0:	f8dd e004 	ldr.w	lr, [sp, #4]
    a7f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a7f8:	b004      	add	sp, #16
    a7fa:	4770      	bx	lr

0000a7fc <__udivmoddi4>:
    a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a800:	468c      	mov	ip, r1
    a802:	460e      	mov	r6, r1
    a804:	4604      	mov	r4, r0
    a806:	9d08      	ldr	r5, [sp, #32]
    a808:	2b00      	cmp	r3, #0
    a80a:	d150      	bne.n	a8ae <__udivmoddi4+0xb2>
    a80c:	428a      	cmp	r2, r1
    a80e:	4617      	mov	r7, r2
    a810:	d96c      	bls.n	a8ec <__udivmoddi4+0xf0>
    a812:	fab2 fe82 	clz	lr, r2
    a816:	f1be 0f00 	cmp.w	lr, #0
    a81a:	d00b      	beq.n	a834 <__udivmoddi4+0x38>
    a81c:	f1ce 0c20 	rsb	ip, lr, #32
    a820:	fa01 f60e 	lsl.w	r6, r1, lr
    a824:	fa20 fc0c 	lsr.w	ip, r0, ip
    a828:	fa02 f70e 	lsl.w	r7, r2, lr
    a82c:	ea4c 0c06 	orr.w	ip, ip, r6
    a830:	fa00 f40e 	lsl.w	r4, r0, lr
    a834:	0c3a      	lsrs	r2, r7, #16
    a836:	fbbc f9f2 	udiv	r9, ip, r2
    a83a:	b2bb      	uxth	r3, r7
    a83c:	fb02 cc19 	mls	ip, r2, r9, ip
    a840:	fb09 fa03 	mul.w	sl, r9, r3
    a844:	ea4f 4814 	mov.w	r8, r4, lsr #16
    a848:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
    a84c:	45b2      	cmp	sl, r6
    a84e:	d90a      	bls.n	a866 <__udivmoddi4+0x6a>
    a850:	19f6      	adds	r6, r6, r7
    a852:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    a856:	f080 8125 	bcs.w	aaa4 <__udivmoddi4+0x2a8>
    a85a:	45b2      	cmp	sl, r6
    a85c:	f240 8122 	bls.w	aaa4 <__udivmoddi4+0x2a8>
    a860:	f1a9 0902 	sub.w	r9, r9, #2
    a864:	443e      	add	r6, r7
    a866:	eba6 060a 	sub.w	r6, r6, sl
    a86a:	fbb6 f0f2 	udiv	r0, r6, r2
    a86e:	fb02 6610 	mls	r6, r2, r0, r6
    a872:	fb00 f303 	mul.w	r3, r0, r3
    a876:	b2a4      	uxth	r4, r4
    a878:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    a87c:	42a3      	cmp	r3, r4
    a87e:	d909      	bls.n	a894 <__udivmoddi4+0x98>
    a880:	19e4      	adds	r4, r4, r7
    a882:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    a886:	f080 810b 	bcs.w	aaa0 <__udivmoddi4+0x2a4>
    a88a:	42a3      	cmp	r3, r4
    a88c:	f240 8108 	bls.w	aaa0 <__udivmoddi4+0x2a4>
    a890:	3802      	subs	r0, #2
    a892:	443c      	add	r4, r7
    a894:	2100      	movs	r1, #0
    a896:	1ae4      	subs	r4, r4, r3
    a898:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    a89c:	2d00      	cmp	r5, #0
    a89e:	d062      	beq.n	a966 <__udivmoddi4+0x16a>
    a8a0:	2300      	movs	r3, #0
    a8a2:	fa24 f40e 	lsr.w	r4, r4, lr
    a8a6:	602c      	str	r4, [r5, #0]
    a8a8:	606b      	str	r3, [r5, #4]
    a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8ae:	428b      	cmp	r3, r1
    a8b0:	d907      	bls.n	a8c2 <__udivmoddi4+0xc6>
    a8b2:	2d00      	cmp	r5, #0
    a8b4:	d055      	beq.n	a962 <__udivmoddi4+0x166>
    a8b6:	2100      	movs	r1, #0
    a8b8:	e885 0041 	stmia.w	r5, {r0, r6}
    a8bc:	4608      	mov	r0, r1
    a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8c2:	fab3 f183 	clz	r1, r3
    a8c6:	2900      	cmp	r1, #0
    a8c8:	f040 808f 	bne.w	a9ea <__udivmoddi4+0x1ee>
    a8cc:	42b3      	cmp	r3, r6
    a8ce:	d302      	bcc.n	a8d6 <__udivmoddi4+0xda>
    a8d0:	4282      	cmp	r2, r0
    a8d2:	f200 80fc 	bhi.w	aace <__udivmoddi4+0x2d2>
    a8d6:	1a84      	subs	r4, r0, r2
    a8d8:	eb66 0603 	sbc.w	r6, r6, r3
    a8dc:	2001      	movs	r0, #1
    a8de:	46b4      	mov	ip, r6
    a8e0:	2d00      	cmp	r5, #0
    a8e2:	d040      	beq.n	a966 <__udivmoddi4+0x16a>
    a8e4:	e885 1010 	stmia.w	r5, {r4, ip}
    a8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8ec:	b912      	cbnz	r2, a8f4 <__udivmoddi4+0xf8>
    a8ee:	2701      	movs	r7, #1
    a8f0:	fbb7 f7f2 	udiv	r7, r7, r2
    a8f4:	fab7 fe87 	clz	lr, r7
    a8f8:	f1be 0f00 	cmp.w	lr, #0
    a8fc:	d135      	bne.n	a96a <__udivmoddi4+0x16e>
    a8fe:	2101      	movs	r1, #1
    a900:	1bf6      	subs	r6, r6, r7
    a902:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    a906:	fa1f f887 	uxth.w	r8, r7
    a90a:	fbb6 f2fc 	udiv	r2, r6, ip
    a90e:	fb0c 6612 	mls	r6, ip, r2, r6
    a912:	fb08 f002 	mul.w	r0, r8, r2
    a916:	0c23      	lsrs	r3, r4, #16
    a918:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
    a91c:	42b0      	cmp	r0, r6
    a91e:	d907      	bls.n	a930 <__udivmoddi4+0x134>
    a920:	19f6      	adds	r6, r6, r7
    a922:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    a926:	d202      	bcs.n	a92e <__udivmoddi4+0x132>
    a928:	42b0      	cmp	r0, r6
    a92a:	f200 80d2 	bhi.w	aad2 <__udivmoddi4+0x2d6>
    a92e:	461a      	mov	r2, r3
    a930:	1a36      	subs	r6, r6, r0
    a932:	fbb6 f0fc 	udiv	r0, r6, ip
    a936:	fb0c 6610 	mls	r6, ip, r0, r6
    a93a:	fb08 f800 	mul.w	r8, r8, r0
    a93e:	b2a3      	uxth	r3, r4
    a940:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
    a944:	45a0      	cmp	r8, r4
    a946:	d907      	bls.n	a958 <__udivmoddi4+0x15c>
    a948:	19e4      	adds	r4, r4, r7
    a94a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a94e:	d202      	bcs.n	a956 <__udivmoddi4+0x15a>
    a950:	45a0      	cmp	r8, r4
    a952:	f200 80b9 	bhi.w	aac8 <__udivmoddi4+0x2cc>
    a956:	4618      	mov	r0, r3
    a958:	eba4 0408 	sub.w	r4, r4, r8
    a95c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    a960:	e79c      	b.n	a89c <__udivmoddi4+0xa0>
    a962:	4629      	mov	r1, r5
    a964:	4628      	mov	r0, r5
    a966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a96a:	fa07 f70e 	lsl.w	r7, r7, lr
    a96e:	f1ce 0320 	rsb	r3, lr, #32
    a972:	fa26 f203 	lsr.w	r2, r6, r3
    a976:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    a97a:	fbb2 f1fc 	udiv	r1, r2, ip
    a97e:	fa1f f887 	uxth.w	r8, r7
    a982:	fb0c 2211 	mls	r2, ip, r1, r2
    a986:	fa06 f60e 	lsl.w	r6, r6, lr
    a98a:	fa20 f303 	lsr.w	r3, r0, r3
    a98e:	fb01 f908 	mul.w	r9, r1, r8
    a992:	4333      	orrs	r3, r6
    a994:	0c1e      	lsrs	r6, r3, #16
    a996:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    a99a:	45b1      	cmp	r9, r6
    a99c:	fa00 f40e 	lsl.w	r4, r0, lr
    a9a0:	d909      	bls.n	a9b6 <__udivmoddi4+0x1ba>
    a9a2:	19f6      	adds	r6, r6, r7
    a9a4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    a9a8:	f080 808c 	bcs.w	aac4 <__udivmoddi4+0x2c8>
    a9ac:	45b1      	cmp	r9, r6
    a9ae:	f240 8089 	bls.w	aac4 <__udivmoddi4+0x2c8>
    a9b2:	3902      	subs	r1, #2
    a9b4:	443e      	add	r6, r7
    a9b6:	eba6 0609 	sub.w	r6, r6, r9
    a9ba:	fbb6 f0fc 	udiv	r0, r6, ip
    a9be:	fb0c 6210 	mls	r2, ip, r0, r6
    a9c2:	fb00 f908 	mul.w	r9, r0, r8
    a9c6:	b29e      	uxth	r6, r3
    a9c8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    a9cc:	45b1      	cmp	r9, r6
    a9ce:	d907      	bls.n	a9e0 <__udivmoddi4+0x1e4>
    a9d0:	19f6      	adds	r6, r6, r7
    a9d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a9d6:	d271      	bcs.n	aabc <__udivmoddi4+0x2c0>
    a9d8:	45b1      	cmp	r9, r6
    a9da:	d96f      	bls.n	aabc <__udivmoddi4+0x2c0>
    a9dc:	3802      	subs	r0, #2
    a9de:	443e      	add	r6, r7
    a9e0:	eba6 0609 	sub.w	r6, r6, r9
    a9e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    a9e8:	e78f      	b.n	a90a <__udivmoddi4+0x10e>
    a9ea:	f1c1 0720 	rsb	r7, r1, #32
    a9ee:	fa22 f807 	lsr.w	r8, r2, r7
    a9f2:	408b      	lsls	r3, r1
    a9f4:	ea48 0303 	orr.w	r3, r8, r3
    a9f8:	fa26 f407 	lsr.w	r4, r6, r7
    a9fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    aa00:	fbb4 f9fe 	udiv	r9, r4, lr
    aa04:	fa1f fc83 	uxth.w	ip, r3
    aa08:	fb0e 4419 	mls	r4, lr, r9, r4
    aa0c:	408e      	lsls	r6, r1
    aa0e:	fa20 f807 	lsr.w	r8, r0, r7
    aa12:	fb09 fa0c 	mul.w	sl, r9, ip
    aa16:	ea48 0806 	orr.w	r8, r8, r6
    aa1a:	ea4f 4618 	mov.w	r6, r8, lsr #16
    aa1e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
    aa22:	45a2      	cmp	sl, r4
    aa24:	fa02 f201 	lsl.w	r2, r2, r1
    aa28:	fa00 f601 	lsl.w	r6, r0, r1
    aa2c:	d908      	bls.n	aa40 <__udivmoddi4+0x244>
    aa2e:	18e4      	adds	r4, r4, r3
    aa30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    aa34:	d244      	bcs.n	aac0 <__udivmoddi4+0x2c4>
    aa36:	45a2      	cmp	sl, r4
    aa38:	d942      	bls.n	aac0 <__udivmoddi4+0x2c4>
    aa3a:	f1a9 0902 	sub.w	r9, r9, #2
    aa3e:	441c      	add	r4, r3
    aa40:	eba4 040a 	sub.w	r4, r4, sl
    aa44:	fbb4 f0fe 	udiv	r0, r4, lr
    aa48:	fb0e 4410 	mls	r4, lr, r0, r4
    aa4c:	fb00 fc0c 	mul.w	ip, r0, ip
    aa50:	fa1f f888 	uxth.w	r8, r8
    aa54:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
    aa58:	45a4      	cmp	ip, r4
    aa5a:	d907      	bls.n	aa6c <__udivmoddi4+0x270>
    aa5c:	18e4      	adds	r4, r4, r3
    aa5e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    aa62:	d229      	bcs.n	aab8 <__udivmoddi4+0x2bc>
    aa64:	45a4      	cmp	ip, r4
    aa66:	d927      	bls.n	aab8 <__udivmoddi4+0x2bc>
    aa68:	3802      	subs	r0, #2
    aa6a:	441c      	add	r4, r3
    aa6c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    aa70:	fba0 8902 	umull	r8, r9, r0, r2
    aa74:	eba4 0c0c 	sub.w	ip, r4, ip
    aa78:	45cc      	cmp	ip, r9
    aa7a:	46c2      	mov	sl, r8
    aa7c:	46ce      	mov	lr, r9
    aa7e:	d315      	bcc.n	aaac <__udivmoddi4+0x2b0>
    aa80:	d012      	beq.n	aaa8 <__udivmoddi4+0x2ac>
    aa82:	b155      	cbz	r5, aa9a <__udivmoddi4+0x29e>
    aa84:	ebb6 030a 	subs.w	r3, r6, sl
    aa88:	eb6c 060e 	sbc.w	r6, ip, lr
    aa8c:	fa06 f707 	lsl.w	r7, r6, r7
    aa90:	40cb      	lsrs	r3, r1
    aa92:	431f      	orrs	r7, r3
    aa94:	40ce      	lsrs	r6, r1
    aa96:	602f      	str	r7, [r5, #0]
    aa98:	606e      	str	r6, [r5, #4]
    aa9a:	2100      	movs	r1, #0
    aa9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aaa0:	4610      	mov	r0, r2
    aaa2:	e6f7      	b.n	a894 <__udivmoddi4+0x98>
    aaa4:	4689      	mov	r9, r1
    aaa6:	e6de      	b.n	a866 <__udivmoddi4+0x6a>
    aaa8:	4546      	cmp	r6, r8
    aaaa:	d2ea      	bcs.n	aa82 <__udivmoddi4+0x286>
    aaac:	ebb8 0a02 	subs.w	sl, r8, r2
    aab0:	eb69 0e03 	sbc.w	lr, r9, r3
    aab4:	3801      	subs	r0, #1
    aab6:	e7e4      	b.n	aa82 <__udivmoddi4+0x286>
    aab8:	4670      	mov	r0, lr
    aaba:	e7d7      	b.n	aa6c <__udivmoddi4+0x270>
    aabc:	4618      	mov	r0, r3
    aabe:	e78f      	b.n	a9e0 <__udivmoddi4+0x1e4>
    aac0:	4681      	mov	r9, r0
    aac2:	e7bd      	b.n	aa40 <__udivmoddi4+0x244>
    aac4:	4611      	mov	r1, r2
    aac6:	e776      	b.n	a9b6 <__udivmoddi4+0x1ba>
    aac8:	3802      	subs	r0, #2
    aaca:	443c      	add	r4, r7
    aacc:	e744      	b.n	a958 <__udivmoddi4+0x15c>
    aace:	4608      	mov	r0, r1
    aad0:	e706      	b.n	a8e0 <__udivmoddi4+0xe4>
    aad2:	3a02      	subs	r2, #2
    aad4:	443e      	add	r6, r7
    aad6:	e72b      	b.n	a930 <__udivmoddi4+0x134>

0000aad8 <__aeabi_idiv0>:
    aad8:	4770      	bx	lr
    aada:	bf00      	nop

0000aadc <abs>:
    aadc:	2800      	cmp	r0, #0
    aade:	bfb8      	it	lt
    aae0:	4240      	neglt	r0, r0
    aae2:	4770      	bx	lr

0000aae4 <memcpy>:
    aae4:	4684      	mov	ip, r0
    aae6:	ea41 0300 	orr.w	r3, r1, r0
    aaea:	f013 0303 	ands.w	r3, r3, #3
    aaee:	d149      	bne.n	ab84 <memcpy+0xa0>
    aaf0:	3a40      	subs	r2, #64	; 0x40
    aaf2:	d323      	bcc.n	ab3c <memcpy+0x58>
    aaf4:	680b      	ldr	r3, [r1, #0]
    aaf6:	6003      	str	r3, [r0, #0]
    aaf8:	684b      	ldr	r3, [r1, #4]
    aafa:	6043      	str	r3, [r0, #4]
    aafc:	688b      	ldr	r3, [r1, #8]
    aafe:	6083      	str	r3, [r0, #8]
    ab00:	68cb      	ldr	r3, [r1, #12]
    ab02:	60c3      	str	r3, [r0, #12]
    ab04:	690b      	ldr	r3, [r1, #16]
    ab06:	6103      	str	r3, [r0, #16]
    ab08:	694b      	ldr	r3, [r1, #20]
    ab0a:	6143      	str	r3, [r0, #20]
    ab0c:	698b      	ldr	r3, [r1, #24]
    ab0e:	6183      	str	r3, [r0, #24]
    ab10:	69cb      	ldr	r3, [r1, #28]
    ab12:	61c3      	str	r3, [r0, #28]
    ab14:	6a0b      	ldr	r3, [r1, #32]
    ab16:	6203      	str	r3, [r0, #32]
    ab18:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ab1a:	6243      	str	r3, [r0, #36]	; 0x24
    ab1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ab1e:	6283      	str	r3, [r0, #40]	; 0x28
    ab20:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    ab22:	62c3      	str	r3, [r0, #44]	; 0x2c
    ab24:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    ab26:	6303      	str	r3, [r0, #48]	; 0x30
    ab28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    ab2a:	6343      	str	r3, [r0, #52]	; 0x34
    ab2c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    ab2e:	6383      	str	r3, [r0, #56]	; 0x38
    ab30:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    ab32:	63c3      	str	r3, [r0, #60]	; 0x3c
    ab34:	3040      	adds	r0, #64	; 0x40
    ab36:	3140      	adds	r1, #64	; 0x40
    ab38:	3a40      	subs	r2, #64	; 0x40
    ab3a:	d2db      	bcs.n	aaf4 <memcpy+0x10>
    ab3c:	3230      	adds	r2, #48	; 0x30
    ab3e:	d30b      	bcc.n	ab58 <memcpy+0x74>
    ab40:	680b      	ldr	r3, [r1, #0]
    ab42:	6003      	str	r3, [r0, #0]
    ab44:	684b      	ldr	r3, [r1, #4]
    ab46:	6043      	str	r3, [r0, #4]
    ab48:	688b      	ldr	r3, [r1, #8]
    ab4a:	6083      	str	r3, [r0, #8]
    ab4c:	68cb      	ldr	r3, [r1, #12]
    ab4e:	60c3      	str	r3, [r0, #12]
    ab50:	3010      	adds	r0, #16
    ab52:	3110      	adds	r1, #16
    ab54:	3a10      	subs	r2, #16
    ab56:	d2f3      	bcs.n	ab40 <memcpy+0x5c>
    ab58:	320c      	adds	r2, #12
    ab5a:	d305      	bcc.n	ab68 <memcpy+0x84>
    ab5c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab60:	f840 3b04 	str.w	r3, [r0], #4
    ab64:	3a04      	subs	r2, #4
    ab66:	d2f9      	bcs.n	ab5c <memcpy+0x78>
    ab68:	3204      	adds	r2, #4
    ab6a:	d008      	beq.n	ab7e <memcpy+0x9a>
    ab6c:	07d2      	lsls	r2, r2, #31
    ab6e:	bf1c      	itt	ne
    ab70:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ab74:	f800 3b01 	strbne.w	r3, [r0], #1
    ab78:	d301      	bcc.n	ab7e <memcpy+0x9a>
    ab7a:	880b      	ldrh	r3, [r1, #0]
    ab7c:	8003      	strh	r3, [r0, #0]
    ab7e:	4660      	mov	r0, ip
    ab80:	4770      	bx	lr
    ab82:	bf00      	nop
    ab84:	2a08      	cmp	r2, #8
    ab86:	d313      	bcc.n	abb0 <memcpy+0xcc>
    ab88:	078b      	lsls	r3, r1, #30
    ab8a:	d0b1      	beq.n	aaf0 <memcpy+0xc>
    ab8c:	f010 0303 	ands.w	r3, r0, #3
    ab90:	d0ae      	beq.n	aaf0 <memcpy+0xc>
    ab92:	f1c3 0304 	rsb	r3, r3, #4
    ab96:	1ad2      	subs	r2, r2, r3
    ab98:	07db      	lsls	r3, r3, #31
    ab9a:	bf1c      	itt	ne
    ab9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    aba0:	f800 3b01 	strbne.w	r3, [r0], #1
    aba4:	d3a4      	bcc.n	aaf0 <memcpy+0xc>
    aba6:	f831 3b02 	ldrh.w	r3, [r1], #2
    abaa:	f820 3b02 	strh.w	r3, [r0], #2
    abae:	e79f      	b.n	aaf0 <memcpy+0xc>
    abb0:	3a04      	subs	r2, #4
    abb2:	d3d9      	bcc.n	ab68 <memcpy+0x84>
    abb4:	3a01      	subs	r2, #1
    abb6:	f811 3b01 	ldrb.w	r3, [r1], #1
    abba:	f800 3b01 	strb.w	r3, [r0], #1
    abbe:	d2f9      	bcs.n	abb4 <memcpy+0xd0>
    abc0:	780b      	ldrb	r3, [r1, #0]
    abc2:	7003      	strb	r3, [r0, #0]
    abc4:	784b      	ldrb	r3, [r1, #1]
    abc6:	7043      	strb	r3, [r0, #1]
    abc8:	788b      	ldrb	r3, [r1, #2]
    abca:	7083      	strb	r3, [r0, #2]
    abcc:	4660      	mov	r0, ip
    abce:	4770      	bx	lr

0000abd0 <strlen>:
    abd0:	f020 0103 	bic.w	r1, r0, #3
    abd4:	f010 0003 	ands.w	r0, r0, #3
    abd8:	f1c0 0000 	rsb	r0, r0, #0
    abdc:	f851 3b04 	ldr.w	r3, [r1], #4
    abe0:	f100 0c04 	add.w	ip, r0, #4
    abe4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    abe8:	f06f 0200 	mvn.w	r2, #0
    abec:	bf1c      	itt	ne
    abee:	fa22 f20c 	lsrne.w	r2, r2, ip
    abf2:	4313      	orrne	r3, r2
    abf4:	f04f 0c01 	mov.w	ip, #1
    abf8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    abfc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    ac00:	eba3 020c 	sub.w	r2, r3, ip
    ac04:	ea22 0203 	bic.w	r2, r2, r3
    ac08:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    ac0c:	bf04      	itt	eq
    ac0e:	f851 3b04 	ldreq.w	r3, [r1], #4
    ac12:	3004      	addeq	r0, #4
    ac14:	d0f4      	beq.n	ac00 <strlen+0x30>
    ac16:	f1c2 0100 	rsb	r1, r2, #0
    ac1a:	ea02 0201 	and.w	r2, r2, r1
    ac1e:	fab2 f282 	clz	r2, r2
    ac22:	f1c2 021f 	rsb	r2, r2, #31
    ac26:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ac2a:	4770      	bx	lr

0000ac2c <_global_impure_ptr>:
    ac2c:	0028 1000 0043 0000                         (...C...

0000ac34 <whitening_index>:
    ac34:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    ac44:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    ac54:	1b28 5a54 703f 662f                         (.TZ?p/f

0000ac5c <whitening>:
    ac5c:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    ac6c:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    ac7c:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    ac8c:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    ac9c:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    acac:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    acbc:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    accc:	0001 0101 0000 0100 0100 0000 0001 7501          ...............

0000acdb <compile_info>:
    acdb:	6275 7265 6f74 746f 2068 6967 2d74 2820     ubertooth git- (
    aceb:	616c 2d62 6370 312d 6c40 6261 6370 2d31     lab-pc-1@labpc1-
    acfb:	7250 6365 7369 6f69 2d6e 3633 3033 542d     Precision-3630-T
    ad0b:	776f 7265 2029 7246 2069 614d 2079 3120     ower) Fri May  1
    ad1b:	3120 3a38 3735 303a 2036 4443 2054 3032      18:57:06 CDT 20
    ad2b:	3032 0000 4000                                   20...

0000ad30 <whitening_word>:
    ad30:	b240 c3bc 371f 5f4a f685 9a9c d6c1 44c5     @....7J_.......D
    ad40:	5920 e1de 1b8f afa5 7b42 cd4e eb60 2262      Y......B{N.`.b"
    ad50:	2c90 f0ef 8dc7 57d2 3da1 66a7 75b0 1131     .,.....W.=.f.u1.
    ad60:	4089 bcb2 1fc3 4a37 855f 9cf6 c19a c5d6     .@....7J_.......
    ad70:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    ad80:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    ad90:	57d2 3da1 66a7 75b0 1131 9648 f877 46e3     .W.=.f.u1.H.w..F
    ada0:	abe9 9ed0 3353 bad8 0898 cb24 fc3b a371     ....S3....$.;.q.
    adb0:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    adc0:	a51b 42af 4e7b 60cd 62eb 9022 ef2c c7f0     ...B{N.`.b".,...
    add0:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    ade0:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    adf0:	7964 3f87 946e 0abe 39ed 8335 8bad 4089     dy.?n....95....@
    ae00:	bcb2 1fc3 4a37 855f 9cf6 c19a c5d6 2044     ....7J_.......D 
    ae10:	de59 8fe1 a51b 42af 4e7b 60cd 62eb 9022     Y......B{N.`.b".
    ae20:	8bad 4089 bcb2 1fc3 4a37 855f 9cf6 c19a     ...@....7J_.....
    ae30:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    ae40:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    ae50:	9cf6 c19a c5d6 2044 de59 8fe1 a51b 42af     ......D Y......B
    ae60:	4e7b 60cd 62eb 9022 ef2c c7f0 d28d a157     {N.`.b".,.....W.
    ae70:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    ae80:	6e3f be94 ed0a 3539 ad83 898b b240 c3bc     ?n....95....@...
    ae90:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    aea0:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    aeb0:	2408 3bcb 71fc f4a3 6855 a9cf 6c19 4c5d     .$.;.q..Uh...l]L
    aec0:	9204 1de5 b8fe fa51 b42a d4e7 b60c 262e     ......Q.*......&
    aed0:	c902 0ef2 dc7f 7d28 da15 6a73 5b06 1317     ......(}..sj.[..
    aee0:	d6c1 44c5 5920 e1de 1b8f afa5 7b42 cd4e     ...D Y......B{N.
    aef0:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    af00:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    af10:	c19a c5d6 2044 de59 8fe1 a51b 42af 4e7b     ....D Y......B{N
    af20:	60cd 62eb 9022 ef2c c7f0 d28d a157 a73d     .`.b".,.....W.=.
    af30:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    af40:	3353 bad8 0898 cb24 fc3b a371 55f4 cf68     S3....$.;.q..Uh.
    af50:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    af60:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    af70:	ef2c c7f0 d28d a157 a73d b066 3175 4811     ,.....W.=.f.u1.H
    af80:	7796 e3f8 e946 d0ab 539e d833 98ba 2408     .w..F....S3....$
    af90:	3bcb 71fc f4a3 6855 a9cf 6c19 4c5d 9204     .;.q..Uh...l]L..
    afa0:	1de5 b8fe fa51 b42a d4e7 b60c 262e c902     ....Q.*......&..
    afb0:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    afc0:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    afd0:	0abe 39ed 8335 8bad 4089 bcb2 1fc3 4a37     ...95....@....7J
    afe0:	855f 9cf6 c19a c5d6 2044 de59 8fe1 a51b     _.......D Y.....
    aff0:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    b000:	f877 46e3 abe9 9ed0 3353 bad8 0898 cb24     w..F....S3....$.
    b010:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    b020:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    b030:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    b040:	cf68 19a9 5d6c 044c e592 fe1d 51b8 2afa     h...l]L......Q.*
    b050:	e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc 157d     ......&......(}.
    b060:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    b070:	b60c 262e c902 0ef2 dc7f 7d28 da15 6a73     ...&......(}..sj
    b080:	5b06 1317 6481 8779 6e3f be94 ed0a 3539     .[...dy.?n....95
    b090:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b0a0:	3da1 66a7 75b0 1131 9648 f877 46e3 abe9     .=.f.u1.H.w..F..
    b0b0:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    b0c0:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b0d0:	44c5 5920 e1de 1b8f afa5 7b42 cd4e eb60     .D Y......B{N.`.
    b0e0:	2262 2c90 f0ef 8dc7 57d2 3da1 66a7 75b0     b".,.....W.=.f.u
    b0f0:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    b100:	2afa e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc     .*......&......(
    b110:	157d 73da 066a 175b 8113 7964 3f87 946e     }..sj.[...dy.?n.
    b120:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    b130:	539e d833 98ba 2408 3bcb 71fc f4a3 6855     .S3....$.;.q..Uh
    b140:	a9cf 6c19 4c5d 9204 1de5 b8fe fa51 b42a     ...l]L......Q.*.
    b150:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    b160:	d833 98ba 2408 3bcb 71fc f4a3 6855 a9cf     3....$.;.q..Uh..
    b170:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    b180:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    b190:	a157 a73d b066 3175 4811 7796 e3f8 e946     W.=.f.u1.H.w..F.
    b1a0:	d0ab 539e d833 98ba 2408 3bcb 71fc f4a3     ...S3....$.;.q..
    b1b0:	0898 cb24 fc3b a371 55f4 cf68 19a9 5d6c     ..$.;.q..Uh...l]
    b1c0:	044c e592 fe1d 51b8 2afa e7b4 0cd4 2eb6     L......Q.*......
    b1d0:	0226 f2c9 7f0e 28dc 157d 73da 066a 175b     &......(}..sj.[.
    b1e0:	fa51 b42a d4e7 b60c 262e c902 0ef2 dc7f     Q.*......&......
    b1f0:	7d28 da15 6a73 5b06 1317 6481 8779 6e3f     (}..sj.[...dy.?n
    b200:	be94 ed0a 3539 ad83 898b b240 c3bc 371f     ....95....@....7
    b210:	ed0a 3539 ad83 898b b240 c3bc 371f 5f4a     ..95....@....7J_
    b220:	f685 9a9c d6c1 44c5 5920 e1de 1b8f afa5     .......D Y......
    b230:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b240:	1fc3 4a37 855f 9cf6 c19a c5d6 2044 de59     ..7J_.......D Y.
    b250:	8fe1 a51b 42af 4e7b 60cd 62eb 9022 ef2c     .....B{N.`.b".,.
    b260:	c7f0 d28d a157 a73d b066 3175 4811 7796     ....W.=.f.u1.H.w
    b270:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b280:	e1de 1b8f afa5 7b42 cd4e eb60 2262 2c90     ......B{N.`.b".,
    b290:	f0ef 8dc7 57d2 3da1 66a7 75b0 1131 9648     .....W.=.f.u1.H.
    b2a0:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b2b0:	98ba 2408 3bcb 71fc f4a3 6855 a9cf 6c19     ...$.;.q..Uh...l
    b2c0:	4c5d 9204 1de5 b8fe fa51 b42a d4e7 b60c     ]L......Q.*.....
    b2d0:	262e c902 0ef2 dc7f 7d28 da15 6a73 5b06     .&......(}..sj.[
    b2e0:	1317 6481 8779 6e3f be94 ed0a 3539 ad83     ...dy.?n....95..
    b2f0:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b300:	d4e7 b60c 262e c902 0ef2 dc7f 7d28 da15     .....&......(}..
    b310:	6a73 5b06 1317 6481 8779 6e3f be94 ed0a     sj.[...dy.?n....
    b320:	3539 ad83 898b b240 c3bc 371f 5f4a f685     95....@....7J_..
    b330:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    b340:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    b350:	bad8 0898 cb24 fc3b a371 55f4 cf68 19a9     ....$.;.q..Uh...
    b360:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    b370:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    b380:	066a 175b 8113 7964 3f87 946e 0abe 39ed     j.[...dy.?n....9
    b390:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    b3a0:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    b3b0:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b3c0:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    b3d0:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    b3e0:	7f0e 28dc 157d 73da 066a 175b 8113 7964     ...(}..sj.[...dy
    b3f0:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    b400:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    b410:	4811 7796 e3f8 e946 d0ab 539e d833 98ba     .H.w..F....S3...
    b420:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    b430:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    b440:	f4a3 6855 a9cf 6c19 4c5d 9204 1de5 b8fe     ..Uh...l]L......
    b450:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    b460:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    b470:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b480:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    b490:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    b4a0:	8dc7 57d2 3da1 66a7 75b0 1131 9648 f877     ...W.=.f.u1.H.w.

0000b4b0 <hop_interval_lut>:
    b4b0:	0100 1913 0f1c 101f 210e 1b1a 1422 0508     .........!.."...
    b4c0:	1807 0223 1e0d 1d20 0311 0b0a 1704 0615     ..#... .........
    b4d0:	0916 120c 0024 0000 0001 0000 0001 0000     ....$...........
    b4e0:	0001 0000 0001 0000 1500 5631 50af 00a0     ..........1V.P..
    b4f0:	0102 0706 6309 7061 656c 0364 0003 1180     .....capled.....
    b500:	cbc0 2049 6d61 6920 206e 6263 000a 6967     ..I am in cb..gi
    b510:	2d74 4100 2041 6573 0a74 4800 706f 6920     t-.AA set..Hop i
    b520:	746e 7265 6176 206c 6573 0a74 4800 706f     nterval set..Hop
    b530:	6920 636e 6572 656d 746e 7320 7465 000a      increment set..
    b540:	6e41 6863 726f 203a 6425 000a 6863 6e61     Anchor: %d..chan
    b550:	656e 5f6c 3a61 2520 2c64 2509 0a64 6300     nel_a: %d,.%d..c
    b560:	6168 6e6e 6c65 203a 6425 2509 0a64 0a00     hannel: %d.%d...
    b570:	2a0a 2a2a 552a 4542 5452 4f4f 4854 4220     .****UBERTOOTH B
    b580:	4f4f 2a54 2a2a 0a2a 7325 000a               OOT****.%s..

0000b58c <index1.3944>:
    b58c:	0200 0301 0100 0300 0001 0102 0100          ..............

0000b59a <index2.3945>:
    b59a:	0301 0402 0304 0402 0304 0304 0203 387b     ..............{8
    b5aa:	6361 3734 3861 2d38 6363 3632 342d 6161     ac47a88-cc26-4aa
    b5ba:	2d39 3838 6237 342d 6332 3861 6663 3730     9-887b-42ca8cf07
    b5ca:	3661 7d33 4600                                   a63}.

0000b5cf <whitening_index>:
    b5cf:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    b5df:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    b5ef:	1b28 5a54 703f 662f                         (.TZ?p/f

0000b5f7 <whitening>:
    b5f7:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    b607:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    b617:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    b627:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    b637:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    b647:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    b657:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    b667:	0001 0101 0000 0100 0100 0000 0001 6c01     ...............l
    b677:	5f65 4d44 5f41 5249 4851 6e61 6c64 7265     e_DMA_IRQHandler
    b687:	000a 0000 6800                                   .....

0000b68c <channels>:
    b68c:	0968 0972 0977 09a5                         h.r.w...

0000b694 <follow_handler.4035>:
    b694:	8749 0000 87f9 0000 8769 0000 8951 0000     I.......i...Q...
    b6a4:	8745 0000 8745 0000 8745 0000               E...E...E...

0000b6b0 <continuous_rx_handler.4036>:
    b6b0:	8761 0000 87f9 0000 8a6d 0000 8745 0000     a.......m...E...
    b6c0:	8745 0000 8745 0000                         E...E...

0000b6c8 <jam_handler.4037>:
    b6c8:	8749 0000 87f9 0000 8a09 0000 8991 0000     I...............
    b6d8:	88ad 0000 89b1 0000                         ........

0000b6e0 <iap_entry>:
    b6e0:	1ff1 1fff                                   ....

0000b6e4 <abExtendedOsFeatureDescriptor>:
    b6e4:	0028 0000 0100 0004 0001 0000 0000 0000     (...............
    b6f4:	0100 4957 554e 4253 0000 0000 0000 0000     ..WINUSB........
    b704:	0000 0000 0000 0000                         ........

0000b70c <_init>:
    b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b70e:	bf00      	nop
    b710:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b712:	bc08      	pop	{r3}
    b714:	469e      	mov	lr, r3
    b716:	4770      	bx	lr

0000b718 <__init_array_start>:
    b718:	00004349 	.word	0x00004349

0000b71c <__frame_dummy_init_array_entry>:
    b71c:	00004139                                9A..

0000b720 <_fini>:
    b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b722:	bf00      	nop
    b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b726:	bc08      	pop	{r3}
    b728:	469e      	mov	lr, r3
    b72a:	4770      	bx	lr

0000b72c <__fini_array_start>:
    b72c:	00004111 	.word	0x00004111
