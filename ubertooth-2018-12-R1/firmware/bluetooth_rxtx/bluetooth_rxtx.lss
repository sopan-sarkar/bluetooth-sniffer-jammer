
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d00  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000bd00  0000bd00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         00000a09  10000020  0000bd08  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000033b6  10000a30  0000c711  00010a30  2**3
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a29  2**0
                  CONTENTS, READONLY
  6 .comment      00000031  00000000  00000000  00010a52  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015d1f  00000000  00000000  00010a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004737  00000000  00000000  000267a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007c7c  00000000  00000000  0002aed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ab0  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e70  00000000  00000000  00033608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000410b  00000000  00000000  00038478  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001d64  00000000  00000000  0003c584  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ef0  00000000  00000000  0003e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 41 97 00 00 95 97 00 00 95 97 00 00     .?..A...........
    4010:	95 97 00 00 95 97 00 00 95 97 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 95 97 00 00     ................
    4030:	95 97 00 00 00 00 00 00 95 97 00 00 95 97 00 00     ................
    4040:	95 97 00 00 b5 4e 00 00 35 81 00 00 95 97 00 00     .....N..5.......
    4050:	95 97 00 00 95 97 00 00 95 97 00 00 95 97 00 00     ................
    4060:	95 97 00 00 95 97 00 00 95 97 00 00 95 97 00 00     ................
    4070:	95 97 00 00 95 97 00 00 95 97 00 00 95 97 00 00     ................
    4080:	95 97 00 00 95 97 00 00 95 97 00 00 95 97 00 00     ................
    4090:	95 97 00 00 15 50 00 00 95 97 00 00 95 97 00 00     .....P..........
    40a0:	3d 97 00 00 95 97 00 00 29 51 00 00 95 97 00 00     =.......)Q......
    40b0:	95 97 00 00 95 97 00 00 95 97 00 00 95 97 00 00     ................
    40c0:	95 97 00 00 95 97 00 00 95 97 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	10000a2f 	.word	0x10000a2f
    40e4:	10000a2c 	.word	0x10000a2c
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000a2c 	.word	0x10000a2c
    4108:	10000a2c 	.word	0x10000a2c
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000a30 	.word	0x10000a30
    4130:	00000000 	.word	0x00000000
    4134:	0000bcdc 	.word	0x0000bcdc

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4908      	ldr	r1, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4808      	ldr	r0, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	10000a34 	.word	0x10000a34
    4164:	0000bcdc 	.word	0x0000bcdc
    4168:	10000a2c 	.word	0x10000a2c
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	2300      	movs	r3, #0
    4172:	4601      	mov	r1, r0
    4174:	461a      	mov	r2, r3
    4176:	4618      	mov	r0, r3
    4178:	f000 b890 	b.w	429c <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4c0a      	ldr	r4, [pc, #40]	; (41a8 <__libc_fini_array+0x2c>)
    4180:	4d0a      	ldr	r5, [pc, #40]	; (41ac <__libc_fini_array+0x30>)
    4182:	1b64      	subs	r4, r4, r5
    4184:	10a4      	asrs	r4, r4, #2
    4186:	d00a      	beq.n	419e <__libc_fini_array+0x22>
    4188:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    418c:	3b01      	subs	r3, #1
    418e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4192:	3c01      	subs	r4, #1
    4194:	f855 3904 	ldr.w	r3, [r5], #-4
    4198:	4798      	blx	r3
    419a:	2c00      	cmp	r4, #0
    419c:	d1f9      	bne.n	4192 <__libc_fini_array+0x16>
    419e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41a2:	f007 bda5 	b.w	bcf0 <_fini>
    41a6:	bf00      	nop
    41a8:	0000bd00 	.word	0x0000bd00
    41ac:	0000bcfc 	.word	0x0000bcfc

000041b0 <__libc_init_array>:
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	4e0f      	ldr	r6, [pc, #60]	; (41f0 <__libc_init_array+0x40>)
    41b4:	4d0f      	ldr	r5, [pc, #60]	; (41f4 <__libc_init_array+0x44>)
    41b6:	1b76      	subs	r6, r6, r5
    41b8:	10b6      	asrs	r6, r6, #2
    41ba:	bf18      	it	ne
    41bc:	2400      	movne	r4, #0
    41be:	d005      	beq.n	41cc <__libc_init_array+0x1c>
    41c0:	3401      	adds	r4, #1
    41c2:	f855 3b04 	ldr.w	r3, [r5], #4
    41c6:	4798      	blx	r3
    41c8:	42a6      	cmp	r6, r4
    41ca:	d1f9      	bne.n	41c0 <__libc_init_array+0x10>
    41cc:	4e0a      	ldr	r6, [pc, #40]	; (41f8 <__libc_init_array+0x48>)
    41ce:	4d0b      	ldr	r5, [pc, #44]	; (41fc <__libc_init_array+0x4c>)
    41d0:	f007 fd84 	bl	bcdc <_init>
    41d4:	1b76      	subs	r6, r6, r5
    41d6:	10b6      	asrs	r6, r6, #2
    41d8:	bf18      	it	ne
    41da:	2400      	movne	r4, #0
    41dc:	d006      	beq.n	41ec <__libc_init_array+0x3c>
    41de:	3401      	adds	r4, #1
    41e0:	f855 3b04 	ldr.w	r3, [r5], #4
    41e4:	4798      	blx	r3
    41e6:	42a6      	cmp	r6, r4
    41e8:	d1f9      	bne.n	41de <__libc_init_array+0x2e>
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	bf00      	nop
    41f0:	0000bce8 	.word	0x0000bce8
    41f4:	0000bce8 	.word	0x0000bce8
    41f8:	0000bcf0 	.word	0x0000bcf0
    41fc:	0000bce8 	.word	0x0000bce8

00004200 <memset>:
    4200:	b470      	push	{r4, r5, r6}
    4202:	0786      	lsls	r6, r0, #30
    4204:	d046      	beq.n	4294 <memset+0x94>
    4206:	1e54      	subs	r4, r2, #1
    4208:	2a00      	cmp	r2, #0
    420a:	d041      	beq.n	4290 <memset+0x90>
    420c:	b2ca      	uxtb	r2, r1
    420e:	4603      	mov	r3, r0
    4210:	e002      	b.n	4218 <memset+0x18>
    4212:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    4216:	d33b      	bcc.n	4290 <memset+0x90>
    4218:	f803 2b01 	strb.w	r2, [r3], #1
    421c:	079d      	lsls	r5, r3, #30
    421e:	d1f8      	bne.n	4212 <memset+0x12>
    4220:	2c03      	cmp	r4, #3
    4222:	d92e      	bls.n	4282 <memset+0x82>
    4224:	b2cd      	uxtb	r5, r1
    4226:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    422a:	2c0f      	cmp	r4, #15
    422c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4230:	d919      	bls.n	4266 <memset+0x66>
    4232:	4626      	mov	r6, r4
    4234:	f103 0210 	add.w	r2, r3, #16
    4238:	3e10      	subs	r6, #16
    423a:	2e0f      	cmp	r6, #15
    423c:	f842 5c10 	str.w	r5, [r2, #-16]
    4240:	f842 5c0c 	str.w	r5, [r2, #-12]
    4244:	f842 5c08 	str.w	r5, [r2, #-8]
    4248:	f842 5c04 	str.w	r5, [r2, #-4]
    424c:	f102 0210 	add.w	r2, r2, #16
    4250:	d8f2      	bhi.n	4238 <memset+0x38>
    4252:	f1a4 0210 	sub.w	r2, r4, #16
    4256:	f022 020f 	bic.w	r2, r2, #15
    425a:	f004 040f 	and.w	r4, r4, #15
    425e:	3210      	adds	r2, #16
    4260:	2c03      	cmp	r4, #3
    4262:	4413      	add	r3, r2
    4264:	d90d      	bls.n	4282 <memset+0x82>
    4266:	461e      	mov	r6, r3
    4268:	4622      	mov	r2, r4
    426a:	3a04      	subs	r2, #4
    426c:	2a03      	cmp	r2, #3
    426e:	f846 5b04 	str.w	r5, [r6], #4
    4272:	d8fa      	bhi.n	426a <memset+0x6a>
    4274:	1f22      	subs	r2, r4, #4
    4276:	f022 0203 	bic.w	r2, r2, #3
    427a:	3204      	adds	r2, #4
    427c:	4413      	add	r3, r2
    427e:	f004 0403 	and.w	r4, r4, #3
    4282:	b12c      	cbz	r4, 4290 <memset+0x90>
    4284:	b2c9      	uxtb	r1, r1
    4286:	441c      	add	r4, r3
    4288:	f803 1b01 	strb.w	r1, [r3], #1
    428c:	429c      	cmp	r4, r3
    428e:	d1fb      	bne.n	4288 <memset+0x88>
    4290:	bc70      	pop	{r4, r5, r6}
    4292:	4770      	bx	lr
    4294:	4614      	mov	r4, r2
    4296:	4603      	mov	r3, r0
    4298:	e7c2      	b.n	4220 <memset+0x20>
    429a:	bf00      	nop

0000429c <__register_exitproc>:
    429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a0:	4c27      	ldr	r4, [pc, #156]	; (4340 <__register_exitproc+0xa4>)
    42a2:	4607      	mov	r7, r0
    42a4:	6826      	ldr	r6, [r4, #0]
    42a6:	4688      	mov	r8, r1
    42a8:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42ac:	4692      	mov	sl, r2
    42ae:	4699      	mov	r9, r3
    42b0:	2c00      	cmp	r4, #0
    42b2:	d03c      	beq.n	432e <__register_exitproc+0x92>
    42b4:	6865      	ldr	r5, [r4, #4]
    42b6:	2d1f      	cmp	r5, #31
    42b8:	dc1a      	bgt.n	42f0 <__register_exitproc+0x54>
    42ba:	f105 0e01 	add.w	lr, r5, #1
    42be:	b17f      	cbz	r7, 42e0 <__register_exitproc+0x44>
    42c0:	2001      	movs	r0, #1
    42c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    42c6:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    42ca:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    42ce:	fa00 f205 	lsl.w	r2, r0, r5
    42d2:	4311      	orrs	r1, r2
    42d4:	2f02      	cmp	r7, #2
    42d6:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    42da:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    42de:	d020      	beq.n	4322 <__register_exitproc+0x86>
    42e0:	3502      	adds	r5, #2
    42e2:	f8c4 e004 	str.w	lr, [r4, #4]
    42e6:	2000      	movs	r0, #0
    42e8:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
    42ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42f0:	4b14      	ldr	r3, [pc, #80]	; (4344 <__register_exitproc+0xa8>)
    42f2:	b30b      	cbz	r3, 4338 <__register_exitproc+0x9c>
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	f3af 8000 	nop.w
    42fc:	4604      	mov	r4, r0
    42fe:	b1d8      	cbz	r0, 4338 <__register_exitproc+0x9c>
    4300:	2000      	movs	r0, #0
    4302:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
    4306:	f04f 0e01 	mov.w	lr, #1
    430a:	6060      	str	r0, [r4, #4]
    430c:	6023      	str	r3, [r4, #0]
    430e:	4605      	mov	r5, r0
    4310:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    4314:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4318:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    431c:	2f00      	cmp	r7, #0
    431e:	d0df      	beq.n	42e0 <__register_exitproc+0x44>
    4320:	e7ce      	b.n	42c0 <__register_exitproc+0x24>
    4322:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4326:	431a      	orrs	r2, r3
    4328:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    432c:	e7d8      	b.n	42e0 <__register_exitproc+0x44>
    432e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4332:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    4336:	e7bd      	b.n	42b4 <__register_exitproc+0x18>
    4338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4340:	0000b110 	.word	0x0000b110
    4344:	00000000 	.word	0x00000000

00004348 <register_fini>:
    4348:	4b02      	ldr	r3, [pc, #8]	; (4354 <register_fini+0xc>)
    434a:	b113      	cbz	r3, 4352 <register_fini+0xa>
    434c:	4802      	ldr	r0, [pc, #8]	; (4358 <register_fini+0x10>)
    434e:	f7ff bf0f 	b.w	4170 <atexit>
    4352:	4770      	bx	lr
    4354:	00000000 	.word	0x00000000
    4358:	0000417d 	.word	0x0000417d

0000435c <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    435c:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    435e:	2300      	movs	r3, #0
	uint8_t reversed = 0;
    4360:	461a      	mov	r2, r3
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    4362:	fa40 f103 	asr.w	r1, r0, r3
    4366:	f1c3 0407 	rsb	r4, r3, #7
    436a:	f001 0101 	and.w	r1, r1, #1
    436e:	40a1      	lsls	r1, r4
	for(size_t i=0; i<8; i++)
    4370:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (7-i);
    4372:	430a      	orrs	r2, r1
	for(size_t i=0; i<8; i++)
    4374:	2b08      	cmp	r3, #8
		reversed |= ((data >> i) & 0x01) << (7-i);
    4376:	b2d2      	uxtb	r2, r2
	for(size_t i=0; i<8; i++)
    4378:	d1f3      	bne.n	4362 <reverse8+0x6>
	}

	return reversed;
}
    437a:	4610      	mov	r0, r2
    437c:	bd10      	pop	{r4, pc}
    437e:	0000      	movs	r0, r0

00004380 <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    4380:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    4382:	4c04      	ldr	r4, [pc, #16]	; (4394 <le_set_access_address+0x14>)
    4384:	6020      	str	r0, [r4, #0]
	aa_rev = rbit(aa);
    4386:	f005 fa13 	bl	97b0 <rbit>
	le.syncl = aa_rev & 0xffff;
    438a:	80e0      	strh	r0, [r4, #6]
	le.synch = aa_rev >> 16;
    438c:	0c00      	lsrs	r0, r0, #16
    438e:	80a0      	strh	r0, [r4, #4]
    4390:	bd10      	pop	{r4, pc}
    4392:	bf00      	nop
    4394:	10000450 	.word	0x10000450

00004398 <cc2400_rx>:
{
    4398:	b538      	push	{r3, r4, r5, lr}
	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    439a:	4b26      	ldr	r3, [pc, #152]	; (4434 <cc2400_rx+0x9c>)
    439c:	4c26      	ldr	r4, [pc, #152]	; (4438 <cc2400_rx+0xa0>)
    439e:	781a      	ldrb	r2, [r3, #0]
    43a0:	b112      	cbz	r2, 43a8 <cc2400_rx+0x10>
    43a2:	781a      	ldrb	r2, [r3, #0]
    43a4:	2a01      	cmp	r2, #1
    43a6:	d126      	bne.n	43f6 <cc2400_rx+0x5e>
		if (modulation == MOD_BT_BASIC_RATE) {
    43a8:	781a      	ldrb	r2, [r3, #0]
    43aa:	2a00      	cmp	r2, #0
    43ac:	d03f      	beq.n	442e <cc2400_rx+0x96>
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43ae:	781b      	ldrb	r3, [r3, #0]
			mdmctrl = 0x0040; // 250 kHz frequency deviation
    43b0:	2b01      	cmp	r3, #1
    43b2:	bf14      	ite	ne
    43b4:	2500      	movne	r5, #0
    43b6:	2540      	moveq	r5, #64	; 0x40
		cc2400_set(MANAND,  0x7fff);
    43b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43bc:	200d      	movs	r0, #13
    43be:	f005 faee 	bl	999e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43c2:	f642 3122 	movw	r1, #11042	; 0x2b22
    43c6:	2012      	movs	r0, #18
    43c8:	f005 fae9 	bl	999e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    43cc:	f241 314b 	movw	r1, #4939	; 0x134b
    43d0:	2014      	movs	r0, #20
    43d2:	f005 fae4 	bl	999e <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43d6:	f240 1101 	movw	r1, #257	; 0x101
    43da:	2020      	movs	r0, #32
    43dc:	f005 fadf 	bl	999e <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43e0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    43e4:	2002      	movs	r0, #2
    43e6:	3901      	subs	r1, #1
    43e8:	b289      	uxth	r1, r1
    43ea:	f005 fad8 	bl	999e <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    43ee:	4629      	mov	r1, r5
    43f0:	2003      	movs	r0, #3
    43f2:	f005 fad4 	bl	999e <cc2400_set>
	cs_threshold_calc_and_set(channel);
    43f6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    43fa:	b280      	uxth	r0, r0
    43fc:	f003 fa60 	bl	78c0 <cs_threshold_calc_and_set>
	clkn_start();
    4400:	f003 faf6 	bl	79f0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    4404:	f005 fb66 	bl	9ad4 <cc2400_status>
    4408:	0642      	lsls	r2, r0, #25
    440a:	d5fb      	bpl.n	4404 <cc2400_rx+0x6c>
	cc2400_strobe(SFSON);
    440c:	2061      	movs	r0, #97	; 0x61
    440e:	f005 fb68 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4412:	f005 fb5f 	bl	9ad4 <cc2400_status>
    4416:	0743      	lsls	r3, r0, #29
    4418:	d5fb      	bpl.n	4412 <cc2400_rx+0x7a>
	cc2400_strobe(SRX);
    441a:	2062      	movs	r0, #98	; 0x62
    441c:	f005 fb61 	bl	9ae2 <cc2400_strobe>
	PAEN_SET;
    4420:	2280      	movs	r2, #128	; 0x80
    4422:	4b06      	ldr	r3, [pc, #24]	; (443c <cc2400_rx+0xa4>)
    4424:	601a      	str	r2, [r3, #0]
	HGM_SET;
    4426:	f44f 7280 	mov.w	r2, #256	; 0x100
    442a:	601a      	str	r2, [r3, #0]
    442c:	bd38      	pop	{r3, r4, r5, pc}
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    442e:	2529      	movs	r5, #41	; 0x29
    4430:	e7c2      	b.n	43b8 <cc2400_rx+0x20>
    4432:	bf00      	nop
    4434:	10000a4c 	.word	0x10000a4c
    4438:	10000450 	.word	0x10000450
    443c:	2009c058 	.word	0x2009c058

00004440 <cc2400_rx_sync>:
{
    4440:	b570      	push	{r4, r5, r6, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
    4442:	4b29      	ldr	r3, [pc, #164]	; (44e8 <cc2400_rx_sync+0xa8>)
{
    4444:	4604      	mov	r4, r0
	if (modulation == MOD_BT_BASIC_RATE) {
    4446:	781a      	ldrb	r2, [r3, #0]
    4448:	2a00      	cmp	r2, #0
    444a:	d048      	beq.n	44de <cc2400_rx_sync+0x9e>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	2b01      	cmp	r3, #1
    4450:	d144      	bne.n	44dc <cc2400_rx_sync+0x9c>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4452:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4454:	f240 5661 	movw	r6, #1377	; 0x561
	cc2400_set(MANAND,  0x7fff);
    4458:	f647 71ff 	movw	r1, #32767	; 0x7fff
    445c:	200d      	movs	r0, #13
    445e:	f005 fa9e 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4462:	f642 3122 	movw	r1, #11042	; 0x2b22
    4466:	2012      	movs	r0, #18
    4468:	f005 fa99 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    446c:	f241 214b 	movw	r1, #4683	; 0x124b
    4470:	2014      	movs	r0, #20
    4472:	f005 fa94 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    4476:	4631      	mov	r1, r6
    4478:	2020      	movs	r0, #32
    447a:	f005 fa90 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    447e:	b2a1      	uxth	r1, r4
    4480:	202c      	movs	r0, #44	; 0x2c
    4482:	f005 fa8c 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4486:	0c21      	lsrs	r1, r4, #16
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4488:	4c18      	ldr	r4, [pc, #96]	; (44ec <cc2400_rx_sync+0xac>)
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    448a:	202d      	movs	r0, #45	; 0x2d
    448c:	f005 fa87 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4490:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4494:	2002      	movs	r0, #2
    4496:	3901      	subs	r1, #1
    4498:	b289      	uxth	r1, r1
    449a:	f005 fa80 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    449e:	4629      	mov	r1, r5
    44a0:	2003      	movs	r0, #3
    44a2:	f005 fa7c 	bl	999e <cc2400_set>
	cs_threshold_calc_and_set(channel);
    44a6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    44aa:	b280      	uxth	r0, r0
    44ac:	f003 fa08 	bl	78c0 <cs_threshold_calc_and_set>
	clkn_start();
    44b0:	f003 fa9e 	bl	79f0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    44b4:	f005 fb0e 	bl	9ad4 <cc2400_status>
    44b8:	0642      	lsls	r2, r0, #25
    44ba:	d5fb      	bpl.n	44b4 <cc2400_rx_sync+0x74>
	cc2400_strobe(SFSON);
    44bc:	2061      	movs	r0, #97	; 0x61
    44be:	f005 fb10 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44c2:	f005 fb07 	bl	9ad4 <cc2400_status>
    44c6:	0743      	lsls	r3, r0, #29
    44c8:	d5fb      	bpl.n	44c2 <cc2400_rx_sync+0x82>
	cc2400_strobe(SRX);
    44ca:	2062      	movs	r0, #98	; 0x62
    44cc:	f005 fb09 	bl	9ae2 <cc2400_strobe>
	PAEN_SET;
    44d0:	2280      	movs	r2, #128	; 0x80
    44d2:	4b07      	ldr	r3, [pc, #28]	; (44f0 <cc2400_rx_sync+0xb0>)
    44d4:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    44da:	601a      	str	r2, [r3, #0]
    44dc:	bd70      	pop	{r4, r5, r6, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    44de:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    44e0:	f240 4661 	movw	r6, #1121	; 0x461
    44e4:	e7b8      	b.n	4458 <cc2400_rx_sync+0x18>
    44e6:	bf00      	nop
    44e8:	10000a4c 	.word	0x10000a4c
    44ec:	10000450 	.word	0x10000450
    44f0:	2009c058 	.word	0x2009c058

000044f4 <enqueue>:
{
    44f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44f6:	4607      	mov	r7, r0
    44f8:	460e      	mov	r6, r1
	usb_pkt_rx* f = usb_enqueue();
    44fa:	f003 f901 	bl	7700 <usb_enqueue>
    44fe:	4d1d      	ldr	r5, [pc, #116]	; (4574 <enqueue+0x80>)
	if (f == NULL) {
    4500:	4604      	mov	r4, r0
    4502:	b920      	cbnz	r0, 450e <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4504:	786b      	ldrb	r3, [r5, #1]
    4506:	f043 0304 	orr.w	r3, r3, #4
    450a:	706b      	strb	r3, [r5, #1]
		return 0;
    450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(type == SPECAN) {
    450e:	2f04      	cmp	r7, #4
	f->pkt_type = type;
    4510:	7007      	strb	r7, [r0, #0]
	if(type == SPECAN) {
    4512:	d119      	bne.n	4548 <enqueue+0x54>
		f->clk100ns = CLK100NS;
    4514:	f640 4135 	movw	r1, #3125	; 0xc35
		f->clkn_high = (clkn >> 20) & 0xff;
    4518:	4a17      	ldr	r2, [pc, #92]	; (4578 <enqueue+0x84>)
    451a:	6813      	ldr	r3, [r2, #0]
    451c:	0d1b      	lsrs	r3, r3, #20
    451e:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = CLK100NS;
    4520:	6813      	ldr	r3, [r2, #0]
    4522:	4a16      	ldr	r2, [pc, #88]	; (457c <enqueue+0x88>)
    4524:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4528:	6812      	ldr	r2, [r2, #0]
    452a:	fb01 2303 	mla	r3, r1, r3, r2
    452e:	6043      	str	r3, [r0, #4]
	memcpy(f->data, buf, DMA_SIZE);
    4530:	2232      	movs	r2, #50	; 0x32
    4532:	4631      	mov	r1, r6
    4534:	f104 000e 	add.w	r0, r4, #14
    4538:	f006 fd46 	bl	afc8 <memcpy>
	f->status = status;
    453c:	786b      	ldrb	r3, [r5, #1]
	return 1;
    453e:	2001      	movs	r0, #1
	f->status = status;
    4540:	7063      	strb	r3, [r4, #1]
	status = 0;
    4542:	2300      	movs	r3, #0
    4544:	706b      	strb	r3, [r5, #1]
}
    4546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		f->clkn_high = idle_buf_clkn_high;
    4548:	78ab      	ldrb	r3, [r5, #2]
    454a:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    454c:	686b      	ldr	r3, [r5, #4]
    454e:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4550:	892b      	ldrh	r3, [r5, #8]
    4552:	3b62      	subs	r3, #98	; 0x62
    4554:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    4556:	4b0a      	ldr	r3, [pc, #40]	; (4580 <enqueue+0x8c>)
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    455c:	4b09      	ldr	r3, [pc, #36]	; (4584 <enqueue+0x90>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4562:	8928      	ldrh	r0, [r5, #8]
    4564:	b280      	uxth	r0, r0
    4566:	f003 f997 	bl	7898 <rssi_get_avg>
		f->rssi_count = rssi_count;
    456a:	4b07      	ldr	r3, [pc, #28]	; (4588 <enqueue+0x94>)
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    456c:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	72e3      	strb	r3, [r4, #11]
    4572:	e7dd      	b.n	4530 <enqueue+0x3c>
    4574:	10000a4c 	.word	0x10000a4c
    4578:	10001454 	.word	0x10001454
    457c:	40004008 	.word	0x40004008
    4580:	1000137a 	.word	0x1000137a
    4584:	10001378 	.word	0x10001378
    4588:	10001996 	.word	0x10001996

0000458c <cc2400_idle>:
{
    458c:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    458e:	2064      	movs	r0, #100	; 0x64
    4590:	f005 faa7 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    4594:	f005 fa9e 	bl	9ad4 <cc2400_status>
    4598:	f010 0404 	ands.w	r4, r0, #4
    459c:	d1fa      	bne.n	4594 <cc2400_idle+0x8>
	PAEN_CLR;
    459e:	2280      	movs	r2, #128	; 0x80
    45a0:	4b21      	ldr	r3, [pc, #132]	; (4628 <cc2400_idle+0x9c>)
	RXLED_CLR;
    45a2:	2110      	movs	r1, #16
	PAEN_CLR;
    45a4:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    45a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    45aa:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    45ac:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45b0:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45b4:	2202      	movs	r2, #2
    45b6:	f843 2c20 	str.w	r2, [r3, #-32]
	clkn_stop();
    45ba:	f003 f9f1 	bl	79a0 <clkn_stop>
	dio_ssp_stop();
    45be:	f003 fb05 	bl	7bcc <dio_ssp_stop>
	cs_reset();
    45c2:	f003 f9db 	bl	797c <cs_reset>
	rssi_reset();
    45c6:	f003 f903 	bl	77d0 <rssi_reset>
	channel = 2441;
    45ca:	f640 1189 	movw	r1, #2441	; 0x989
	hop_mode = HOP_NONE;
    45ce:	4b17      	ldr	r3, [pc, #92]	; (462c <cc2400_idle+0xa0>)
	channel = 2441;
    45d0:	4a17      	ldr	r2, [pc, #92]	; (4630 <cc2400_idle+0xa4>)
	hop_mode = HOP_NONE;
    45d2:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    45d4:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    45d6:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
	hop_timeout = 158;
    45da:	219e      	movs	r1, #158	; 0x9e
	hop_direct_channel = 0;
    45dc:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    45de:	f8a2 104e 	strh.w	r1, [r2, #78]	; 0x4e
	le_adv_channel = 2402;
    45e2:	f640 1162 	movw	r1, #2402	; 0x962
	requested_channel = 0;
    45e6:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    45e8:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
	idle_buf_clkn_high = 0;
    45ec:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    45ee:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    45f0:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    45f2:	741c      	strb	r4, [r3, #16]
	status = 0;
    45f4:	705c      	strb	r4, [r3, #1]
	mode = MODE_IDLE;
    45f6:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    45f8:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    45fa:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    45fc:	751c      	strb	r4, [r3, #20]
	modulation = MOD_BT_BASIC_RATE;
    45fe:	701c      	strb	r4, [r3, #0]
	low_freq = 2400;
    4600:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4604:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	high_freq = 2483;
    4608:	f640 13b3 	movw	r3, #2483	; 0x9b3
    460c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	rssi_threshold = -30;
    4610:	23e2      	movs	r3, #226	; 0xe2
	target.address = 0;
    4612:	2000      	movs	r0, #0
    4614:	2100      	movs	r1, #0
	rssi_threshold = -30;
    4616:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
	target.address = 0;
    461a:	4b06      	ldr	r3, [pc, #24]	; (4634 <cc2400_idle+0xa8>)
    461c:	e9c3 0100 	strd	r0, r1, [r3]
	target.syncword = 0;
    4620:	e9c3 0102 	strd	r0, r1, [r3, #8]
    4624:	bd10      	pop	{r4, pc}
    4626:	bf00      	nop
    4628:	2009c05c 	.word	0x2009c05c
    462c:	10000a4c 	.word	0x10000a4c
    4630:	10000450 	.word	0x10000450
    4634:	10001a10 	.word	0x10001a10

00004638 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];
    463c:	4d3c      	ldr	r5, [pc, #240]	; (4730 <cb_follow_le+0xf8>)
    463e:	4c3d      	ldr	r4, [pc, #244]	; (4734 <cb_follow_le+0xfc>)
    4640:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    4644:	b280      	uxth	r0, r0
    4646:	f002 fedd 	bl	7404 <btle_channel_index>

	u32 access_address = 0;
    464a:	2200      	movs	r2, #0
	int idx = whitening_index[btle_channel_index(channel)];
    464c:	5c21      	ldrb	r1, [r4, r0]
    464e:	4628      	mov	r0, r5
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4650:	4d39      	ldr	r5, [pc, #228]	; (4738 <cb_follow_le+0x100>)
	for (i = 0; i < 31; ++i) {
    4652:	4613      	mov	r3, r2
    4654:	46a6      	mov	lr, r4
    4656:	46ac      	mov	ip, r5
		access_address |= (unpacked[i] << 31);
    4658:	5d5c      	ldrb	r4, [r3, r5]
	for (i = 0; i < 31; ++i) {
    465a:	3301      	adds	r3, #1
		access_address |= (unpacked[i] << 31);
    465c:	07e4      	lsls	r4, r4, #31
	for (i = 0; i < 31; ++i) {
    465e:	2b1f      	cmp	r3, #31
		access_address |= (unpacked[i] << 31);
    4660:	ea44 0252 	orr.w	r2, r4, r2, lsr #1
	for (i = 0; i < 31; ++i) {
    4664:	d1f8      	bne.n	4658 <cb_follow_le+0x20>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    4666:	6805      	ldr	r5, [r0, #0]
		access_address |= (unpacked[i] << 31);
    4668:	f81c 4003 	ldrb.w	r4, [ip, r3]
    466c:	07e4      	lsls	r4, r4, #31
    466e:	ea44 0252 	orr.w	r2, r4, r2, lsr #1
		if (access_address == le.access_address) {
    4672:	42aa      	cmp	r2, r5
    4674:	d156      	bne.n	4724 <cb_follow_le+0xec>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    4676:	4e31      	ldr	r6, [pc, #196]	; (473c <cb_follow_le+0x104>)
    4678:	2400      	movs	r4, #0
						idx = (idx + 1) % sizeof(whitening);
    467a:	f04f 097f 	mov.w	r9, #127	; 0x7f
    467e:	4635      	mov	r5, r6
	for (i = 0; i < 31; ++i) {
    4680:	f04f 0a00 	mov.w	sl, #0
    4684:	4657      	mov	r7, sl
    4686:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
					int bit = unpacked[offset];
    468a:	eb07 0208 	add.w	r2, r7, r8
    468e:	4462      	add	r2, ip
					if (j >= 4) { // unwhiten data bytes
    4690:	2c03      	cmp	r4, #3
					int bit = unpacked[offset];
    4692:	f812 2c1f 	ldrb.w	r2, [r2, #-31]
					if (j >= 4) { // unwhiten data bytes
    4696:	dd0c      	ble.n	46b2 <cb_follow_le+0x7a>
						bit ^= whitening[idx];
    4698:	eb0e 0b01 	add.w	fp, lr, r1
    469c:	f89b b028 	ldrb.w	fp, [fp, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46a0:	3101      	adds	r1, #1
						bit ^= whitening[idx];
    46a2:	ea82 020b 	eor.w	r2, r2, fp
						idx = (idx + 1) % sizeof(whitening);
    46a6:	fbb1 fbf9 	udiv	fp, r1, r9
    46aa:	ebcb 1bcb 	rsb	fp, fp, fp, lsl #7
    46ae:	eba1 010b 	sub.w	r1, r1, fp
					byte |= bit << k;
    46b2:	40ba      	lsls	r2, r7
				for (k = 0; k < 8; k++) {
    46b4:	3701      	adds	r7, #1
					byte |= bit << k;
    46b6:	ea42 020a 	orr.w	r2, r2, sl
				for (k = 0; k < 8; k++) {
    46ba:	2f08      	cmp	r7, #8
					byte |= bit << k;
    46bc:	fa5f fa82 	uxtb.w	sl, r2
				for (k = 0; k < 8; k++) {
    46c0:	d1e3      	bne.n	468a <cb_follow_le+0x52>
				idle_rxbuf[j] = byte;
    46c2:	6832      	ldr	r2, [r6, #0]
    46c4:	f802 a004 	strb.w	sl, [r2, r4]
			for (j = 0; j < 46; ++j) {
    46c8:	3401      	adds	r4, #1
    46ca:	2c2e      	cmp	r4, #46	; 0x2e
    46cc:	d1d8      	bne.n	4680 <cb_follow_le+0x48>
			}

			// verify CRC
			if (le.crc_verify) {
    46ce:	6903      	ldr	r3, [r0, #16]
    46d0:	b96b      	cbnz	r3, 46ee <cb_follow_le+0xb6>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46d2:	6829      	ldr	r1, [r5, #0]
    46d4:	2001      	movs	r0, #1
    46d6:	f7ff ff0d 	bl	44f4 <enqueue>
			RXLED_SET;
    46da:	2210      	movs	r2, #16
    46dc:	4b18      	ldr	r3, [pc, #96]	; (4740 <cb_follow_le+0x108>)
    46de:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    46e0:	4b18      	ldr	r3, [pc, #96]	; (4744 <cb_follow_le+0x10c>)
    46e2:	6828      	ldr	r0, [r5, #0]
    46e4:	699b      	ldr	r3, [r3, #24]
    46e6:	4798      	blx	r3
			break;
		}
	}

	return 1;
}
    46e8:	2001      	movs	r0, #1
    46ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46ee:	6833      	ldr	r3, [r6, #0]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46f0:	68c0      	ldr	r0, [r0, #12]
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46f2:	795c      	ldrb	r4, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46f4:	6831      	ldr	r1, [r6, #0]
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46f6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46fa:	1ca2      	adds	r2, r4, #2
    46fc:	3104      	adds	r1, #4
    46fe:	f002 ff07 	bl	7510 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    4702:	6832      	ldr	r2, [r6, #0]
    4704:	f104 0308 	add.w	r3, r4, #8
    4708:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    470a:	6832      	ldr	r2, [r6, #0]
    470c:	1de3      	adds	r3, r4, #7
    470e:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4710:	6832      	ldr	r2, [r6, #0]
    4712:	3406      	adds	r4, #6
    4714:	5d12      	ldrb	r2, [r2, r4]
							 | (idle_rxbuf[4+len+1] << 8)
    4716:	021b      	lsls	r3, r3, #8
    4718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    471c:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    471e:	4298      	cmp	r0, r3
    4720:	d1e2      	bne.n	46e8 <cb_follow_le+0xb0>
    4722:	e7d6      	b.n	46d2 <cb_follow_le+0x9a>
	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    4724:	3301      	adds	r3, #1
    4726:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    472a:	d19d      	bne.n	4668 <cb_follow_le+0x30>
    472c:	e7dc      	b.n	46e8 <cb_follow_le+0xb0>
    472e:	bf00      	nop
    4730:	10000450 	.word	0x10000450
    4734:	0000b118 	.word	0x0000b118
    4738:	10001674 	.word	0x10001674
    473c:	10001670 	.word	0x10001670
    4740:	2009c038 	.word	0x2009c038
    4744:	10000a4c 	.word	0x10000a4c

00004748 <vendor_request_handler>:
{
    4748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    474a:	460e      	mov	r6, r1
    474c:	4615      	mov	r5, r2
    474e:	461c      	mov	r4, r3
	switch (request) {
    4750:	2849      	cmp	r0, #73	; 0x49
    4752:	f200 8376 	bhi.w	4e42 <vendor_request_handler+0x6fa>
    4756:	e8df f010 	tbh	[pc, r0, lsl #1]
    475a:	0122      	.short	0x0122
    475c:	0062005c 	.word	0x0062005c
    4760:	006d0067 	.word	0x006d0067
    4764:	00780073 	.word	0x00780073
    4768:	0080007b 	.word	0x0080007b
    476c:	00890084 	.word	0x00890084
    4770:	00e800dd 	.word	0x00e800dd
    4774:	00950127 	.word	0x00950127
    4778:	009a008f 	.word	0x009a008f
    477c:	00a4009f 	.word	0x00a4009f
    4780:	00ac00a6 	.word	0x00ac00a6
    4784:	00d600d4 	.word	0x00d600d4
    4788:	012000d9 	.word	0x012000d9
    478c:	03740124 	.word	0x03740124
    4790:	00b00129 	.word	0x00b00129
    4794:	00c400b8 	.word	0x00c400b8
    4798:	00c600c2 	.word	0x00c600c2
    479c:	01460153 	.word	0x01460153
    47a0:	01740170 	.word	0x01740170
    47a4:	017d017b 	.word	0x017d017b
    47a8:	01ff01c7 	.word	0x01ff01c7
    47ac:	025a0218 	.word	0x025a0218
    47b0:	0275026a 	.word	0x0275026a
    47b4:	02890093 	.word	0x02890093
    47b8:	0293028d 	.word	0x0293028d
    47bc:	02a6029a 	.word	0x02a6029a
    47c0:	020e0203 	.word	0x020e0203
    47c4:	02d202af 	.word	0x02d202af
    47c8:	02f90163 	.word	0x02f90163
    47cc:	02b60374 	.word	0x02b60374
    47d0:	036e036a 	.word	0x036e036a
    47d4:	01fb01e9 	.word	0x01fb01e9
    47d8:	03740225 	.word	0x03740225
    47dc:	02b9004a 	.word	0x02b9004a
    47e0:	02c90144 	.word	0x02c90144
    47e4:	0366022c 	.word	0x0366022c
    47e8:	027f02ee 	.word	0x027f02ee
    47ec:	02dc      	.short	0x02dc
    47ee:	2300      	movs	r3, #0
		for(i=0; i<request_params[0]; i++) {
    47f0:	8832      	ldrh	r2, [r6, #0]
    47f2:	1c5c      	adds	r4, r3, #1
    47f4:	b2db      	uxtb	r3, r3
    47f6:	4293      	cmp	r3, r2
    47f8:	d242      	bcs.n	4880 <vendor_request_handler+0x138>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    47fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    47fe:	18ea      	adds	r2, r5, r3
    4800:	7851      	ldrb	r1, [r2, #1]
    4802:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4804:	5ce8      	ldrb	r0, [r5, r3]
    4806:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    480a:	f005 f8c8 	bl	999e <cc2400_set>
    480e:	4623      	mov	r3, r4
    4810:	e7ee      	b.n	47f0 <vendor_request_handler+0xa8>
		requested_mode = MODE_RX_SYMBOLS;
    4812:	2001      	movs	r0, #1
    4814:	4ba5      	ldr	r3, [pc, #660]	; (4aac <vendor_request_handler+0x364>)
    4816:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    4818:	2300      	movs	r3, #0
		*data_len = 10;
    481a:	6023      	str	r3, [r4, #0]
		break;
    481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hop_mode = HOP_BLUETOOTH;
    481e:	2202      	movs	r2, #2
    4820:	4ba2      	ldr	r3, [pc, #648]	; (4aac <vendor_request_handler+0x364>)
    4822:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_TX_GENERIC;
    4824:	749a      	strb	r2, [r3, #18]
    4826:	e0ba      	b.n	499e <vendor_request_handler+0x256>
		data[0] = (USRLED) ? 1 : 0;
    4828:	4ba1      	ldr	r3, [pc, #644]	; (4ab0 <vendor_request_handler+0x368>)
    482a:	681b      	ldr	r3, [r3, #0]
    482c:	f3c3 0340 	ubfx	r3, r3, #1, #1
		data[0] = le.crc_verify ? 1 : 0;
    4830:	702b      	strb	r3, [r5, #0]
    4832:	e048      	b.n	48c6 <vendor_request_handler+0x17e>
    4834:	2302      	movs	r3, #2
		if (request_params[0])
    4836:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    4838:	b1e2      	cbz	r2, 4874 <vendor_request_handler+0x12c>
			CC1V8_SET;
    483a:	4a9e      	ldr	r2, [pc, #632]	; (4ab4 <vendor_request_handler+0x36c>)
			HGM_CLR;
    483c:	6013      	str	r3, [r2, #0]
    483e:	e01f      	b.n	4880 <vendor_request_handler+0x138>
		data[0] = (RXLED) ? 1 : 0;
    4840:	4b9b      	ldr	r3, [pc, #620]	; (4ab0 <vendor_request_handler+0x368>)
    4842:	681b      	ldr	r3, [r3, #0]
    4844:	f3c3 1300 	ubfx	r3, r3, #4, #1
    4848:	e7f2      	b.n	4830 <vendor_request_handler+0xe8>
		if (request_params[0])
    484a:	880a      	ldrh	r2, [r1, #0]
    484c:	2310      	movs	r3, #16
    484e:	e7f3      	b.n	4838 <vendor_request_handler+0xf0>
		data[0] = (TXLED) ? 1 : 0;
    4850:	4b97      	ldr	r3, [pc, #604]	; (4ab0 <vendor_request_handler+0x368>)
		data[0] = (HGM) ? 1 : 0;
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4858:	e7ea      	b.n	4830 <vendor_request_handler+0xe8>
		if (request_params[0])
    485a:	880a      	ldrh	r2, [r1, #0]
    485c:	f44f 7380 	mov.w	r3, #256	; 0x100
    4860:	e7ea      	b.n	4838 <vendor_request_handler+0xf0>
		data[0] = (CC1V8) ? 1 : 0;
    4862:	4b93      	ldr	r3, [pc, #588]	; (4ab0 <vendor_request_handler+0x368>)
    4864:	681b      	ldr	r3, [r3, #0]
    4866:	f3c3 2340 	ubfx	r3, r3, #9, #1
    486a:	e7e1      	b.n	4830 <vendor_request_handler+0xe8>
		if (request_params[0])
    486c:	880a      	ldrh	r2, [r1, #0]
    486e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4872:	e7e1      	b.n	4838 <vendor_request_handler+0xf0>
			CC1V8_CLR;
    4874:	4a90      	ldr	r2, [pc, #576]	; (4ab8 <vendor_request_handler+0x370>)
    4876:	e7e1      	b.n	483c <vendor_request_handler+0xf4>
		get_part_num(data, data_len);
    4878:	4621      	mov	r1, r4
    487a:	4610      	mov	r0, r2
    487c:	f005 fa14 	bl	9ca8 <get_part_num>
	return 1;
    4880:	2001      	movs	r0, #1
    4882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		get_device_serial(data, data_len);
    4884:	4621      	mov	r1, r4
    4886:	4610      	mov	r0, r2
    4888:	f005 fa28 	bl	9cdc <get_device_serial>
    488c:	e7f8      	b.n	4880 <vendor_request_handler+0x138>
		data[0] = (PAEN) ? 1 : 0;
    488e:	4b8b      	ldr	r3, [pc, #556]	; (4abc <vendor_request_handler+0x374>)
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4896:	e7cb      	b.n	4830 <vendor_request_handler+0xe8>
    4898:	2380      	movs	r3, #128	; 0x80
		if (request_params[0])
    489a:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    489c:	b13a      	cbz	r2, 48ae <vendor_request_handler+0x166>
			HGM_SET;
    489e:	4a88      	ldr	r2, [pc, #544]	; (4ac0 <vendor_request_handler+0x378>)
    48a0:	e7cc      	b.n	483c <vendor_request_handler+0xf4>
		data[0] = (HGM) ? 1 : 0;
    48a2:	4b86      	ldr	r3, [pc, #536]	; (4abc <vendor_request_handler+0x374>)
    48a4:	e7d5      	b.n	4852 <vendor_request_handler+0x10a>
		if (request_params[0])
    48a6:	880a      	ldrh	r2, [r1, #0]
    48a8:	f44f 7380 	mov.w	r3, #256	; 0x100
    48ac:	e7f6      	b.n	489c <vendor_request_handler+0x154>
			HGM_CLR;
    48ae:	4a85      	ldr	r2, [pc, #532]	; (4ac4 <vendor_request_handler+0x37c>)
    48b0:	e7c4      	b.n	483c <vendor_request_handler+0xf4>
		requested_mode = MODE_TX_TEST;
    48b2:	2203      	movs	r2, #3
    48b4:	4b7d      	ldr	r3, [pc, #500]	; (4aac <vendor_request_handler+0x364>)
		requested_mode = MODE_BT_TRANSMIT_LE;
    48b6:	749a      	strb	r2, [r3, #18]
    48b8:	e7e2      	b.n	4880 <vendor_request_handler+0x138>
		data[0] = cc2400_get(FREND) & 0x7;
    48ba:	2005      	movs	r0, #5
    48bc:	f005 f866 	bl	998c <cc2400_get>
    48c0:	f000 0007 	and.w	r0, r0, #7
    48c4:	7028      	strb	r0, [r5, #0]
			*data_len = 1;
    48c6:	2001      	movs	r0, #1
    48c8:	e0b9      	b.n	4a3e <vendor_request_handler+0x2f6>
		if( request_params[0] < 8 ) {
    48ca:	8809      	ldrh	r1, [r1, #0]
    48cc:	2907      	cmp	r1, #7
    48ce:	f200 82b8 	bhi.w	4e42 <vendor_request_handler+0x6fa>
			cc2400_set(FREND, 8 | request_params[0]);
    48d2:	2005      	movs	r0, #5
    48d4:	f041 0108 	orr.w	r1, r1, #8
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    48d8:	f005 f861 	bl	999e <cc2400_set>
    48dc:	e7d0      	b.n	4880 <vendor_request_handler+0x138>
		requested_mode = MODE_RANGE_TEST;
    48de:	2205      	movs	r2, #5
    48e0:	e7e8      	b.n	48b4 <vendor_request_handler+0x16c>
		requested_mode = MODE_REPEATER;
    48e2:	2206      	movs	r2, #6
    48e4:	e7e6      	b.n	48b4 <vendor_request_handler+0x16c>
		data[0] = rr.valid;
    48e6:	4b78      	ldr	r3, [pc, #480]	; (4ac8 <vendor_request_handler+0x380>)
    48e8:	781a      	ldrb	r2, [r3, #0]
    48ea:	702a      	strb	r2, [r5, #0]
		data[1] = rr.request_pa;
    48ec:	785a      	ldrb	r2, [r3, #1]
    48ee:	706a      	strb	r2, [r5, #1]
		data[2] = rr.request_num;
    48f0:	789a      	ldrb	r2, [r3, #2]
    48f2:	70aa      	strb	r2, [r5, #2]
		data[3] = rr.reply_pa;
    48f4:	78da      	ldrb	r2, [r3, #3]
    48f6:	70ea      	strb	r2, [r5, #3]
		data[4] = rr.reply_num;
    48f8:	791b      	ldrb	r3, [r3, #4]
    48fa:	712b      	strb	r3, [r5, #4]
		*data_len = 5;
    48fc:	2305      	movs	r3, #5
		*data_len = 0;
    48fe:	6023      	str	r3, [r4, #0]
    4900:	e7be      	b.n	4880 <vendor_request_handler+0x138>
		requested_mode = MODE_IDLE;
    4902:	2200      	movs	r2, #0
    4904:	e7d6      	b.n	48b4 <vendor_request_handler+0x16c>
		data[0] = modulation;
    4906:	4b69      	ldr	r3, [pc, #420]	; (4aac <vendor_request_handler+0x364>)
		data[0] = cs_threshold_req;
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	e791      	b.n	4830 <vendor_request_handler+0xe8>
		modulation = request_params[0];
    490c:	780a      	ldrb	r2, [r1, #0]
    490e:	4b67      	ldr	r3, [pc, #412]	; (4aac <vendor_request_handler+0x364>)
    4910:	701a      	strb	r2, [r3, #0]
    4912:	e7b5      	b.n	4880 <vendor_request_handler+0x138>
		data[0] = channel & 0xFF;
    4914:	4b6d      	ldr	r3, [pc, #436]	; (4acc <vendor_request_handler+0x384>)
    4916:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    491a:	702a      	strb	r2, [r5, #0]
		data[1] = (channel >> 8) & 0xFF;
    491c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    4920:	f3c3 2307 	ubfx	r3, r3, #8, #8
		data[1] = 0x37;
    4924:	706b      	strb	r3, [r5, #1]
		*data_len = 2;
    4926:	2302      	movs	r3, #2
    4928:	e7e9      	b.n	48fe <vendor_request_handler+0x1b6>
		requested_channel = request_params[0];
    492a:	880a      	ldrh	r2, [r1, #0]
		if (requested_channel > MAX_FREQ) {
    492c:	f640 21ea 	movw	r1, #2794	; 0xaea
		requested_channel = request_params[0];
    4930:	4b5e      	ldr	r3, [pc, #376]	; (4aac <vendor_request_handler+0x364>)
    4932:	81da      	strh	r2, [r3, #14]
		if (requested_channel > MAX_FREQ) {
    4934:	89da      	ldrh	r2, [r3, #14]
    4936:	b292      	uxth	r2, r2
    4938:	428a      	cmp	r2, r1
    493a:	d918      	bls.n	496e <vendor_request_handler+0x226>
			hop_mode = HOP_SWEEP;
    493c:	2201      	movs	r2, #1
    493e:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4940:	f640 1262 	movw	r2, #2402	; 0x962
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4944:	81da      	strh	r2, [r3, #14]
		le_adv_channel = requested_channel;
    4946:	89d9      	ldrh	r1, [r3, #14]
    4948:	4a60      	ldr	r2, [pc, #384]	; (4acc <vendor_request_handler+0x384>)
    494a:	b289      	uxth	r1, r1
    494c:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
		if (mode != MODE_BT_FOLLOW_LE) {
    4950:	7c59      	ldrb	r1, [r3, #17]
    4952:	2909      	cmp	r1, #9
    4954:	d094      	beq.n	4880 <vendor_request_handler+0x138>
			channel = requested_channel;
    4956:	89d9      	ldrh	r1, [r3, #14]
    4958:	b289      	uxth	r1, r1
    495a:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
			requested_channel = 0;
    495e:	2100      	movs	r1, #0
    4960:	81d9      	strh	r1, [r3, #14]
			cs_threshold_calc_and_set(channel);
    4962:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
		cs_threshold_calc_and_set(channel);
    4966:	b280      	uxth	r0, r0
    4968:	f002 ffaa 	bl	78c0 <cs_threshold_calc_and_set>
    496c:	e788      	b.n	4880 <vendor_request_handler+0x138>
			hop_mode = HOP_NONE;
    496e:	2200      	movs	r2, #0
    4970:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4972:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4976:	89d9      	ldrh	r1, [r3, #14]
    4978:	b289      	uxth	r1, r1
    497a:	4291      	cmp	r1, r2
			requested_channel = MIN(requested_channel, MAX_FREQ);
    497c:	f640 21e9 	movw	r1, #2793	; 0xae9
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4980:	bf84      	itt	hi
    4982:	89da      	ldrhhi	r2, [r3, #14]
    4984:	b292      	uxthhi	r2, r2
    4986:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4988:	89da      	ldrh	r2, [r3, #14]
    498a:	b292      	uxth	r2, r2
    498c:	428a      	cmp	r2, r1
    498e:	bf96      	itet	ls
    4990:	89da      	ldrhls	r2, [r3, #14]
    4992:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4996:	b292      	uxthls	r2, r2
    4998:	e7d4      	b.n	4944 <vendor_request_handler+0x1fc>
		set_isp();
    499a:	f005 f9d1 	bl	9d40 <set_isp>
		*data_len = 0;
    499e:	2300      	movs	r3, #0
    49a0:	e7ad      	b.n	48fe <vendor_request_handler+0x1b6>
		bootloader_ctrl = DFU_MODE;
    49a2:	4a4b      	ldr	r2, [pc, #300]	; (4ad0 <vendor_request_handler+0x388>)
    49a4:	4b4b      	ldr	r3, [pc, #300]	; (4ad4 <vendor_request_handler+0x38c>)
    49a6:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    49a8:	220b      	movs	r2, #11
    49aa:	e783      	b.n	48b4 <vendor_request_handler+0x16c>
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    49ac:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    49b0:	880a      	ldrh	r2, [r1, #0]
    49b2:	1813      	adds	r3, r2, r0
    49b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    49b8:	f080 8243 	bcs.w	4e42 <vendor_request_handler+0x6fa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    49bc:	884b      	ldrh	r3, [r1, #2]
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    49be:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    49c2:	1859      	adds	r1, r3, r1
    49c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    49c8:	f080 823b 	bcs.w	4e42 <vendor_request_handler+0x6fa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    49cc:	429a      	cmp	r2, r3
    49ce:	f200 8238 	bhi.w	4e42 <vendor_request_handler+0x6fa>
		low_freq = request_params[0];
    49d2:	493e      	ldr	r1, [pc, #248]	; (4acc <vendor_request_handler+0x384>)
    49d4:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
		requested_mode = MODE_SPECAN;
    49d8:	2204      	movs	r2, #4
		high_freq = request_params[1];
    49da:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
		requested_mode = MODE_TX_GENERIC;
    49de:	4b33      	ldr	r3, [pc, #204]	; (4aac <vendor_request_handler+0x364>)
    49e0:	e720      	b.n	4824 <vendor_request_handler+0xdc>
		requested_mode = MODE_RX_GENERIC;
    49e2:	220f      	movs	r2, #15
    49e4:	e7fb      	b.n	49de <vendor_request_handler+0x296>
		if (request_params[0] > 256)
    49e6:	880b      	ldrh	r3, [r1, #0]
    49e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    49ec:	f200 8229 	bhi.w	4e42 <vendor_request_handler+0x6fa>
		rssi_threshold = 54 - request_params[0];
    49f0:	4a36      	ldr	r2, [pc, #216]	; (4acc <vendor_request_handler+0x384>)
    49f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    49f6:	b25b      	sxtb	r3, r3
    49f8:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
		requested_mode = MODE_LED_SPECAN;
    49fc:	2207      	movs	r2, #7
    49fe:	e7ee      	b.n	49de <vendor_request_handler+0x296>
		data[0] = 0x00;
    4a00:	2300      	movs	r3, #0
		length = (u8)strlen(GIT_REVISION);
    4a02:	4835      	ldr	r0, [pc, #212]	; (4ad8 <vendor_request_handler+0x390>)
		data[0] = 0x00;
    4a04:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4a06:	7053      	strb	r3, [r2, #1]
		length = (u8)strlen(GIT_REVISION);
    4a08:	f006 fb54 	bl	b0b4 <strlen>
    4a0c:	b2c6      	uxtb	r6, r0
    4a0e:	70a8      	strb	r0, [r5, #2]
		memcpy(&data[3], GIT_REVISION, length);
    4a10:	4632      	mov	r2, r6
    4a12:	4931      	ldr	r1, [pc, #196]	; (4ad8 <vendor_request_handler+0x390>)
    4a14:	1ce8      	adds	r0, r5, #3
    4a16:	f006 fad7 	bl	afc8 <memcpy>
		*data_len = 2 + 1 + length;
    4a1a:	3603      	adds	r6, #3
		*data_len = 1 + length;
    4a1c:	6026      	str	r6, [r4, #0]
    4a1e:	e72f      	b.n	4880 <vendor_request_handler+0x138>
		length = (u8)strlen(compile_info);
    4a20:	482e      	ldr	r0, [pc, #184]	; (4adc <vendor_request_handler+0x394>)
    4a22:	f006 fb47 	bl	b0b4 <strlen>
    4a26:	b2c6      	uxtb	r6, r0
    4a28:	f805 0b01 	strb.w	r0, [r5], #1
		memcpy(&data[1], compile_info, length);
    4a2c:	4632      	mov	r2, r6
    4a2e:	492b      	ldr	r1, [pc, #172]	; (4adc <vendor_request_handler+0x394>)
    4a30:	4628      	mov	r0, r5
    4a32:	f006 fac9 	bl	afc8 <memcpy>
		*data_len = 1 + length;
    4a36:	3601      	adds	r6, #1
    4a38:	e7f0      	b.n	4a1c <vendor_request_handler+0x2d4>
		data[0] = BOARD_ID;
    4a3a:	2001      	movs	r0, #1
    4a3c:	7010      	strb	r0, [r2, #0]
			*data_len = 1;
    4a3e:	6020      	str	r0, [r4, #0]
    4a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cs_threshold_req = (int8_t)request_params[0];
    4a42:	880a      	ldrh	r2, [r1, #0]
    4a44:	4b26      	ldr	r3, [pc, #152]	; (4ae0 <vendor_request_handler+0x398>)
    4a46:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set(channel);
    4a48:	4b20      	ldr	r3, [pc, #128]	; (4acc <vendor_request_handler+0x384>)
    4a4a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    4a4e:	e78a      	b.n	4966 <vendor_request_handler+0x21e>
		data[0] = cs_threshold_req;
    4a50:	4b23      	ldr	r3, [pc, #140]	; (4ae0 <vendor_request_handler+0x398>)
    4a52:	e759      	b.n	4908 <vendor_request_handler+0x1c0>
		target.address = 0;
    4a54:	2200      	movs	r2, #0
    4a56:	2300      	movs	r3, #0
		target.syncword = 0;
    4a58:	2600      	movs	r6, #0
		target.address = 0;
    4a5a:	4c22      	ldr	r4, [pc, #136]	; (4ae4 <vendor_request_handler+0x39c>)
    4a5c:	1e6f      	subs	r7, r5, #1
    4a5e:	e9c4 2300 	strd	r2, r3, [r4]
		target.syncword = 0;
    4a62:	e9c4 2302 	strd	r2, r3, [r4, #8]
			target.address |= (uint64_t)data[i] << 8*i;
    4a66:	4632      	mov	r2, r6
    4a68:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4a6c:	2100      	movs	r1, #0
    4a6e:	f005 fd29 	bl	a4c4 <__aeabi_llsl>
    4a72:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a76:	3608      	adds	r6, #8
    4a78:	4310      	orrs	r0, r2
    4a7a:	4319      	orrs	r1, r3
		for(int i=0; i < 8; i++) {
    4a7c:	2e40      	cmp	r6, #64	; 0x40
			target.address |= (uint64_t)data[i] << 8*i;
    4a7e:	e9c4 0100 	strd	r0, r1, [r4]
		for(int i=0; i < 8; i++) {
    4a82:	d1f0      	bne.n	4a66 <vendor_request_handler+0x31e>
    4a84:	2600      	movs	r6, #0
    4a86:	3507      	adds	r5, #7
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4a88:	4632      	mov	r2, r6
    4a8a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4a8e:	2100      	movs	r1, #0
    4a90:	f005 fd18 	bl	a4c4 <__aeabi_llsl>
    4a94:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    4a98:	3608      	adds	r6, #8
    4a9a:	4310      	orrs	r0, r2
    4a9c:	4319      	orrs	r1, r3
		for(int i=0; i < 8; i++) {
    4a9e:	2e40      	cmp	r6, #64	; 0x40
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4aa0:	e9c4 0102 	strd	r0, r1, [r4, #8]
		for(int i=0; i < 8; i++) {
    4aa4:	d1f0      	bne.n	4a88 <vendor_request_handler+0x340>
		precalc();
    4aa6:	f002 fb61 	bl	716c <precalc>
    4aaa:	e6e9      	b.n	4880 <vendor_request_handler+0x138>
    4aac:	10000a4c 	.word	0x10000a4c
    4ab0:	2009c034 	.word	0x2009c034
    4ab4:	2009c038 	.word	0x2009c038
    4ab8:	2009c03c 	.word	0x2009c03c
    4abc:	2009c054 	.word	0x2009c054
    4ac0:	2009c058 	.word	0x2009c058
    4ac4:	2009c05c 	.word	0x2009c05c
    4ac8:	100019d0 	.word	0x100019d0
    4acc:	10000450 	.word	0x10000450
    4ad0:	4305bb21 	.word	0x4305bb21
    4ad4:	1000001c 	.word	0x1000001c
    4ad8:	0000b9cc 	.word	0x0000b9cc
    4adc:	0000b1bf 	.word	0x0000b1bf
    4ae0:	10001998 	.word	0x10001998
    4ae4:	10001a10 	.word	0x10001a10
		clkn_offset = 0;
    4ae8:	2200      	movs	r2, #0
    4aea:	4ba2      	ldr	r3, [pc, #648]	; (4d74 <vendor_request_handler+0x62c>)
    4aec:	1ce8      	adds	r0, r5, #3
    4aee:	601a      	str	r2, [r3, #0]
    4af0:	1e6a      	subs	r2, r5, #1
			clkn_offset <<= 8;
    4af2:	6819      	ldr	r1, [r3, #0]
    4af4:	0209      	lsls	r1, r1, #8
    4af6:	6019      	str	r1, [r3, #0]
			clkn_offset |= data[i];
    4af8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    4afc:	681c      	ldr	r4, [r3, #0]
		for(int i=0; i < 4; i++) {
    4afe:	4290      	cmp	r0, r2
			clkn_offset |= data[i];
    4b00:	ea41 0104 	orr.w	r1, r1, r4
    4b04:	6019      	str	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4b06:	d1f4      	bne.n	4af2 <vendor_request_handler+0x3aa>
		hop_mode = HOP_BLUETOOTH;
    4b08:	2202      	movs	r2, #2
		dma_discard = 1;
    4b0a:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4b0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		hop_mode = HOP_BLUETOOTH;
    4b10:	4b99      	ldr	r3, [pc, #612]	; (4d78 <vendor_request_handler+0x630>)
    4b12:	729a      	strb	r2, [r3, #10]
		DIO_SSEL_SET;
    4b14:	4a99      	ldr	r2, [pc, #612]	; (4d7c <vendor_request_handler+0x634>)
		dma_discard = 1;
    4b16:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4b18:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4b1a:	7929      	ldrb	r1, [r5, #4]
    4b1c:	796a      	ldrb	r2, [r5, #5]
    4b1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4b22:	4997      	ldr	r1, [pc, #604]	; (4d80 <vendor_request_handler+0x638>)
    4b24:	800a      	strh	r2, [r1, #0]
		requested_mode = MODE_BT_FOLLOW;
    4b26:	2208      	movs	r2, #8
    4b28:	749a      	strb	r2, [r3, #18]
		break;
    4b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hop_mode = HOP_AFH;
    4b2c:	2205      	movs	r2, #5
    4b2e:	4b92      	ldr	r3, [pc, #584]	; (4d78 <vendor_request_handler+0x630>)
			afh_map[i] = 0;
    4b30:	4994      	ldr	r1, [pc, #592]	; (4d84 <vendor_request_handler+0x63c>)
		hop_mode = HOP_AFH;
    4b32:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4b34:	220e      	movs	r2, #14
    4b36:	749a      	strb	r2, [r3, #18]
		for(int i=0; i < 10; i++) {
    4b38:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4b3a:	461a      	mov	r2, r3
    4b3c:	545a      	strb	r2, [r3, r1]
		for(int i=0; i < 10; i++) {
    4b3e:	3301      	adds	r3, #1
    4b40:	2b0a      	cmp	r3, #10
    4b42:	d1fb      	bne.n	4b3c <vendor_request_handler+0x3f4>
		afh_enabled = 1;
    4b44:	2001      	movs	r0, #1
		used_channels = 0;
    4b46:	4b90      	ldr	r3, [pc, #576]	; (4d88 <vendor_request_handler+0x640>)
    4b48:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4b4a:	4b90      	ldr	r3, [pc, #576]	; (4d8c <vendor_request_handler+0x644>)
    4b4c:	7018      	strb	r0, [r3, #0]
		break;
    4b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		do_hop = 1;
    4b50:	2001      	movs	r0, #1
    4b52:	4b89      	ldr	r3, [pc, #548]	; (4d78 <vendor_request_handler+0x630>)
    4b54:	72d8      	strb	r0, [r3, #11]
		break;
    4b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b58:	6812      	ldr	r2, [r2, #0]
		clkn = clock;
    4b5a:	4b8d      	ldr	r3, [pc, #564]	; (4d90 <vendor_request_handler+0x648>)
    4b5c:	601a      	str	r2, [r3, #0]
    4b5e:	e773      	b.n	4a48 <vendor_request_handler+0x300>
	switch (request) {
    4b60:	2300      	movs	r3, #0
			afh_map[i] = data[i];
    4b62:	4a88      	ldr	r2, [pc, #544]	; (4d84 <vendor_request_handler+0x63c>)
    4b64:	5ce9      	ldrb	r1, [r5, r3]
    4b66:	5499      	strb	r1, [r3, r2]
		for(int i=0; i < 10; i++) {
    4b68:	3301      	adds	r3, #1
    4b6a:	2b0a      	cmp	r3, #10
    4b6c:	d1fa      	bne.n	4b64 <vendor_request_handler+0x41c>
		afh_enabled = 1;
    4b6e:	2001      	movs	r0, #1
    4b70:	4a86      	ldr	r2, [pc, #536]	; (4d8c <vendor_request_handler+0x644>)
    4b72:	7010      	strb	r0, [r2, #0]
    4b74:	e651      	b.n	481a <vendor_request_handler+0xd2>
	switch (request) {
    4b76:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4b78:	461a      	mov	r2, r3
    4b7a:	4982      	ldr	r1, [pc, #520]	; (4d84 <vendor_request_handler+0x63c>)
    4b7c:	545a      	strb	r2, [r3, r1]
		for(int i=0; i < 10; i++) {
    4b7e:	3301      	adds	r3, #1
    4b80:	2b0a      	cmp	r3, #10
    4b82:	d1fb      	bne.n	4b7c <vendor_request_handler+0x434>
		afh_enabled = 0;
    4b84:	4981      	ldr	r1, [pc, #516]	; (4d8c <vendor_request_handler+0x644>)
    4b86:	700a      	strb	r2, [r1, #0]
    4b88:	e6b9      	b.n	48fe <vendor_request_handler+0x1b6>
		clock = clkn;
    4b8a:	4b81      	ldr	r3, [pc, #516]	; (4d90 <vendor_request_handler+0x648>)
    4b8c:	1e55      	subs	r5, r2, #1
    4b8e:	6819      	ldr	r1, [r3, #0]
    4b90:	2300      	movs	r3, #0
			data[i] = (clock >> (8*i)) & 0xff;
    4b92:	fa21 f203 	lsr.w	r2, r1, r3
    4b96:	3308      	adds	r3, #8
		for(int i=0; i < 4; i++) {
    4b98:	2b20      	cmp	r3, #32
			data[i] = (clock >> (8*i)) & 0xff;
    4b9a:	f805 2f01 	strb.w	r2, [r5, #1]!
		for(int i=0; i < 4; i++) {
    4b9e:	d1f8      	bne.n	4b92 <vendor_request_handler+0x44a>
		*data_len = 4;
    4ba0:	2304      	movs	r3, #4
    4ba2:	e6ac      	b.n	48fe <vendor_request_handler+0x1b6>
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4ba4:	7812      	ldrb	r2, [r2, #0]
    4ba6:	786b      	ldrb	r3, [r5, #1]
    4ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4bac:	4a74      	ldr	r2, [pc, #464]	; (4d80 <vendor_request_handler+0x638>)
    4bae:	8013      	strh	r3, [r2, #0]
    4bb0:	e666      	b.n	4880 <vendor_request_handler+0x138>
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4bb2:	4a78      	ldr	r2, [pc, #480]	; (4d94 <vendor_request_handler+0x64c>)
    4bb4:	7828      	ldrb	r0, [r5, #0]
    4bb6:	786b      	ldrb	r3, [r5, #1]
    4bb8:	8811      	ldrh	r1, [r2, #0]
    4bba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4bbe:	440b      	add	r3, r1
    4bc0:	b21b      	sxth	r3, r3
    4bc2:	8013      	strh	r3, [r2, #0]
		if (clk_drift_ppm < 0) {
    4bc4:	8813      	ldrh	r3, [r2, #0]
    4bc6:	4974      	ldr	r1, [pc, #464]	; (4d98 <vendor_request_handler+0x650>)
    4bc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4bcc:	4b73      	ldr	r3, [pc, #460]	; (4d9c <vendor_request_handler+0x654>)
    4bce:	d00e      	beq.n	4bee <vendor_request_handler+0x4a6>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4bd0:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4bd4:	8812      	ldrh	r2, [r2, #0]
    4bd6:	4252      	negs	r2, r2
    4bd8:	b292      	uxth	r2, r2
    4bda:	fb90 f2f2 	sdiv	r2, r0, r2
			clk_drift_correction = 320 / clk_drift_ppm;
    4bde:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4be0:	4a6f      	ldr	r2, [pc, #444]	; (4da0 <vendor_request_handler+0x658>)
    4be2:	881b      	ldrh	r3, [r3, #0]
    4be4:	6812      	ldr	r2, [r2, #0]
    4be6:	b29b      	uxth	r3, r3
    4be8:	4413      	add	r3, r2
    4bea:	600b      	str	r3, [r1, #0]
    4bec:	e648      	b.n	4880 <vendor_request_handler+0x138>
		else if (clk_drift_ppm > 0) {
    4bee:	8810      	ldrh	r0, [r2, #0]
    4bf0:	b200      	sxth	r0, r0
    4bf2:	2800      	cmp	r0, #0
    4bf4:	dd07      	ble.n	4c06 <vendor_request_handler+0x4be>
			clk_drift_correction = 320 / clk_drift_ppm;
    4bf6:	8812      	ldrh	r2, [r2, #0]
    4bf8:	b210      	sxth	r0, r2
    4bfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4bfe:	fb92 f2f0 	sdiv	r2, r2, r0
    4c02:	b292      	uxth	r2, r2
    4c04:	e7eb      	b.n	4bde <vendor_request_handler+0x496>
			clk_drift_correction = 0;
    4c06:	2200      	movs	r2, #0
    4c08:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = 0;
    4c0a:	600a      	str	r2, [r1, #0]
    4c0c:	e638      	b.n	4880 <vendor_request_handler+0x138>
		*data_len = 0;
    4c0e:	2200      	movs	r2, #0
		le.do_follow = request_params[0];
    4c10:	880b      	ldrh	r3, [r1, #0]
    4c12:	4d64      	ldr	r5, [pc, #400]	; (4da4 <vendor_request_handler+0x65c>)
    4c14:	636b      	str	r3, [r5, #52]	; 0x34
		do_hop = 0;
    4c16:	4b58      	ldr	r3, [pc, #352]	; (4d78 <vendor_request_handler+0x630>)
		*data_len = 0;
    4c18:	6022      	str	r2, [r4, #0]
		do_hop = 0;
    4c1a:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4c1c:	2203      	movs	r2, #3
    4c1e:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4c20:	2209      	movs	r2, #9
    4c22:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4c24:	f002 fd5e 	bl	76e4 <usb_queue_init>
		cs_threshold_calc_and_set(channel);
    4c28:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    4c2c:	e69b      	b.n	4966 <vendor_request_handler+0x21e>
	switch (request) {
    4c2e:	2300      	movs	r3, #0
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4c30:	495c      	ldr	r1, [pc, #368]	; (4da4 <vendor_request_handler+0x65c>)
    4c32:	1e55      	subs	r5, r2, #1
    4c34:	680a      	ldr	r2, [r1, #0]
    4c36:	40da      	lsrs	r2, r3
    4c38:	3308      	adds	r3, #8
		for(int i=0; i < 4; i++) {
    4c3a:	2b20      	cmp	r3, #32
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4c3c:	f805 2f01 	strb.w	r2, [r5, #1]!
		for(int i=0; i < 4; i++) {
    4c40:	d1f8      	bne.n	4c34 <vendor_request_handler+0x4ec>
    4c42:	e7ad      	b.n	4ba0 <vendor_request_handler+0x458>
		le.target_set = 1;
    4c44:	2401      	movs	r4, #1
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4c46:	6810      	ldr	r0, [r2, #0]
    4c48:	f7ff fb9a 	bl	4380 <le_set_access_address>
		le.target_set = 1;
    4c4c:	4b55      	ldr	r3, [pc, #340]	; (4da4 <vendor_request_handler+0x65c>)
		debug_printf("AA set\n");
    4c4e:	4856      	ldr	r0, [pc, #344]	; (4da8 <vendor_request_handler+0x660>)
		le.target_set = 1;
    4c50:	645c      	str	r4, [r3, #68]	; 0x44
		debug_printf("AA set\n");
    4c52:	f004 fa57 	bl	9104 <debug_printf>
    4c56:	e613      	b.n	4880 <vendor_request_handler+0x138>
		le.conn_interval = (data[0] | data[1] << 8);
    4c58:	7853      	ldrb	r3, [r2, #1]
    4c5a:	7811      	ldrb	r1, [r2, #0]
		debug_printf("Hop interval set: %d\n", le.conn_interval);
    4c5c:	4853      	ldr	r0, [pc, #332]	; (4dac <vendor_request_handler+0x664>)
		le.conn_interval = (data[0] | data[1] << 8);
    4c5e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    4c62:	4b50      	ldr	r3, [pc, #320]	; (4da4 <vendor_request_handler+0x65c>)
    4c64:	83d9      	strh	r1, [r3, #30]
		debug_printf("Hop interval set: %d\n", le.conn_interval);
    4c66:	f004 fa4d 	bl	9104 <debug_printf>
    4c6a:	e609      	b.n	4880 <vendor_request_handler+0x138>
		data[0] = 0x13;
    4c6c:	2313      	movs	r3, #19
    4c6e:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4c70:	2337      	movs	r3, #55	; 0x37
    4c72:	e657      	b.n	4924 <vendor_request_handler+0x1dc>
		data[0] = le.crc_verify ? 1 : 0;
    4c74:	4b4b      	ldr	r3, [pc, #300]	; (4da4 <vendor_request_handler+0x65c>)
    4c76:	691b      	ldr	r3, [r3, #16]
    4c78:	3300      	adds	r3, #0
    4c7a:	bf18      	it	ne
    4c7c:	2301      	movne	r3, #1
    4c7e:	e5d7      	b.n	4830 <vendor_request_handler+0xe8>
		le.crc_verify = request_params[0] ? 1 : 0;
    4c80:	880b      	ldrh	r3, [r1, #0]
    4c82:	4a48      	ldr	r2, [pc, #288]	; (4da4 <vendor_request_handler+0x65c>)
    4c84:	3300      	adds	r3, #0
    4c86:	bf18      	it	ne
    4c88:	2301      	movne	r3, #1
    4c8a:	6113      	str	r3, [r2, #16]
    4c8c:	e5f8      	b.n	4880 <vendor_request_handler+0x138>
		p = dequeue();
    4c8e:	f002 fd51 	bl	7734 <dequeue>
		if (p != NULL) {
    4c92:	4601      	mov	r1, r0
    4c94:	b128      	cbz	r0, 4ca2 <vendor_request_handler+0x55a>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4c96:	2240      	movs	r2, #64	; 0x40
    4c98:	4628      	mov	r0, r5
    4c9a:	f006 f995 	bl	afc8 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4c9e:	2340      	movs	r3, #64	; 0x40
    4ca0:	e62d      	b.n	48fe <vendor_request_handler+0x1b6>
			data[0] = 0;
    4ca2:	7028      	strb	r0, [r5, #0]
    4ca4:	e60f      	b.n	48c6 <vendor_request_handler+0x17e>
		*data_len = 0;
    4ca6:	2200      	movs	r2, #0
		hop_mode = HOP_NONE;
    4ca8:	4b33      	ldr	r3, [pc, #204]	; (4d78 <vendor_request_handler+0x630>)
		*data_len = 0;
    4caa:	6022      	str	r2, [r4, #0]
		hop_mode = HOP_NONE;
    4cac:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4cae:	220a      	movs	r2, #10
    4cb0:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4cb2:	f002 fd17 	bl	76e4 <usb_queue_init>
    4cb6:	e6c7      	b.n	4a48 <vendor_request_handler+0x300>
		reg_val = cc2400_get(request_params[0]);
    4cb8:	7808      	ldrb	r0, [r1, #0]
    4cba:	f004 fe67 	bl	998c <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4cbe:	0a03      	lsrs	r3, r0, #8
    4cc0:	702b      	strb	r3, [r5, #0]
		data[1] = reg_val & 0xff;
    4cc2:	7068      	strb	r0, [r5, #1]
    4cc4:	e62f      	b.n	4926 <vendor_request_handler+0x1de>
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4cc6:	8849      	ldrh	r1, [r1, #2]
    4cc8:	7830      	ldrb	r0, [r6, #0]
    4cca:	e605      	b.n	48d8 <vendor_request_handler+0x190>
	switch (request) {
    4ccc:	2600      	movs	r6, #0
    4cce:	b2f7      	uxtb	r7, r6
			reg_val = cc2400_get(i);
    4cd0:	4638      	mov	r0, r7
    4cd2:	f004 fe5b 	bl	998c <cc2400_get>
    4cd6:	3601      	adds	r6, #1
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4cd8:	0a03      	lsrs	r3, r0, #8
		for(i=0; i<=MAX_READ_REG; i++) {
    4cda:	2e2e      	cmp	r6, #46	; 0x2e
			data[i*3] = i;
    4cdc:	702f      	strb	r7, [r5, #0]
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4cde:	706b      	strb	r3, [r5, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4ce0:	70a8      	strb	r0, [r5, #2]
    4ce2:	f105 0503 	add.w	r5, r5, #3
		for(i=0; i<=MAX_READ_REG; i++) {
    4ce6:	d1f2      	bne.n	4cce <vendor_request_handler+0x586>
		*data_len = MAX_READ_REG*3;
    4ce8:	2387      	movs	r3, #135	; 0x87
    4cea:	e608      	b.n	48fe <vendor_request_handler+0x1b6>
		i = 7 + data[6];
    4cec:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4cee:	4629      	mov	r1, r5
		i = 7 + data[6];
    4cf0:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4cf2:	b2d2      	uxtb	r2, r2
    4cf4:	482e      	ldr	r0, [pc, #184]	; (4db0 <vendor_request_handler+0x668>)
    4cf6:	f006 f967 	bl	afc8 <memcpy>
		requested_mode = MODE_TX_GENERIC;
    4cfa:	2210      	movs	r2, #16
    4cfc:	e66f      	b.n	49de <vendor_request_handler+0x296>
		memcpy(slave_mac_address, data, 6);
    4cfe:	4c1e      	ldr	r4, [pc, #120]	; (4d78 <vendor_request_handler+0x630>)
    4d00:	2206      	movs	r2, #6
    4d02:	4629      	mov	r1, r5
    4d04:	f104 001c 	add.w	r0, r4, #28
    4d08:	f006 f95e 	bl	afc8 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4d0c:	230c      	movs	r3, #12
    4d0e:	74a3      	strb	r3, [r4, #18]
    4d10:	e5b6      	b.n	4880 <vendor_request_handler+0x138>
		debug_printf("Transmitting on index: %d\n", data[0]);
    4d12:	7811      	ldrb	r1, [r2, #0]
    4d14:	4827      	ldr	r0, [pc, #156]	; (4db4 <vendor_request_handler+0x66c>)
    4d16:	f004 f9f5 	bl	9104 <debug_printf>
		le.channel_idx = data[0];
    4d1a:	4c22      	ldr	r4, [pc, #136]	; (4da4 <vendor_request_handler+0x65c>)
    4d1c:	7828      	ldrb	r0, [r5, #0]
    4d1e:	7560      	strb	r0, [r4, #21]
		channel = btle_channel_index_to_phys(le.channel_idx);
    4d20:	f002 fb88 	bl	7434 <btle_channel_index_to_phys>
		hop_mode = HOP_TX_LE;
    4d24:	2206      	movs	r2, #6
    4d26:	4b14      	ldr	r3, [pc, #80]	; (4d78 <vendor_request_handler+0x630>)
		channel = btle_channel_index_to_phys(le.channel_idx);
    4d28:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
		hop_mode = HOP_TX_LE;
    4d2c:	729a      	strb	r2, [r3, #10]
		le.interval_timer = le.conn_interval;
    4d2e:	8be2      	ldrh	r2, [r4, #30]
    4d30:	83a2      	strh	r2, [r4, #28]
		requested_mode = MODE_BT_TRANSMIT_LE;
    4d32:	2211      	movs	r2, #17
    4d34:	e5bf      	b.n	48b6 <vendor_request_handler+0x16e>
	unsigned data_in_len = request_params[2];
    4d36:	888a      	ldrh	r2, [r1, #4]
		if (data_in_len > LE_ADV_MAX_LEN)
    4d38:	2a15      	cmp	r2, #21
    4d3a:	f200 8082 	bhi.w	4e42 <vendor_request_handler+0x6fa>
		le_adv_len = data_in_len;
    4d3e:	4819      	ldr	r0, [pc, #100]	; (4da4 <vendor_request_handler+0x65c>)
		memcpy(le_adv_data, data, le_adv_len);
    4d40:	4629      	mov	r1, r5
		le_adv_len = data_in_len;
    4d42:	6582      	str	r2, [r0, #88]	; 0x58
		memcpy(le_adv_data, data, le_adv_len);
    4d44:	305c      	adds	r0, #92	; 0x5c
    4d46:	f006 f93f 	bl	afc8 <memcpy>
    4d4a:	e599      	b.n	4880 <vendor_request_handler+0x138>
		if (data[6] > 48) {
    4d4c:	7994      	ldrb	r4, [r2, #6]
    4d4e:	2c30      	cmp	r4, #48	; 0x30
    4d50:	d877      	bhi.n	4e42 <vendor_request_handler+0x6fa>
		else if (data[6] == 0) {
    4d52:	bb8c      	cbnz	r4, 4db8 <vendor_request_handler+0x670>
			le.target_set = 0;
    4d54:	4d13      	ldr	r5, [pc, #76]	; (4da4 <vendor_request_handler+0x65c>)
			memset(le.target, 0, 6);
    4d56:	4621      	mov	r1, r4
    4d58:	2206      	movs	r2, #6
    4d5a:	f105 0038 	add.w	r0, r5, #56	; 0x38
			le.target_set = 0;
    4d5e:	646c      	str	r4, [r5, #68]	; 0x44
			memset(le.target, 0, 6);
    4d60:	f7ff fa4e 	bl	4200 <memset>
			memset(le.target_mask, 0, 6);
    4d64:	2206      	movs	r2, #6
    4d66:	4621      	mov	r1, r4
    4d68:	f105 003e 	add.w	r0, r5, #62	; 0x3e
    4d6c:	f7ff fa48 	bl	4200 <memset>
    4d70:	e586      	b.n	4880 <vendor_request_handler+0x138>
    4d72:	bf00      	nop
    4d74:	10001388 	.word	0x10001388
    4d78:	10000a4c 	.word	0x10000a4c
    4d7c:	2009c098 	.word	0x2009c098
    4d80:	10001662 	.word	0x10001662
    4d84:	1000137b 	.word	0x1000137b
    4d88:	10001379 	.word	0x10001379
    4d8c:	10001997 	.word	0x10001997
    4d90:	10001454 	.word	0x10001454
    4d94:	10001994 	.word	0x10001994
    4d98:	100019cc 	.word	0x100019cc
    4d9c:	10001450 	.word	0x10001450
    4da0:	1000144c 	.word	0x1000144c
    4da4:	10000450 	.word	0x10000450
    4da8:	0000b9d1 	.word	0x0000b9d1
    4dac:	0000b9d9 	.word	0x0000b9d9
    4db0:	10001458 	.word	0x10001458
    4db4:	0000b9ef 	.word	0x0000b9ef
    4db8:	4c23      	ldr	r4, [pc, #140]	; (4e48 <vendor_request_handler+0x700>)
    4dba:	1d93      	adds	r3, r2, #6
		else if (data[6] == 0) {
    4dbc:	4622      	mov	r2, r4
				le.target[i] = data[5-i];
    4dbe:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
			for (i = 0; i < 6; ++i)
    4dc2:	42ab      	cmp	r3, r5
				le.target[i] = data[5-i];
    4dc4:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (i = 0; i < 6; ++i)
    4dc8:	d1f9      	bne.n	4dbe <vendor_request_handler+0x676>
			memset(le.target_mask, 0, 6);
    4dca:	2100      	movs	r1, #0
    4dcc:	2206      	movs	r2, #6
    4dce:	481f      	ldr	r0, [pc, #124]	; (4e4c <vendor_request_handler+0x704>)
    4dd0:	f7ff fa16 	bl	4200 <memset>
				le.target_mask[i] = 0xff;
    4dd4:	26ff      	movs	r6, #255	; 0xff
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4dd6:	2305      	movs	r3, #5
				le.target_mask[i] = 0xff;
    4dd8:	491d      	ldr	r1, [pc, #116]	; (4e50 <vendor_request_handler+0x708>)
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4dda:	79a8      	ldrb	r0, [r5, #6]
    4ddc:	2808      	cmp	r0, #8
    4dde:	d819      	bhi.n	4e14 <vendor_request_handler+0x6cc>
			if (data[6] > 0) {
    4de0:	b160      	cbz	r0, 4dfc <vendor_request_handler+0x6b4>
    4de2:	2100      	movs	r1, #0
    4de4:	460a      	mov	r2, r1
    4de6:	3101      	adds	r1, #1
				for (i = 0; i < data[6]; ++i) {
    4de8:	b2cd      	uxtb	r5, r1
					final_byte >>= 1;
    4dea:	0852      	lsrs	r2, r2, #1
				for (i = 0; i < data[6]; ++i) {
    4dec:	4285      	cmp	r5, r0
					final_byte |= 0b10000000;
    4dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				for (i = 0; i < data[6]; ++i) {
    4df2:	d3f8      	bcc.n	4de6 <vendor_request_handler+0x69e>
				le.target_mask[last] = final_byte;
    4df4:	4916      	ldr	r1, [pc, #88]	; (4e50 <vendor_request_handler+0x708>)
    4df6:	440b      	add	r3, r1
    4df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    4dfc:	4915      	ldr	r1, [pc, #84]	; (4e54 <vendor_request_handler+0x70c>)
				le.target[i] &= le.target_mask[i];
    4dfe:	7863      	ldrb	r3, [r4, #1]
    4e00:	79e2      	ldrb	r2, [r4, #7]
    4e02:	4013      	ands	r3, r2
    4e04:	f804 3f01 	strb.w	r3, [r4, #1]!
			for (i = 0; i < 5; ++i)
    4e08:	42a1      	cmp	r1, r4
    4e0a:	d1f8      	bne.n	4dfe <vendor_request_handler+0x6b6>
			le.target_set = 1;
    4e0c:	2001      	movs	r0, #1
    4e0e:	4b10      	ldr	r3, [pc, #64]	; (4e50 <vendor_request_handler+0x708>)
    4e10:	6458      	str	r0, [r3, #68]	; 0x44
    4e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				le.target_mask[i] = 0xff;
    4e14:	18ca      	adds	r2, r1, r3
    4e16:	f882 603e 	strb.w	r6, [r2, #62]	; 0x3e
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4e1a:	79aa      	ldrb	r2, [r5, #6]
    4e1c:	3b01      	subs	r3, #1
    4e1e:	3a08      	subs	r2, #8
    4e20:	b2db      	uxtb	r3, r3
    4e22:	71aa      	strb	r2, [r5, #6]
    4e24:	e7d9      	b.n	4dda <vendor_request_handler+0x692>
		cancel_follow = 1;
    4e26:	2001      	movs	r0, #1
    4e28:	4b0b      	ldr	r3, [pc, #44]	; (4e58 <vendor_request_handler+0x710>)
    4e2a:	6258      	str	r0, [r3, #36]	; 0x24
		break;
    4e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		jam_mode = request_params[0];
    4e2e:	780a      	ldrb	r2, [r1, #0]
    4e30:	4b09      	ldr	r3, [pc, #36]	; (4e58 <vendor_request_handler+0x710>)
    4e32:	74da      	strb	r2, [r3, #19]
    4e34:	e524      	b.n	4880 <vendor_request_handler+0x138>
		requested_mode = MODE_EGO;
    4e36:	220d      	movs	r2, #13
    4e38:	4b07      	ldr	r3, [pc, #28]	; (4e58 <vendor_request_handler+0x710>)
    4e3a:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    4e3c:	780a      	ldrb	r2, [r1, #0]
    4e3e:	751a      	strb	r2, [r3, #20]
    4e40:	e51e      	b.n	4880 <vendor_request_handler+0x138>
			return 0;
    4e42:	2000      	movs	r0, #0
}
    4e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e46:	bf00      	nop
    4e48:	10000487 	.word	0x10000487
    4e4c:	1000048e 	.word	0x1000048e
    4e50:	10000450 	.word	0x10000450
    4e54:	1000048c 	.word	0x1000048c
    4e58:	10000a4c 	.word	0x10000a4c

00004e5c <enqueue_with_ts>:
{
    4e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e60:	4606      	mov	r6, r0
    4e62:	460f      	mov	r7, r1
    4e64:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4e66:	f002 fc4b 	bl	7700 <usb_enqueue>
    4e6a:	4d10      	ldr	r5, [pc, #64]	; (4eac <enqueue_with_ts+0x50>)
	if (f == NULL) {
    4e6c:	4604      	mov	r4, r0
    4e6e:	b928      	cbnz	r0, 4e7c <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4e70:	786b      	ldrb	r3, [r5, #1]
    4e72:	f043 0304 	orr.w	r3, r3, #4
    4e76:	706b      	strb	r3, [r5, #1]
		return 0;
    4e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;
    4e7c:	7006      	strb	r6, [r0, #0]
	f->clkn_high = 0;
    4e7e:	2600      	movs	r6, #0
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4e80:	4b0b      	ldr	r3, [pc, #44]	; (4eb0 <enqueue_with_ts+0x54>)
	f->clkn_high = 0;
    4e82:	70c6      	strb	r6, [r0, #3]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4e84:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
	f->clk100ns = ts;
    4e88:	f8c0 8004 	str.w	r8, [r0, #4]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4e8c:	3b62      	subs	r3, #98	; 0x62
    4e8e:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4e90:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    4e92:	72c6      	strb	r6, [r0, #11]
	memcpy(f->data, buf, DMA_SIZE);
    4e94:	2232      	movs	r2, #50	; 0x32
    4e96:	4639      	mov	r1, r7
    4e98:	300e      	adds	r0, #14
    4e9a:	f006 f895 	bl	afc8 <memcpy>
	f->status = status;
    4e9e:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    4ea0:	706e      	strb	r6, [r5, #1]
	f->status = status;
    4ea2:	7063      	strb	r3, [r4, #1]
	return 1;
    4ea4:	2001      	movs	r0, #1
}
    4ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eaa:	bf00      	nop
    4eac:	10000a4c 	.word	0x10000a4c
    4eb0:	10000450 	.word	0x10000450

00004eb4 <TIMER0_IRQHandler>:
{
    4eb4:	b510      	push	{r4, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	07d8      	lsls	r0, r3, #31
    4ebe:	d546      	bpl.n	4f4e <TIMER0_IRQHandler+0x9a>
		clkn += clkn_offset + 1;
    4ec0:	4948      	ldr	r1, [pc, #288]	; (4fe4 <TIMER0_IRQHandler+0x130>)
    4ec2:	4a49      	ldr	r2, [pc, #292]	; (4fe8 <TIMER0_IRQHandler+0x134>)
    4ec4:	680b      	ldr	r3, [r1, #0]
    4ec6:	6810      	ldr	r0, [r2, #0]
    4ec8:	4403      	add	r3, r0
    4eca:	3301      	adds	r3, #1
    4ecc:	6013      	str	r3, [r2, #0]
		clkn_offset = 0;
    4ece:	2300      	movs	r3, #0
    4ed0:	600b      	str	r3, [r1, #0]
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4ed2:	4946      	ldr	r1, [pc, #280]	; (4fec <TIMER0_IRQHandler+0x138>)
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4ed4:	6810      	ldr	r0, [r2, #0]
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4ed6:	7a8c      	ldrb	r4, [r1, #10]
    4ed8:	460b      	mov	r3, r1
    4eda:	b114      	cbz	r4, 4ee2 <TIMER0_IRQHandler+0x2e>
    4edc:	7a8c      	ldrb	r4, [r1, #10]
    4ede:	2c01      	cmp	r4, #1
    4ee0:	d136      	bne.n	4f50 <TIMER0_IRQHandler+0x9c>
			if ((clkn & 0x7f) == 0)
    4ee2:	6811      	ldr	r1, [r2, #0]
    4ee4:	0649      	lsls	r1, r1, #25
    4ee6:	d101      	bne.n	4eec <TIMER0_IRQHandler+0x38>
				do_hop = 1;
    4ee8:	2101      	movs	r1, #1
    4eea:	72d9      	strb	r1, [r3, #11]
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    4eec:	4940      	ldr	r1, [pc, #256]	; (4ff0 <TIMER0_IRQHandler+0x13c>)
    4eee:	4b41      	ldr	r3, [pc, #260]	; (4ff4 <TIMER0_IRQHandler+0x140>)
    4ef0:	6808      	ldr	r0, [r1, #0]
    4ef2:	b1b8      	cbz	r0, 4f24 <TIMER0_IRQHandler+0x70>
    4ef4:	8818      	ldrh	r0, [r3, #0]
    4ef6:	b280      	uxth	r0, r0
    4ef8:	b9a0      	cbnz	r0, 4f24 <TIMER0_IRQHandler+0x70>
			if(clkn >= clkn_next_drift_fix) {
    4efa:	6814      	ldr	r4, [r2, #0]
    4efc:	6808      	ldr	r0, [r1, #0]
    4efe:	4284      	cmp	r4, r0
    4f00:	d310      	bcc.n	4f24 <TIMER0_IRQHandler+0x70>
				if(clk_drift_ppm >= 0) {
    4f02:	483d      	ldr	r0, [pc, #244]	; (4ff8 <TIMER0_IRQHandler+0x144>)
				clkn_last_drift_fix = clkn;
    4f04:	4c3d      	ldr	r4, [pc, #244]	; (4ffc <TIMER0_IRQHandler+0x148>)
				if(clk_drift_ppm >= 0) {
    4f06:	8800      	ldrh	r0, [r0, #0]
    4f08:	0400      	lsls	r0, r0, #16
					clk100ns_offset = 1;
    4f0a:	bf54      	ite	pl
    4f0c:	2001      	movpl	r0, #1
					clk100ns_offset = 6249;
    4f0e:	f641 0069 	movwmi	r0, #6249	; 0x1869
    4f12:	8018      	strh	r0, [r3, #0]
				clkn_last_drift_fix = clkn;
    4f14:	6810      	ldr	r0, [r2, #0]
    4f16:	6020      	str	r0, [r4, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4f18:	4839      	ldr	r0, [pc, #228]	; (5000 <TIMER0_IRQHandler+0x14c>)
    4f1a:	8800      	ldrh	r0, [r0, #0]
    4f1c:	6824      	ldr	r4, [r4, #0]
    4f1e:	b280      	uxth	r0, r0
    4f20:	4420      	add	r0, r4
    4f22:	6008      	str	r0, [r1, #0]
		if(clk100ns_offset > 3124)
    4f24:	f640 4034 	movw	r0, #3124	; 0xc34
    4f28:	8819      	ldrh	r1, [r3, #0]
    4f2a:	b289      	uxth	r1, r1
    4f2c:	4281      	cmp	r1, r0
			clkn += 2;
    4f2e:	bf82      	ittt	hi
    4f30:	6811      	ldrhi	r1, [r2, #0]
    4f32:	3102      	addhi	r1, #2
    4f34:	6011      	strhi	r1, [r2, #0]
		T0MR0 = 3124 + clk100ns_offset;
    4f36:	881a      	ldrh	r2, [r3, #0]
    4f38:	4932      	ldr	r1, [pc, #200]	; (5004 <TIMER0_IRQHandler+0x150>)
    4f3a:	b292      	uxth	r2, r2
    4f3c:	f602 4234 	addw	r2, r2, #3124	; 0xc34
    4f40:	600a      	str	r2, [r1, #0]
		clk100ns_offset = 0;
    4f42:	2200      	movs	r2, #0
    4f44:	801a      	strh	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    4f46:	2201      	movs	r2, #1
    4f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4f4c:	601a      	str	r2, [r3, #0]
    4f4e:	bd10      	pop	{r4, pc}
		else if (hop_mode == HOP_BLUETOOTH) {
    4f50:	7a8b      	ldrb	r3, [r1, #10]
    4f52:	2b02      	cmp	r3, #2
    4f54:	d105      	bne.n	4f62 <TIMER0_IRQHandler+0xae>
			if ((clkn & 0x1) == 0)
    4f56:	6813      	ldr	r3, [r2, #0]
    4f58:	07dc      	lsls	r4, r3, #31
    4f5a:	d4c7      	bmi.n	4eec <TIMER0_IRQHandler+0x38>
				do_hop = 1;
    4f5c:	2301      	movs	r3, #1
    4f5e:	72cb      	strb	r3, [r1, #11]
    4f60:	e7c4      	b.n	4eec <TIMER0_IRQHandler+0x38>
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f62:	4b29      	ldr	r3, [pc, #164]	; (5008 <TIMER0_IRQHandler+0x154>)
    4f64:	699c      	ldr	r4, [r3, #24]
    4f66:	1b00      	subs	r0, r0, r4
		else if (hop_mode == HOP_BTLE) {
    4f68:	7a8c      	ldrb	r4, [r1, #10]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f6a:	f000 0003 	and.w	r0, r0, #3
		else if (hop_mode == HOP_BTLE) {
    4f6e:	2c03      	cmp	r4, #3
    4f70:	d114      	bne.n	4f9c <TIMER0_IRQHandler+0xe8>
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    4f72:	7d1c      	ldrb	r4, [r3, #20]
    4f74:	2c03      	cmp	r4, #3
    4f76:	d1b9      	bne.n	4eec <TIMER0_IRQHandler+0x38>
    4f78:	2800      	cmp	r0, #0
    4f7a:	d1b7      	bne.n	4eec <TIMER0_IRQHandler+0x38>
				--le.interval_timer;
    4f7c:	8b98      	ldrh	r0, [r3, #28]
    4f7e:	3801      	subs	r0, #1
    4f80:	b280      	uxth	r0, r0
    4f82:	8398      	strh	r0, [r3, #28]
				if (le.interval_timer == 0) {
    4f84:	8b98      	ldrh	r0, [r3, #28]
    4f86:	b280      	uxth	r0, r0
    4f88:	b9d0      	cbnz	r0, 4fc0 <TIMER0_IRQHandler+0x10c>
					do_hop = 1;
    4f8a:	2001      	movs	r0, #1
    4f8c:	72c8      	strb	r0, [r1, #11]
					++le.conn_count;
    4f8e:	8c19      	ldrh	r1, [r3, #32]
    4f90:	4401      	add	r1, r0
    4f92:	b289      	uxth	r1, r1
    4f94:	8419      	strh	r1, [r3, #32]
					le.interval_timer = le.conn_interval;
    4f96:	8bd9      	ldrh	r1, [r3, #30]
    4f98:	8399      	strh	r1, [r3, #28]
    4f9a:	e7a7      	b.n	4eec <TIMER0_IRQHandler+0x38>
		else if (hop_mode == HOP_TX_LE) {
    4f9c:	7a8c      	ldrb	r4, [r1, #10]
    4f9e:	2c06      	cmp	r4, #6
    4fa0:	d113      	bne.n	4fca <TIMER0_IRQHandler+0x116>
			if (le_clk == 0) {
    4fa2:	2800      	cmp	r0, #0
    4fa4:	d1a2      	bne.n	4eec <TIMER0_IRQHandler+0x38>
				--le.interval_timer;
    4fa6:	8b98      	ldrh	r0, [r3, #28]
    4fa8:	3801      	subs	r0, #1
    4faa:	b280      	uxth	r0, r0
    4fac:	8398      	strh	r0, [r3, #28]
				if (le.interval_timer == 0) {
    4fae:	8b98      	ldrh	r0, [r3, #28]
    4fb0:	b280      	uxth	r0, r0
    4fb2:	b928      	cbnz	r0, 4fc0 <TIMER0_IRQHandler+0x10c>
					le.interval_timer = le.conn_interval;
    4fb4:	8bd8      	ldrh	r0, [r3, #30]
    4fb6:	8398      	strh	r0, [r3, #28]
					do_transmit = 1;
    4fb8:	2301      	movs	r3, #1
    4fba:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    4fbe:	e795      	b.n	4eec <TIMER0_IRQHandler+0x38>
					TXLED_CLR; // hack!
    4fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
    4fc4:	4b11      	ldr	r3, [pc, #68]	; (500c <TIMER0_IRQHandler+0x158>)
    4fc6:	6019      	str	r1, [r3, #0]
    4fc8:	e790      	b.n	4eec <TIMER0_IRQHandler+0x38>
		else if (hop_mode == HOP_AFH) {
    4fca:	7a88      	ldrb	r0, [r1, #10]
    4fcc:	2805      	cmp	r0, #5
    4fce:	d18d      	bne.n	4eec <TIMER0_IRQHandler+0x38>
			if( (last_hop + hop_timeout) == clkn ) {
    4fd0:	480f      	ldr	r0, [pc, #60]	; (5010 <TIMER0_IRQHandler+0x15c>)
    4fd2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    4fd6:	6804      	ldr	r4, [r0, #0]
    4fd8:	b29b      	uxth	r3, r3
    4fda:	6810      	ldr	r0, [r2, #0]
    4fdc:	4423      	add	r3, r4
    4fde:	4283      	cmp	r3, r0
    4fe0:	d184      	bne.n	4eec <TIMER0_IRQHandler+0x38>
    4fe2:	e7bb      	b.n	4f5c <TIMER0_IRQHandler+0xa8>
    4fe4:	10001388 	.word	0x10001388
    4fe8:	10001454 	.word	0x10001454
    4fec:	10000a4c 	.word	0x10000a4c
    4ff0:	100019cc 	.word	0x100019cc
    4ff4:	10001662 	.word	0x10001662
    4ff8:	10001994 	.word	0x10001994
    4ffc:	1000144c 	.word	0x1000144c
    5000:	10001450 	.word	0x10001450
    5004:	40004018 	.word	0x40004018
    5008:	10000450 	.word	0x10000450
    500c:	2009c03c 	.word	0x2009c03c
    5010:	10001370 	.word	0x10001370

00005014 <EINT3_IRQHandler>:
	IO2IntClr   = PIN_GIO6; // clear interrupt
    5014:	2204      	movs	r2, #4
    5016:	4b08      	ldr	r3, [pc, #32]	; (5038 <EINT3_IRQHandler+0x24>)
    5018:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    501a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    501e:	4b07      	ldr	r3, [pc, #28]	; (503c <EINT3_IRQHandler+0x28>)
    5020:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    5022:	2201      	movs	r2, #1
    5024:	4b06      	ldr	r3, [pc, #24]	; (5040 <EINT3_IRQHandler+0x2c>)
    5026:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5028:	4b06      	ldr	r3, [pc, #24]	; (5044 <EINT3_IRQHandler+0x30>)
    502a:	7a9a      	ldrb	r2, [r3, #10]
    502c:	2a02      	cmp	r2, #2
		dma_discard = 0;
    502e:	bf04      	itt	eq
    5030:	2200      	moveq	r2, #0
    5032:	741a      	strbeq	r2, [r3, #16]
    5034:	4770      	bx	lr
    5036:	bf00      	nop
    5038:	400280ac 	.word	0x400280ac
    503c:	2009c09c 	.word	0x2009c09c
    5040:	10001a0d 	.word	0x10001a0d
    5044:	10000a4c 	.word	0x10000a4c

00005048 <legacy_DMA_IRQHandler>:
{
    5048:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    504a:	4b29      	ldr	r3, [pc, #164]	; (50f0 <legacy_DMA_IRQHandler+0xa8>)
    504c:	7c5a      	ldrb	r2, [r3, #17]
    504e:	2a01      	cmp	r2, #1
    5050:	d011      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW
    5052:	7c5a      	ldrb	r2, [r3, #17]
    5054:	2a08      	cmp	r2, #8
    5056:	d00e      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_SPECAN
    5058:	7c5a      	ldrb	r2, [r3, #17]
    505a:	2a04      	cmp	r2, #4
    505c:	d00b      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW_LE
    505e:	7c5a      	ldrb	r2, [r3, #17]
    5060:	2a09      	cmp	r2, #9
    5062:	d008      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_PROMISC_LE
    5064:	7c5a      	ldrb	r2, [r3, #17]
    5066:	2a0a      	cmp	r2, #10
    5068:	d005      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_SLAVE_LE
    506a:	7c5a      	ldrb	r2, [r3, #17]
    506c:	2a0c      	cmp	r2, #12
    506e:	d002      	beq.n	5076 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_RX_GENERIC)
    5070:	7c5a      	ldrb	r2, [r3, #17]
    5072:	2a0f      	cmp	r2, #15
    5074:	d13a      	bne.n	50ec <legacy_DMA_IRQHandler+0xa4>
		if (DMACIntStat & (1 << 0)) {
    5076:	4a1f      	ldr	r2, [pc, #124]	; (50f4 <legacy_DMA_IRQHandler+0xac>)
    5078:	6812      	ldr	r2, [r2, #0]
    507a:	07d1      	lsls	r1, r2, #31
    507c:	d536      	bpl.n	50ec <legacy_DMA_IRQHandler+0xa4>
			if (DMACIntTCStat & (1 << 0)) {
    507e:	4a1e      	ldr	r2, [pc, #120]	; (50f8 <legacy_DMA_IRQHandler+0xb0>)
    5080:	6812      	ldr	r2, [r2, #0]
    5082:	07d2      	lsls	r2, r2, #31
    5084:	d527      	bpl.n	50d6 <legacy_DMA_IRQHandler+0x8e>
				DMACIntTCClear = (1 << 0);
    5086:	2101      	movs	r1, #1
    5088:	4a1c      	ldr	r2, [pc, #112]	; (50fc <legacy_DMA_IRQHandler+0xb4>)
				idle_buf_clk100ns  = CLK100NS;
    508a:	f640 4435 	movw	r4, #3125	; 0xc35
				DMACIntTCClear = (1 << 0);
    508e:	6011      	str	r1, [r2, #0]
				if (hop_mode == HOP_BLUETOOTH)
    5090:	7a9a      	ldrb	r2, [r3, #10]
				idle_buf_clk100ns  = CLK100NS;
    5092:	481b      	ldr	r0, [pc, #108]	; (5100 <legacy_DMA_IRQHandler+0xb8>)
				if (hop_mode == HOP_BLUETOOTH)
    5094:	2a02      	cmp	r2, #2
					DIO_SSEL_SET;
    5096:	bf02      	ittt	eq
    5098:	f04f 5180 	moveq.w	r1, #268435456	; 0x10000000
    509c:	4a19      	ldreq	r2, [pc, #100]	; (5104 <legacy_DMA_IRQHandler+0xbc>)
    509e:	6011      	streq	r1, [r2, #0]
				idle_buf_clk100ns  = CLK100NS;
    50a0:	4919      	ldr	r1, [pc, #100]	; (5108 <legacy_DMA_IRQHandler+0xc0>)
    50a2:	680a      	ldr	r2, [r1, #0]
    50a4:	6800      	ldr	r0, [r0, #0]
    50a6:	f3c2 0213 	ubfx	r2, r2, #0, #20
    50aa:	fb04 0202 	mla	r2, r4, r2, r0
    50ae:	605a      	str	r2, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    50b0:	680a      	ldr	r2, [r1, #0]
    50b2:	f3c2 5207 	ubfx	r2, r2, #20, #8
    50b6:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    50b8:	4a14      	ldr	r2, [pc, #80]	; (510c <legacy_DMA_IRQHandler+0xc4>)
    50ba:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
    50be:	b292      	uxth	r2, r2
    50c0:	811a      	strh	r2, [r3, #8]
				volatile uint8_t* tmp = active_rxbuf;
    50c2:	4a13      	ldr	r2, [pc, #76]	; (5110 <legacy_DMA_IRQHandler+0xc8>)
				active_rxbuf = idle_rxbuf;
    50c4:	4b13      	ldr	r3, [pc, #76]	; (5114 <legacy_DMA_IRQHandler+0xcc>)
				volatile uint8_t* tmp = active_rxbuf;
    50c6:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    50c8:	6818      	ldr	r0, [r3, #0]
    50ca:	6010      	str	r0, [r2, #0]
				++rx_tc;
    50cc:	4a12      	ldr	r2, [pc, #72]	; (5118 <legacy_DMA_IRQHandler+0xd0>)
				idle_rxbuf = tmp;
    50ce:	6019      	str	r1, [r3, #0]
				++rx_tc;
    50d0:	6813      	ldr	r3, [r2, #0]
    50d2:	3301      	adds	r3, #1
    50d4:	6013      	str	r3, [r2, #0]
			if (DMACIntErrStat & (1 << 0)) {
    50d6:	4b11      	ldr	r3, [pc, #68]	; (511c <legacy_DMA_IRQHandler+0xd4>)
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	07db      	lsls	r3, r3, #31
    50dc:	d506      	bpl.n	50ec <legacy_DMA_IRQHandler+0xa4>
				DMACIntErrClr = (1 << 0);
    50de:	2201      	movs	r2, #1
    50e0:	4b0f      	ldr	r3, [pc, #60]	; (5120 <legacy_DMA_IRQHandler+0xd8>)
    50e2:	601a      	str	r2, [r3, #0]
				++rx_err;
    50e4:	4a0f      	ldr	r2, [pc, #60]	; (5124 <legacy_DMA_IRQHandler+0xdc>)
    50e6:	6813      	ldr	r3, [r2, #0]
    50e8:	3301      	adds	r3, #1
    50ea:	6013      	str	r3, [r2, #0]
    50ec:	bd10      	pop	{r4, pc}
    50ee:	bf00      	nop
    50f0:	10000a4c 	.word	0x10000a4c
    50f4:	50004000 	.word	0x50004000
    50f8:	50004004 	.word	0x50004004
    50fc:	50004008 	.word	0x50004008
    5100:	40004008 	.word	0x40004008
    5104:	2009c098 	.word	0x2009c098
    5108:	10001454 	.word	0x10001454
    510c:	10000450 	.word	0x10000450
    5110:	10001494 	.word	0x10001494
    5114:	10001670 	.word	0x10001670
    5118:	10001374 	.word	0x10001374
    511c:	5000400c 	.word	0x5000400c
    5120:	50004010 	.word	0x50004010
    5124:	10001a08 	.word	0x10001a08

00005128 <DMA_IRQHandler>:
void DMA_IRQHandler(void) {
    5128:	b508      	push	{r3, lr}
	if (mode == MODE_BT_FOLLOW_LE)
    512a:	4b11      	ldr	r3, [pc, #68]	; (5170 <DMA_IRQHandler+0x48>)
    512c:	7c5b      	ldrb	r3, [r3, #17]
    512e:	2b09      	cmp	r3, #9
    5130:	d11a      	bne.n	5168 <DMA_IRQHandler+0x40>
		le_DMA_IRQHandler();
    5132:	f002 ff09 	bl	7f48 <le_DMA_IRQHandler>
	if (DMACIntStat & (1 << 7)) {
    5136:	4b0f      	ldr	r3, [pc, #60]	; (5174 <DMA_IRQHandler+0x4c>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	0619      	lsls	r1, r3, #24
    513c:	d517      	bpl.n	516e <DMA_IRQHandler+0x46>
		if (DMACIntTCStat & (1 << 7)) {
    513e:	4b0e      	ldr	r3, [pc, #56]	; (5178 <DMA_IRQHandler+0x50>)
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	061a      	lsls	r2, r3, #24
    5144:	d505      	bpl.n	5152 <DMA_IRQHandler+0x2a>
			DMACIntTCClear = (1 << 7);
    5146:	2280      	movs	r2, #128	; 0x80
    5148:	4b0c      	ldr	r3, [pc, #48]	; (517c <DMA_IRQHandler+0x54>)
    514a:	601a      	str	r2, [r3, #0]
			debug_dma_active = 0;
    514c:	2200      	movs	r2, #0
    514e:	4b0c      	ldr	r3, [pc, #48]	; (5180 <DMA_IRQHandler+0x58>)
    5150:	601a      	str	r2, [r3, #0]
		if (DMACIntErrStat & (1 << 7)) {
    5152:	4b0c      	ldr	r3, [pc, #48]	; (5184 <DMA_IRQHandler+0x5c>)
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	061b      	lsls	r3, r3, #24
    5158:	d509      	bpl.n	516e <DMA_IRQHandler+0x46>
			DMACIntErrClr = (1 << 7);
    515a:	2280      	movs	r2, #128	; 0x80
    515c:	4b0a      	ldr	r3, [pc, #40]	; (5188 <DMA_IRQHandler+0x60>)
    515e:	601a      	str	r2, [r3, #0]
			USRLED_SET;
    5160:	2202      	movs	r2, #2
    5162:	4b0a      	ldr	r3, [pc, #40]	; (518c <DMA_IRQHandler+0x64>)
    5164:	601a      	str	r2, [r3, #0]
    5166:	e7fe      	b.n	5166 <DMA_IRQHandler+0x3e>
		legacy_DMA_IRQHandler();
    5168:	f7ff ff6e 	bl	5048 <legacy_DMA_IRQHandler>
    516c:	e7e3      	b.n	5136 <DMA_IRQHandler+0xe>
    516e:	bd08      	pop	{r3, pc}
    5170:	10000a4c 	.word	0x10000a4c
    5174:	50004000 	.word	0x50004000
    5178:	50004004 	.word	0x50004004
    517c:	50004008 	.word	0x50004008
    5180:	100012cc 	.word	0x100012cc
    5184:	5000400c 	.word	0x5000400c
    5188:	50004010 	.word	0x50004010
    518c:	2009c038 	.word	0x2009c038

00005190 <le_transmit>:
{
    5190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5194:	b08b      	sub	sp, #44	; 0x2c
    5196:	460c      	mov	r4, r1
    5198:	4690      	mov	r8, r2
	uint32_t sync = rbit(aa);
    519a:	f004 fb09 	bl	97b0 <rbit>
	int idx = whitening_index[btle_channel_index(channel)];
    519e:	4e50      	ldr	r6, [pc, #320]	; (52e0 <le_transmit+0x150>)
	uint32_t sync = rbit(aa);
    51a0:	4607      	mov	r7, r0
	int idx = whitening_index[btle_channel_index(channel)];
    51a2:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
    51a6:	2c20      	cmp	r4, #32
    51a8:	b280      	uxth	r0, r0
    51aa:	bf28      	it	cs
    51ac:	2420      	movcs	r4, #32
    51ae:	f002 f929 	bl	7404 <btle_channel_index>
		txbuf[i] = 0;
    51b2:	f04f 0900 	mov.w	r9, #0
	for (i = 0; i < len; ++i) {
    51b6:	46c6      	mov	lr, r8
			idx = (idx + 1) % sizeof(whitening);
    51b8:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
	int idx = whitening_index[btle_channel_index(channel)];
    51bc:	4d49      	ldr	r5, [pc, #292]	; (52e4 <le_transmit+0x154>)
    51be:	f10d 0107 	add.w	r1, sp, #7
    51c2:	5c2b      	ldrb	r3, [r5, r0]
    51c4:	9601      	str	r6, [sp, #4]
	for (i = 0; i < len; ++i) {
    51c6:	ebae 0208 	sub.w	r2, lr, r8
    51ca:	4294      	cmp	r4, r2
    51cc:	d865      	bhi.n	529a <le_transmit+0x10a>
	cc2400_set(MANAND,  0x7fff);
    51ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
    51d2:	200d      	movs	r0, #13
    51d4:	f004 fbe3 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    51d8:	f642 3122 	movw	r1, #11042	; 0x2b22
    51dc:	2012      	movs	r0, #18
    51de:	f004 fbde 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    51e2:	f241 314b 	movw	r1, #4939	; 0x134b
    51e6:	2014      	movs	r0, #20
    51e8:	f004 fbd9 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0ce1);
    51ec:	f640 41e1 	movw	r1, #3297	; 0xce1
    51f0:	2020      	movs	r0, #32
    51f2:	f004 fbd4 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   channel);
    51f6:	9b01      	ldr	r3, [sp, #4]
    51f8:	2002      	movs	r0, #2
    51fa:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
    51fe:	b289      	uxth	r1, r1
    5200:	f004 fbcd 	bl	999e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5204:	210b      	movs	r1, #11
    5206:	2005      	movs	r0, #5
    5208:	f004 fbc9 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    520c:	2140      	movs	r1, #64	; 0x40
    520e:	2003      	movs	r0, #3
    5210:	f004 fbc5 	bl	999e <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5214:	2114      	movs	r1, #20
    5216:	2023      	movs	r0, #35	; 0x23
    5218:	f004 fbc1 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    521c:	b2b9      	uxth	r1, r7
    521e:	202c      	movs	r0, #44	; 0x2c
    5220:	f004 fbbd 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5224:	0c39      	lsrs	r1, r7, #16
    5226:	202d      	movs	r0, #45	; 0x2d
    5228:	f004 fbb9 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    522c:	f004 fc52 	bl	9ad4 <cc2400_status>
    5230:	0641      	lsls	r1, r0, #25
    5232:	d5fb      	bpl.n	522c <le_transmit+0x9c>
	cc2400_strobe(SFSON);
    5234:	2061      	movs	r0, #97	; 0x61
    5236:	f004 fc54 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    523a:	f004 fc4b 	bl	9ad4 <cc2400_status>
    523e:	0742      	lsls	r2, r0, #29
    5240:	d5fb      	bpl.n	523a <le_transmit+0xaa>
	TXLED_SET;
    5242:	f44f 7280 	mov.w	r2, #256	; 0x100
    5246:	4b28      	ldr	r3, [pc, #160]	; (52e8 <le_transmit+0x158>)
    5248:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    524a:	2280      	movs	r2, #128	; 0x80
    524c:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    524e:	200e      	movs	r0, #14
    5250:	f004 fb9c 	bl	998c <cc2400_get>
    5254:	f000 001f 	and.w	r0, r0, #31
    5258:	280f      	cmp	r0, #15
    525a:	d1f8      	bne.n	524e <le_transmit+0xbe>
	cc2400_fifo_write(len, txbuf);
    525c:	4620      	mov	r0, r4
    525e:	a902      	add	r1, sp, #8
    5260:	f004 fbb0 	bl	99c4 <cc2400_fifo_write>
	cc2400_strobe(STX);
    5264:	2063      	movs	r0, #99	; 0x63
    5266:	f004 fc3c 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    526a:	200e      	movs	r0, #14
    526c:	f004 fb8e 	bl	998c <cc2400_get>
    5270:	f000 001f 	and.w	r0, r0, #31
    5274:	280f      	cmp	r0, #15
    5276:	d1f8      	bne.n	526a <le_transmit+0xda>
	TXLED_CLR;
    5278:	f44f 7280 	mov.w	r2, #256	; 0x100
    527c:	4b1b      	ldr	r3, [pc, #108]	; (52ec <le_transmit+0x15c>)
	cc2400_strobe(SRFOFF);
    527e:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    5280:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    5282:	f004 fc2e 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5286:	f004 fc25 	bl	9ad4 <cc2400_status>
    528a:	0743      	lsls	r3, r0, #29
    528c:	d4fb      	bmi.n	5286 <le_transmit+0xf6>
	PAEN_CLR;
    528e:	2280      	movs	r2, #128	; 0x80
    5290:	4b17      	ldr	r3, [pc, #92]	; (52f0 <le_transmit+0x160>)
    5292:	601a      	str	r2, [r3, #0]
}
    5294:	b00b      	add	sp, #44	; 0x2c
    5296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		txbuf[i] = 0;
    529a:	2607      	movs	r6, #7
    529c:	f881 9001 	strb.w	r9, [r1, #1]
		byte = data[i];
    52a0:	f81e 2b01 	ldrb.w	r2, [lr], #1
    52a4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
			bit = (byte & 1) ^ whitening[idx];
    52a8:	18e8      	adds	r0, r5, r3
    52aa:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    52ae:	f002 0b01 	and.w	fp, r2, #1
    52b2:	ea8b 0000 	eor.w	r0, fp, r0
			idx = (idx + 1) % sizeof(whitening);
    52b6:	f103 0b01 	add.w	fp, r3, #1
    52ba:	fbbb f3fa 	udiv	r3, fp, sl
			txbuf[i] |= bit << (7 - j);
    52be:	40b0      	lsls	r0, r6
			idx = (idx + 1) % sizeof(whitening);
    52c0:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
			txbuf[i] |= bit << (7 - j);
    52c4:	ea40 0c0c 	orr.w	ip, r0, ip
		for (j = 0; j < 8; ++j) {
    52c8:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			idx = (idx + 1) % sizeof(whitening);
    52cc:	ebab 0303 	sub.w	r3, fp, r3
			byte >>= 1;
    52d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
			txbuf[i] |= bit << (7 - j);
    52d4:	fa5f fc8c 	uxtb.w	ip, ip
		for (j = 0; j < 8; ++j) {
    52d8:	d2e6      	bcs.n	52a8 <le_transmit+0x118>
    52da:	f881 c000 	strb.w	ip, [r1]
    52de:	e772      	b.n	51c6 <le_transmit+0x36>
    52e0:	10000450 	.word	0x10000450
    52e4:	0000b118 	.word	0x0000b118
    52e8:	2009c038 	.word	0x2009c038
    52ec:	2009c03c 	.word	0x2009c03c
    52f0:	2009c05c 	.word	0x2009c05c

000052f4 <le_jam>:
void le_jam(void) {
    52f4:	b508      	push	{r3, lr}
	cc2400_set(MANAND,  0x7fff);
    52f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    52fa:	200d      	movs	r0, #13
    52fc:	f004 fb4f 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5300:	f642 3122 	movw	r1, #11042	; 0x2b22
    5304:	2012      	movs	r0, #18
    5306:	f004 fb4a 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    530a:	f242 314b 	movw	r1, #9035	; 0x234b
    530e:	2014      	movs	r0, #20
    5310:	f004 fb45 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    5314:	f640 4101 	movw	r1, #3073	; 0xc01
    5318:	2020      	movs	r0, #32
    531a:	f004 fb40 	bl	999e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    531e:	210b      	movs	r1, #11
    5320:	2005      	movs	r0, #5
    5322:	f004 fb3c 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5326:	2140      	movs	r1, #64	; 0x40
    5328:	2003      	movs	r0, #3
    532a:	f004 fb38 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    532e:	f004 fbd1 	bl	9ad4 <cc2400_status>
    5332:	0642      	lsls	r2, r0, #25
    5334:	d5fb      	bpl.n	532e <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5336:	2061      	movs	r0, #97	; 0x61
    5338:	f004 fbd3 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    533c:	f004 fbca 	bl	9ad4 <cc2400_status>
    5340:	0743      	lsls	r3, r0, #29
    5342:	d5fb      	bpl.n	533c <le_jam+0x48>
	TXLED_SET;
    5344:	f44f 7280 	mov.w	r2, #256	; 0x100
    5348:	4b07      	ldr	r3, [pc, #28]	; (5368 <le_jam+0x74>)
    534a:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    534c:	2280      	movs	r2, #128	; 0x80
    534e:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5350:	200e      	movs	r0, #14
    5352:	f004 fb1b 	bl	998c <cc2400_get>
    5356:	f000 001f 	and.w	r0, r0, #31
    535a:	280f      	cmp	r0, #15
    535c:	d1f8      	bne.n	5350 <le_jam+0x5c>
	cc2400_strobe(STX);
    535e:	2063      	movs	r0, #99	; 0x63
}
    5360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_strobe(STX);
    5364:	f004 bbbd 	b.w	9ae2 <cc2400_strobe>
    5368:	2009c038 	.word	0x2009c038

0000536c <reset_le>:
void reset_le() {
    536c:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    536e:	480f      	ldr	r0, [pc, #60]	; (53ac <reset_le+0x40>)
    5370:	f7ff f806 	bl	4380 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5374:	4b0e      	ldr	r3, [pc, #56]	; (53b0 <reset_le+0x44>)
    5376:	4a0f      	ldr	r2, [pc, #60]	; (53b4 <reset_le+0x48>)
    5378:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    537a:	4a0f      	ldr	r2, [pc, #60]	; (53b8 <reset_le+0x4c>)
    537c:	60da      	str	r2, [r3, #12]
	le.crc_verify = 0;
    537e:	2200      	movs	r2, #0
	le.interval_timer = 0;
    5380:	839a      	strh	r2, [r3, #28]
	le.crc_verify = 0;
    5382:	611a      	str	r2, [r3, #16]
	le.conn_count = 0;
    5384:	841a      	strh	r2, [r3, #32]
	le.last_packet = 0;
    5386:	649a      	str	r2, [r3, #72]	; 0x48
	le.link_state = LINK_INACTIVE;
    5388:	751a      	strb	r2, [r3, #20]
	le.channel_idx = 0;
    538a:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    538c:	759a      	strb	r2, [r3, #22]
	le.conn_epoch = 0;
    538e:	619a      	str	r2, [r3, #24]
	le.conn_interval = 0;
    5390:	83da      	strh	r2, [r3, #30]
	le.win_size = 0;
    5392:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    5396:	849a      	strh	r2, [r3, #36]	; 0x24
	le.update_pending = 0;
    5398:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    539a:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    539c:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    539e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update = 0;
    53a2:	865a      	strh	r2, [r3, #50]	; 0x32
	do_hop = 0;
    53a4:	4b05      	ldr	r3, [pc, #20]	; (53bc <reset_le+0x50>)
    53a6:	72da      	strb	r2, [r3, #11]
    53a8:	bd08      	pop	{r3, pc}
    53aa:	bf00      	nop
    53ac:	8e89bed6 	.word	0x8e89bed6
    53b0:	10000450 	.word	0x10000450
    53b4:	00555555 	.word	0x00555555
    53b8:	00aaaaaa 	.word	0x00aaaaaa
    53bc:	10000a4c 	.word	0x10000a4c

000053c0 <reset_le_promisc>:
void reset_le_promisc(void) {
    53c0:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    53c2:	4c06      	ldr	r4, [pc, #24]	; (53dc <reset_le_promisc+0x1c>)
    53c4:	f44f 7284 	mov.w	r2, #264	; 0x108
    53c8:	2100      	movs	r1, #0
    53ca:	4620      	mov	r0, r4
    53cc:	f7fe ff18 	bl	4200 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    53d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    53d8:	bd10      	pop	{r4, pc}
    53da:	bf00      	nop
    53dc:	10001498 	.word	0x10001498

000053e0 <rearrange_channel>:
//sopan

void rearrange_channel(uint8_t array[]){
    53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    static u8 m, n = 0;
    static u8 a = 0;

    for(m=0; m<remapping.total_channels; ++m){
    53e2:	2300      	movs	r3, #0
    53e4:	4c13      	ldr	r4, [pc, #76]	; (5434 <rearrange_channel+0x54>)
    53e6:	469e      	mov	lr, r3
    53e8:	46a4      	mov	ip, r4
    53ea:	4913      	ldr	r1, [pc, #76]	; (5438 <rearrange_channel+0x58>)
    53ec:	f891 702a 	ldrb.w	r7, [r1, #42]	; 0x2a
    53f0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
    53f4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
    53f8:	461a      	mov	r2, r3
    53fa:	42ab      	cmp	r3, r5
    53fc:	d307      	bcc.n	540e <rearrange_channel+0x2e>
    53fe:	f1be 0f00 	cmp.w	lr, #0
    5402:	d003      	beq.n	540c <rearrange_channel+0x2c>
    5404:	f881 702a 	strb.w	r7, [r1, #42]	; 0x2a
    5408:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
    540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(n=m+1; n<remapping.total_channels; ++n){
    540e:	3301      	adds	r3, #1
    5410:	b2db      	uxtb	r3, r3
    5412:	461f      	mov	r7, r3
    5414:	f04f 0e01 	mov.w	lr, #1
            if(array[m] > array[n]){
    5418:	4402      	add	r2, r0
        for(n=m+1; n<remapping.total_channels; ++n){
    541a:	f8dc 50bc 	ldr.w	r5, [ip, #188]	; 0xbc
    541e:	42af      	cmp	r7, r5
    5420:	d2e8      	bcs.n	53f4 <rearrange_channel+0x14>
            if(array[m] > array[n]){
    5422:	5dc6      	ldrb	r6, [r0, r7]
    5424:	7815      	ldrb	r5, [r2, #0]
    5426:	42b5      	cmp	r5, r6
                a = array[m];
                array[m] = array[n];
    5428:	bf84      	itt	hi
    542a:	7016      	strbhi	r6, [r2, #0]
                array[n] = a;
    542c:	55c5      	strbhi	r5, [r0, r7]
    542e:	3701      	adds	r7, #1
    5430:	b2ff      	uxtb	r7, r7
    5432:	e7f2      	b.n	541a <rearrange_channel+0x3a>
    5434:	100015a0 	.word	0x100015a0
    5438:	10000a4c 	.word	0x10000a4c

0000543c <connection_follow_cb>:
 * Called when we receive a packet in connection following mode.
 */

#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void connection_follow_cb(u8 *packet) {
    543c:	b538      	push	{r3, r4, r5, lr}

    u8 idx = btle_channel_index(channel);
    543e:	4b19      	ldr	r3, [pc, #100]	; (54a4 <connection_follow_cb+0x68>)
    //debug_printf("idx: %d val: %d\n",idx,remapping.channel_in_use[idx]);
    if(ch_count1 < 36 && remapping.channel_in_use[idx] != 1){
    5440:	4d19      	ldr	r5, [pc, #100]	; (54a8 <connection_follow_cb+0x6c>)
    u8 idx = btle_channel_index(channel);
    5442:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    5446:	b280      	uxth	r0, r0
    5448:	f001 ffdc 	bl	7404 <btle_channel_index>
    if(ch_count1 < 36 && remapping.channel_in_use[idx] != 1){
    544c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    u8 idx = btle_channel_index(channel);
    5450:	4601      	mov	r1, r0
    if(ch_count1 < 36 && remapping.channel_in_use[idx] != 1){
    5452:	2a23      	cmp	r2, #35	; 0x23
    5454:	d81a      	bhi.n	548c <connection_follow_cb+0x50>
    5456:	4c15      	ldr	r4, [pc, #84]	; (54ac <connection_follow_cb+0x70>)
    5458:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
    545c:	2b01      	cmp	r3, #1
    545e:	d020      	beq.n	54a2 <connection_follow_cb+0x66>
        remapping.channel_in_use[idx] = 1;
    5460:	2301      	movs	r3, #1
    5462:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
        remapping.remapping_index[remapping.total_channels] = idx;
    5466:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    546a:	4423      	add	r3, r4
    546c:	f883 0094 	strb.w	r0, [r3, #148]	; 0x94
	debug_printf("idx: %d cnt: %d \n",idx,ch_count1);
    5470:	480f      	ldr	r0, [pc, #60]	; (54b0 <connection_follow_cb+0x74>)
    5472:	f003 fe47 	bl	9104 <debug_printf>
        ++remapping.total_channels;
    5476:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    547a:	3301      	adds	r3, #1
    547c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	ch_count1++;
    5480:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    5484:	3301      	adds	r3, #1
    5486:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
    548a:	bd38      	pop	{r3, r4, r5, pc}
    }
    else if(ch_count1 == 36){
    548c:	2a24      	cmp	r2, #36	; 0x24
    548e:	d108      	bne.n	54a2 <connection_follow_cb+0x66>
        //debug_printf("matching\n");
        //le_promisc_state(2, &le.conn_interval, 2);
        //le_promisc_state(3, &le.channel_increment, 1);
	rearrange_channel(remapping.remapping_index);
    5490:	4808      	ldr	r0, [pc, #32]	; (54b4 <connection_follow_cb+0x78>)
    5492:	f7ff ffa5 	bl	53e0 <rearrange_channel>
        ch_count1++;
    5496:	2325      	movs	r3, #37	; 0x25
    5498:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
        //do_count = 0;
        mapped = 1;
    549c:	2301      	movs	r3, #1
    549e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    54a2:	bd38      	pop	{r3, r4, r5, pc}
    54a4:	10000450 	.word	0x10000450
    54a8:	10000a4c 	.word	0x10000a4c
    54ac:	100015a0 	.word	0x100015a0
    54b0:	0000ba0a 	.word	0x0000ba0a
    54b4:	10001634 	.word	0x10001634

000054b8 <le_promisc_state>:
void bt_follow_le() {
	le_phy_main();
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    54b8:	b570      	push	{r4, r5, r6, lr}
    54ba:	b08e      	sub	sp, #56	; 0x38
    54bc:	4615      	mov	r5, r2
    54be:	460c      	mov	r4, r1
    54c0:	4606      	mov	r6, r0
	u8 buf[50] = { 0, };
    54c2:	2232      	movs	r2, #50	; 0x32
    54c4:	2100      	movs	r1, #0
    54c6:	a801      	add	r0, sp, #4
    54c8:	f7fe fe9a 	bl	4200 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    54cc:	2d31      	cmp	r5, #49	; 0x31
    54ce:	462a      	mov	r2, r5
    54d0:	4621      	mov	r1, r4
    54d2:	bf28      	it	cs
    54d4:	2231      	movcs	r2, #49	; 0x31
    54d6:	f10d 0005 	add.w	r0, sp, #5
	buf[0] = type;
    54da:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    54de:	f005 fd73 	bl	afc8 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    54e2:	a901      	add	r1, sp, #4
    54e4:	2005      	movs	r0, #5
    54e6:	f7ff f805 	bl	44f4 <enqueue>
}
    54ea:	b00e      	add	sp, #56	; 0x38
    54ec:	bd70      	pop	{r4, r5, r6, pc}
    54ee:	0000      	movs	r0, r0

000054f0 <hop>:
{   
    54f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	do_hop = 0;
    54f2:	2300      	movs	r3, #0
    54f4:	4c78      	ldr	r4, [pc, #480]	; (56d8 <hop+0x1e8>)
	last_hop = clkn;
    54f6:	4a79      	ldr	r2, [pc, #484]	; (56dc <hop+0x1ec>)
	do_hop = 0;
    54f8:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    54fa:	4b79      	ldr	r3, [pc, #484]	; (56e0 <hop+0x1f0>)
    54fc:	6819      	ldr	r1, [r3, #0]
    54fe:	6011      	str	r1, [r2, #0]
	if (hop_mode == HOP_NONE) {
    5500:	7aa2      	ldrb	r2, [r4, #10]
    5502:	b95a      	cbnz	r2, 551c <hop+0x2c>
		if (cc2400_get(FSDIV) == (channel - 1))
    5504:	2002      	movs	r0, #2
    5506:	f004 fa41 	bl	998c <cc2400_get>
    550a:	4b76      	ldr	r3, [pc, #472]	; (56e4 <hop+0x1f4>)
    550c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    5510:	b29b      	uxth	r3, r3
    5512:	3b01      	subs	r3, #1
    5514:	4298      	cmp	r0, r3
    5516:	d13d      	bne.n	5594 <hop+0xa4>
}
    5518:	b003      	add	sp, #12
    551a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (hop_mode == HOP_SWEEP) {
    551c:	7aa2      	ldrb	r2, [r4, #10]
    551e:	2a01      	cmp	r2, #1
    5520:	d165      	bne.n	55ee <hop+0xfe>
			channel += 32;
    5522:	4970      	ldr	r1, [pc, #448]	; (56e4 <hop+0x1f4>)
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5524:	2608      	movs	r6, #8
    5526:	4608      	mov	r0, r1
    5528:	4b6f      	ldr	r3, [pc, #444]	; (56e8 <hop+0x1f8>)
    552a:	4d70      	ldr	r5, [pc, #448]	; (56ec <hop+0x1fc>)
    552c:	781f      	ldrb	r7, [r3, #0]
    552e:	4b70      	ldr	r3, [pc, #448]	; (56f0 <hop+0x200>)
    5530:	f893 e000 	ldrb.w	lr, [r3]
			channel += 32;
    5534:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    5538:	3320      	adds	r3, #32
    553a:	b29b      	uxth	r3, r3
    553c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (channel > 2480)
    5540:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    5544:	b29b      	uxth	r3, r3
    5546:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    554a:	bf81      	itttt	hi
    554c:	f8b1 304c 	ldrhhi.w	r3, [r1, #76]	; 0x4c
    5550:	3b4f      	subhi	r3, #79	; 0x4f
    5552:	b29b      	uxthhi	r3, r3
    5554:	f8a1 304c 	strhhi.w	r3, [r1, #76]	; 0x4c
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5558:	b1e7      	cbz	r7, 5594 <hop+0xa4>
    555a:	f1be 0f00 	cmp.w	lr, #0
    555e:	d019      	beq.n	5594 <hop+0xa4>
    5560:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    5564:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    5568:	b292      	uxth	r2, r2
    556a:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    556e:	fb92 f2f6 	sdiv	r2, r2, r6
    5572:	b29b      	uxth	r3, r3
    5574:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    5578:	f1d3 0c00 	rsbs	ip, r3, #0
    557c:	5caa      	ldrb	r2, [r5, r2]
    557e:	f00c 0c07 	and.w	ip, ip, #7
    5582:	f003 0307 	and.w	r3, r3, #7
    5586:	bf58      	it	pl
    5588:	f1cc 0300 	rsbpl	r3, ip, #0
    558c:	fa42 f303 	asr.w	r3, r2, r3
    5590:	07da      	lsls	r2, r3, #31
    5592:	d5cf      	bpl.n	5534 <hop+0x44>
	cc2400_strobe(SRFOFF);
    5594:	2064      	movs	r0, #100	; 0x64
    5596:	f004 faa4 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    559a:	f004 fa9b 	bl	9ad4 <cc2400_status>
    559e:	0742      	lsls	r2, r0, #29
    55a0:	d4fb      	bmi.n	559a <hop+0xaa>
	if(mode == MODE_TX_SYMBOLS)
    55a2:	7c60      	ldrb	r0, [r4, #17]
    55a4:	4d4f      	ldr	r5, [pc, #316]	; (56e4 <hop+0x1f4>)
    55a6:	b2c0      	uxtb	r0, r0
		cc2400_set(FSDIV, channel);
    55a8:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if(mode == MODE_TX_SYMBOLS)
    55ac:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel - 1);
    55ae:	bf17      	itett	ne
    55b0:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
		cc2400_set(FSDIV, channel);
    55b4:	b289      	uxtheq	r1, r1
		cc2400_set(FSDIV, channel - 1);
    55b6:	b289      	uxthne	r1, r1
    55b8:	2002      	movne	r0, #2
    55ba:	f004 f9f0 	bl	999e <cc2400_set>
	if (hop_mode > 0) {
    55be:	7aa3      	ldrb	r3, [r4, #10]
    55c0:	b123      	cbz	r3, 55cc <hop+0xdc>
		cs_threshold_calc_and_set(channel);
    55c2:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    55c6:	b280      	uxth	r0, r0
    55c8:	f002 f97a 	bl	78c0 <cs_threshold_calc_and_set>
	cc2400_strobe(SFSON);
    55cc:	2061      	movs	r0, #97	; 0x61
    55ce:	f004 fa88 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    55d2:	f004 fa7f 	bl	9ad4 <cc2400_status>
    55d6:	0743      	lsls	r3, r0, #29
    55d8:	d5fb      	bpl.n	55d2 <hop+0xe2>
	dma_discard = 1;
    55da:	2301      	movs	r3, #1
    55dc:	7423      	strb	r3, [r4, #16]
	if(mode == MODE_TX_SYMBOLS)
    55de:	7c63      	ldrb	r3, [r4, #17]
    55e0:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    55e2:	bf0c      	ite	eq
    55e4:	2063      	moveq	r0, #99	; 0x63
		cc2400_strobe(SRX);
    55e6:	2062      	movne	r0, #98	; 0x62
    55e8:	f004 fa7b 	bl	9ae2 <cc2400_strobe>
    55ec:	e794      	b.n	5518 <hop+0x28>
	else if (hop_mode == HOP_AFH) {
    55ee:	7aa2      	ldrb	r2, [r4, #10]
    55f0:	2a05      	cmp	r2, #5
    55f2:	d134      	bne.n	565e <hop+0x16e>
			channel += 32;
    55f4:	493b      	ldr	r1, [pc, #236]	; (56e4 <hop+0x1f4>)
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55f6:	2608      	movs	r6, #8
    55f8:	4608      	mov	r0, r1
    55fa:	4b3b      	ldr	r3, [pc, #236]	; (56e8 <hop+0x1f8>)
    55fc:	4d3b      	ldr	r5, [pc, #236]	; (56ec <hop+0x1fc>)
    55fe:	781f      	ldrb	r7, [r3, #0]
			channel += 32;
    5600:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    5604:	3320      	adds	r3, #32
    5606:	b29b      	uxth	r3, r3
    5608:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (channel > 2480)
    560c:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    5610:	b29b      	uxth	r3, r3
    5612:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    5616:	bf81      	itttt	hi
    5618:	f8b1 304c 	ldrhhi.w	r3, [r1, #76]	; 0x4c
    561c:	3b4f      	subhi	r3, #79	; 0x4f
    561e:	b29b      	uxthhi	r3, r3
    5620:	f8a1 304c 	strhhi.w	r3, [r1, #76]	; 0x4c
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5624:	2f4f      	cmp	r7, #79	; 0x4f
    5626:	d0b5      	beq.n	5594 <hop+0xa4>
    5628:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    562c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    5630:	b292      	uxth	r2, r2
    5632:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    5636:	fb92 f2f6 	sdiv	r2, r2, r6
    563a:	b29b      	uxth	r3, r3
    563c:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    5640:	f1d3 0e00 	rsbs	lr, r3, #0
    5644:	5caa      	ldrb	r2, [r5, r2]
    5646:	f00e 0e07 	and.w	lr, lr, #7
    564a:	f003 0307 	and.w	r3, r3, #7
    564e:	bf58      	it	pl
    5650:	f1ce 0300 	rsbpl	r3, lr, #0
    5654:	fa42 f303 	asr.w	r3, r2, r3
    5658:	07db      	lsls	r3, r3, #31
    565a:	d4d1      	bmi.n	5600 <hop+0x110>
    565c:	e79a      	b.n	5594 <hop+0xa4>
	else if (hop_mode == HOP_BLUETOOTH) {
    565e:	7aa2      	ldrb	r2, [r4, #10]
    5660:	2a02      	cmp	r2, #2
    5662:	d106      	bne.n	5672 <hop+0x182>
		channel = next_hop(clkn);
    5664:	6818      	ldr	r0, [r3, #0]
    5666:	f001 fe27 	bl	72b8 <next_hop>
    566a:	4b1e      	ldr	r3, [pc, #120]	; (56e4 <hop+0x1f4>)
    566c:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
    5670:	e790      	b.n	5594 <hop+0xa4>
	else if (hop_mode == HOP_BTLE) {
    5672:	7aa3      	ldrb	r3, [r4, #10]
    5674:	2b03      	cmp	r3, #3
    5676:	d125      	bne.n	56c4 <hop+0x1d4>
		if(mapped == 1){
    5678:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    567c:	4d19      	ldr	r5, [pc, #100]	; (56e4 <hop+0x1f4>)
    567e:	2e01      	cmp	r6, #1
    5680:	d11a      	bne.n	56b8 <hop+0x1c8>
			le.channel_idx = le_map_channel(le.channel_idx, &remapping);
    5682:	491c      	ldr	r1, [pc, #112]	; (56f4 <hop+0x204>)
    5684:	7d68      	ldrb	r0, [r5, #21]
    5686:	f001 ffb7 	bl	75f8 <le_map_channel>
    568a:	7568      	strb	r0, [r5, #21]
			channel = btle_next_hop(&le);
    568c:	4628      	mov	r0, r5
    568e:	f001 fee9 	bl	7464 <btle_next_hop>
			u8 nxt_idx = le_map_channel(le.channel_idx, &remapping);
    5692:	4918      	ldr	r1, [pc, #96]	; (56f4 <hop+0x204>)
			channel = btle_next_hop(&le);
    5694:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
			u8 nxt_idx = le_map_channel(le.channel_idx, &remapping);
    5698:	7d68      	ldrb	r0, [r5, #21]
    569a:	f001 ffad 	bl	75f8 <le_map_channel>
    569e:	ad02      	add	r5, sp, #8
    56a0:	f805 0d01 	strb.w	r0, [r5, #-1]!
    56a4:	4601      	mov	r1, r0
			debug_printf("Next index: %d\n", nxt_idx);
    56a6:	4814      	ldr	r0, [pc, #80]	; (56f8 <hop+0x208>)
    56a8:	f003 fd2c 	bl	9104 <debug_printf>
			le_promisc_state(4, &nxt_idx, 1);
    56ac:	4632      	mov	r2, r6
    56ae:	4629      	mov	r1, r5
    56b0:	2004      	movs	r0, #4
    56b2:	f7ff ff01 	bl	54b8 <le_promisc_state>
    56b6:	e76d      	b.n	5594 <hop+0xa4>
			channel = btle_next_hop(&le);
    56b8:	4628      	mov	r0, r5
    56ba:	f001 fed3 	bl	7464 <btle_next_hop>
    56be:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    56c2:	e767      	b.n	5594 <hop+0xa4>
	else if (hop_mode == HOP_DIRECT) {
    56c4:	7aa3      	ldrb	r3, [r4, #10]
    56c6:	2b04      	cmp	r3, #4
		channel = hop_direct_channel;
    56c8:	bf01      	itttt	eq
    56ca:	89a3      	ldrheq	r3, [r4, #12]
    56cc:	4a05      	ldreq	r2, [pc, #20]	; (56e4 <hop+0x1f4>)
    56ce:	b29b      	uxtheq	r3, r3
    56d0:	f8a2 304c 	strheq.w	r3, [r2, #76]	; 0x4c
    56d4:	e75e      	b.n	5594 <hop+0xa4>
    56d6:	bf00      	nop
    56d8:	10000a4c 	.word	0x10000a4c
    56dc:	10001370 	.word	0x10001370
    56e0:	10001454 	.word	0x10001454
    56e4:	10000450 	.word	0x10000450
    56e8:	10001379 	.word	0x10001379
    56ec:	1000137b 	.word	0x1000137b
    56f0:	10001997 	.word	0x10001997
    56f4:	100015a0 	.word	0x100015a0
    56f8:	0000ba1c 	.word	0x0000ba1c

000056fc <bt_stream_rx>:
{
    56fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	RXLED_CLR;
    5700:	2310      	movs	r3, #16
    5702:	4e4e      	ldr	r6, [pc, #312]	; (583c <bt_stream_rx+0x140>)
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5704:	4f4e      	ldr	r7, [pc, #312]	; (5840 <bt_stream_rx+0x144>)
	RXLED_CLR;
    5706:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5708:	f001 ffec 	bl	76e4 <usb_queue_init>
    570c:	463c      	mov	r4, r7
	dio_ssp_init();
    570e:	f004 f8b3 	bl	9878 <dio_ssp_init>
	dma_init_rx_symbols();
    5712:	f002 f9bd 	bl	7a90 <dma_init_rx_symbols>
	dio_ssp_start();
    5716:	f002 fa39 	bl	7b8c <dio_ssp_start>
	cc2400_rx();
    571a:	f7fe fe3d 	bl	4398 <cc2400_rx>
	cs_trigger_enable();
    571e:	f002 f8fd 	bl	791c <cs_trigger_enable>
		RXLED_SET;
    5722:	f8df b138 	ldr.w	fp, [pc, #312]	; 585c <bt_stream_rx+0x160>
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5726:	7cbb      	ldrb	r3, [r7, #18]
    5728:	2b01      	cmp	r3, #1
    572a:	d008      	beq.n	573e <bt_stream_rx+0x42>
    572c:	7cbb      	ldrb	r3, [r7, #18]
    572e:	2b08      	cmp	r3, #8
    5730:	d005      	beq.n	573e <bt_stream_rx+0x42>
	dio_ssp_stop();
    5732:	f002 fa4b 	bl	7bcc <dio_ssp_stop>
}
    5736:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    573a:	f002 b907 	b.w	794c <cs_trigger_disable>
		RXLED_CLR;
    573e:	2310      	movs	r3, #16
    5740:	6033      	str	r3, [r6, #0]
		rssi_reset();
    5742:	f002 f845 	bl	77d0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5746:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		while (!rx_tc) {
    574a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 5860 <bt_stream_rx+0x164>
    574e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 5864 <bt_stream_rx+0x168>
    5752:	f8d8 3000 	ldr.w	r3, [r8]
    5756:	f8df a110 	ldr.w	sl, [pc, #272]	; 5868 <bt_stream_rx+0x16c>
    575a:	2b00      	cmp	r3, #0
    575c:	d049      	beq.n	57f2 <bt_stream_rx+0xf6>
		RXLED_SET;
    575e:	2310      	movs	r3, #16
		if (rx_err) {
    5760:	4d38      	ldr	r5, [pc, #224]	; (5844 <bt_stream_rx+0x148>)
		RXLED_SET;
    5762:	f8cb 3000 	str.w	r3, [fp]
		if (rx_err) {
    5766:	682b      	ldr	r3, [r5, #0]
    5768:	b11b      	cbz	r3, 5772 <bt_stream_rx+0x76>
			status |= DMA_ERROR;
    576a:	7863      	ldrb	r3, [r4, #1]
    576c:	f043 0302 	orr.w	r3, r3, #2
    5770:	7063      	strb	r3, [r4, #1]
		if (rx_tc > 1)
    5772:	f8d8 3000 	ldr.w	r3, [r8]
    5776:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5778:	bf82      	ittt	hi
    577a:	7863      	ldrbhi	r3, [r4, #1]
    577c:	f043 0301 	orrhi.w	r3, r3, #1
    5780:	7063      	strbhi	r3, [r4, #1]
		if (dma_discard) {
    5782:	7c23      	ldrb	r3, [r4, #16]
    5784:	b12b      	cbz	r3, 5792 <bt_stream_rx+0x96>
			status |= DISCARD;
    5786:	7863      	ldrb	r3, [r4, #1]
    5788:	f043 0320 	orr.w	r3, r3, #32
    578c:	7063      	strb	r3, [r4, #1]
			dma_discard = 0;
    578e:	2300      	movs	r3, #0
    5790:	7423      	strb	r3, [r4, #16]
		rssi_iir_update(channel);
    5792:	4b2d      	ldr	r3, [pc, #180]	; (5848 <bt_stream_rx+0x14c>)
    5794:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    5798:	b280      	uxth	r0, r0
    579a:	f002 f855 	bl	7848 <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    579e:	f899 3000 	ldrb.w	r3, [r9]
    57a2:	b913      	cbnz	r3, 57aa <bt_stream_rx+0xae>
    57a4:	4b29      	ldr	r3, [pc, #164]	; (584c <bt_stream_rx+0x150>)
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	b133      	cbz	r3, 57b8 <bt_stream_rx+0xbc>
			status |= CS_TRIGGER;
    57aa:	7863      	ldrb	r3, [r4, #1]
    57ac:	f043 0308 	orr.w	r3, r3, #8
    57b0:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    57b2:	2300      	movs	r3, #0
    57b4:	f889 3000 	strb.w	r3, [r9]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    57b8:	4b25      	ldr	r3, [pc, #148]	; (5850 <bt_stream_rx+0x154>)
    57ba:	4a26      	ldr	r2, [pc, #152]	; (5854 <bt_stream_rx+0x158>)
    57bc:	f993 3000 	ldrsb.w	r3, [r3]
    57c0:	f992 2000 	ldrsb.w	r2, [r2]
    57c4:	3335      	adds	r3, #53	; 0x35
    57c6:	4293      	cmp	r3, r2
			status |= RSSI_TRIGGER;
    57c8:	bfb8      	it	lt
    57ca:	7863      	ldrblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    57cc:	f04f 0000 	mov.w	r0, #0
			status |= RSSI_TRIGGER;
    57d0:	bfbc      	itt	lt
    57d2:	f043 0310 	orrlt.w	r3, r3, #16
    57d6:	7063      	strblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    57d8:	4b1f      	ldr	r3, [pc, #124]	; (5858 <bt_stream_rx+0x15c>)
    57da:	6819      	ldr	r1, [r3, #0]
    57dc:	f7fe fe8a 	bl	44f4 <enqueue>
		handle_usb(clkn);
    57e0:	f8da 0000 	ldr.w	r0, [sl]
    57e4:	f001 ffe0 	bl	77a8 <handle_usb>
		rx_tc = 0;
    57e8:	2300      	movs	r3, #0
    57ea:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    57ee:	602b      	str	r3, [r5, #0]
    57f0:	e799      	b.n	5726 <bt_stream_rx+0x2a>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    57f2:	2006      	movs	r0, #6
    57f4:	f004 f8ca 	bl	998c <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    57f8:	f899 3000 	ldrb.w	r3, [r9]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    57fc:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5800:	b163      	cbz	r3, 581c <bt_stream_rx+0x120>
    5802:	f115 0f80 	cmn.w	r5, #128	; 0x80
    5806:	d109      	bne.n	581c <bt_stream_rx+0x120>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5808:	4b11      	ldr	r3, [pc, #68]	; (5850 <bt_stream_rx+0x154>)
    580a:	f993 3000 	ldrsb.w	r3, [r3]
    580e:	f103 0536 	add.w	r5, r3, #54	; 0x36
    5812:	42a8      	cmp	r0, r5
    5814:	bfb8      	it	lt
    5816:	4628      	movlt	r0, r5
    5818:	b245      	sxtb	r5, r0
				rssi_at_trigger = rssi;
    581a:	4628      	mov	r0, r5
			rssi_add(rssi);
    581c:	f001 fff4 	bl	7808 <rssi_add>
			handle_usb(clkn);
    5820:	f8da 0000 	ldr.w	r0, [sl]
    5824:	f001 ffc0 	bl	77a8 <handle_usb>
			if (do_hop) {
    5828:	7ae3      	ldrb	r3, [r4, #11]
    582a:	b113      	cbz	r3, 5832 <bt_stream_rx+0x136>
				hop();
    582c:	f7ff fe60 	bl	54f0 <hop>
    5830:	e78f      	b.n	5752 <bt_stream_rx+0x56>
				TXLED_CLR;
    5832:	f44f 7380 	mov.w	r3, #256	; 0x100
    5836:	6033      	str	r3, [r6, #0]
    5838:	e78b      	b.n	5752 <bt_stream_rx+0x56>
    583a:	bf00      	nop
    583c:	2009c03c 	.word	0x2009c03c
    5840:	10000a4c 	.word	0x10000a4c
    5844:	10001a08 	.word	0x10001a08
    5848:	10000450 	.word	0x10000450
    584c:	10001660 	.word	0x10001660
    5850:	10001a0c 	.word	0x10001a0c
    5854:	10001378 	.word	0x10001378
    5858:	10001670 	.word	0x10001670
    585c:	2009c038 	.word	0x2009c038
    5860:	10001374 	.word	0x10001374
    5864:	10001a0d 	.word	0x10001a0d
    5868:	10001454 	.word	0x10001454

0000586c <br_transmit>:
{
    586c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5870:	b085      	sub	sp, #20
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5872:	4b95      	ldr	r3, [pc, #596]	; (5ac8 <br_transmit+0x25c>)
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5874:	2700      	movs	r7, #0
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5876:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    587a:	2300      	movs	r3, #0
    587c:	f004 0201 	and.w	r2, r4, #1
    5880:	4313      	orrs	r3, r2
    5882:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5886:	ea4f 76d5 	mov.w	r6, r5, lsr #31
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    588a:	f245 5855 	movw	r8, #21845	; 0x5555
    588e:	bf08      	it	eq
    5890:	4698      	moveq	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5892:	2f00      	cmp	r7, #0
    5894:	bf08      	it	eq
    5896:	2e01      	cmpeq	r6, #1
		reverse8((target.syncword >> 0) & 0xFF),
    5898:	b2e0      	uxtb	r0, r4
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    589a:	bf0c      	ite	eq
    589c:	26aa      	moveq	r6, #170	; 0xaa
    589e:	2655      	movne	r6, #85	; 0x55
		reverse8((target.syncword >> 0) & 0xFF),
    58a0:	f7fe fd5c 	bl	435c <reverse8>
	uint8_t data[16] = {
    58a4:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 8) & 0xFF),
    58a8:	f3c4 2007 	ubfx	r0, r4, #8, #8
    58ac:	f7fe fd56 	bl	435c <reverse8>
	uint8_t data[16] = {
    58b0:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 16) & 0xFF),
    58b4:	f3c4 4007 	ubfx	r0, r4, #16, #8
    58b8:	f7fe fd50 	bl	435c <reverse8>
	uint8_t data[16] = {
    58bc:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 24) & 0xFF),
    58c0:	0e20      	lsrs	r0, r4, #24
    58c2:	f7fe fd4b 	bl	435c <reverse8>
	uint8_t data[16] = {
    58c6:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 32) & 0xFF),
    58ca:	b2e8      	uxtb	r0, r5
    58cc:	f7fe fd46 	bl	435c <reverse8>
	uint8_t data[16] = {
    58d0:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 40) & 0xFF),
    58d4:	f3c5 2007 	ubfx	r0, r5, #8, #8
    58d8:	f7fe fd40 	bl	435c <reverse8>
	uint8_t data[16] = {
    58dc:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 48) & 0xFF),
    58e0:	f3c5 4007 	ubfx	r0, r5, #16, #8
    58e4:	f7fe fd3a 	bl	435c <reverse8>
	uint8_t data[16] = {
    58e8:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 56) & 0xFF),
    58ec:	0e28      	lsrs	r0, r5, #24
    58ee:	f7fe fd35 	bl	435c <reverse8>
	uint8_t data[16] = {
    58f2:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8(trailer),
    58f6:	4630      	mov	r0, r6
    58f8:	f7fe fd30 	bl	435c <reverse8>
	uint8_t data[16] = {
    58fc:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8(0x77),
    5900:	2077      	movs	r0, #119	; 0x77
    5902:	f7fe fd2b 	bl	435c <reverse8>
	uint8_t data[16] = {
    5906:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8(0x66),
    590a:	2066      	movs	r0, #102	; 0x66
    590c:	f7fe fd26 	bl	435c <reverse8>
	uint8_t data[16] = {
    5910:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8(0x55),
    5914:	2055      	movs	r0, #85	; 0x55
    5916:	f7fe fd21 	bl	435c <reverse8>
	uint8_t data[16] = {
    591a:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8(0x44),
    591e:	2044      	movs	r0, #68	; 0x44
    5920:	f7fe fd1c 	bl	435c <reverse8>
	uint8_t data[16] = {
    5924:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(0x33),
    5928:	2033      	movs	r0, #51	; 0x33
    592a:	f7fe fd17 	bl	435c <reverse8>
	uint8_t data[16] = {
    592e:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x22),
    5932:	2022      	movs	r0, #34	; 0x22
    5934:	f7fe fd12 	bl	435c <reverse8>
	uint8_t data[16] = {
    5938:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x11)
    593c:	2011      	movs	r0, #17
    593e:	f7fe fd0d 	bl	435c <reverse8>
	uint16_t reversed = 0;
    5942:	463c      	mov	r4, r7
	for(size_t i=0; i<16; i++)
    5944:	463b      	mov	r3, r7
	uint8_t data[16] = {
    5946:	f88d 000f 	strb.w	r0, [sp, #15]
		reversed |= ((data >> i) & 0x01) << (15-i);
    594a:	fa48 f203 	asr.w	r2, r8, r3
    594e:	f1c3 010f 	rsb	r1, r3, #15
    5952:	f002 0201 	and.w	r2, r2, #1
    5956:	408a      	lsls	r2, r1
	for(size_t i=0; i<16; i++)
    5958:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (15-i);
    595a:	4314      	orrs	r4, r2
	for(size_t i=0; i<16; i++)
    595c:	2b10      	cmp	r3, #16
		reversed |= ((data >> i) & 0x01) << (15-i);
    595e:	b2a4      	uxth	r4, r4
	for(size_t i=0; i<16; i++)
    5960:	d1f3      	bne.n	594a <br_transmit+0xde>
	cc2400_set(MANAND,  0x7fff);
    5962:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5966:	200d      	movs	r0, #13
    5968:	f004 f819 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    596c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5970:	2012      	movs	r0, #18
    5972:	f004 f814 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5976:	f241 314b 	movw	r1, #4939	; 0x134b
    597a:	2014      	movs	r0, #20
    597c:	f004 f80f 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    5980:	f640 4101 	movw	r1, #3073	; 0xc01
    5984:	2020      	movs	r0, #32
    5986:	f004 f80a 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    598a:	4621      	mov	r1, r4
    598c:	202c      	movs	r0, #44	; 0x2c
    598e:	f004 f806 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5992:	2100      	movs	r1, #0
    5994:	202d      	movs	r0, #45	; 0x2d
    5996:	f004 f802 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   channel);
    599a:	4b4c      	ldr	r3, [pc, #304]	; (5acc <br_transmit+0x260>)
    599c:	2002      	movs	r0, #2
    599e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
	if (modulation == MOD_BT_BASIC_RATE) {
    59a2:	4c4b      	ldr	r4, [pc, #300]	; (5ad0 <br_transmit+0x264>)
	cc2400_set(FSDIV,   channel);
    59a4:	b289      	uxth	r1, r1
    59a6:	f003 fffa 	bl	999e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    59aa:	210b      	movs	r1, #11
    59ac:	2005      	movs	r0, #5
    59ae:	f003 fff6 	bl	999e <cc2400_set>
	if (modulation == MOD_BT_BASIC_RATE) {
    59b2:	7823      	ldrb	r3, [r4, #0]
    59b4:	bbbb      	cbnz	r3, 5a26 <br_transmit+0x1ba>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    59b6:	2129      	movs	r1, #41	; 0x29
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    59b8:	2003      	movs	r0, #3
    59ba:	f003 fff0 	bl	999e <cc2400_set>
	clkn_start();
    59be:	f002 f817 	bl	79f0 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    59c2:	f004 f887 	bl	9ad4 <cc2400_status>
    59c6:	0645      	lsls	r5, r0, #25
    59c8:	d5fb      	bpl.n	59c2 <br_transmit+0x156>
	cc2400_strobe(SFSON);
    59ca:	2061      	movs	r0, #97	; 0x61
    59cc:	f004 f889 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    59d0:	f004 f880 	bl	9ad4 <cc2400_status>
    59d4:	0740      	lsls	r0, r0, #29
    59d6:	d5fb      	bpl.n	59d0 <br_transmit+0x164>
	PAEN_SET;
    59d8:	2280      	movs	r2, #128	; 0x80
    59da:	4b3e      	ldr	r3, [pc, #248]	; (5ad4 <br_transmit+0x268>)
    59dc:	601a      	str	r2, [r3, #0]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59de:	200e      	movs	r0, #14
    59e0:	f003 ffd4 	bl	998c <cc2400_get>
    59e4:	f000 001f 	and.w	r0, r0, #31
    59e8:	280f      	cmp	r0, #15
    59ea:	d1f8      	bne.n	59de <br_transmit+0x172>
	cc2400_strobe(STX);
    59ec:	2063      	movs	r0, #99	; 0x63
    59ee:	f004 f878 	bl	9ae2 <cc2400_strobe>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    59f2:	2114      	movs	r1, #20
    59f4:	2023      	movs	r0, #35	; 0x23
    59f6:	f003 ffd2 	bl	999e <cc2400_set>
	gio_save = cc2400_get(IOCFG);
    59fa:	2008      	movs	r0, #8
    59fc:	f003 ffc6 	bl	998c <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5a00:	f3c0 0108 	ubfx	r1, r0, #0, #9
	gio_save = cc2400_get(IOCFG);
    5a04:	4607      	mov	r7, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5a06:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5a0a:	2008      	movs	r0, #8
    5a0c:	f003 ffc7 	bl	999e <cc2400_set>
	uint32_t clkn_saved = 0;
    5a10:	2500      	movs	r5, #0
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5a12:	4e31      	ldr	r6, [pc, #196]	; (5ad8 <br_transmit+0x26c>)
		TXLED_SET;
    5a14:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5ae4 <br_transmit+0x278>
	while ( requested_mode == MODE_TX_SYMBOLS )
    5a18:	7ca3      	ldrb	r3, [r4, #18]
    5a1a:	2b02      	cmp	r3, #2
    5a1c:	d14a      	bne.n	5ab4 <br_transmit+0x248>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5a1e:	086d      	lsrs	r5, r5, #1
    5a20:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5ae8 <br_transmit+0x27c>
    5a24:	e008      	b.n	5a38 <br_transmit+0x1cc>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5a26:	7823      	ldrb	r3, [r4, #0]
    5a28:	2b01      	cmp	r3, #1
    5a2a:	d1e2      	bne.n	59f2 <br_transmit+0x186>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5a2c:	2140      	movs	r1, #64	; 0x40
    5a2e:	e7c3      	b.n	59b8 <br_transmit+0x14c>
			if (do_hop) {
    5a30:	7ae2      	ldrb	r2, [r4, #11]
    5a32:	b11a      	cbz	r2, 5a3c <br_transmit+0x1d0>
				hop();
    5a34:	f7ff fd5c 	bl	54f0 <hop>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5a38:	f640 03c9 	movw	r3, #2249	; 0x8c9
    5a3c:	6832      	ldr	r2, [r6, #0]
    5a3e:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
    5a42:	d0f5      	beq.n	5a30 <br_transmit+0x1c4>
    5a44:	f8d8 2000 	ldr.w	r2, [r8]
    5a48:	429a      	cmp	r2, r3
    5a4a:	d9f1      	bls.n	5a30 <br_transmit+0x1c4>
		TXLED_SET;
    5a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
		clkn_saved = clkn;
    5a50:	6835      	ldr	r5, [r6, #0]
		cc2400_fifo_write(16, data);
    5a52:	4669      	mov	r1, sp
		TXLED_SET;
    5a54:	f8c9 3000 	str.w	r3, [r9]
		cc2400_fifo_write(16, data);
    5a58:	2010      	movs	r0, #16
    5a5a:	f003 ffb3 	bl	99c4 <cc2400_fifo_write>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a5e:	200e      	movs	r0, #14
    5a60:	f003 ff94 	bl	998c <cc2400_get>
    5a64:	f000 001f 	and.w	r0, r0, #31
    5a68:	280f      	cmp	r0, #15
    5a6a:	d1f8      	bne.n	5a5e <br_transmit+0x1f2>
		TXLED_CLR;
    5a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a70:	4b1a      	ldr	r3, [pc, #104]	; (5adc <br_transmit+0x270>)
		cc2400_strobe(SRFOFF);
    5a72:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    5a74:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    5a76:	f004 f834 	bl	9ae2 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5a7a:	f004 f82b 	bl	9ad4 <cc2400_status>
    5a7e:	0741      	lsls	r1, r0, #29
    5a80:	d4fb      	bmi.n	5a7a <br_transmit+0x20e>
		while (!(cc2400_status() & XOSC16M_STABLE));
    5a82:	f004 f827 	bl	9ad4 <cc2400_status>
    5a86:	0642      	lsls	r2, r0, #25
    5a88:	d5fb      	bpl.n	5a82 <br_transmit+0x216>
		cc2400_strobe(SFSON);
    5a8a:	2061      	movs	r0, #97	; 0x61
    5a8c:	f004 f829 	bl	9ae2 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    5a90:	f004 f820 	bl	9ad4 <cc2400_status>
    5a94:	0743      	lsls	r3, r0, #29
    5a96:	d5fb      	bpl.n	5a90 <br_transmit+0x224>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a98:	200e      	movs	r0, #14
    5a9a:	f003 ff77 	bl	998c <cc2400_get>
    5a9e:	f000 001f 	and.w	r0, r0, #31
    5aa2:	280f      	cmp	r0, #15
    5aa4:	d1f8      	bne.n	5a98 <br_transmit+0x22c>
		cc2400_strobe(STX);
    5aa6:	2063      	movs	r0, #99	; 0x63
    5aa8:	f004 f81b 	bl	9ae2 <cc2400_strobe>
		handle_usb(clkn);
    5aac:	6830      	ldr	r0, [r6, #0]
    5aae:	f001 fe7b 	bl	77a8 <handle_usb>
    5ab2:	e7b1      	b.n	5a18 <br_transmit+0x1ac>
	PAEN_CLR;
    5ab4:	2280      	movs	r2, #128	; 0x80
    5ab6:	4b0a      	ldr	r3, [pc, #40]	; (5ae0 <br_transmit+0x274>)
	cc2400_set(IOCFG, gio_save);
    5ab8:	4639      	mov	r1, r7
	PAEN_CLR;
    5aba:	601a      	str	r2, [r3, #0]
	cc2400_set(IOCFG, gio_save);
    5abc:	2008      	movs	r0, #8
    5abe:	f003 ff6e 	bl	999e <cc2400_set>
}
    5ac2:	b005      	add	sp, #20
    5ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ac8:	10001a10 	.word	0x10001a10
    5acc:	10000450 	.word	0x10000450
    5ad0:	10000a4c 	.word	0x10000a4c
    5ad4:	2009c058 	.word	0x2009c058
    5ad8:	10001454 	.word	0x10001454
    5adc:	2009c03c 	.word	0x2009c03c
    5ae0:	2009c05c 	.word	0x2009c05c
    5ae4:	2009c038 	.word	0x2009c038
    5ae8:	40004008 	.word	0x40004008

00005aec <bt_generic_le>:
{
    5aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	modulation = MOD_BT_LOW_ENERGY;
    5af0:	2301      	movs	r3, #1
    5af2:	4c6f      	ldr	r4, [pc, #444]	; (5cb0 <bt_generic_le+0x1c4>)
{
    5af4:	4682      	mov	sl, r0
	modulation = MOD_BT_LOW_ENERGY;
    5af6:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5af8:	7460      	strb	r0, [r4, #17]
	reset_le();
    5afa:	f7ff fc37 	bl	536c <reset_le>
	ISER0 = ISER0_ISE_USB;
    5afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b02:	4b6c      	ldr	r3, [pc, #432]	; (5cb4 <bt_generic_le+0x1c8>)
	RXLED_CLR;
    5b04:	4f6c      	ldr	r7, [pc, #432]	; (5cb8 <bt_generic_le+0x1cc>)
	ISER0 = ISER0_ISE_USB;
    5b06:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5b08:	2310      	movs	r3, #16
    5b0a:	603b      	str	r3, [r7, #0]
	usb_queue_init();
    5b0c:	f001 fdea 	bl	76e4 <usb_queue_init>
	hold = 0;
    5b10:	2600      	movs	r6, #0
	dio_ssp_init();
    5b12:	f003 feb1 	bl	9878 <dio_ssp_init>
	dma_init_rx_symbols();
    5b16:	f001 ffbb 	bl	7a90 <dma_init_rx_symbols>
	dio_ssp_start();
    5b1a:	f002 f837 	bl	7b8c <dio_ssp_start>
	cc2400_rx();
    5b1e:	f7fe fc3b 	bl	4398 <cc2400_rx>
	cs_trigger_enable();
    5b22:	f001 fefb 	bl	791c <cs_trigger_enable>
			cc2400_set(FSDIV, channel - 1);
    5b26:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 5cdc <bt_generic_le+0x1f0>
		while ((rx_tc == 0) && (rx_err == 0))
    5b2a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5ce0 <bt_generic_le+0x1f4>
	while (requested_mode == active_mode) {
    5b2e:	7ca3      	ldrb	r3, [r4, #18]
    5b30:	459a      	cmp	sl, r3
    5b32:	f040 808c 	bne.w	5c4e <bt_generic_le+0x162>
		if (requested_channel != 0) {
    5b36:	89e3      	ldrh	r3, [r4, #14]
    5b38:	b29b      	uxth	r3, r3
    5b3a:	b1cb      	cbz	r3, 5b70 <bt_generic_le+0x84>
			cc2400_strobe(SRFOFF);
    5b3c:	2064      	movs	r0, #100	; 0x64
    5b3e:	f003 ffd0 	bl	9ae2 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b42:	f003 ffc7 	bl	9ad4 <cc2400_status>
    5b46:	0742      	lsls	r2, r0, #29
    5b48:	d4fb      	bmi.n	5b42 <bt_generic_le+0x56>
			cc2400_set(FSDIV, channel - 1);
    5b4a:	f8bb 104c 	ldrh.w	r1, [fp, #76]	; 0x4c
    5b4e:	2002      	movs	r0, #2
    5b50:	3901      	subs	r1, #1
    5b52:	b289      	uxth	r1, r1
    5b54:	f003 ff23 	bl	999e <cc2400_set>
			cc2400_strobe(SFSON);
    5b58:	2061      	movs	r0, #97	; 0x61
    5b5a:	f003 ffc2 	bl	9ae2 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b5e:	f003 ffb9 	bl	9ad4 <cc2400_status>
    5b62:	0743      	lsls	r3, r0, #29
    5b64:	d5fb      	bpl.n	5b5e <bt_generic_le+0x72>
			cc2400_strobe(SRX);
    5b66:	2062      	movs	r0, #98	; 0x62
    5b68:	f003 ffbb 	bl	9ae2 <cc2400_strobe>
			requested_channel = 0;
    5b6c:	2300      	movs	r3, #0
    5b6e:	81e3      	strh	r3, [r4, #14]
		if (do_hop) {
    5b70:	7ae3      	ldrb	r3, [r4, #11]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d077      	beq.n	5c66 <bt_generic_le+0x17a>
			hop();
    5b76:	f7ff fcbb 	bl	54f0 <hop>
		RXLED_CLR;
    5b7a:	2310      	movs	r3, #16
    5b7c:	603b      	str	r3, [r7, #0]
		rssi_reset();
    5b7e:	f001 fe27 	bl	77d0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b82:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    5b86:	f8df 915c 	ldr.w	r9, [pc, #348]	; 5ce4 <bt_generic_le+0x1f8>
		while ((rx_tc == 0) && (rx_err == 0))
    5b8a:	f8d8 3000 	ldr.w	r3, [r8]
    5b8e:	b91b      	cbnz	r3, 5b98 <bt_generic_le+0xac>
    5b90:	f8d9 3000 	ldr.w	r3, [r9]
    5b94:	2b00      	cmp	r3, #0
    5b96:	d06a      	beq.n	5c6e <bt_generic_le+0x182>
		if (rx_err) {
    5b98:	f8d9 3000 	ldr.w	r3, [r9]
    5b9c:	b11b      	cbz	r3, 5ba6 <bt_generic_le+0xba>
			status |= DMA_ERROR;
    5b9e:	7863      	ldrb	r3, [r4, #1]
    5ba0:	f043 0302 	orr.w	r3, r3, #2
    5ba4:	7063      	strb	r3, [r4, #1]
		if (!rx_tc)
    5ba6:	f8d8 3000 	ldr.w	r3, [r8]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d079      	beq.n	5ca2 <bt_generic_le+0x1b6>
		if (rx_tc > 1)
    5bae:	f8d8 3000 	ldr.w	r3, [r8]
    5bb2:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5bb4:	bf82      	ittt	hi
    5bb6:	7863      	ldrbhi	r3, [r4, #1]
    5bb8:	f043 0301 	orrhi.w	r3, r3, #1
    5bbc:	7063      	strbhi	r3, [r4, #1]
		rssi_iir_update(channel);
    5bbe:	f8bb 004c 	ldrh.w	r0, [fp, #76]	; 0x4c
    5bc2:	b280      	uxth	r0, r0
    5bc4:	f001 fe40 	bl	7848 <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    5bc8:	4a3c      	ldr	r2, [pc, #240]	; (5cbc <bt_generic_le+0x1d0>)
    5bca:	7813      	ldrb	r3, [r2, #0]
    5bcc:	b913      	cbnz	r3, 5bd4 <bt_generic_le+0xe8>
    5bce:	4b3c      	ldr	r3, [pc, #240]	; (5cc0 <bt_generic_le+0x1d4>)
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	b133      	cbz	r3, 5be2 <bt_generic_le+0xf6>
			status |= CS_TRIGGER;
    5bd4:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5bd6:	2602      	movs	r6, #2
			status |= CS_TRIGGER;
    5bd8:	f043 0308 	orr.w	r3, r3, #8
    5bdc:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5bde:	2300      	movs	r3, #0
    5be0:	7013      	strb	r3, [r2, #0]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    5be2:	4b38      	ldr	r3, [pc, #224]	; (5cc4 <bt_generic_le+0x1d8>)
    5be4:	4a38      	ldr	r2, [pc, #224]	; (5cc8 <bt_generic_le+0x1dc>)
    5be6:	f993 3000 	ldrsb.w	r3, [r3]
    5bea:	f992 2000 	ldrsb.w	r2, [r2]
    5bee:	3335      	adds	r3, #53	; 0x35
    5bf0:	4293      	cmp	r3, r2
    5bf2:	da54      	bge.n	5c9e <bt_generic_le+0x1b2>
			hold = CS_HOLD_TIME;
    5bf4:	2602      	movs	r6, #2
			status |= RSSI_TRIGGER;
    5bf6:	7863      	ldrb	r3, [r4, #1]
    5bf8:	f043 0310 	orr.w	r3, r3, #16
    5bfc:	7063      	strb	r3, [r4, #1]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bfe:	4933      	ldr	r1, [pc, #204]	; (5ccc <bt_generic_le+0x1e0>)
    5c00:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5c04:	f5a1 70c8 	sub.w	r0, r1, #400	; 0x190
    5c08:	f005 f9de 	bl	afc8 <memcpy>
		for (i = 0; i < DMA_SIZE; ++i) {
    5c0c:	2300      	movs	r3, #0
		hold--;
    5c0e:	3e01      	subs	r6, #1
    5c10:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 5cd4 <bt_generic_le+0x1e8>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c14:	4d2e      	ldr	r5, [pc, #184]	; (5cd0 <bt_generic_le+0x1e4>)
		hold--;
    5c16:	b2f6      	uxtb	r6, r6
			hold = CS_HOLD_TIME;
    5c18:	2100      	movs	r1, #0
    5c1a:	f103 0032 	add.w	r0, r3, #50	; 0x32
    5c1e:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c22:	682a      	ldr	r2, [r5, #0]
    5c24:	5cd2      	ldrb	r2, [r2, r3]
				idle_rxbuf[i] <<= 1;
    5c26:	f8d5 e000 	ldr.w	lr, [r5]
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c2a:	09d2      	lsrs	r2, r2, #7
    5c2c:	5442      	strb	r2, [r0, r1]
				idle_rxbuf[i] <<= 1;
    5c2e:	f81e 2003 	ldrb.w	r2, [lr, r3]
			for (j = 0; j < 8; ++j) {
    5c32:	3101      	adds	r1, #1
				idle_rxbuf[i] <<= 1;
    5c34:	0052      	lsls	r2, r2, #1
    5c36:	b2d2      	uxtb	r2, r2
			for (j = 0; j < 8; ++j) {
    5c38:	2908      	cmp	r1, #8
				idle_rxbuf[i] <<= 1;
    5c3a:	f80e 2003 	strb.w	r2, [lr, r3]
			for (j = 0; j < 8; ++j) {
    5c3e:	d1f0      	bne.n	5c22 <bt_generic_le+0x136>
		for (i = 0; i < DMA_SIZE; ++i) {
    5c40:	3301      	adds	r3, #1
    5c42:	2b32      	cmp	r3, #50	; 0x32
    5c44:	d1e8      	bne.n	5c18 <bt_generic_le+0x12c>
		int ret = data_cb(unpacked);
    5c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c48:	4822      	ldr	r0, [pc, #136]	; (5cd4 <bt_generic_le+0x1e8>)
    5c4a:	4798      	blx	r3
		if (!ret) break;
    5c4c:	bb48      	cbnz	r0, 5ca2 <bt_generic_le+0x1b6>
	ICER0 = ICER0_ICE_USB;
    5c4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c52:	4b21      	ldr	r3, [pc, #132]	; (5cd8 <bt_generic_le+0x1ec>)
    5c54:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5c56:	f7fe fc99 	bl	458c <cc2400_idle>
	dio_ssp_stop();
    5c5a:	f001 ffb7 	bl	7bcc <dio_ssp_stop>
}
    5c5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    5c62:	f001 be73 	b.w	794c <cs_trigger_disable>
			TXLED_CLR;
    5c66:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c6a:	603b      	str	r3, [r7, #0]
    5c6c:	e785      	b.n	5b7a <bt_generic_le+0x8e>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c6e:	2006      	movs	r0, #6
    5c70:	f003 fe8c 	bl	998c <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5c74:	4b11      	ldr	r3, [pc, #68]	; (5cbc <bt_generic_le+0x1d0>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c76:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5c7a:	781b      	ldrb	r3, [r3, #0]
    5c7c:	b163      	cbz	r3, 5c98 <bt_generic_le+0x1ac>
    5c7e:	f115 0f80 	cmn.w	r5, #128	; 0x80
    5c82:	d109      	bne.n	5c98 <bt_generic_le+0x1ac>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5c84:	4b0f      	ldr	r3, [pc, #60]	; (5cc4 <bt_generic_le+0x1d8>)
    5c86:	f993 3000 	ldrsb.w	r3, [r3]
    5c8a:	f103 0536 	add.w	r5, r3, #54	; 0x36
    5c8e:	42a8      	cmp	r0, r5
    5c90:	bfb8      	it	lt
    5c92:	4628      	movlt	r0, r5
    5c94:	b245      	sxtb	r5, r0
				rssi_at_trigger = rssi;
    5c96:	4628      	mov	r0, r5
			rssi_add(rssi);
    5c98:	f001 fdb6 	bl	7808 <rssi_add>
    5c9c:	e775      	b.n	5b8a <bt_generic_le+0x9e>
		if (hold == 0) {
    5c9e:	2e00      	cmp	r6, #0
    5ca0:	d1ad      	bne.n	5bfe <bt_generic_le+0x112>
		rx_tc = 0;
    5ca2:	2300      	movs	r3, #0
    5ca4:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5ca8:	f8c9 3000 	str.w	r3, [r9]
    5cac:	e73f      	b.n	5b2e <bt_generic_le+0x42>
    5cae:	bf00      	nop
    5cb0:	10000a4c 	.word	0x10000a4c
    5cb4:	e000e100 	.word	0xe000e100
    5cb8:	2009c03c 	.word	0x2009c03c
    5cbc:	10001a0d 	.word	0x10001a0d
    5cc0:	10001660 	.word	0x10001660
    5cc4:	10001a0c 	.word	0x10001a0c
    5cc8:	10001378 	.word	0x10001378
    5ccc:	10001804 	.word	0x10001804
    5cd0:	10001670 	.word	0x10001670
    5cd4:	10001674 	.word	0x10001674
    5cd8:	e000e180 	.word	0xe000e180
    5cdc:	10000450 	.word	0x10000450
    5ce0:	10001374 	.word	0x10001374
    5ce4:	10001a08 	.word	0x10001a08

00005ce8 <bt_le_sync>:
{
    5ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cec:	b093      	sub	sp, #76	; 0x4c
	modulation = MOD_BT_LOW_ENERGY;
    5cee:	2301      	movs	r3, #1
	ISER0 = ISER0_ISE_USB;
    5cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	modulation = MOD_BT_LOW_ENERGY;
    5cf4:	4cb7      	ldr	r4, [pc, #732]	; (5fd4 <bt_le_sync+0x2ec>)
	le.link_state = LINK_LISTENING;
    5cf6:	4db8      	ldr	r5, [pc, #736]	; (5fd8 <bt_le_sync+0x2f0>)
	modulation = MOD_BT_LOW_ENERGY;
    5cf8:	7023      	strb	r3, [r4, #0]
	le.link_state = LINK_LISTENING;
    5cfa:	752b      	strb	r3, [r5, #20]
	ISER0 = ISER0_ISE_USB;
    5cfc:	4bb7      	ldr	r3, [pc, #732]	; (5fdc <bt_le_sync+0x2f4>)
	mode = active_mode;
    5cfe:	7460      	strb	r0, [r4, #17]
	ISER0 = ISER0_ISE_USB;
    5d00:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5d02:	2310      	movs	r3, #16
    5d04:	4eb6      	ldr	r6, [pc, #728]	; (5fe0 <bt_le_sync+0x2f8>)
{
    5d06:	4681      	mov	r9, r0
	RXLED_CLR;
    5d08:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5d0a:	f001 fceb 	bl	76e4 <usb_queue_init>
	dio_ssp_init();
    5d0e:	f003 fdb3 	bl	9878 <dio_ssp_init>
	dma_init_le();
    5d12:	f001 ff01 	bl	7b18 <dma_init_le>
	dio_ssp_start();
    5d16:	f001 ff39 	bl	7b8c <dio_ssp_start>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5d1a:	6828      	ldr	r0, [r5, #0]
    5d1c:	f003 fd48 	bl	97b0 <rbit>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5d20:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 6018 <bt_le_sync+0x330>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5d24:	f7fe fb8c 	bl	4440 <cc2400_rx_sync>
    5d28:	9600      	str	r6, [sp, #0]
	while (requested_mode == active_mode) {
    5d2a:	7ca3      	ldrb	r3, [r4, #18]
    5d2c:	4599      	cmp	r9, r3
    5d2e:	f040 8140 	bne.w	5fb2 <bt_le_sync+0x2ca>
		if (requested_channel != 0) {
    5d32:	89e3      	ldrh	r3, [r4, #14]
    5d34:	b29b      	uxth	r3, r3
    5d36:	b1cb      	cbz	r3, 5d6c <bt_le_sync+0x84>
			cc2400_strobe(SRFOFF);
    5d38:	2064      	movs	r0, #100	; 0x64
    5d3a:	f003 fed2 	bl	9ae2 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d3e:	f003 fec9 	bl	9ad4 <cc2400_status>
    5d42:	0747      	lsls	r7, r0, #29
    5d44:	d4fb      	bmi.n	5d3e <bt_le_sync+0x56>
			cc2400_set(FSDIV, channel - 1);
    5d46:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5d4a:	2002      	movs	r0, #2
    5d4c:	3901      	subs	r1, #1
    5d4e:	b289      	uxth	r1, r1
    5d50:	f003 fe25 	bl	999e <cc2400_set>
			cc2400_strobe(SFSON);
    5d54:	2061      	movs	r0, #97	; 0x61
    5d56:	f003 fec4 	bl	9ae2 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d5a:	f003 febb 	bl	9ad4 <cc2400_status>
    5d5e:	0746      	lsls	r6, r0, #29
    5d60:	d5fb      	bpl.n	5d5a <bt_le_sync+0x72>
			cc2400_strobe(SRX);
    5d62:	2062      	movs	r0, #98	; 0x62
    5d64:	f003 febd 	bl	9ae2 <cc2400_strobe>
			requested_channel = 0;
    5d68:	2300      	movs	r3, #0
    5d6a:	81e3      	strh	r3, [r4, #14]
		RXLED_CLR;
    5d6c:	2310      	movs	r3, #16
    5d6e:	9a00      	ldr	r2, [sp, #0]
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d70:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 601c <bt_le_sync+0x334>
		RXLED_CLR;
    5d74:	6013      	str	r3, [r2, #0]
		rssi_reset();
    5d76:	f001 fd2b 	bl	77d0 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d7a:	4a9a      	ldr	r2, [pc, #616]	; (5fe4 <bt_le_sync+0x2fc>)
    5d7c:	f8db 3000 	ldr.w	r3, [fp]
    5d80:	b933      	cbnz	r3, 5d90 <bt_le_sync+0xa8>
    5d82:	6813      	ldr	r3, [r2, #0]
    5d84:	b923      	cbnz	r3, 5d90 <bt_le_sync+0xa8>
    5d86:	7ae3      	ldrb	r3, [r4, #11]
    5d88:	b913      	cbnz	r3, 5d90 <bt_le_sync+0xa8>
    5d8a:	7ca3      	ldrb	r3, [r4, #18]
    5d8c:	4599      	cmp	r9, r3
    5d8e:	d0f5      	beq.n	5d7c <bt_le_sync+0x94>
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d90:	2006      	movs	r0, #6
    5d92:	f003 fdfb 	bl	998c <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d96:	4b94      	ldr	r3, [pc, #592]	; (5fe8 <bt_le_sync+0x300>)
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d98:	f340 2007 	sbfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    5d9c:	7018      	strb	r0, [r3, #0]
    5d9e:	4b93      	ldr	r3, [pc, #588]	; (5fec <bt_le_sync+0x304>)
    5da0:	7018      	strb	r0, [r3, #0]
		if (requested_mode != active_mode) {
    5da2:	7ca3      	ldrb	r3, [r4, #18]
    5da4:	4599      	cmp	r9, r3
    5da6:	f040 8104 	bne.w	5fb2 <bt_le_sync+0x2ca>
		if (rx_err) {
    5daa:	4b8e      	ldr	r3, [pc, #568]	; (5fe4 <bt_le_sync+0x2fc>)
    5dac:	4f8d      	ldr	r7, [pc, #564]	; (5fe4 <bt_le_sync+0x2fc>)
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	b11b      	cbz	r3, 5dba <bt_le_sync+0xd2>
			status |= DMA_ERROR;
    5db2:	7863      	ldrb	r3, [r4, #1]
    5db4:	f043 0302 	orr.w	r3, r3, #2
    5db8:	7063      	strb	r3, [r4, #1]
		if (do_hop)
    5dba:	7ae3      	ldrb	r3, [r4, #11]
    5dbc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	f040 80be 	bne.w	5f42 <bt_le_sync+0x25a>
		if (!rx_tc)
    5dc6:	f8db 3000 	ldr.w	r3, [fp]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d0ad      	beq.n	5d2a <bt_le_sync+0x42>
		uint32_t packet[48/4+1] = { 0, };
    5dce:	2234      	movs	r2, #52	; 0x34
    5dd0:	a805      	add	r0, sp, #20
    5dd2:	f7fe fa15 	bl	4200 <memset>
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5dd6:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
		packet[0] = le.access_address;
    5dda:	682b      	ldr	r3, [r5, #0]
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5ddc:	b280      	uxth	r0, r0
		packet[0] = le.access_address;
    5dde:	9305      	str	r3, [sp, #20]
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5de0:	2630      	movs	r6, #48	; 0x30
    5de2:	f001 fb0f 	bl	7404 <btle_channel_index>
    5de6:	4346      	muls	r6, r0
    5de8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6020 <bt_le_sync+0x338>
    5dec:	eb08 0306 	add.w	r3, r8, r6
    5df0:	9301      	str	r3, [sp, #4]
			uint32_t v = rxbuf1[i+0] << 24
    5df2:	4b7f      	ldr	r3, [pc, #508]	; (5ff0 <bt_le_sync+0x308>)
    5df4:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5df8:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5dfa:	7899      	ldrb	r1, [r3, #2]
					   | rxbuf1[i+1] << 16
    5dfc:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+3] << 0;
    5dfe:	78d8      	ldrb	r0, [r3, #3]
					   | rxbuf1[i+1] << 16
    5e00:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+3] << 0;
    5e04:	4310      	orrs	r0, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e06:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
					   | rxbuf1[i+3] << 0;
    5e0a:	9302      	str	r3, [sp, #8]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e0c:	f003 fcd0 	bl	97b0 <rbit>
    5e10:	f858 6006 	ldr.w	r6, [r8, r6]
    5e14:	4046      	eors	r6, r0
    5e16:	9606      	str	r6, [sp, #24]
		unsigned len = (p[5] & 0x3f) + 2;
    5e18:	f3c6 2605 	ubfx	r6, r6, #8, #6
    5e1c:	f106 0802 	add.w	r8, r6, #2
		if (len > 39)
    5e20:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
    5e24:	f300 808d 	bgt.w	5f42 <bt_le_sync+0x25a>
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5e28:	3608      	adds	r6, #8
		if (total_transfers < 11) {
    5e2a:	2e2b      	cmp	r6, #43	; 0x2b
    5e2c:	d86d      	bhi.n	5f0a <bt_le_sync+0x222>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5e2e:	9b02      	ldr	r3, [sp, #8]
    5e30:	f026 0203 	bic.w	r2, r6, #3
    5e34:	496f      	ldr	r1, [pc, #444]	; (5ff4 <bt_le_sync+0x30c>)
    5e36:	4413      	add	r3, r2
    5e38:	680a      	ldr	r2, [r1, #0]
    5e3a:	429a      	cmp	r2, r3
    5e3c:	d202      	bcs.n	5e44 <bt_le_sync+0x15c>
    5e3e:	683a      	ldr	r2, [r7, #0]
    5e40:	2a00      	cmp	r2, #0
    5e42:	d0f9      	beq.n	5e38 <bt_le_sync+0x150>
		for (i = 4; i < 44; i += 4) {
    5e44:	2704      	movs	r7, #4
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e46:	f8da 3000 	ldr.w	r3, [sl]
		cc2400_strobe(SFSON);
    5e4a:	2061      	movs	r0, #97	; 0x61
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e4c:	f023 0301 	bic.w	r3, r3, #1
    5e50:	f8ca 3000 	str.w	r3, [sl]
		cc2400_strobe(SFSON);
    5e54:	f003 fe45 	bl	9ae2 <cc2400_strobe>
			uint32_t v = rxbuf1[i+0] << 24
    5e58:	4a65      	ldr	r2, [pc, #404]	; (5ff0 <bt_le_sync+0x308>)
    5e5a:	1c7b      	adds	r3, r7, #1
    5e5c:	f812 c007 	ldrb.w	ip, [r2, r7]
					   | rxbuf1[i+1] << 16
    5e60:	5cd0      	ldrb	r0, [r2, r3]
    5e62:	1cbb      	adds	r3, r7, #2
					   | rxbuf1[i+2] << 8
    5e64:	f812 e003 	ldrb.w	lr, [r2, r3]
    5e68:	1cfb      	adds	r3, r7, #3
					   | rxbuf1[i+3] << 0;
    5e6a:	5cd3      	ldrb	r3, [r2, r3]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e6c:	10b9      	asrs	r1, r7, #2
					   | rxbuf1[i+3] << 0;
    5e6e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    5e72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e76:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					   | rxbuf1[i+3] << 0;
    5e7a:	9203      	str	r2, [sp, #12]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e7c:	9102      	str	r1, [sp, #8]
    5e7e:	f003 fc97 	bl	97b0 <rbit>
    5e82:	9902      	ldr	r1, [sp, #8]
    5e84:	ab12      	add	r3, sp, #72	; 0x48
    5e86:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
    5e8a:	9b01      	ldr	r3, [sp, #4]
		for (i = 4; i < 44; i += 4) {
    5e8c:	3704      	adds	r7, #4
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		for (i = 4; i < 44; i += 4) {
    5e92:	2f2c      	cmp	r7, #44	; 0x2c
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e94:	ea80 0003 	eor.w	r0, r0, r3
    5e98:	f84e 0c30 	str.w	r0, [lr, #-48]
		for (i = 4; i < 44; i += 4) {
    5e9c:	9a03      	ldr	r2, [sp, #12]
    5e9e:	d1dc      	bne.n	5e5a <bt_le_sync+0x172>
		if (le.crc_verify) {
    5ea0:	692b      	ldr	r3, [r5, #16]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d139      	bne.n	5f1a <bt_le_sync+0x232>
		RXLED_SET;
    5ea6:	2210      	movs	r2, #16
    5ea8:	4b53      	ldr	r3, [pc, #332]	; (5ff8 <bt_le_sync+0x310>)
		packet_cb((uint8_t *)packet);
    5eaa:	a805      	add	r0, sp, #20
		RXLED_SET;
    5eac:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5eae:	69a3      	ldr	r3, [r4, #24]
    5eb0:	4798      	blx	r3
        if(btle_channel_index(channel) == idx3){
    5eb2:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5eb6:	b280      	uxth	r0, r0
    5eb8:	f001 faa4 	bl	7404 <btle_channel_index>
    5ebc:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
    5ec0:	4283      	cmp	r3, r0
    5ec2:	d10c      	bne.n	5ede <bt_le_sync+0x1f6>
            count3++;  
    5ec4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            if(count3 > count2-1){
    5ec8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
            count3++;  
    5ecc:	3301      	adds	r3, #1
    5ece:	b2db      	uxtb	r3, r3
            if(count3 > count2-1){
    5ed0:	429a      	cmp	r2, r3
            count3++;  
    5ed2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                count3 = 0;
    5ed6:	bfdc      	itt	le
    5ed8:	2300      	movle	r3, #0
    5eda:	f884 3034 	strble.w	r3, [r4, #52]	; 0x34
		ICER0 = ICER0_ICE_USB;
    5ede:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    5ee2:	4b46      	ldr	r3, [pc, #280]	; (5ffc <bt_le_sync+0x314>)
		enqueue(LE_PACKET, (uint8_t *)packet);
    5ee4:	a905      	add	r1, sp, #20
		ICER0 = ICER0_ICE_USB;
    5ee6:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5ee8:	2001      	movs	r0, #1
    5eea:	f7fe fb03 	bl	44f4 <enqueue>
		le.last_packet = CLK100NS;
    5eee:	f640 4135 	movw	r1, #3125	; 0xc35
		ISER0 = ISER0_ISE_USB;
    5ef2:	4b3a      	ldr	r3, [pc, #232]	; (5fdc <bt_le_sync+0x2f4>)
		le.last_packet = CLK100NS;
    5ef4:	4a42      	ldr	r2, [pc, #264]	; (6000 <bt_le_sync+0x318>)
		ISER0 = ISER0_ISE_USB;
    5ef6:	601e      	str	r6, [r3, #0]
		le.last_packet = CLK100NS;
    5ef8:	4b42      	ldr	r3, [pc, #264]	; (6004 <bt_le_sync+0x31c>)
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	6812      	ldr	r2, [r2, #0]
    5efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f02:	fb01 2303 	mla	r3, r1, r3, r2
    5f06:	64ab      	str	r3, [r5, #72]	; 0x48
    5f08:	e01b      	b.n	5f42 <bt_le_sync+0x25a>
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5f0a:	4a3f      	ldr	r2, [pc, #252]	; (6008 <bt_le_sync+0x320>)
    5f0c:	6813      	ldr	r3, [r2, #0]
    5f0e:	07d8      	lsls	r0, r3, #31
    5f10:	d598      	bpl.n	5e44 <bt_le_sync+0x15c>
    5f12:	683b      	ldr	r3, [r7, #0]
    5f14:	2b00      	cmp	r3, #0
    5f16:	d0f9      	beq.n	5f0c <bt_le_sync+0x224>
    5f18:	e794      	b.n	5e44 <bt_le_sync+0x15c>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5f1a:	4642      	mov	r2, r8
    5f1c:	a906      	add	r1, sp, #24
    5f1e:	68e8      	ldr	r0, [r5, #12]
    5f20:	f001 faf6 	bl	7510 <btle_crcgen_lut>
						 | (p[4+len+1] << 8)
    5f24:	ab12      	add	r3, sp, #72	; 0x48
			u32 wire_crc = (p[4+len+2] << 16)
    5f26:	441e      	add	r6, r3
						 | (p[4+len+1] << 8)
    5f28:	4498      	add	r8, r3
			u32 wire_crc = (p[4+len+2] << 16)
    5f2a:	f816 3c34 	ldrb.w	r3, [r6, #-52]
						 | (p[4+len+1] << 8)
    5f2e:	f818 2c2f 	ldrb.w	r2, [r8, #-47]
			u32 wire_crc = (p[4+len+2] << 16)
    5f32:	041b      	lsls	r3, r3, #16
						 | (p[4+len+1] << 8)
    5f34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						 | (p[4+len+0] << 0);
    5f38:	f818 2c30 	ldrb.w	r2, [r8, #-48]
    5f3c:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5f3e:	4298      	cmp	r0, r3
    5f40:	d0b1      	beq.n	5ea6 <bt_le_sync+0x1be>
		cc2400_strobe(SFSON);
    5f42:	2061      	movs	r0, #97	; 0x61
    5f44:	f003 fdcd 	bl	9ae2 <cc2400_strobe>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f48:	f8da 3000 	ldr.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5f4c:	4a2f      	ldr	r2, [pc, #188]	; (600c <bt_le_sync+0x324>)
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f4e:	f023 0301 	bic.w	r3, r3, #1
    5f52:	f8ca 3000 	str.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5f56:	6813      	ldr	r3, [r2, #0]
    5f58:	0759      	lsls	r1, r3, #29
    5f5a:	d437      	bmi.n	5fcc <bt_le_sync+0x2e4>
		u32 now = CLK100NS;
    5f5c:	f640 4135 	movw	r1, #3125	; 0xc35
    5f60:	4b28      	ldr	r3, [pc, #160]	; (6004 <bt_le_sync+0x31c>)
    5f62:	4a27      	ldr	r2, [pc, #156]	; (6000 <bt_le_sync+0x318>)
    5f64:	681b      	ldr	r3, [r3, #0]
    5f66:	6812      	ldr	r2, [r2, #0]
    5f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f6c:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5f70:	6ca9      	ldr	r1, [r5, #72]	; 0x48
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f72:	7d2a      	ldrb	r2, [r5, #20]
		if (now < le.last_packet)
    5f74:	428b      	cmp	r3, r1
			now += 3276800000; // handle rollover
    5f76:	bf38      	it	cc
    5f78:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f7c:	f1a2 0202 	sub.w	r2, r2, #2
			now += 3276800000; // handle rollover
    5f80:	bf38      	it	cc
    5f82:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f86:	2a01      	cmp	r2, #1
    5f88:	d803      	bhi.n	5f92 <bt_le_sync+0x2aa>
			&& (now - le.last_packet > 50000000))
    5f8a:	4a21      	ldr	r2, [pc, #132]	; (6010 <bt_le_sync+0x328>)
    5f8c:	1a5b      	subs	r3, r3, r1
    5f8e:	4293      	cmp	r3, r2
    5f90:	d802      	bhi.n	5f98 <bt_le_sync+0x2b0>
			|| (le_jam_count == 1)
    5f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5f94:	2b01      	cmp	r3, #1
    5f96:	d15c      	bne.n	6052 <bt_le_sync+0x36a>
			reset_le();
    5f98:	f7ff f9e8 	bl	536c <reset_le>
			TXLED_CLR;
    5f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
			le_jam_count = 0;
    5fa0:	2300      	movs	r3, #0
			TXLED_CLR;
    5fa2:	9900      	ldr	r1, [sp, #0]
			le_jam_count = 0;
    5fa4:	63a3      	str	r3, [r4, #56]	; 0x38
			TXLED_CLR;
    5fa6:	600a      	str	r2, [r1, #0]
			if (jam_mode == JAM_ONCE) {
    5fa8:	7ce2      	ldrb	r2, [r4, #19]
    5faa:	2a01      	cmp	r2, #1
    5fac:	d13a      	bne.n	6024 <bt_le_sync+0x33c>
				jam_mode = JAM_NONE;
    5fae:	74e3      	strb	r3, [r4, #19]
				requested_mode = MODE_IDLE;
    5fb0:	74a3      	strb	r3, [r4, #18]
	ICER0 = ICER0_ICE_USB;
    5fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5fb6:	4b11      	ldr	r3, [pc, #68]	; (5ffc <bt_le_sync+0x314>)
    5fb8:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5fba:	f7fe fae7 	bl	458c <cc2400_idle>
	dio_ssp_stop();
    5fbe:	f001 fe05 	bl	7bcc <dio_ssp_stop>
	cs_trigger_disable();
    5fc2:	f001 fcc3 	bl	794c <cs_trigger_disable>
}
    5fc6:	b013      	add	sp, #76	; 0x4c
    5fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			u8 tmp = (u8)DIO_SSP_DR;
    5fcc:	4b11      	ldr	r3, [pc, #68]	; (6014 <bt_le_sync+0x32c>)
    5fce:	681b      	ldr	r3, [r3, #0]
    5fd0:	e7c1      	b.n	5f56 <bt_le_sync+0x26e>
    5fd2:	bf00      	nop
    5fd4:	10000a4c 	.word	0x10000a4c
    5fd8:	10000450 	.word	0x10000450
    5fdc:	e000e100 	.word	0xe000e100
    5fe0:	2009c03c 	.word	0x2009c03c
    5fe4:	10001a08 	.word	0x10001a08
    5fe8:	10001378 	.word	0x10001378
    5fec:	1000137a 	.word	0x1000137a
    5ff0:	100019d5 	.word	0x100019d5
    5ff4:	50004104 	.word	0x50004104
    5ff8:	2009c038 	.word	0x2009c038
    5ffc:	e000e180 	.word	0xe000e180
    6000:	40004008 	.word	0x40004008
    6004:	10001454 	.word	0x10001454
    6008:	50004110 	.word	0x50004110
    600c:	4003000c 	.word	0x4003000c
    6010:	02faf080 	.word	0x02faf080
    6014:	40030008 	.word	0x40030008
    6018:	40030024 	.word	0x40030024
    601c:	10001374 	.word	0x10001374
    6020:	0000b214 	.word	0x0000b214
			if (active_mode == MODE_BT_PROMISC_LE)
    6024:	f1b9 0f0a 	cmp.w	r9, #10
    6028:	d0c3      	beq.n	5fb2 <bt_le_sync+0x2ca>
			le.link_state = LINK_LISTENING;
    602a:	2301      	movs	r3, #1
			cc2400_strobe(SRFOFF);
    602c:	2064      	movs	r0, #100	; 0x64
			le.link_state = LINK_LISTENING;
    602e:	752b      	strb	r3, [r5, #20]
			cc2400_strobe(SRFOFF);
    6030:	f003 fd57 	bl	9ae2 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6034:	f003 fd4e 	bl	9ad4 <cc2400_status>
    6038:	0742      	lsls	r2, r0, #29
    603a:	d4fb      	bmi.n	6034 <bt_le_sync+0x34c>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    603c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    6040:	b29b      	uxth	r3, r3
    6042:	b303      	cbz	r3, 6086 <bt_le_sync+0x39e>
    6044:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    6048:	b29b      	uxth	r3, r3
    604a:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
			restart_jamming = 1;
    604e:	2301      	movs	r3, #1
    6050:	63e3      	str	r3, [r4, #60]	; 0x3c
		cc2400_set(SYNCL, le.syncl);
    6052:	88e9      	ldrh	r1, [r5, #6]
    6054:	202c      	movs	r0, #44	; 0x2c
    6056:	f003 fca2 	bl	999e <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    605a:	88a9      	ldrh	r1, [r5, #4]
    605c:	202d      	movs	r0, #45	; 0x2d
    605e:	f003 fc9e 	bl	999e <cc2400_set>
		if (do_hop)
    6062:	7ae3      	ldrb	r3, [r4, #11]
    6064:	b10b      	cbz	r3, 606a <bt_le_sync+0x382>
			hop();
    6066:	f7ff fa43 	bl	54f0 <hop>
		if (le_jam_count > 0) {
    606a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    606c:	2b00      	cmp	r3, #0
    606e:	dd0d      	ble.n	608c <bt_le_sync+0x3a4>
			le_jam();
    6070:	f7ff f940 	bl	52f4 <le_jam>
			--le_jam_count;
    6074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6076:	3b01      	subs	r3, #1
    6078:	63a3      	str	r3, [r4, #56]	; 0x38
		rx_tc = 0;
    607a:	2300      	movs	r3, #0
		rx_err = 0;
    607c:	4a0e      	ldr	r2, [pc, #56]	; (60b8 <bt_le_sync+0x3d0>)
		rx_tc = 0;
    607e:	f8cb 3000 	str.w	r3, [fp]
		rx_err = 0;
    6082:	6013      	str	r3, [r2, #0]
    6084:	e651      	b.n	5d2a <bt_le_sync+0x42>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    6086:	f640 1362 	movw	r3, #2402	; 0x962
    608a:	e7de      	b.n	604a <bt_le_sync+0x362>
			dma_init_le();
    608c:	f001 fd44 	bl	7b18 <dma_init_le>
			dio_ssp_start();
    6090:	f001 fd7c 	bl	7b8c <dio_ssp_start>
			if (restart_jamming) {
    6094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6096:	b13b      	cbz	r3, 60a8 <bt_le_sync+0x3c0>
				cc2400_rx_sync(rbit(le.access_address));
    6098:	6828      	ldr	r0, [r5, #0]
    609a:	f003 fb89 	bl	97b0 <rbit>
    609e:	f7fe f9cf 	bl	4440 <cc2400_rx_sync>
				restart_jamming = 0;
    60a2:	2300      	movs	r3, #0
    60a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    60a6:	e7e8      	b.n	607a <bt_le_sync+0x392>
				while (!(cc2400_status() & FS_LOCK));
    60a8:	f003 fd14 	bl	9ad4 <cc2400_status>
    60ac:	0743      	lsls	r3, r0, #29
    60ae:	d5fb      	bpl.n	60a8 <bt_le_sync+0x3c0>
				cc2400_strobe(SRX);
    60b0:	2062      	movs	r0, #98	; 0x62
    60b2:	f003 fd16 	bl	9ae2 <cc2400_strobe>
    60b6:	e7e0      	b.n	607a <bt_le_sync+0x392>
    60b8:	10001a08 	.word	0x10001a08

000060bc <promisc_recover_hop_interval>:

// divide, rounding to the nearest integer: round up at 0.5.


//sopan
void promisc_recover_hop_interval(u8 *packet) {
    60bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60c0:	b099      	sub	sp, #100	; 0x64
    // for hop increment
    	static u32 first_ts = 0;
    	u8 hops = 0;
    	u32 diff = 0;
    	u32 channels_hopped = 0;
    	time_array1[0] = 0;
    60c2:	2100      	movs	r1, #0
    60c4:	4ed5      	ldr	r6, [pc, #852]	; (641c <promisc_recover_hop_interval+0x360>)



    // for increment
    
    if(count > 8){
    60c6:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    	time_array1[0] = 0;
    60ca:	f8a6 1040 	strh.w	r1, [r6, #64]	; 0x40
    if(count > 8){
    60ce:	2b08      	cmp	r3, #8
    60d0:	d906      	bls.n	60e0 <promisc_recover_hop_interval+0x24>
	count = 0;
	memset(seq, 0, sizeof seq);    
    60d2:	2248      	movs	r2, #72	; 0x48
    60d4:	f106 0064 	add.w	r0, r6, #100	; 0x64
	count = 0;
    60d8:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
	memset(seq, 0, sizeof seq);    
    60dc:	f7fe f890 	bl	4200 <memset>
    }

	u32 cur_clk = CLK100NS;
    60e0:	f640 4135 	movw	r1, #3125	; 0xc35
    60e4:	4cce      	ldr	r4, [pc, #824]	; (6420 <promisc_recover_hop_interval+0x364>)
    60e6:	4acf      	ldr	r2, [pc, #828]	; (6424 <promisc_recover_hop_interval+0x368>)
    60e8:	6823      	ldr	r3, [r4, #0]
    60ea:	6812      	ldr	r2, [r2, #0]
    60ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    60f0:	fb01 2303 	mla	r3, r1, r3, r2
	if (cur_clk < prev_clk)
    60f4:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
	u32 cur_clk = CLK100NS;
    60f8:	9303      	str	r3, [sp, #12]
	if (cur_clk < prev_clk)
    60fa:	42ab      	cmp	r3, r5
		cur_clk += 3267800000; // handle rollover
    60fc:	bf3f      	itttt	cc
    60fe:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6102:	f5a3 1365 	subcc.w	r3, r3, #3751936	; 0x394000
    6106:	f5a3 53a2 	subcc.w	r3, r3, #5184	; 0x1440
    610a:	9303      	strcc	r3, [sp, #12]
	u32 clk_diff = cur_clk - prev_clk;
    610c:	9b03      	ldr	r3, [sp, #12]
    610e:	1b5d      	subs	r5, r3, r5

	static u16 obsv_hop_interval; // observed hop interval
    	u16 hop_diff;

	// probably consecutive data packets on the same channel
	if (clk_diff < 6 * LE_BASECLK)
    6110:	4bc5      	ldr	r3, [pc, #788]	; (6428 <promisc_recover_hop_interval+0x36c>)
    6112:	429d      	cmp	r5, r3
    6114:	f240 80c8 	bls.w	62a8 <promisc_recover_hop_interval+0x1ec>
		return;
	
    if(match == 0){
    6118:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
    611c:	b943      	cbnz	r3, 6130 <promisc_recover_hop_interval+0x74>
	    seq[count] = (clk_diff/10000);
    611e:	f242 7210 	movw	r2, #10000	; 0x2710
    6122:	fbb5 f2f2 	udiv	r2, r5, r2
    6126:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    612a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    612e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    //debug_printf("s = %d\n",seq[count]);
	if(calc == 0){
    6130:	4fbe      	ldr	r7, [pc, #760]	; (642c <promisc_recover_hop_interval+0x370>)
    6132:	f897 8072 	ldrb.w	r8, [r7, #114]	; 0x72
    6136:	f1b8 0f00 	cmp.w	r8, #0
    613a:	d139      	bne.n	61b0 <promisc_recover_hop_interval+0xf4>
		++sindex;
        hop_diff = abs(seq[sindex] - (clk_diff/10000));
    613c:	f242 7910 	movw	r9, #10000	; 0x2710
    6140:	fbb5 f9f9 	udiv	r9, r5, r9
		++sindex;
    6144:	f8b6 30b2 	ldrh.w	r3, [r6, #178]	; 0xb2
    6148:	3301      	adds	r3, #1
    614a:	b29b      	uxth	r3, r3
    614c:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
        hop_diff = abs(seq[sindex] - (clk_diff/10000));
    6150:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6154:	6e58      	ldr	r0, [r3, #100]	; 0x64
    6156:	eba0 0009 	sub.w	r0, r0, r9
    615a:	f004 ff31 	bl	afc0 <abs>
        interval += (clk_diff/10000);
    615e:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
        //debug_printf("sn=%d c=%d si =%d ei=%d cnt=%d interval=%d step=%d\n",seq[sindex],(clk_diff/10000),sindex,eindex,count,interval,step);
		if(hop_diff <= 10){		
    6162:	b280      	uxth	r0, r0
        interval += (clk_diff/10000);
    6164:	444a      	add	r2, r9
		if(hop_diff <= 10){		
    6166:	280a      	cmp	r0, #10
        interval += (clk_diff/10000);
    6168:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
		if(hop_diff <= 10){		
    616c:	f200 809f 	bhi.w	62ae <promisc_recover_hop_interval+0x1f2>
            if(step < 1){
    6170:	f896 30b8 	ldrb.w	r3, [r6, #184]	; 0xb8
    6174:	b92b      	cbnz	r3, 6182 <promisc_recover_hop_interval+0xc6>
                time_array1[sindex] = interval;
    6176:	f8b6 10b2 	ldrh.w	r1, [r6, #178]	; 0xb2
    617a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
    617e:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
            }
			if(sindex == eindex){
    6182:	f8b6 10b2 	ldrh.w	r1, [r6, #178]	; 0xb2
    6186:	f8b6 20ba 	ldrh.w	r2, [r6, #186]	; 0xba
    618a:	4291      	cmp	r1, r2
    618c:	d110      	bne.n	61b0 <promisc_recover_hop_interval+0xf4>
                match = 1;
    618e:	2201      	movs	r2, #1
    6190:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
                sindex = 0;
    6194:	2200      	movs	r2, #0
                count = 0;
                step = step + 1;
    6196:	3301      	adds	r3, #1
    6198:	b2db      	uxtb	r3, r3
                if(step >= 3){
    619a:	2b02      	cmp	r3, #2
                sindex = 0;
    619c:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
                count = 0;
    61a0:	f8a6 2060 	strh.w	r2, [r6, #96]	; 0x60
                step = step + 1;
    61a4:	f886 30b8 	strb.w	r3, [r6, #184]	; 0xb8
                if(step >= 3){
    61a8:	d939      	bls.n	621e <promisc_recover_hop_interval+0x162>
                    calc = 2;
    61aa:	2302      	movs	r3, #2
    61ac:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            match = 0;
            seq[count] = (clk_diff/10000);
			}
	}

	if((count > 1) && (calc == 1)){
    61b0:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    61b4:	2b01      	cmp	r3, #1
    61b6:	d932      	bls.n	621e <promisc_recover_hop_interval+0x162>
    61b8:	f897 8072 	ldrb.w	r8, [r7, #114]	; 0x72
    61bc:	f1b8 0f01 	cmp.w	r8, #1
    61c0:	d12d      	bne.n	621e <promisc_recover_hop_interval+0x162>
        hop_diff = abs(seq[1] - (clk_diff/10000));
    61c2:	f242 7310 	movw	r3, #10000	; 0x2710
    61c6:	fbb5 f5f3 	udiv	r5, r5, r3
    61ca:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    61cc:	1b40      	subs	r0, r0, r5
    61ce:	f004 fef7 	bl	afc0 <abs>
		if(hop_diff <= 10){
    61d2:	b280      	uxth	r0, r0
    61d4:	280a      	cmp	r0, #10
    61d6:	d822      	bhi.n	621e <promisc_recover_hop_interval+0x162>
			interval += (clk_diff/10000);
			calc = 0;
    61d8:	2200      	movs	r2, #0
			interval += (clk_diff/10000);
    61da:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
			calc = 0;
    61de:	f887 2072 	strb.w	r2, [r7, #114]	; 0x72
			interval += (clk_diff/10000);
    61e2:	441d      	add	r5, r3
			sindex = 1;
			eindex = count - 1;
    61e4:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
			interval += (clk_diff/10000);
    61e8:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
			eindex = count - 1;
    61ec:	3b01      	subs	r3, #1
    61ee:	b29b      	uxth	r3, r3
            if(sindex == eindex){
    61f0:	2b01      	cmp	r3, #1
			sindex = 1;
    61f2:	f8a6 80b2 	strh.w	r8, [r6, #178]	; 0xb2
			eindex = count - 1;
    61f6:	f8a6 30ba 	strh.w	r3, [r6, #186]	; 0xba
            if(sindex == eindex){
    61fa:	d10a      	bne.n	6212 <promisc_recover_hop_interval+0x156>
                match = 1;
    61fc:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
                sindex = 0;
                count = 0;
                step = step + 1;
    6200:	f896 30b8 	ldrb.w	r3, [r6, #184]	; 0xb8
                sindex = 0;
    6204:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
                step = step + 1;
    6208:	3301      	adds	r3, #1
                count = 0;
    620a:	f8a6 2060 	strh.w	r2, [r6, #96]	; 0x60
                step = step + 1;
    620e:	f886 30b8 	strb.w	r3, [r6, #184]	; 0xb8
			}
            time_array1[sindex] = interval;
    6212:	f8b6 30b2 	ldrh.w	r3, [r6, #178]	; 0xb2
    6216:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    621a:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
            //debug_printf("s1=%d c=%d si =%d ei=%d cnt=%d interval=%d step=%d\n",seq[1],(clk_diff/10000),sindex,eindex,count, interval, step);
		}
	}

    if(calc == 2){
    621e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    6222:	2b02      	cmp	r3, #2
    6224:	d15d      	bne.n	62e2 <promisc_recover_hop_interval+0x226>
	uint16_t val = DIVIDE_ROUND(interval,step);
    6226:	f896 20b8 	ldrb.w	r2, [r6, #184]	; 0xb8
    622a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
	obsv_hop_interval = DIVIDE_ROUND(val, 37);
	debug_printf("Hop interval: %d\n",obsv_hop_interval);
    622e:	4880      	ldr	r0, [pc, #512]	; (6430 <promisc_recover_hop_interval+0x374>)
	uint16_t val = DIVIDE_ROUND(interval,step);
    6230:	eb03 0152 	add.w	r1, r3, r2, lsr #1
    6234:	fb91 f1f2 	sdiv	r1, r1, r2
	obsv_hop_interval = DIVIDE_ROUND(val, 37);
    6238:	2325      	movs	r3, #37	; 0x25
    623a:	b289      	uxth	r1, r1
    623c:	3112      	adds	r1, #18
    623e:	fb91 f1f3 	sdiv	r1, r1, r3
    6242:	f8a6 10bc 	strh.w	r1, [r6, #188]	; 0xbc
	debug_printf("Hop interval: %d\n",obsv_hop_interval);
    6246:	f002 ff5d 	bl	9104 <debug_printf>
	le.conn_interval = DIVIDE_ROUND(obsv_hop_interval, 1.25);
    624a:	f8b6 00bc 	ldrh.w	r0, [r6, #188]	; 0xbc
    624e:	f004 fa97 	bl	a780 <__aeabi_i2d>
    6252:	2200      	movs	r2, #0
    6254:	4b77      	ldr	r3, [pc, #476]	; (6434 <promisc_recover_hop_interval+0x378>)
    6256:	f004 f947 	bl	a4e8 <__adddf3>
    625a:	2200      	movs	r2, #0
    625c:	4b76      	ldr	r3, [pc, #472]	; (6438 <promisc_recover_hop_interval+0x37c>)
    625e:	f004 fc1f 	bl	aaa0 <__aeabi_ddiv>
    6262:	f004 fd05 	bl	ac70 <__aeabi_d2uiz>
	first_ts = CLK100NS; 
    6266:	f640 4135 	movw	r1, #3125	; 0xc35
    626a:	4a6e      	ldr	r2, [pc, #440]	; (6424 <promisc_recover_hop_interval+0x368>)
    626c:	6823      	ldr	r3, [r4, #0]
    626e:	6812      	ldr	r2, [r2, #0]
    6270:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6274:	fb01 2303 	mla	r3, r1, r3, r2
	le.conn_interval = DIVIDE_ROUND(obsv_hop_interval, 1.25);
    6278:	83f8      	strh	r0, [r7, #30]
	hop_direct_channel = btle_channel_index_to_phys(idx2);
    627a:	f897 0073 	ldrb.w	r0, [r7, #115]	; 0x73
	first_ts = CLK100NS; 
    627e:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
	hop_direct_channel = btle_channel_index_to_phys(idx2);
    6282:	f001 f8d7 	bl	7434 <btle_channel_index_to_phys>
	hop_mode = HOP_DIRECT;
    6286:	2304      	movs	r3, #4
	hop_direct_channel = btle_channel_index_to_phys(idx2);
    6288:	81b0      	strh	r0, [r6, #12]
	hop_mode = HOP_DIRECT;
    628a:	72b3      	strb	r3, [r6, #10]
	do_hop = 1;
    628c:	2301      	movs	r3, #1
    628e:	72f3      	strb	r3, [r6, #11]
	calc = 3;
    6290:	2303      	movs	r3, #3
    6292:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        }
    }

    // for increment
	
	++count;
    6296:	4b61      	ldr	r3, [pc, #388]	; (641c <promisc_recover_hop_interval+0x360>)
    6298:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
    629c:	3201      	adds	r2, #1
    629e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	prev_clk = cur_clk;
    62a2:	9a03      	ldr	r2, [sp, #12]
    62a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
    62a8:	b019      	add	sp, #100	; 0x64
    62aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memset(seq, 0, sizeof seq);
    62ae:	2248      	movs	r2, #72	; 0x48
    62b0:	4641      	mov	r1, r8
    62b2:	4862      	ldr	r0, [pc, #392]	; (643c <promisc_recover_hop_interval+0x380>)
			interval = 0;
    62b4:	f8c6 80b4 	str.w	r8, [r6, #180]	; 0xb4
            sindex = 0;
    62b8:	f8a6 80b2 	strh.w	r8, [r6, #178]	; 0xb2
            memset(seq, 0, sizeof seq);
    62bc:	f7fd ffa0 	bl	4200 <memset>
            memset(time_array1, 0, sizeof time_array1);        
    62c0:	2220      	movs	r2, #32
    62c2:	4641      	mov	r1, r8
    62c4:	485e      	ldr	r0, [pc, #376]	; (6440 <promisc_recover_hop_interval+0x384>)
    62c6:	f7fd ff9b 	bl	4200 <memset>
			calc = 1;
    62ca:	2301      	movs	r3, #1
            step = 0;
    62cc:	f886 80b8 	strb.w	r8, [r6, #184]	; 0xb8
			calc = 1;
    62d0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            count = 1;
    62d4:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
            match = 0;
    62d8:	f886 80b0 	strb.w	r8, [r6, #176]	; 0xb0
            seq[count] = (clk_diff/10000);
    62dc:	f8c6 9068 	str.w	r9, [r6, #104]	; 0x68
    62e0:	e766      	b.n	61b0 <promisc_recover_hop_interval+0xf4>
    else if (channel == btle_channel_index_to_phys(idx2) && calc == 3) {
    62e2:	f897 0073 	ldrb.w	r0, [r7, #115]	; 0x73
    62e6:	f001 f8a5 	bl	7434 <btle_channel_index_to_phys>
    62ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    62ee:	b29b      	uxth	r3, r3
    62f0:	4298      	cmp	r0, r3
    62f2:	d149      	bne.n	6388 <promisc_recover_hop_interval+0x2cc>
    62f4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    62f8:	2b03      	cmp	r3, #3
    62fa:	d145      	bne.n	6388 <promisc_recover_hop_interval+0x2cc>
		u32 second_ts = CLK100NS;
    62fc:	f640 4135 	movw	r1, #3125	; 0xc35
    6300:	4a48      	ldr	r2, [pc, #288]	; (6424 <promisc_recover_hop_interval+0x368>)
    6302:	6823      	ldr	r3, [r4, #0]
    6304:	6812      	ldr	r2, [r2, #0]
    6306:	f3c3 0313 	ubfx	r3, r3, #0, #20
    630a:	fb01 2303 	mla	r3, r1, r3, r2
        time_array2[count1] = diff/10000;//
    630e:	f242 7110 	movw	r1, #10000	; 0x2710
	if (second_ts < first_ts){
    6312:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
    6316:	4293      	cmp	r3, r2
		second_ts += 3276800000;
    6318:	bf3c      	itt	cc
    631a:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    631e:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
        diff = (second_ts - first_ts);
    6322:	1a9b      	subs	r3, r3, r2
        time_array2[count1] = diff/10000;//
    6324:	fbb3 f1f1 	udiv	r1, r3, r1
    6328:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
    632c:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    6330:	f8a2 10c4 	strh.w	r1, [r2, #196]	; 0xc4
		channels_hopped = DIVIDE_ROUND(diff,le.conn_interval * LE_BASECLK);
    6334:	f641 026a 	movw	r2, #6250	; 0x186a
    6338:	8bf9      	ldrh	r1, [r7, #30]
    633a:	fb02 3301 	mla	r3, r2, r1, r3
    633e:	f243 02d4 	movw	r2, #12500	; 0x30d4
    6342:	434a      	muls	r2, r1
    6344:	fbb3 f3f2 	udiv	r3, r3, r2
	if (channels_hopped > 37) {
    6348:	2b25      	cmp	r3, #37	; 0x25
    634a:	d915      	bls.n	6378 <promisc_recover_hop_interval+0x2bc>
            	first_ts = CLK100NS; 
    634c:	f640 4135 	movw	r1, #3125	; 0xc35
    6350:	4a34      	ldr	r2, [pc, #208]	; (6424 <promisc_recover_hop_interval+0x368>)
    6352:	6823      	ldr	r3, [r4, #0]
    6354:	6812      	ldr	r2, [r2, #0]
    6356:	f3c3 0313 	ubfx	r3, r3, #0, #20
    635a:	fb01 2303 	mla	r3, r1, r3, r2
            	hop_direct_channel = btle_channel_index_to_phys(idx3);
    635e:	f897 0071 	ldrb.w	r0, [r7, #113]	; 0x71
            	first_ts = CLK100NS; 
    6362:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
            	hop_direct_channel = btle_channel_index_to_phys(idx3);
    6366:	f001 f865 	bl	7434 <btle_channel_index_to_phys>
		hop_mode = HOP_DIRECT;
    636a:	2304      	movs	r3, #4
	    	do_hop = 1;
    636c:	2201      	movs	r2, #1
            	hop_direct_channel = btle_channel_index_to_phys(idx3);
    636e:	81b0      	strh	r0, [r6, #12]
            	calc = 4;
    6370:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		hop_mode = HOP_DIRECT;
    6374:	72b3      	strb	r3, [r6, #10]
	    	do_hop = 1;
    6376:	72f2      	strb	r2, [r6, #11]
	do_hop = 1;
    6378:	2301      	movs	r3, #1
    637a:	72f3      	strb	r3, [r6, #11]
	++count1;
    637c:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
    6380:	3301      	adds	r3, #1
    6382:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
    else if (channel == btle_channel_index_to_phys(idx2) && calc == 3) {
    6386:	e786      	b.n	6296 <promisc_recover_hop_interval+0x1da>
    else if(channel == btle_channel_index_to_phys(idx3) && calc == 4){
    6388:	f897 0071 	ldrb.w	r0, [r7, #113]	; 0x71
    638c:	f001 f852 	bl	7434 <btle_channel_index_to_phys>
    6390:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    6394:	b29b      	uxth	r3, r3
    6396:	4298      	cmp	r0, r3
    6398:	d154      	bne.n	6444 <promisc_recover_hop_interval+0x388>
    639a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    639e:	2b04      	cmp	r3, #4
    63a0:	d150      	bne.n	6444 <promisc_recover_hop_interval+0x388>
        u32 second_ts2 = CLK100NS;
    63a2:	f640 4135 	movw	r1, #3125	; 0xc35
    63a6:	4a1f      	ldr	r2, [pc, #124]	; (6424 <promisc_recover_hop_interval+0x368>)
    63a8:	6823      	ldr	r3, [r4, #0]
    63aa:	6812      	ldr	r2, [r2, #0]
    63ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    63b0:	fb01 2303 	mla	r3, r1, r3, r2
		if (second_ts2 < first_ts){
    63b4:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
        time_array3[count2] = ((diff/10000)+ time_array2[0])%(37*obsv_hop_interval);
    63b8:	f8b6 00c4 	ldrh.w	r0, [r6, #196]	; 0xc4
		if (second_ts2 < first_ts){
    63bc:	4293      	cmp	r3, r2
			second_ts2 += 3276800000;
    63be:	bf3c      	itt	cc
    63c0:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    63c4:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
        diff = (second_ts2 - first_ts);
    63c8:	1a9b      	subs	r3, r3, r2
        time_array3[count2] = ((diff/10000)+ time_array2[0])%(37*obsv_hop_interval);
    63ca:	f242 7210 	movw	r2, #10000	; 0x2710
    63ce:	fbb3 f2f2 	udiv	r2, r3, r2
    63d2:	4402      	add	r2, r0
    63d4:	2025      	movs	r0, #37	; 0x25
    63d6:	f8b6 40bc 	ldrh.w	r4, [r6, #188]	; 0xbc
    63da:	f896 1035 	ldrb.w	r1, [r6, #53]	; 0x35
    63de:	4360      	muls	r0, r4
    63e0:	fbb2 f4f0 	udiv	r4, r2, r0
    63e4:	fb00 2214 	mls	r2, r0, r4, r2
    63e8:	eb06 0541 	add.w	r5, r6, r1, lsl #1
    63ec:	f8a5 20e6 	strh.w	r2, [r5, #230]	; 0xe6
		channels_hopped = DIVIDE_ROUND(diff,le.conn_interval * LE_BASECLK);
    63f0:	f641 026a 	movw	r2, #6250	; 0x186a
    63f4:	8bf8      	ldrh	r0, [r7, #30]
    63f6:	fb02 3300 	mla	r3, r2, r0, r3
    63fa:	f243 02d4 	movw	r2, #12500	; 0x30d4
    63fe:	4342      	muls	r2, r0
    6400:	fbb3 f3f2 	udiv	r3, r3, r2
		if (channels_hopped > 37) {
    6404:	2b25      	cmp	r3, #37	; 0x25
            		calc = 5;
    6406:	bf84      	itt	hi
    6408:	2305      	movhi	r3, #5
    640a:	f887 3072 	strbhi.w	r3, [r7, #114]	; 0x72
		do_hop = 1;
    640e:	2301      	movs	r3, #1
        ++count2;
    6410:	4419      	add	r1, r3
		do_hop = 1;
    6412:	72f3      	strb	r3, [r6, #11]
        ++count2;
    6414:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
    else if(channel == btle_channel_index_to_phys(idx3) && calc == 4){
    6418:	e73d      	b.n	6296 <promisc_recover_hop_interval+0x1da>
    641a:	bf00      	nop
    641c:	10000a4c 	.word	0x10000a4c
    6420:	10001454 	.word	0x10001454
    6424:	40004008 	.word	0x40004008
    6428:	000124f7 	.word	0x000124f7
    642c:	10000450 	.word	0x10000450
    6430:	0000ba2c 	.word	0x0000ba2c
    6434:	3fe40000 	.word	0x3fe40000
    6438:	3ff40000 	.word	0x3ff40000
    643c:	10000ab0 	.word	0x10000ab0
    6440:	10000a8c 	.word	0x10000a8c
    else if(calc == 5){
    6444:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    6448:	2b05      	cmp	r3, #5
    644a:	f040 81af 	bne.w	67ac <promisc_recover_hop_interval+0x6f0>
        for( ta1 = 0; ta1 < eindex; ta1++){
    644e:	2500      	movs	r5, #0
    6450:	f8b6 30ba 	ldrh.w	r3, [r6, #186]	; 0xba
    6454:	f896 2107 	ldrb.w	r2, [r6, #263]	; 0x107
    6458:	9312      	str	r3, [sp, #72]	; 0x48
            for( ta2 = 0; ta2 < count1-1; ta2++){
    645a:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
        for( ta1 = 0; ta1 < eindex; ta1++){
    645e:	46ae      	mov	lr, r5
            for( ta2 = 0; ta2 < count1-1; ta2++){
    6460:	3b01      	subs	r3, #1
    6462:	9313      	str	r3, [sp, #76]	; 0x4c
                    diff = (le.conn_interval*1.25*37) - time_array1[ta1] + time_array2[ta2];
    6464:	8bfb      	ldrh	r3, [r7, #30]
    6466:	f896 a108 	ldrb.w	sl, [r6, #264]	; 0x108
    646a:	9305      	str	r3, [sp, #20]
    646c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
    6470:	f8b6 410a 	ldrh.w	r4, [r6, #266]	; 0x10a
                if((idx2 - idx1) > 0){
    6474:	1a99      	subs	r1, r3, r2
    6476:	910b      	str	r1, [sp, #44]	; 0x2c
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6478:	f103 0125 	add.w	r1, r3, #37	; 0x25
    647c:	1a8a      	subs	r2, r1, r2
    647e:	f897 1071 	ldrb.w	r1, [r7, #113]	; 0x71
        for( ta1 = 0; ta1 < eindex; ta1++){
    6482:	462f      	mov	r7, r5
                        if((idx3 - idx2) > 0){
    6484:	1ac8      	subs	r0, r1, r3
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6486:	3125      	adds	r1, #37	; 0x25
    6488:	1acb      	subs	r3, r1, r3
                        if((idx3 - idx2) > 0){
    648a:	900e      	str	r0, [sp, #56]	; 0x38
        for( ta1 = 0; ta1 < eindex; ta1++){
    648c:	4629      	mov	r1, r5
    648e:	4628      	mov	r0, r5
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6490:	9214      	str	r2, [sp, #80]	; 0x50
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6492:	9316      	str	r3, [sp, #88]	; 0x58
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    6494:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
    6498:	f896 310e 	ldrb.w	r3, [r6, #270]	; 0x10e
    649c:	3a01      	subs	r2, #1
    649e:	9310      	str	r3, [sp, #64]	; 0x40
    64a0:	f896 310f 	ldrb.w	r3, [r6, #271]	; 0x10f
    64a4:	9215      	str	r2, [sp, #84]	; 0x54
    64a6:	f896 810c 	ldrb.w	r8, [r6, #268]	; 0x10c
    64aa:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
    64ae:	f896 910d 	ldrb.w	r9, [r6, #269]	; 0x10d
        for( ta1 = 0; ta1 < eindex; ta1++){
    64b2:	f886 5106 	strb.w	r5, [r6, #262]	; 0x106
    64b6:	9304      	str	r3, [sp, #16]
    64b8:	9511      	str	r5, [sp, #68]	; 0x44
    64ba:	950f      	str	r5, [sp, #60]	; 0x3c
    64bc:	950c      	str	r5, [sp, #48]	; 0x30
    64be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    64c0:	429d      	cmp	r5, r3
    64c2:	f080 80e9 	bcs.w	6698 <promisc_recover_hop_interval+0x5dc>
    64c6:	2300      	movs	r3, #0
    64c8:	930a      	str	r3, [sp, #40]	; 0x28
                if(time_array1[ta1] > time_array2[ta2]){
    64ca:	4bb0      	ldr	r3, [pc, #704]	; (678c <promisc_recover_hop_interval+0x6d0>)
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    64cc:	2625      	movs	r6, #37	; 0x25
                if(time_array1[ta1] > time_array2[ta2]){
    64ce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    64d2:	9317      	str	r3, [sp, #92]	; 0x5c
    64d4:	e075      	b.n	65c2 <promisc_recover_hop_interval+0x506>
    64d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    64d8:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    64dc:	4bab      	ldr	r3, [pc, #684]	; (678c <promisc_recover_hop_interval+0x6d0>)
    64de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    64e2:	f8b2 b0c4 	ldrh.w	fp, [r2, #196]	; 0xc4
    64e6:	455c      	cmp	r4, fp
    64e8:	d974      	bls.n	65d4 <promisc_recover_hop_interval+0x518>
                    diff = (le.conn_interval*1.25*37) - time_array1[ta1] + time_array2[ta2];
    64ea:	9805      	ldr	r0, [sp, #20]
    64ec:	f004 f948 	bl	a780 <__aeabi_i2d>
    64f0:	2200      	movs	r2, #0
    64f2:	4ba7      	ldr	r3, [pc, #668]	; (6790 <promisc_recover_hop_interval+0x6d4>)
    64f4:	f004 f9aa 	bl	a84c <__aeabi_dmul>
    64f8:	2200      	movs	r2, #0
    64fa:	4ba6      	ldr	r3, [pc, #664]	; (6794 <promisc_recover_hop_interval+0x6d8>)
    64fc:	f004 f9a6 	bl	a84c <__aeabi_dmul>
    6500:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6504:	4620      	mov	r0, r4
    6506:	f004 f93b 	bl	a780 <__aeabi_i2d>
    650a:	4602      	mov	r2, r0
    650c:	460b      	mov	r3, r1
    650e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    6512:	f003 ffe7 	bl	a4e4 <__aeabi_dsub>
    6516:	e9cd 0106 	strd	r0, r1, [sp, #24]
    651a:	4658      	mov	r0, fp
    651c:	f004 f930 	bl	a780 <__aeabi_i2d>
    6520:	4602      	mov	r2, r0
    6522:	460b      	mov	r3, r1
    6524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    6528:	f003 ffde 	bl	a4e8 <__adddf3>
    652c:	f004 fba0 	bl	ac70 <__aeabi_d2uiz>
    6530:	b284      	uxth	r4, r0
                u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    6532:	9805      	ldr	r0, [sp, #20]
    6534:	f004 f924 	bl	a780 <__aeabi_i2d>
    6538:	2200      	movs	r2, #0
    653a:	4b95      	ldr	r3, [pc, #596]	; (6790 <promisc_recover_hop_interval+0x6d4>)
    653c:	f004 f986 	bl	a84c <__aeabi_dmul>
    6540:	2200      	movs	r2, #0
    6542:	4b95      	ldr	r3, [pc, #596]	; (6798 <promisc_recover_hop_interval+0x6dc>)
    6544:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6548:	f004 f980 	bl	a84c <__aeabi_dmul>
    654c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    6550:	4620      	mov	r0, r4
    6552:	f004 f915 	bl	a780 <__aeabi_i2d>
    6556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    655a:	f003 ffc5 	bl	a4e8 <__adddf3>
    655e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    6562:	f004 fa9d 	bl	aaa0 <__aeabi_ddiv>
    6566:	f004 fb83 	bl	ac70 <__aeabi_d2uiz>
                if((idx2 - idx1) > 0){
    656a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    656c:	b2c0      	uxtb	r0, r0
                if((idx2 - idx1) > 0){
    656e:	2b00      	cmp	r3, #0
                    hops = ((idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6570:	4b8a      	ldr	r3, [pc, #552]	; (679c <promisc_recover_hop_interval+0x6e0>)
    6572:	bfc8      	it	gt
    6574:	9a0b      	ldrgt	r2, [sp, #44]	; 0x2c
    6576:	4418      	add	r0, r3
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6578:	bfd8      	it	le
    657a:	9a14      	ldrle	r2, [sp, #80]	; 0x50
                    hops = ((idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    657c:	f890 387c 	ldrb.w	r3, [r0, #2172]	; 0x87c
                    hops = ((37 + idx2 - idx1)*hop_interval_lut[channels_hopped])%37;
    6580:	4353      	muls	r3, r2
    6582:	fb93 faf6 	sdiv	sl, r3, r6
    6586:	fb06 3a1a 	mls	sl, r6, sl, r3
    658a:	fa5f fa8a 	uxtb.w	sl, sl
                if ((hops > 4) && (hops < 17)){
    658e:	f1aa 0305 	sub.w	r3, sl, #5
    6592:	2b0b      	cmp	r3, #11
    6594:	d810      	bhi.n	65b8 <promisc_recover_hop_interval+0x4fc>
    6596:	2700      	movs	r7, #0
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    6598:	9a15      	ldr	r2, [sp, #84]	; 0x54
    659a:	b2fb      	uxtb	r3, r7
    659c:	4293      	cmp	r3, r2
    659e:	9304      	str	r3, [sp, #16]
                        if(time_array2[ta2] > time_array3[ta3]){
    65a0:	4b7a      	ldr	r3, [pc, #488]	; (678c <promisc_recover_hop_interval+0x6d0>)
                    for( ta3 = 0; ta3 < count2 - 1; ta3++){
    65a2:	db1b      	blt.n	65dc <promisc_recover_hop_interval+0x520>
                     index += 1;
    65a4:	2701      	movs	r7, #1
                     ch_hop[index] = hops;
    65a6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    65aa:	f8a3 a110 	strh.w	sl, [r3, #272]	; 0x110
                     index += 1;
    65ae:	f109 0301 	add.w	r3, r9, #1
    65b2:	fa5f f983 	uxtb.w	r9, r3
    65b6:	970c      	str	r7, [sp, #48]	; 0x30
    65b8:	2101      	movs	r1, #1
    65ba:	468e      	mov	lr, r1
    65bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    65be:	3301      	adds	r3, #1
    65c0:	930a      	str	r3, [sp, #40]	; 0x28
    65c2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
            for( ta2 = 0; ta2 < count1-1; ta2++){
    65c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    65c8:	429a      	cmp	r2, r3
    65ca:	db84      	blt.n	64d6 <promisc_recover_hop_interval+0x41a>
    65cc:	3501      	adds	r5, #1
    65ce:	b2ed      	uxtb	r5, r5
    65d0:	2001      	movs	r0, #1
    65d2:	e774      	b.n	64be <promisc_recover_hop_interval+0x402>
                    diff = time_array2[ta2] - time_array1[ta1];
    65d4:	ebab 0404 	sub.w	r4, fp, r4
    65d8:	b2a4      	uxth	r4, r4
    65da:	e7aa      	b.n	6532 <promisc_recover_hop_interval+0x476>
                        if(time_array2[ta2] > time_array3[ta3]){
    65dc:	9a04      	ldr	r2, [sp, #16]
    65de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    65e2:	f8b3 40e6 	ldrh.w	r4, [r3, #230]	; 0xe6
    65e6:	45a3      	cmp	fp, r4
    65e8:	d952      	bls.n	6690 <promisc_recover_hop_interval+0x5d4>
                            diff = (le.conn_interval*1.25*37) - time_array2[ta2] + time_array3[ta3];
    65ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    65ee:	2200      	movs	r2, #0
    65f0:	4b68      	ldr	r3, [pc, #416]	; (6794 <promisc_recover_hop_interval+0x6d8>)
    65f2:	f004 f92b 	bl	a84c <__aeabi_dmul>
    65f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    65fa:	4658      	mov	r0, fp
    65fc:	f004 f8c0 	bl	a780 <__aeabi_i2d>
    6600:	4602      	mov	r2, r0
    6602:	460b      	mov	r3, r1
    6604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    6608:	f003 ff6c 	bl	a4e4 <__aeabi_dsub>
    660c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    6610:	4620      	mov	r0, r4
    6612:	f004 f8b5 	bl	a780 <__aeabi_i2d>
    6616:	4602      	mov	r2, r0
    6618:	460b      	mov	r3, r1
    661a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    661e:	f003 ff63 	bl	a4e8 <__adddf3>
    6622:	f004 fb25 	bl	ac70 <__aeabi_d2uiz>
    6626:	b284      	uxth	r4, r0
                        u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    6628:	4620      	mov	r0, r4
    662a:	f004 f8a9 	bl	a780 <__aeabi_i2d>
    662e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    6632:	f003 ff59 	bl	a4e8 <__adddf3>
    6636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    663a:	f004 fa31 	bl	aaa0 <__aeabi_ddiv>
    663e:	f004 fb17 	bl	ac70 <__aeabi_d2uiz>
                        if((idx3 - idx2) > 0){
    6642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                        u8 channels_hopped = DIVIDE_ROUND(diff,le.conn_interval*1.25);
    6644:	b2c0      	uxtb	r0, r0
                        if((idx3 - idx2) > 0){
    6646:	2b00      	cmp	r3, #0
                            hops2 = ((idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6648:	4b54      	ldr	r3, [pc, #336]	; (679c <promisc_recover_hop_interval+0x6e0>)
    664a:	bfc8      	it	gt
    664c:	9a0e      	ldrgt	r2, [sp, #56]	; 0x38
    664e:	4418      	add	r0, r3
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6650:	bfd8      	it	le
    6652:	9a16      	ldrle	r2, [sp, #88]	; 0x58
                            hops2 = ((idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6654:	f890 387c 	ldrb.w	r3, [r0, #2172]	; 0x87c
                            hops2 = ((37 + idx3 - idx2)*hop_interval_lut[channels_hopped])%37;
    6658:	4353      	muls	r3, r2
    665a:	fb93 f2f6 	sdiv	r2, r3, r6
    665e:	fb06 3312 	mls	r3, r6, r2, r3
    6662:	fa5f f883 	uxtb.w	r8, r3
                        if (hops2 == hops){
    6666:	45d0      	cmp	r8, sl
    6668:	d10e      	bne.n	6688 <promisc_recover_hop_interval+0x5cc>
                              ch_hop[index] = hops;
    666a:	4b48      	ldr	r3, [pc, #288]	; (678c <promisc_recover_hop_interval+0x6d0>)
    666c:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    6670:	f8a3 8110 	strh.w	r8, [r3, #272]	; 0x110
    6674:	9b04      	ldr	r3, [sp, #16]
    6676:	3301      	adds	r3, #1
    6678:	b2db      	uxtb	r3, r3
    667a:	9310      	str	r3, [sp, #64]	; 0x40
                              index += 1;
    667c:	f109 0301 	add.w	r3, r9, #1
    6680:	fa5f f983 	uxtb.w	r9, r3
    6684:	2301      	movs	r3, #1
    6686:	9311      	str	r3, [sp, #68]	; 0x44
    6688:	2301      	movs	r3, #1
    668a:	3701      	adds	r7, #1
    668c:	930f      	str	r3, [sp, #60]	; 0x3c
    668e:	e783      	b.n	6598 <promisc_recover_hop_interval+0x4dc>
                            diff = time_array3[ta3] - time_array2[ta2];
    6690:	eba4 040b 	sub.w	r4, r4, fp
    6694:	b2a4      	uxth	r4, r4
    6696:	e7c7      	b.n	6628 <promisc_recover_hop_interval+0x56c>
    6698:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    669a:	4b3c      	ldr	r3, [pc, #240]	; (678c <promisc_recover_hop_interval+0x6d0>)
    669c:	b10e      	cbz	r6, 66a2 <promisc_recover_hop_interval+0x5e6>
    669e:	f883 910d 	strb.w	r9, [r3, #269]	; 0x10d
    66a2:	b109      	cbz	r1, 66a8 <promisc_recover_hop_interval+0x5ec>
    66a4:	f8a3 410a 	strh.w	r4, [r3, #266]	; 0x10a
    66a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    66aa:	b109      	cbz	r1, 66b0 <promisc_recover_hop_interval+0x5f4>
    66ac:	f883 810c 	strb.w	r8, [r3, #268]	; 0x10c
    66b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    66b2:	b119      	cbz	r1, 66bc <promisc_recover_hop_interval+0x600>
    66b4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
    66b8:	f883 110e 	strb.w	r1, [r3, #270]	; 0x10e
    66bc:	b11f      	cbz	r7, 66c6 <promisc_recover_hop_interval+0x60a>
    66be:	f89d 1010 	ldrb.w	r1, [sp, #16]
    66c2:	f883 110f 	strb.w	r1, [r3, #271]	; 0x10f
    66c6:	f1be 0f00 	cmp.w	lr, #0
    66ca:	d001      	beq.n	66d0 <promisc_recover_hop_interval+0x614>
    66cc:	f883 a108 	strb.w	sl, [r3, #264]	; 0x108
    66d0:	b118      	cbz	r0, 66da <promisc_recover_hop_interval+0x61e>
    66d2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    66d6:	f883 5106 	strb.w	r5, [r3, #262]	; 0x106
        for( j = 0; j< index; j++){
    66da:	2200      	movs	r2, #0
    66dc:	4694      	mov	ip, r2
    66de:	4692      	mov	sl, r2
    66e0:	4616      	mov	r6, r2
    66e2:	4c2f      	ldr	r4, [pc, #188]	; (67a0 <promisc_recover_hop_interval+0x6e4>)
    66e4:	f893 010d 	ldrb.w	r0, [r3, #269]	; 0x10d
    66e8:	f8b4 5074 	ldrh.w	r5, [r4, #116]	; 0x74
    66ec:	f8b3 e152 	ldrh.w	lr, [r3, #338]	; 0x152
    66f0:	f8b3 1154 	ldrh.w	r1, [r3, #340]	; 0x154
    66f4:	f893 8156 	ldrb.w	r8, [r3, #342]	; 0x156
            val = ch_hop[j];
    66f8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 67a8 <promisc_recover_hop_interval+0x6ec>
        for( j = 0; j< index; j++){
    66fc:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    6700:	b2d7      	uxtb	r7, r2
    6702:	42b8      	cmp	r0, r7
    6704:	d820      	bhi.n	6748 <promisc_recover_hop_interval+0x68c>
    6706:	b11e      	cbz	r6, 6710 <promisc_recover_hop_interval+0x654>
    6708:	f8a3 1154 	strh.w	r1, [r3, #340]	; 0x154
    670c:	f883 8156 	strb.w	r8, [r3, #342]	; 0x156
    6710:	f1ba 0f00 	cmp.w	sl, #0
    6714:	d002      	beq.n	671c <promisc_recover_hop_interval+0x660>
    6716:	4a22      	ldr	r2, [pc, #136]	; (67a0 <promisc_recover_hop_interval+0x6e4>)
    6718:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
    671c:	f1bc 0f00 	cmp.w	ip, #0
    6720:	d001      	beq.n	6726 <promisc_recover_hop_interval+0x66a>
    6722:	f8a3 e152 	strh.w	lr, [r3, #338]	; 0x152
    6726:	b10e      	cbz	r6, 672c <promisc_recover_hop_interval+0x670>
    6728:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
        le.channel_increment = max_val;
    672c:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
        debug_printf("Increment: %d Interval: %d %d out of %d\n",le.channel_increment,le.conn_interval,max_count,index);
    6730:	9a05      	ldr	r2, [sp, #20]
    6732:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
        le.channel_increment = max_val;
    6736:	75a1      	strb	r1, [r4, #22]
        debug_printf("Increment: %d Interval: %d %d out of %d\n",le.channel_increment,le.conn_interval,max_count,index);
    6738:	9000      	str	r0, [sp, #0]
    673a:	481a      	ldr	r0, [pc, #104]	; (67a4 <promisc_recover_hop_interval+0x6e8>)
    673c:	f002 fce2 	bl	9104 <debug_printf>
        calc = 6;
    6740:	2306      	movs	r3, #6
    6742:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    6746:	e5a6      	b.n	6296 <promisc_recover_hop_interval+0x1da>
            for( i = j; i < index; i++){
    6748:	2600      	movs	r6, #0
            val = ch_hop[j];
    674a:	f83b 8012 	ldrh.w	r8, [fp, r2, lsl #1]
            for( i = j; i < index; i++){
    674e:	eb07 0906 	add.w	r9, r7, r6
    6752:	fa5f f989 	uxtb.w	r9, r9
    6756:	4581      	cmp	r9, r0
    6758:	d30e      	bcc.n	6778 <promisc_recover_hop_interval+0x6bc>
            if(curr_count > max_count){
    675a:	428d      	cmp	r5, r1
    675c:	bf26      	itte	cs
    675e:	46f0      	movcs	r8, lr
    6760:	4629      	movcs	r1, r5
    6762:	f04f 0c01 	movcc.w	ip, #1
            curr_count = 0;
    6766:	46c6      	mov	lr, r8
    6768:	460d      	mov	r5, r1
    676a:	bf38      	it	cc
    676c:	46e2      	movcc	sl, ip
    676e:	3201      	adds	r2, #1
    6770:	2601      	movs	r6, #1
    6772:	4680      	mov	r8, r0
    6774:	2100      	movs	r1, #0
    6776:	e7c3      	b.n	6700 <promisc_recover_hop_interval+0x644>
                if(val == ch_hop[i]){
    6778:	eb02 0906 	add.w	r9, r2, r6
    677c:	f83b 9019 	ldrh.w	r9, [fp, r9, lsl #1]
    6780:	3601      	adds	r6, #1
    6782:	45c1      	cmp	r9, r8
                    curr_count++;
    6784:	bf04      	itt	eq
    6786:	3101      	addeq	r1, #1
    6788:	b289      	uxtheq	r1, r1
    678a:	e7e0      	b.n	674e <promisc_recover_hop_interval+0x692>
    678c:	10000a4c 	.word	0x10000a4c
    6790:	3ff40000 	.word	0x3ff40000
    6794:	40428000 	.word	0x40428000
    6798:	3fe00000 	.word	0x3fe00000
    679c:	0000b118 	.word	0x0000b118
    67a0:	10000450 	.word	0x10000450
    67a4:	0000ba3e 	.word	0x0000ba3e
    67a8:	10000b5c 	.word	0x10000b5c
    else if(calc == 6){
    67ac:	2b06      	cmp	r3, #6
    67ae:	f47f ad72 	bne.w	6296 <promisc_recover_hop_interval+0x1da>
        if(count3  == sync_count){
    67b2:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
    67b6:	f896 310e 	ldrb.w	r3, [r6, #270]	; 0x10e
    67ba:	429a      	cmp	r2, r3
    67bc:	f47f ad6b 	bne.w	6296 <promisc_recover_hop_interval+0x1da>
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    67c0:	2025      	movs	r0, #37	; 0x25
            le.conn_count = 0;
    67c2:	2200      	movs	r2, #0
            le.interval_timer = le.conn_interval / 2;
    67c4:	8bfb      	ldrh	r3, [r7, #30]
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    67c6:	7db9      	ldrb	r1, [r7, #22]
            le.interval_timer = le.conn_interval / 2;
    67c8:	085b      	lsrs	r3, r3, #1
    67ca:	83bb      	strh	r3, [r7, #28]
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    67cc:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
            le.conn_count = 0;
    67d0:	843a      	strh	r2, [r7, #32]
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    67d2:	440b      	add	r3, r1
    67d4:	fb93 f1f0 	sdiv	r1, r3, r0
            le.conn_epoch = 0;
    67d8:	61ba      	str	r2, [r7, #24]
            le.crc_verify = 0;
    67da:	613a      	str	r2, [r7, #16]
            le_promisc_state(2, &le.conn_interval, 2);
    67dc:	2202      	movs	r2, #2
            le.link_state = LINK_CONNECTED;
    67de:	2403      	movs	r4, #3
            le.channel_idx = (idx3 + le.channel_increment) % 37;
    67e0:	fb00 3311 	mls	r3, r0, r1, r3
    67e4:	757b      	strb	r3, [r7, #21]
            packet_cb = connection_follow_cb;
    67e6:	4b0a      	ldr	r3, [pc, #40]	; (6810 <promisc_recover_hop_interval+0x754>)
            le_promisc_state(2, &le.conn_interval, 2);
    67e8:	4610      	mov	r0, r2
    67ea:	490a      	ldr	r1, [pc, #40]	; (6814 <promisc_recover_hop_interval+0x758>)
            packet_cb = connection_follow_cb;
    67ec:	61b3      	str	r3, [r6, #24]
            le.link_state = LINK_CONNECTED;
    67ee:	753c      	strb	r4, [r7, #20]
            hop_mode = HOP_BTLE;
    67f0:	72b4      	strb	r4, [r6, #10]
            le_promisc_state(2, &le.conn_interval, 2);
    67f2:	f7fe fe61 	bl	54b8 <le_promisc_state>
            le_promisc_state(3, &le.channel_increment, 1); 
    67f6:	4620      	mov	r0, r4
    67f8:	2201      	movs	r2, #1
    67fa:	4907      	ldr	r1, [pc, #28]	; (6818 <promisc_recover_hop_interval+0x75c>)
    67fc:	f7fe fe5c 	bl	54b8 <le_promisc_state>
	    le_promisc_state(4, &le.channel_idx, 1);    
    6800:	2201      	movs	r2, #1
    6802:	2004      	movs	r0, #4
    6804:	4905      	ldr	r1, [pc, #20]	; (681c <promisc_recover_hop_interval+0x760>)
}
    6806:	b019      	add	sp, #100	; 0x64
    6808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    le_promisc_state(4, &le.channel_idx, 1);    
    680c:	f7fe be54 	b.w	54b8 <le_promisc_state>
    6810:	0000543d 	.word	0x0000543d
    6814:	1000046e 	.word	0x1000046e
    6818:	10000466 	.word	0x10000466
    681c:	10000465 	.word	0x10000465

00006820 <promisc_follow_cb>:


//sopan
void promisc_follow_cb(u8 *packet) {
    6820:	b570      	push	{r4, r5, r6, lr}
    debug_printf("promisc_follow_cb\n");
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6822:	4d19      	ldr	r5, [pc, #100]	; (6888 <promisc_follow_cb+0x68>)
void promisc_follow_cb(u8 *packet) {
    6824:	4606      	mov	r6, r0
    debug_printf("promisc_follow_cb\n");
    6826:	4819      	ldr	r0, [pc, #100]	; (688c <promisc_follow_cb+0x6c>)
    6828:	f002 fc6c 	bl	9104 <debug_printf>
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    682c:	692c      	ldr	r4, [r5, #16]
    682e:	bb4c      	cbnz	r4, 6884 <promisc_follow_cb+0x64>
    6830:	7933      	ldrb	r3, [r6, #4]
    6832:	2b01      	cmp	r3, #1
    6834:	d126      	bne.n	6884 <promisc_follow_cb+0x64>
    6836:	7973      	ldrb	r3, [r6, #5]
    6838:	bb23      	cbnz	r3, 6884 <promisc_follow_cb+0x64>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    683a:	79f3      	ldrb	r3, [r6, #7]
    683c:	7a30      	ldrb	r0, [r6, #8]
    683e:	021b      	lsls	r3, r3, #8
    6840:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    6844:	79b0      	ldrb	r0, [r6, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6846:	2202      	movs	r2, #2
    6848:	1d31      	adds	r1, r6, #4
    684a:	4318      	orrs	r0, r3
    684c:	f000 fe36 	bl	74bc <btle_reverse_crc>
    6850:	4622      	mov	r2, r4
    6852:	60a8      	str	r0, [r5, #8]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6854:	fa20 f304 	lsr.w	r3, r0, r4
    6858:	f1c4 0117 	rsb	r1, r4, #23
    685c:	f003 0301 	and.w	r3, r3, #1
		for (i = 0; i < 24; ++i)
    6860:	3401      	adds	r4, #1
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6862:	408b      	lsls	r3, r1
		for (i = 0; i < 24; ++i)
    6864:	2c18      	cmp	r4, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6866:	ea42 0203 	orr.w	r2, r2, r3
		for (i = 0; i < 24; ++i)
    686a:	d1f3      	bne.n	6854 <promisc_follow_cb+0x34>

		le.crc_verify = 1;
    686c:	2001      	movs	r0, #1
    686e:	60ea      	str	r2, [r5, #12]
		packet_cb = promisc_recover_hop_interval;
    6870:	4b07      	ldr	r3, [pc, #28]	; (6890 <promisc_follow_cb+0x70>)
    6872:	4a08      	ldr	r2, [pc, #32]	; (6894 <promisc_follow_cb+0x74>)
		le.crc_verify = 1;
    6874:	6128      	str	r0, [r5, #16]
		packet_cb = promisc_recover_hop_interval;
    6876:	619a      	str	r2, [r3, #24]
		le_promisc_state(1, &le.crc_init, 3);
    6878:	4907      	ldr	r1, [pc, #28]	; (6898 <promisc_follow_cb+0x78>)
    687a:	2203      	movs	r2, #3
	}
}
    687c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		le_promisc_state(1, &le.crc_init, 3);
    6880:	f7fe be1a 	b.w	54b8 <le_promisc_state>
    6884:	bd70      	pop	{r4, r5, r6, pc}
    6886:	bf00      	nop
    6888:	10000450 	.word	0x10000450
    688c:	0000ba67 	.word	0x0000ba67
    6890:	10000a4c 	.word	0x10000a4c
    6894:	000060bd 	.word	0x000060bd
    6898:	10000458 	.word	0x10000458

0000689c <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    689c:	b530      	push	{r4, r5, lr}
    //debug_printf("see_aa\n");
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].aa == aa) {
    689e:	4913      	ldr	r1, [pc, #76]	; (68ec <see_aa+0x50>)
	for (i = 0; i < AA_LIST_SIZE; ++i)
    68a0:	2300      	movs	r3, #0
    68a2:	460a      	mov	r2, r1
		if (le_promisc.active_aa[i].aa == aa) {
    68a4:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    68a8:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
    68ac:	4285      	cmp	r5, r0
    68ae:	d103      	bne.n	68b8 <see_aa+0x1c>
			++le_promisc.active_aa[i].count;
    68b0:	6863      	ldr	r3, [r4, #4]
    68b2:	3301      	adds	r3, #1
    68b4:	6063      	str	r3, [r4, #4]
			return;
    68b6:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < AA_LIST_SIZE; ++i)
    68b8:	3301      	adds	r3, #1
    68ba:	2b20      	cmp	r3, #32
    68bc:	d1f2      	bne.n	68a4 <see_aa+0x8>
    68be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    68c2:	2300      	movs	r3, #0
    68c4:	460c      	mov	r4, r1
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    68c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    68ca:	686d      	ldr	r5, [r5, #4]
    68cc:	42a5      	cmp	r5, r4
    68ce:	db01      	blt.n	68d4 <see_aa+0x38>
    68d0:	2c00      	cmp	r4, #0
    68d2:	da01      	bge.n	68d8 <see_aa+0x3c>
    68d4:	4619      	mov	r1, r3
    68d6:	462c      	mov	r4, r5
	for (i = 0; i < AA_LIST_SIZE; ++i)
    68d8:	3301      	adds	r3, #1
    68da:	2b20      	cmp	r3, #32
    68dc:	d1f3      	bne.n	68c6 <see_aa+0x2a>
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
    68de:	2301      	movs	r3, #1
	le_promisc.active_aa[killme].aa = aa;
    68e0:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    68e4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    68e8:	6053      	str	r3, [r2, #4]
    68ea:	bd30      	pop	{r4, r5, pc}
    68ec:	10001498 	.word	0x10001498

000068f0 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    68f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68f4:	b094      	sub	sp, #80	; 0x50
    
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    68f6:	2240      	movs	r2, #64	; 0x40
int cb_le_promisc(char *unpacked) {
    68f8:	4607      	mov	r7, r0
	char desired[4][16] = {
    68fa:	2100      	movs	r1, #0
    68fc:	a804      	add	r0, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];
    68fe:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 6ab0 <cb_le_promisc+0x1c0>
	char desired[4][16] = {
    6902:	f7fd fc7d 	bl	4200 <memset>
    6906:	2301      	movs	r3, #1
    6908:	2400      	movs	r4, #0
    690a:	4646      	mov	r6, r8
		idx = whitening_index[btle_channel_index(channel)];
    690c:	4d63      	ldr	r5, [pc, #396]	; (6a9c <cb_le_promisc+0x1ac>)
	char desired[4][16] = {
    690e:	f88d 3010 	strb.w	r3, [sp, #16]
    6912:	f88d 3020 	strb.w	r3, [sp, #32]
    6916:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    691a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    691e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6922:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    6926:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    692a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		idx = whitening_index[btle_channel_index(channel)];
    692e:	f8b8 004c 	ldrh.w	r0, [r8, #76]	; 0x4c
    6932:	b280      	uxth	r0, r0
    6934:	f000 fd66 	bl	7404 <btle_channel_index>

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6938:	2200      	movs	r2, #0
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    693a:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    693e:	a904      	add	r1, sp, #16
		idx = whitening_index[btle_channel_index(channel)];
    6940:	5c2b      	ldrb	r3, [r5, r0]
    6942:	1908      	adds	r0, r1, r4
			desired[i][j] ^= whitening[idx];
    6944:	eb05 0c03 	add.w	ip, r5, r3
    6948:	5c81      	ldrb	r1, [r0, r2]
    694a:	f89c c028 	ldrb.w	ip, [ip, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    694e:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
    6950:	ea81 010c 	eor.w	r1, r1, ip
    6954:	5481      	strb	r1, [r0, r2]
			idx = (idx + 1) % sizeof(whitening);
    6956:	fbb3 f1fe 	udiv	r1, r3, lr
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    695a:	3201      	adds	r2, #1
			idx = (idx + 1) % sizeof(whitening);
    695c:	ebc1 11c1 	rsb	r1, r1, r1, lsl #7
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6960:	2a10      	cmp	r2, #16
			idx = (idx + 1) % sizeof(whitening);
    6962:	eba3 0301 	sub.w	r3, r3, r1
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6966:	d1ed      	bne.n	6944 <cb_le_promisc+0x54>
    6968:	3410      	adds	r4, #16
	for (i = 0; i < 4; ++i) {
    696a:	2c40      	cmp	r4, #64	; 0x40
    696c:	d1df      	bne.n	692e <cb_le_promisc+0x3e>
    696e:	2420      	movs	r4, #32
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
    6970:	f04f 087f 	mov.w	r8, #127	; 0x7f
		int ok[4] = { 1, 1, 1, 1 };
    6974:	4b4a      	ldr	r3, [pc, #296]	; (6aa0 <cb_le_promisc+0x1b0>)
    6976:	46ee      	mov	lr, sp
    6978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    697a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		for (j = 0; j < 4; ++j) {
    697e:	2300      	movs	r3, #0
					ok[j] = 0;
    6980:	469c      	mov	ip, r3
				if (unpacked[i+k] != desired[j][k]) {
    6982:	1938      	adds	r0, r7, r4
    6984:	aa04      	add	r2, sp, #16
    6986:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    698a:	2200      	movs	r2, #0
    698c:	e002      	b.n	6994 <cb_le_promisc+0xa4>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    698e:	3201      	adds	r2, #1
    6990:	2a10      	cmp	r2, #16
    6992:	d007      	beq.n	69a4 <cb_le_promisc+0xb4>
				if (unpacked[i+k] != desired[j][k]) {
    6994:	f810 a002 	ldrb.w	sl, [r0, r2]
    6998:	f811 9002 	ldrb.w	r9, [r1, r2]
    699c:	45ca      	cmp	sl, r9
    699e:	d0f6      	beq.n	698e <cb_le_promisc+0x9e>
					ok[j] = 0;
    69a0:	f84e c023 	str.w	ip, [lr, r3, lsl #2]
		for (j = 0; j < 4; ++j) {
    69a4:	3301      	adds	r3, #1
    69a6:	2b04      	cmp	r3, #4
    69a8:	d1ec      	bne.n	6984 <cb_le_promisc+0x94>
    69aa:	2300      	movs	r3, #0
			if (ok[j]) {
    69ac:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
    69b0:	2a00      	cmp	r2, #0
    69b2:	d169      	bne.n	6a88 <cb_le_promisc+0x198>
		for (j = 0; j < 4; ++j) {
    69b4:	3301      	adds	r3, #1
    69b6:	2b04      	cmp	r3, #4
    69b8:	d1f8      	bne.n	69ac <cb_le_promisc+0xbc>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    69ba:	3401      	adds	r4, #1
    69bc:	f5b4 7f3c 	cmp.w	r4, #752	; 0x2f0
    69c0:	d1d8      	bne.n	6974 <cb_le_promisc+0x84>
    69c2:	2400      	movs	r4, #0

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    69c4:	4d37      	ldr	r5, [pc, #220]	; (6aa4 <cb_le_promisc+0x1b4>)
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    69c6:	4f38      	ldr	r7, [pc, #224]	; (6aa8 <cb_le_promisc+0x1b8>)
    69c8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 6ab4 <cb_le_promisc+0x1c4>
		if (le_promisc.active_aa[i].count > 3) {
    69cc:	1963      	adds	r3, r4, r5
    69ce:	685b      	ldr	r3, [r3, #4]
    69d0:	2b03      	cmp	r3, #3
    69d2:	dd0e      	ble.n	69f2 <cb_le_promisc+0x102>
			le_set_access_address(le_promisc.active_aa[i].aa);
    69d4:	5960      	ldr	r0, [r4, r5]
    69d6:	f7fd fcd3 	bl	4380 <le_set_access_address>
            //debug_printf("calling promisc_follow_cb\n");
			packet_cb = promisc_follow_cb;
    69da:	4b34      	ldr	r3, [pc, #208]	; (6aac <cb_le_promisc+0x1bc>)
			le.crc_verify = 0;
    69dc:	2000      	movs	r0, #0
			packet_cb = promisc_follow_cb;
    69de:	61bb      	str	r3, [r7, #24]
            le.target_set = 1;
    69e0:	2301      	movs	r3, #1
			le_promisc_state(0, &le.access_address, 4);
    69e2:	2204      	movs	r2, #4
    69e4:	4932      	ldr	r1, [pc, #200]	; (6ab0 <cb_le_promisc+0x1c0>)
			data_cb = cb_follow_le;
    69e6:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
			le.crc_verify = 0;
    69ea:	6130      	str	r0, [r6, #16]
            le.target_set = 1;
    69ec:	6473      	str	r3, [r6, #68]	; 0x44
			le_promisc_state(0, &le.access_address, 4);
    69ee:	f7fe fd63 	bl	54b8 <le_promisc_state>
    69f2:	3408      	adds	r4, #8
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    69f4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    69f8:	d1e8      	bne.n	69cc <cb_le_promisc+0xdc>
			// quit using the old stuff and switch to sync mode
		}
	}
	return 1;
}
    69fa:	2001      	movs	r0, #1
    69fc:	b014      	add	sp, #80	; 0x50
    69fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				int bit = unpacked[offset];
    6a02:	eb00 030c 	add.w	r3, r0, ip
    6a06:	443b      	add	r3, r7
				if (j >= 4) { // unwhiten data bytes
    6a08:	2a03      	cmp	r2, #3
				int bit = unpacked[offset];
    6a0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
				if (j >= 4) { // unwhiten data bytes
    6a0e:	dd0c      	ble.n	6a2a <cb_le_promisc+0x13a>
					bit ^= whitening[idx];
    6a10:	eb05 0a01 	add.w	sl, r5, r1
    6a14:	f89a a028 	ldrb.w	sl, [sl, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    6a18:	3101      	adds	r1, #1
					bit ^= whitening[idx];
    6a1a:	ea83 030a 	eor.w	r3, r3, sl
					idx = (idx + 1) % sizeof(whitening);
    6a1e:	fbb1 faf8 	udiv	sl, r1, r8
    6a22:	ebca 1aca 	rsb	sl, sl, sl, lsl #7
    6a26:	eba1 010a 	sub.w	r1, r1, sl
				byte |= bit << k;
    6a2a:	4083      	lsls	r3, r0
			for (k = 0; k < 8; k++) {
    6a2c:	3001      	adds	r0, #1
				byte |= bit << k;
    6a2e:	ea43 030e 	orr.w	r3, r3, lr
			for (k = 0; k < 8; k++) {
    6a32:	2808      	cmp	r0, #8
				byte |= bit << k;
    6a34:	fa5f fe83 	uxtb.w	lr, r3
			for (k = 0; k < 8; k++) {
    6a38:	d1e3      	bne.n	6a02 <cb_le_promisc+0x112>
			idle_rxbuf[j] = byte;
    6a3a:	f8d9 3000 	ldr.w	r3, [r9]
    6a3e:	f803 e002 	strb.w	lr, [r3, r2]
		for (j = 0; j < 4+3+3; ++j) {
    6a42:	3201      	adds	r2, #1
    6a44:	2a0a      	cmp	r2, #10
    6a46:	d005      	beq.n	6a54 <cb_le_promisc+0x164>
    6a48:	f04f 0e00 	mov.w	lr, #0
    6a4c:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
    6a50:	4670      	mov	r0, lr
    6a52:	e7d6      	b.n	6a02 <cb_le_promisc+0x112>
		u32 aa = (idle_rxbuf[3] << 24) |
    6a54:	f8d9 3000 	ldr.w	r3, [r9]
    6a58:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6a5a:	f8d9 3000 	ldr.w	r3, [r9]
    6a5e:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    6a60:	f8d9 2000 	ldr.w	r2, [r9]
				 (idle_rxbuf[2] << 16) |
    6a64:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6a66:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    6a68:	f8d9 2000 	ldr.w	r2, [r9]
		u32 aa = (idle_rxbuf[3] << 24) |
    6a6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[0]);
    6a70:	7812      	ldrb	r2, [r2, #0]
				 (idle_rxbuf[1] <<  8) |
    6a72:	4313      	orrs	r3, r2
		see_aa(aa);
    6a74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6a78:	f7ff ff10 	bl	689c <see_aa>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6a7c:	f8d9 1000 	ldr.w	r1, [r9]
    6a80:	2001      	movs	r0, #1
    6a82:	f7fd fd37 	bl	44f4 <enqueue>
    6a86:	e798      	b.n	69ba <cb_le_promisc+0xca>
		idx = whitening_index[btle_channel_index(channel)];
    6a88:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
			idle_rxbuf[j] = byte;
    6a8c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 6ab8 <cb_le_promisc+0x1c8>
		idx = whitening_index[btle_channel_index(channel)];
    6a90:	b280      	uxth	r0, r0
    6a92:	f000 fcb7 	bl	7404 <btle_channel_index>
		for (j = 0; j < 4+3+3; ++j) {
    6a96:	2200      	movs	r2, #0
		idx = whitening_index[btle_channel_index(channel)];
    6a98:	5c29      	ldrb	r1, [r5, r0]
    6a9a:	e7d5      	b.n	6a48 <cb_le_promisc+0x158>
    6a9c:	0000b118 	.word	0x0000b118
    6aa0:	0000b9bc 	.word	0x0000b9bc
    6aa4:	10001498 	.word	0x10001498
    6aa8:	10000a4c 	.word	0x10000a4c
    6aac:	00006821 	.word	0x00006821
    6ab0:	10000450 	.word	0x10000450
    6ab4:	00004639 	.word	0x00004639
    6ab8:	10001670 	.word	0x10001670

00006abc <bt_promisc_le>:

void bt_promisc_le() {
    6abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //static inc = 0;
    //u8 channel_37[37] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,242,5,26,27,28,29,30,31,32,33,34,35,36};

	while (requested_mode == MODE_BT_PROMISC_LE) {
    6abe:	4e1b      	ldr	r6, [pc, #108]	; (6b2c <bt_promisc_le+0x70>)
        //if(check_channel == 0 && channel_37[inc] != idx2 && channel_37[inc] != idx3){
		    reset_le_promisc();
            //idx1 = channel_37[inc];
		    // jump to a random data channel and turn up the squelch
		    if ((channel & 1) == 1){
    6ac0:	4c1b      	ldr	r4, [pc, #108]	; (6b30 <bt_promisc_le+0x74>)
    6ac2:	4637      	mov	r7, r6
	while (requested_mode == MODE_BT_PROMISC_LE) {
    6ac4:	7cb3      	ldrb	r3, [r6, #18]
    6ac6:	2b0a      	cmp	r3, #10
    6ac8:	d000      	beq.n	6acc <bt_promisc_le+0x10>
    6aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    reset_le_promisc();
    6acc:	f7fe fc78 	bl	53c0 <reset_le_promisc>
		    if ((channel & 1) == 1){
    6ad0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    6ad4:	07db      	lsls	r3, r3, #31
    6ad6:	d50b      	bpl.n	6af0 <bt_promisc_le+0x34>
			    channel = btle_channel_index_to_phys(idx1);// sopan
    6ad8:	f896 0107 	ldrb.w	r0, [r6, #263]	; 0x107
    6adc:	f000 fcaa 	bl	7434 <btle_channel_index_to_phys>
    6ae0:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
                debug_printf("Channel: %d\n", channel);
    6ae4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    6ae8:	4812      	ldr	r0, [pc, #72]	; (6b34 <bt_promisc_le+0x78>)
    6aea:	b289      	uxth	r1, r1
    6aec:	f002 fb0a 	bl	9104 <debug_printf>
            }
        //}
		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6af0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6af2:	b94b      	cbnz	r3, 6b08 <bt_promisc_le+0x4c>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6af4:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    6af8:	b280      	uxth	r0, r0
    6afa:	f000 fee1 	bl	78c0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6afe:	4b0e      	ldr	r3, [pc, #56]	; (6b38 <bt_promisc_le+0x7c>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6b00:	200a      	movs	r0, #10
			data_cb = cb_le_promisc;
    6b02:	633b      	str	r3, [r7, #48]	; 0x30
			bt_generic_le(MODE_BT_PROMISC_LE);
    6b04:	f7fe fff2 	bl	5aec <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    6b08:	7cbd      	ldrb	r5, [r7, #18]
    6b0a:	b2ed      	uxtb	r5, r5
    6b0c:	2d0a      	cmp	r5, #10
    6b0e:	d1dc      	bne.n	6aca <bt_promisc_le+0xe>
			break;

		le_promisc_state(0, &le.access_address, 4);
    6b10:	2204      	movs	r2, #4
    6b12:	4621      	mov	r1, r4
    6b14:	2000      	movs	r0, #0
    6b16:	f7fe fccf 	bl	54b8 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    6b1a:	4b08      	ldr	r3, [pc, #32]	; (6b3c <bt_promisc_le+0x80>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6b1c:	4628      	mov	r0, r5
		packet_cb = promisc_follow_cb;
    6b1e:	61bb      	str	r3, [r7, #24]
		le.crc_verify = 0;
    6b20:	2300      	movs	r3, #0
    6b22:	6123      	str	r3, [r4, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6b24:	f7ff f8e0 	bl	5ce8 <bt_le_sync>
    6b28:	e7cc      	b.n	6ac4 <bt_promisc_le+0x8>
    6b2a:	bf00      	nop
    6b2c:	10000a4c 	.word	0x10000a4c
    6b30:	10000450 	.word	0x10000450
    6b34:	0000ba7a 	.word	0x0000ba7a
    6b38:	000068f1 	.word	0x000068f1
    6b3c:	00006821 	.word	0x00006821

00006b40 <bt_slave_le>:
        }
        inc++;*/
	}
}

void bt_slave_le() {
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	b088      	sub	sp, #32
	u32 calc_crc;
	int i;
	uint8_t adv_ind[32] = { 0x00, };
	uint8_t adv_ind_len;

	if (le_adv_len > LE_ADV_MAX_LEN) {
    6b44:	4e29      	ldr	r6, [pc, #164]	; (6bec <bt_slave_le+0xac>)
	uint8_t adv_ind[32] = { 0x00, };
    6b46:	2220      	movs	r2, #32
    6b48:	2100      	movs	r1, #0
    6b4a:	4668      	mov	r0, sp
    6b4c:	f7fd fb58 	bl	4200 <memset>
	if (le_adv_len > LE_ADV_MAX_LEN) {
    6b50:	6db2      	ldr	r2, [r6, #88]	; 0x58
    6b52:	2a15      	cmp	r2, #21
    6b54:	d904      	bls.n	6b60 <bt_slave_le+0x20>
		requested_mode = MODE_IDLE;
    6b56:	2200      	movs	r2, #0
    6b58:	4b25      	ldr	r3, [pc, #148]	; (6bf0 <bt_slave_le+0xb0>)
    6b5a:	749a      	strb	r2, [r3, #18]
		msleep(100);
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
}
    6b5c:	b008      	add	sp, #32
    6b5e:	bd70      	pop	{r4, r5, r6, pc}
	adv_ind_len = 6 + le_adv_len;
    6b60:	b2d5      	uxtb	r5, r2
    6b62:	1dab      	adds	r3, r5, #6
	adv_ind[1] = adv_ind_len;
    6b64:	a908      	add	r1, sp, #32
    6b66:	f801 3d1f 	strb.w	r3, [r1, #-31]!
    6b6a:	2305      	movs	r3, #5
		adv_ind[i+2] = slave_mac_address[5-i];
    6b6c:	4c21      	ldr	r4, [pc, #132]	; (6bf4 <bt_slave_le+0xb4>)
    6b6e:	5d18      	ldrb	r0, [r3, r4]
	for (i = 0; i < 6; ++i)
    6b70:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
		adv_ind[i+2] = slave_mac_address[5-i];
    6b74:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (i = 0; i < 6; ++i)
    6b78:	d2f9      	bcs.n	6b6e <bt_slave_le+0x2e>
	memcpy(adv_ind + 2 + 6, le_adv_data, le_adv_len);
    6b7a:	491f      	ldr	r1, [pc, #124]	; (6bf8 <bt_slave_le+0xb8>)
    6b7c:	a802      	add	r0, sp, #8
    6b7e:	f004 fa23 	bl	afc8 <memcpy>
	adv_ind_len += 2;
    6b82:	f105 0208 	add.w	r2, r5, #8
	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    6b86:	b2d4      	uxtb	r4, r2
    6b88:	4622      	mov	r2, r4
    6b8a:	4669      	mov	r1, sp
    6b8c:	68f0      	ldr	r0, [r6, #12]
    6b8e:	f000 fc79 	bl	7484 <btle_calc_crc>
	adv_ind[adv_ind_len + 0] = (calc_crc >>  0) & 0xff;
    6b92:	ab08      	add	r3, sp, #32
    6b94:	191a      	adds	r2, r3, r4
    6b96:	f802 0c20 	strb.w	r0, [r2, #-32]
	adv_ind[adv_ind_len + 1] = (calc_crc >>  8) & 0xff;
    6b9a:	0a03      	lsrs	r3, r0, #8
	adv_ind[adv_ind_len + 2] = (calc_crc >> 16) & 0xff;
    6b9c:	0c00      	lsrs	r0, r0, #16
	adv_ind[adv_ind_len + 1] = (calc_crc >>  8) & 0xff;
    6b9e:	f802 3c1f 	strb.w	r3, [r2, #-31]
	adv_ind[adv_ind_len + 2] = (calc_crc >> 16) & 0xff;
    6ba2:	f802 0c1e 	strb.w	r0, [r2, #-30]
	clkn_start();
    6ba6:	f000 ff23 	bl	79f0 <clkn_start>
	ISER0 = ISER0_ISE_USB;
    6baa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6bae:	4b13      	ldr	r3, [pc, #76]	; (6bfc <bt_slave_le+0xbc>)
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6bb0:	4e13      	ldr	r6, [pc, #76]	; (6c00 <bt_slave_le+0xc0>)
	uint32_t now = (clkn & 0xffffff);
    6bb2:	4c14      	ldr	r4, [pc, #80]	; (6c04 <bt_slave_le+0xc4>)
	ISER0 = ISER0_ISE_USB;
    6bb4:	601a      	str	r2, [r3, #0]
	while (requested_mode == MODE_BT_SLAVE_LE) {
    6bb6:	4b0e      	ldr	r3, [pc, #56]	; (6bf0 <bt_slave_le+0xb0>)
    6bb8:	7c9b      	ldrb	r3, [r3, #18]
    6bba:	2b0c      	cmp	r3, #12
    6bbc:	d004      	beq.n	6bc8 <bt_slave_le+0x88>
	ICER0 = ICER0_ICE_USB;
    6bbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6bc2:	4b11      	ldr	r3, [pc, #68]	; (6c08 <bt_slave_le+0xc8>)
    6bc4:	601a      	str	r2, [r3, #0]
    6bc6:	e7c9      	b.n	6b5c <bt_slave_le+0x1c>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6bc8:	f105 010b 	add.w	r1, r5, #11
    6bcc:	466a      	mov	r2, sp
    6bce:	b2c9      	uxtb	r1, r1
    6bd0:	4630      	mov	r0, r6
    6bd2:	f7fe fadd 	bl	5190 <le_transmit>
	uint32_t now = (clkn & 0xffffff);
    6bd6:	6823      	ldr	r3, [r4, #0]
    6bd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    6bdc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		while ((clkn & 0xffffff) < stop_at);
    6be0:	6822      	ldr	r2, [r4, #0]
    6be2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6be6:	4293      	cmp	r3, r2
    6be8:	d8fa      	bhi.n	6be0 <bt_slave_le+0xa0>
    6bea:	e7e4      	b.n	6bb6 <bt_slave_le+0x76>
    6bec:	10000450 	.word	0x10000450
    6bf0:	10000a4c 	.word	0x10000a4c
    6bf4:	10000a68 	.word	0x10000a68
    6bf8:	100004ac 	.word	0x100004ac
    6bfc:	e000e100 	.word	0xe000e100
    6c00:	8e89bed6 	.word	0x8e89bed6
    6c04:	10001454 	.word	0x10001454
    6c08:	e000e180 	.word	0xe000e180

00006c0c <bt_transmit_le>:

// Sopan Sarkar
void bt_transmit_le(){
    6c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pdu_data[2] = {0x50,0x00};
    6c0e:	2350      	movs	r3, #80	; 0x50
    6c10:	f88d 3004 	strb.w	r3, [sp, #4]
    6c14:	2300      	movs	r3, #0
    6c16:	f88d 3005 	strb.w	r3, [sp, #5]
	uint8_t pdu_data_len = 2;

	clkn_start();
    6c1a:	f000 fee9 	bl	79f0 <clkn_start>

	// enable USB interrupts due to busy waits
	ISER0 = ISER0_ISE_USB;
    6c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6c22:	4b0b      	ldr	r3, [pc, #44]	; (6c50 <bt_transmit_le+0x44>)

	// spam data packets
	while (requested_mode == MODE_BT_TRANSMIT_LE && do_transmit == 1) {
    6c24:	4c0b      	ldr	r4, [pc, #44]	; (6c54 <bt_transmit_le+0x48>)
		le_transmit(le.access_address, pdu_data_len, pdu_data);
    6c26:	4d0c      	ldr	r5, [pc, #48]	; (6c58 <bt_transmit_le+0x4c>)
	ISER0 = ISER0_ISE_USB;
    6c28:	601a      	str	r2, [r3, #0]
	while (requested_mode == MODE_BT_TRANSMIT_LE && do_transmit == 1) {
    6c2a:	7ca3      	ldrb	r3, [r4, #18]
    6c2c:	2b11      	cmp	r3, #17
    6c2e:	d103      	bne.n	6c38 <bt_transmit_le+0x2c>
    6c30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    6c34:	2b01      	cmp	r3, #1
    6c36:	d005      	beq.n	6c44 <bt_transmit_le+0x38>
	}
	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6c3c:	4b07      	ldr	r3, [pc, #28]	; (6c5c <bt_transmit_le+0x50>)
    6c3e:	601a      	str	r2, [r3, #0]
}
    6c40:	b003      	add	sp, #12
    6c42:	bd30      	pop	{r4, r5, pc}
		le_transmit(le.access_address, pdu_data_len, pdu_data);
    6c44:	aa01      	add	r2, sp, #4
    6c46:	2102      	movs	r1, #2
    6c48:	6828      	ldr	r0, [r5, #0]
    6c4a:	f7fe faa1 	bl	5190 <le_transmit>
    6c4e:	e7ec      	b.n	6c2a <bt_transmit_le+0x1e>
    6c50:	e000e100 	.word	0xe000e100
    6c54:	10000a4c 	.word	0x10000a4c
    6c58:	10000450 	.word	0x10000450
    6c5c:	e000e180 	.word	0xe000e180

00006c60 <rx_generic_sync>:
///////////////////////////////

void rx_generic_sync(void) {
    6c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c62:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6c64:	202d      	movs	r0, #45	; 0x2d
    6c66:	f002 fe91 	bl	998c <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6c6a:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6c6c:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6c70:	202c      	movs	r0, #44	; 0x2c
	buf[0] = (reg_val >> 8) & 0xFF;
    6c72:	f88d 3004 	strb.w	r3, [sp, #4]
	reg_val = cc2400_get(SYNCL);
    6c76:	f002 fe89 	bl	998c <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6c7a:	0a03      	lsrs	r3, r0, #8
    6c7c:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6c80:	f88d 0007 	strb.w	r0, [sp, #7]

	usb_queue_init();
    6c84:	f000 fd2e 	bl	76e4 <usb_queue_init>
	clkn_start();
    6c88:	f000 feb2 	bl	79f0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6c8c:	f002 ff22 	bl	9ad4 <cc2400_status>
    6c90:	0641      	lsls	r1, r0, #25
    6c92:	d5fb      	bpl.n	6c8c <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6c94:	2061      	movs	r0, #97	; 0x61
    6c96:	f002 ff24 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6c9a:	f002 ff1b 	bl	9ad4 <cc2400_status>
    6c9e:	0742      	lsls	r2, r0, #29
    6ca0:	d5fb      	bpl.n	6c9a <rx_generic_sync+0x3a>
	RXLED_SET;
    6ca2:	2210      	movs	r2, #16
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6ca4:	2180      	movs	r1, #128	; 0x80
	RXLED_SET;
    6ca6:	4c13      	ldr	r4, [pc, #76]	; (6cf4 <rx_generic_sync+0x94>)
		HGM_SET;
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		USRLED_CLR;
    6ca8:	2502      	movs	r5, #2
	RXLED_SET;
    6caa:	6022      	str	r2, [r4, #0]
		PAEN_SET;
    6cac:	4a12      	ldr	r2, [pc, #72]	; (6cf8 <rx_generic_sync+0x98>)
		USRLED_CLR;
    6cae:	4f13      	ldr	r7, [pc, #76]	; (6cfc <rx_generic_sync+0x9c>)
		PAEN_SET;
    6cb0:	6011      	str	r1, [r2, #0]
		HGM_SET;
    6cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;

		cc2400_fifo_read(len, buf+4);
		enqueue(BR_PACKET, buf);
		handle_usb(clkn);
    6cb6:	4e12      	ldr	r6, [pc, #72]	; (6d00 <rx_generic_sync+0xa0>)
		HGM_SET;
    6cb8:	6011      	str	r1, [r2, #0]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6cba:	200e      	movs	r0, #14
    6cbc:	f002 fe66 	bl	998c <cc2400_get>
    6cc0:	f000 001f 	and.w	r0, r0, #31
    6cc4:	280f      	cmp	r0, #15
    6cc6:	d1f8      	bne.n	6cba <rx_generic_sync+0x5a>
		cc2400_strobe(SRX);
    6cc8:	2062      	movs	r0, #98	; 0x62
    6cca:	f002 ff0a 	bl	9ae2 <cc2400_strobe>
		USRLED_CLR;
    6cce:	603d      	str	r5, [r7, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6cd0:	f002 ff00 	bl	9ad4 <cc2400_status>
    6cd4:	06c3      	lsls	r3, r0, #27
    6cd6:	d5fb      	bpl.n	6cd0 <rx_generic_sync+0x70>
		cc2400_fifo_read(len, buf+4);
    6cd8:	a902      	add	r1, sp, #8
		USRLED_SET;
    6cda:	6025      	str	r5, [r4, #0]
		cc2400_fifo_read(len, buf+4);
    6cdc:	2020      	movs	r0, #32
    6cde:	f002 feb5 	bl	9a4c <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6ce2:	a901      	add	r1, sp, #4
    6ce4:	2000      	movs	r0, #0
    6ce6:	f7fd fc05 	bl	44f4 <enqueue>
		handle_usb(clkn);
    6cea:	6830      	ldr	r0, [r6, #0]
    6cec:	f000 fd5c 	bl	77a8 <handle_usb>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6cf0:	e7e3      	b.n	6cba <rx_generic_sync+0x5a>
    6cf2:	bf00      	nop
    6cf4:	2009c038 	.word	0x2009c038
    6cf8:	2009c058 	.word	0x2009c058
    6cfc:	2009c03c 	.word	0x2009c03c
    6d00:	10001454 	.word	0x10001454

00006d04 <rx_generic>:
	}
}

void rx_generic(void) {
    6d04:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6d06:	2020      	movs	r0, #32
    6d08:	f002 fe40 	bl	998c <cc2400_get>
    6d0c:	b108      	cbz	r0, 6d12 <rx_generic+0xe>
		rx_generic_sync();
    6d0e:	f7ff ffa7 	bl	6c60 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6d12:	2203      	movs	r2, #3
    6d14:	4b02      	ldr	r3, [pc, #8]	; (6d20 <rx_generic+0x1c>)
    6d16:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_stream_rx();
    6d1c:	f7fe bcee 	b.w	56fc <bt_stream_rx>
    6d20:	10000a4c 	.word	0x10000a4c

00006d24 <tx_generic>:

void tx_generic(void) {
    6d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;

	mode = MODE_TX_GENERIC;
    6d28:	2310      	movs	r3, #16
	u8 prev_mode = mode;
    6d2a:	4d35      	ldr	r5, [pc, #212]	; (6e00 <tx_generic+0xdc>)

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6d2c:	202d      	movs	r0, #45	; 0x2d
	u8 prev_mode = mode;
    6d2e:	7c6e      	ldrb	r6, [r5, #17]
	mode = MODE_TX_GENERIC;
    6d30:	746b      	strb	r3, [r5, #17]
	synch = cc2400_get(SYNCH);
    6d32:	f002 fe2b 	bl	998c <cc2400_get>
    6d36:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6d38:	202c      	movs	r0, #44	; 0x2c
    6d3a:	f002 fe27 	bl	998c <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    6d3e:	4c31      	ldr	r4, [pc, #196]	; (6e04 <tx_generic+0xe0>)
	syncl = cc2400_get(SYNCL);
    6d40:	4607      	mov	r7, r0
	cc2400_set(SYNCH, tx_pkt.synch);
    6d42:	8821      	ldrh	r1, [r4, #0]
    6d44:	202d      	movs	r0, #45	; 0x2d
    6d46:	f002 fe2a 	bl	999e <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6d4a:	8861      	ldrh	r1, [r4, #2]
    6d4c:	202c      	movs	r0, #44	; 0x2c
    6d4e:	f002 fe26 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6d52:	2157      	movs	r1, #87	; 0x57
    6d54:	2003      	movs	r0, #3
    6d56:	f002 fe22 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6d5a:	f241 314b 	movw	r1, #4939	; 0x134b
    6d5e:	2014      	movs	r0, #20
    6d60:	f002 fe1d 	bl	999e <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6d64:	f640 7161 	movw	r1, #3937	; 0xf61
    6d68:	2020      	movs	r0, #32
    6d6a:	f002 fe18 	bl	999e <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6d6e:	88a1      	ldrh	r1, [r4, #4]
    6d70:	2002      	movs	r0, #2
    6d72:	f002 fe14 	bl	999e <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6d76:	79e1      	ldrb	r1, [r4, #7]
    6d78:	2005      	movs	r0, #5
	u8 prev_mode = mode;
    6d7a:	b2f6      	uxtb	r6, r6
	cc2400_set(FREND, tx_pkt.pa_level);
    6d7c:	f002 fe0f 	bl	999e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6d80:	f002 fea8 	bl	9ad4 <cc2400_status>
    6d84:	0641      	lsls	r1, r0, #25
    6d86:	d5fb      	bpl.n	6d80 <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6d88:	2061      	movs	r0, #97	; 0x61
    6d8a:	f002 feaa 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6d8e:	f002 fea1 	bl	9ad4 <cc2400_status>
    6d92:	0742      	lsls	r2, r0, #29
    6d94:	d5fb      	bpl.n	6d8e <tx_generic+0x6a>
	TXLED_SET;
    6d96:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d9a:	4b1b      	ldr	r3, [pc, #108]	; (6e08 <tx_generic+0xe4>)
    6d9c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6d9e:	2280      	movs	r2, #128	; 0x80
    6da0:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6da2:	200e      	movs	r0, #14
    6da4:	f002 fdf2 	bl	998c <cc2400_get>
    6da8:	f000 001f 	and.w	r0, r0, #31
    6dac:	280f      	cmp	r0, #15
    6dae:	d1f8      	bne.n	6da2 <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6db0:	79a0      	ldrb	r0, [r4, #6]
    6db2:	4916      	ldr	r1, [pc, #88]	; (6e0c <tx_generic+0xe8>)
    6db4:	f002 fe06 	bl	99c4 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6db8:	2063      	movs	r0, #99	; 0x63
    6dba:	f002 fe92 	bl	9ae2 <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6dbe:	200e      	movs	r0, #14
    6dc0:	f002 fde4 	bl	998c <cc2400_get>
    6dc4:	f000 001f 	and.w	r0, r0, #31
    6dc8:	280f      	cmp	r0, #15
    6dca:	d1f8      	bne.n	6dbe <tx_generic+0x9a>
	TXLED_CLR;
    6dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
    6dd0:	4b0f      	ldr	r3, [pc, #60]	; (6e10 <tx_generic+0xec>)

	cc2400_strobe(SRFOFF);
    6dd2:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    6dd4:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    6dd6:	f002 fe84 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6dda:	f002 fe7b 	bl	9ad4 <cc2400_status>
    6dde:	0743      	lsls	r3, r0, #29
    6de0:	d4fb      	bmi.n	6dda <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6de2:	2280      	movs	r2, #128	; 0x80
    6de4:	4b0b      	ldr	r3, [pc, #44]	; (6e14 <tx_generic+0xf0>)
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6de6:	4641      	mov	r1, r8
	PAEN_CLR;
    6de8:	601a      	str	r2, [r3, #0]
	cc2400_set(SYNCH, synch);
    6dea:	202d      	movs	r0, #45	; 0x2d
    6dec:	f002 fdd7 	bl	999e <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6df0:	4639      	mov	r1, r7
    6df2:	202c      	movs	r0, #44	; 0x2c
    6df4:	f002 fdd3 	bl	999e <cc2400_set>
	requested_mode = prev_mode;
    6df8:	74ae      	strb	r6, [r5, #18]
    6dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dfe:	bf00      	nop
    6e00:	10000a4c 	.word	0x10000a4c
    6e04:	10001458 	.word	0x10001458
    6e08:	2009c038 	.word	0x2009c038
    6e0c:	10001460 	.word	0x10001460
    6e10:	2009c03c 	.word	0x2009c03c
    6e14:	2009c05c 	.word	0x2009c05c

00006e18 <specan>:
}

/* spectrum analysis */
void specan()
{
    6e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e1c:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    6e1e:	2210      	movs	r2, #16
    6e20:	4b3c      	ldr	r3, [pc, #240]	; (6f14 <specan+0xfc>)
    6e22:	601a      	str	r2, [r3, #0]

	usb_queue_init();
    6e24:	f000 fc5e 	bl	76e4 <usb_queue_init>
	clkn_start();
    6e28:	f000 fde2 	bl	79f0 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6e2c:	2280      	movs	r2, #128	; 0x80
    6e2e:	4b3a      	ldr	r3, [pc, #232]	; (6f18 <specan+0x100>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6e30:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6e34:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6e36:	2012      	movs	r0, #18
    6e38:	f002 fdb1 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6e3c:	f241 314b 	movw	r1, #4939	; 0x134b
    6e40:	2014      	movs	r0, #20
    6e42:	f002 fdac 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6e46:	f240 1101 	movw	r1, #257	; 0x101
    6e4a:	2020      	movs	r0, #32
    6e4c:	f002 fda7 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6e50:	2129      	movs	r1, #41	; 0x29
    6e52:	2003      	movs	r0, #3
    6e54:	f002 fda3 	bl	999e <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6e58:	f002 fe3c 	bl	9ad4 <cc2400_status>
    6e5c:	0641      	lsls	r1, r0, #25
    6e5e:	d5fb      	bpl.n	6e58 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6e60:	f002 fe38 	bl	9ad4 <cc2400_status>
    6e64:	f010 0404 	ands.w	r4, r0, #4
    6e68:	d1fa      	bne.n	6e60 <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6e6a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6f20 <specan+0x108>
		for (f = low_freq; f < high_freq + 1; f++) {
    6e6e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6f24 <specan+0x10c>
	while (requested_mode == MODE_SPECAN) {
    6e72:	f899 3012 	ldrb.w	r3, [r9, #18]
    6e76:	2b04      	cmp	r3, #4
    6e78:	d005      	beq.n	6e86 <specan+0x6e>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6e7a:	2210      	movs	r2, #16
    6e7c:	4b27      	ldr	r3, [pc, #156]	; (6f1c <specan+0x104>)
    6e7e:	601a      	str	r2, [r3, #0]
}
    6e80:	b00e      	add	sp, #56	; 0x38
    6e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (f = low_freq; f < high_freq + 1; f++) {
    6e86:	f8b8 5052 	ldrh.w	r5, [r8, #82]	; 0x52
				handle_usb(clkn);
    6e8a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 6f28 <specan+0x110>
		for (f = low_freq; f < high_freq + 1; f++) {
    6e8e:	b2ad      	uxth	r5, r5
    6e90:	f8b8 3054 	ldrh.w	r3, [r8, #84]	; 0x54
    6e94:	b29b      	uxth	r3, r3
    6e96:	42ab      	cmp	r3, r5
    6e98:	dbeb      	blt.n	6e72 <specan+0x5a>
			cc2400_set(FSDIV, f - 1);
    6e9a:	1e69      	subs	r1, r5, #1
    6e9c:	2002      	movs	r0, #2
    6e9e:	b289      	uxth	r1, r1
    6ea0:	f002 fd7d 	bl	999e <cc2400_set>
			cc2400_strobe(SFSON);
    6ea4:	2061      	movs	r0, #97	; 0x61
    6ea6:	f002 fe1c 	bl	9ae2 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6eaa:	f002 fe13 	bl	9ad4 <cc2400_status>
    6eae:	0742      	lsls	r2, r0, #29
    6eb0:	d5fb      	bpl.n	6eaa <specan+0x92>
			cc2400_strobe(SRX);
    6eb2:	2062      	movs	r0, #98	; 0x62
    6eb4:	f002 fe15 	bl	9ae2 <cc2400_strobe>
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6eb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6ebc:	9300      	str	r3, [sp, #0]
    6ebe:	9e00      	ldr	r6, [sp, #0]
    6ec0:	3e01      	subs	r6, #1
    6ec2:	9600      	str	r6, [sp, #0]
    6ec4:	2e00      	cmp	r6, #0
    6ec6:	d1fa      	bne.n	6ebe <specan+0xa6>
			buf[3 * i] = (f >> 8) & 0xFF;
    6ec8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    6ecc:	ab0e      	add	r3, sp, #56	; 0x38
    6ece:	441f      	add	r7, r3
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6ed0:	2006      	movs	r0, #6
			buf[3 * i] = (f >> 8) & 0xFF;
    6ed2:	0a2b      	lsrs	r3, r5, #8
    6ed4:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6ed8:	f807 5c33 	strb.w	r5, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6edc:	f002 fd56 	bl	998c <cc2400_get>
			i++;
    6ee0:	3401      	adds	r4, #1
    6ee2:	b2e4      	uxtb	r4, r4
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6ee4:	0a00      	lsrs	r0, r0, #8
			if (i == 16) {
    6ee6:	2c10      	cmp	r4, #16
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6ee8:	f807 0c32 	strb.w	r0, [r7, #-50]
			if (i == 16) {
    6eec:	d108      	bne.n	6f00 <specan+0xe8>
				enqueue(SPECAN, buf);
    6eee:	a901      	add	r1, sp, #4
    6ef0:	2004      	movs	r0, #4
    6ef2:	f7fd faff 	bl	44f4 <enqueue>
				handle_usb(clkn);
    6ef6:	f8da 0000 	ldr.w	r0, [sl]
    6efa:	f000 fc55 	bl	77a8 <handle_usb>
				i = 0;
    6efe:	4634      	mov	r4, r6
			cc2400_strobe(SRFOFF);
    6f00:	2064      	movs	r0, #100	; 0x64
    6f02:	f002 fdee 	bl	9ae2 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6f06:	f002 fde5 	bl	9ad4 <cc2400_status>
    6f0a:	0743      	lsls	r3, r0, #29
    6f0c:	d4fb      	bmi.n	6f06 <specan+0xee>
		for (f = low_freq; f < high_freq + 1; f++) {
    6f0e:	3501      	adds	r5, #1
    6f10:	b2ad      	uxth	r5, r5
    6f12:	e7bd      	b.n	6e90 <specan+0x78>
    6f14:	2009c038 	.word	0x2009c038
    6f18:	2009c058 	.word	0x2009c058
    6f1c:	2009c03c 	.word	0x2009c03c
    6f20:	10000a4c 	.word	0x10000a4c
    6f24:	10000450 	.word	0x10000450
    6f28:	10001454 	.word	0x10001454

00006f2c <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    6f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f2e:	b085      	sub	sp, #20
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6f30:	f640 136c 	movw	r3, #2412	; 0x96c
    6f34:	f8ad 3008 	strh.w	r3, [sp, #8]
    6f38:	f640 1385 	movw	r3, #2437	; 0x985
    6f3c:	f8ad 300a 	strh.w	r3, [sp, #10]
    6f40:	f640 139e 	movw	r3, #2462	; 0x99e
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f44:	2280      	movs	r2, #128	; 0x80
	u16 channels[3] = {2412, 2437, 2462};
    6f46:	f8ad 300c 	strh.w	r3, [sp, #12]
	PAEN_SET;
    6f4a:	4b3f      	ldr	r3, [pc, #252]	; (7048 <led_specan+0x11c>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6f4c:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6f50:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6f52:	2012      	movs	r0, #18
    6f54:	f002 fd23 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6f58:	f241 314b 	movw	r1, #4939	; 0x134b
    6f5c:	2014      	movs	r0, #20
    6f5e:	f002 fd1e 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6f62:	f240 1101 	movw	r1, #257	; 0x101
    6f66:	2020      	movs	r0, #32
    6f68:	f002 fd19 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6f6c:	2129      	movs	r1, #41	; 0x29
    6f6e:	2003      	movs	r0, #3
    6f70:	f002 fd15 	bl	999e <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6f74:	21f1      	movs	r1, #241	; 0xf1
    6f76:	2006      	movs	r0, #6
    6f78:	f002 fd11 	bl	999e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6f7c:	f002 fdaa 	bl	9ad4 <cc2400_status>
    6f80:	0641      	lsls	r1, r0, #25
    6f82:	d5fb      	bpl.n	6f7c <led_specan+0x50>
	while ((cc2400_status() & FS_LOCK));
    6f84:	f002 fda6 	bl	9ad4 <cc2400_status>
    6f88:	f010 0404 	ands.w	r4, r0, #4
    6f8c:	d1fa      	bne.n	6f84 <led_specan+0x58>

	while (requested_mode == MODE_LED_SPECAN) {
    6f8e:	4f2f      	ldr	r7, [pc, #188]	; (704c <led_specan+0x120>)
			switch (i) {
				case 0:
					TXLED_CLR;
					break;
				case 1:
					RXLED_CLR;
    6f90:	4d2f      	ldr	r5, [pc, #188]	; (7050 <led_specan+0x124>)
					RXLED_SET;
    6f92:	4e30      	ldr	r6, [pc, #192]	; (7054 <led_specan+0x128>)
	while (requested_mode == MODE_LED_SPECAN) {
    6f94:	7cbb      	ldrb	r3, [r7, #18]
    6f96:	2b07      	cmp	r3, #7
    6f98:	d001      	beq.n	6f9e <led_specan+0x72>
		handle_usb(clkn);

		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
}
    6f9a:	b005      	add	sp, #20
    6f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cc2400_set(FSDIV, channels[i] - 1);
    6f9e:	ab04      	add	r3, sp, #16
    6fa0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    6fa4:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6fa8:	2002      	movs	r0, #2
    6faa:	3901      	subs	r1, #1
    6fac:	b289      	uxth	r1, r1
    6fae:	f002 fcf6 	bl	999e <cc2400_set>
		cc2400_strobe(SFSON);
    6fb2:	2061      	movs	r0, #97	; 0x61
    6fb4:	f002 fd95 	bl	9ae2 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6fb8:	f002 fd8c 	bl	9ad4 <cc2400_status>
    6fbc:	0742      	lsls	r2, r0, #29
    6fbe:	d5fb      	bpl.n	6fb8 <led_specan+0x8c>
		cc2400_strobe(SRX);
    6fc0:	2062      	movs	r0, #98	; 0x62
    6fc2:	f002 fd8e 	bl	9ae2 <cc2400_strobe>
		volatile u32 j = 500; while (--j); //FIXME crude delay
    6fc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6fca:	9301      	str	r3, [sp, #4]
    6fcc:	9b01      	ldr	r3, [sp, #4]
    6fce:	3b01      	subs	r3, #1
    6fd0:	9301      	str	r3, [sp, #4]
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d1fa      	bne.n	6fcc <led_specan+0xa0>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    6fd6:	2006      	movs	r0, #6
    6fd8:	f002 fcd8 	bl	998c <cc2400_get>
		if (lvl > rssi_threshold) {
    6fdc:	4b1e      	ldr	r3, [pc, #120]	; (7058 <led_specan+0x12c>)
    6fde:	f340 2007 	sbfx	r0, r0, #8, #8
    6fe2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
    6fe6:	b25b      	sxtb	r3, r3
    6fe8:	4298      	cmp	r0, r3
    6fea:	dd20      	ble.n	702e <led_specan+0x102>
			switch (i) {
    6fec:	2c01      	cmp	r4, #1
    6fee:	d01a      	beq.n	7026 <led_specan+0xfa>
    6ff0:	d315      	bcc.n	701e <led_specan+0xf2>
    6ff2:	2c02      	cmp	r4, #2
    6ff4:	d019      	beq.n	702a <led_specan+0xfe>
		i = (i+1) % 3;
    6ff6:	2303      	movs	r3, #3
    6ff8:	3401      	adds	r4, #1
    6ffa:	fb94 f3f3 	sdiv	r3, r4, r3
    6ffe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7002:	1ae4      	subs	r4, r4, r3
		handle_usb(clkn);
    7004:	4b15      	ldr	r3, [pc, #84]	; (705c <led_specan+0x130>)
		i = (i+1) % 3;
    7006:	b2e4      	uxtb	r4, r4
		handle_usb(clkn);
    7008:	6818      	ldr	r0, [r3, #0]
    700a:	f000 fbcd 	bl	77a8 <handle_usb>
		cc2400_strobe(SRFOFF);
    700e:	2064      	movs	r0, #100	; 0x64
    7010:	f002 fd67 	bl	9ae2 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7014:	f002 fd5e 	bl	9ad4 <cc2400_status>
    7018:	0743      	lsls	r3, r0, #29
    701a:	d4fb      	bmi.n	7014 <led_specan+0xe8>
    701c:	e7ba      	b.n	6f94 <led_specan+0x68>
					TXLED_SET;
    701e:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_SET;
    7022:	6033      	str	r3, [r6, #0]
					break;
    7024:	e7e7      	b.n	6ff6 <led_specan+0xca>
					RXLED_SET;
    7026:	2310      	movs	r3, #16
    7028:	e7fb      	b.n	7022 <led_specan+0xf6>
					USRLED_SET;
    702a:	6034      	str	r4, [r6, #0]
					break;
    702c:	e7e3      	b.n	6ff6 <led_specan+0xca>
			switch (i) {
    702e:	2c01      	cmp	r4, #1
    7030:	d008      	beq.n	7044 <led_specan+0x118>
    7032:	d303      	bcc.n	703c <led_specan+0x110>
    7034:	2c02      	cmp	r4, #2
    7036:	d1de      	bne.n	6ff6 <led_specan+0xca>
					USRLED_CLR;
    7038:	602c      	str	r4, [r5, #0]
					break;
    703a:	e7dc      	b.n	6ff6 <led_specan+0xca>
					TXLED_CLR;
    703c:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_CLR;
    7040:	602b      	str	r3, [r5, #0]
					break;
    7042:	e7d8      	b.n	6ff6 <led_specan+0xca>
					RXLED_CLR;
    7044:	2310      	movs	r3, #16
    7046:	e7fb      	b.n	7040 <led_specan+0x114>
    7048:	2009c058 	.word	0x2009c058
    704c:	10000a4c 	.word	0x10000a4c
    7050:	2009c03c 	.word	0x2009c03c
    7054:	2009c038 	.word	0x2009c038
    7058:	10000450 	.word	0x10000450
    705c:	10001454 	.word	0x10001454

00007060 <main>:

int main()
{
    7060:	b508      	push	{r3, lr}
	ubertooth_init();
    7062:	f002 fdfb 	bl	9c5c <ubertooth_init>
	clkn_init();
    7066:	f000 fcc9 	bl	79fc <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    706a:	483a      	ldr	r0, [pc, #232]	; (7154 <main+0xf4>)
    706c:	f000 fb14 	bl	7698 <ubertooth_usb_init>
	debug_uart_init(0);
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);

	while (1) {
		handle_usb(clkn);
		if(requested_mode != mode) {
    7070:	4d39      	ldr	r5, [pc, #228]	; (7158 <main+0xf8>)
	cc2400_idle();
    7072:	f7fd fa8b 	bl	458c <cc2400_idle>
	dma_poweron();
    7076:	f000 fcdf 	bl	7a38 <dma_poweron>
	debug_uart_init(0);
    707a:	2000      	movs	r0, #0
    707c:	f001 ffe4 	bl	9048 <debug_uart_init>
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);
    7080:	4936      	ldr	r1, [pc, #216]	; (715c <main+0xfc>)
    7082:	4837      	ldr	r0, [pc, #220]	; (7160 <main+0x100>)
    7084:	f002 f83e 	bl	9104 <debug_printf>
    7088:	462c      	mov	r4, r5
		handle_usb(clkn);
    708a:	4e36      	ldr	r6, [pc, #216]	; (7164 <main+0x104>)
    708c:	6830      	ldr	r0, [r6, #0]
    708e:	f000 fb8b 	bl	77a8 <handle_usb>
		if(requested_mode != mode) {
    7092:	7caa      	ldrb	r2, [r5, #18]
    7094:	7c6b      	ldrb	r3, [r5, #17]
    7096:	429a      	cmp	r2, r3
    7098:	d0f8      	beq.n	708c <main+0x2c>
			switch (requested_mode) {
    709a:	7cab      	ldrb	r3, [r5, #18]
    709c:	2b11      	cmp	r3, #17
    709e:	d8f5      	bhi.n	708c <main+0x2c>
    70a0:	e8df f003 	tbb	[pc, r3]
    70a4:	2b161454 	.word	0x2b161454
    70a8:	433a3240 	.word	0x433a3240
    70ac:	09221d1b 	.word	0x09221d1b
    70b0:	4c0f4625 	.word	0x4c0f4625
    70b4:	2851      	.short	0x2851
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    70b6:	2001      	movs	r0, #1
    70b8:	f002 fb94 	bl	97e4 <wait>
					reset();
    70bc:	f002 fdd8 	bl	9c70 <reset>
					break;
    70c0:	e7e4      	b.n	708c <main+0x2c>
				case MODE_AFH:
					mode = MODE_AFH;
    70c2:	230e      	movs	r3, #14
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    70c4:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    70c6:	f7fe fb19 	bl	56fc <bt_stream_rx>
					break;
    70ca:	e7df      	b.n	708c <main+0x2c>
					mode = MODE_RX_SYMBOLS;
    70cc:	2301      	movs	r3, #1
    70ce:	e7f9      	b.n	70c4 <main+0x64>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    70d0:	2302      	movs	r3, #2
    70d2:	7463      	strb	r3, [r4, #17]
					br_transmit();
    70d4:	f7fe fbca 	bl	586c <br_transmit>
					break;
    70d8:	e7d8      	b.n	708c <main+0x2c>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    70da:	2308      	movs	r3, #8
    70dc:	e7f2      	b.n	70c4 <main+0x64>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					mode = MODE_BT_FOLLOW_LE;
    70de:	2309      	movs	r3, #9
    70e0:	7463      	strb	r3, [r4, #17]
	le_phy_main();
    70e2:	f001 f8cb 	bl	827c <le_phy_main>
    70e6:	e7d1      	b.n	708c <main+0x2c>
					bt_follow_le();
					break;
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    70e8:	f7ff fce8 	bl	6abc <bt_promisc_le>
					break;
    70ec:	e7ce      	b.n	708c <main+0x2c>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    70ee:	f7ff fd27 	bl	6b40 <bt_slave_le>
					break;
    70f2:	e7cb      	b.n	708c <main+0x2c>
				case MODE_BT_TRANSMIT_LE:
					bt_transmit_le();
    70f4:	f7ff fd8a 	bl	6c0c <bt_transmit_le>
					break;
    70f8:	e7c8      	b.n	708c <main+0x2c>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    70fa:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    70fc:	491a      	ldr	r1, [pc, #104]	; (7168 <main+0x108>)
    70fe:	4628      	mov	r0, r5
					mode = MODE_TX_TEST;
    7100:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    7102:	f001 fd03 	bl	8b0c <cc2400_txtest>
					break;
    7106:	e7c1      	b.n	708c <main+0x2c>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7108:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    710a:	4817      	ldr	r0, [pc, #92]	; (7168 <main+0x108>)
					mode = MODE_RANGE_TEST;
    710c:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    710e:	f001 faf5 	bl	86fc <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    7112:	2300      	movs	r3, #0
    7114:	74a3      	strb	r3, [r4, #18]
					break;
    7116:	e7b9      	b.n	708c <main+0x2c>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7118:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    711a:	4813      	ldr	r0, [pc, #76]	; (7168 <main+0x108>)
					mode = MODE_REPEATER;
    711c:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    711e:	f001 fc37 	bl	8990 <cc2400_repeater>
					break;
    7122:	e7b3      	b.n	708c <main+0x2c>
				case MODE_SPECAN:
					specan();
    7124:	f7ff fe78 	bl	6e18 <specan>
					break;
    7128:	e7b0      	b.n	708c <main+0x2c>
				case MODE_LED_SPECAN:
					led_specan();
    712a:	f7ff feff 	bl	6f2c <led_specan>
					break;
    712e:	e7ad      	b.n	708c <main+0x2c>
				case MODE_EGO:
					mode = MODE_EGO;
    7130:	230d      	movs	r3, #13
    7132:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    7134:	7d20      	ldrb	r0, [r4, #20]
    7136:	f001 ff49 	bl	8fcc <ego_main>
					break;
    713a:	e7a7      	b.n	708c <main+0x2c>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    713c:	230f      	movs	r3, #15
    713e:	7463      	strb	r3, [r4, #17]
					rx_generic();
    7140:	f7ff fde0 	bl	6d04 <rx_generic>
					break;
    7144:	e7a2      	b.n	708c <main+0x2c>
				case MODE_TX_GENERIC:
					tx_generic();
    7146:	f7ff fded 	bl	6d24 <tx_generic>
					break;
    714a:	e79f      	b.n	708c <main+0x2c>
				case MODE_IDLE:
					cc2400_idle();
    714c:	f7fd fa1e 	bl	458c <cc2400_idle>
					break;
    7150:	e79c      	b.n	708c <main+0x2c>
    7152:	bf00      	nop
    7154:	00004749 	.word	0x00004749
    7158:	10000a4c 	.word	0x10000a4c
    715c:	0000b1bf 	.word	0x0000b1bf
    7160:	0000ba87 	.word	0x0000ba87
    7164:	10001454 	.word	0x10001454
    7168:	1000049c 	.word	0x1000049c

0000716c <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    716c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;
    7170:	2000      	movs	r0, #0
    7172:	2100      	movs	r1, #0
    7174:	4a45      	ldr	r2, [pc, #276]	; (728c <precalc+0x120>)

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    7176:	4c46      	ldr	r4, [pc, #280]	; (7290 <precalc+0x124>)
	syncword = 0;
    7178:	e9c2 0100 	strd	r0, r1, [r2]
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    717c:	254f      	movs	r5, #79	; 0x4f
	syncword = 0;
    717e:	2200      	movs	r2, #0
    7180:	4620      	mov	r0, r4
	address = target.address & 0xffffffff;
    7182:	4b44      	ldr	r3, [pc, #272]	; (7294 <precalc+0x128>)
    7184:	681b      	ldr	r3, [r3, #0]
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    7186:	0056      	lsls	r6, r2, #1
    7188:	fb96 f1f5 	sdiv	r1, r6, r5
    718c:	fb05 6111 	mls	r1, r5, r1, r6
    7190:	5511      	strb	r1, [r2, r4]
    7192:	3201      	adds	r2, #1
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    7194:	2a4f      	cmp	r2, #79	; 0x4f
    7196:	d1f6      	bne.n	7186 <precalc+0x1a>
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    7198:	4a3f      	ldr	r2, [pc, #252]	; (7298 <precalc+0x12c>)
    719a:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    719e:	7011      	strb	r1, [r2, #0]
	b = (address >> 19) & 0x0f;
    71a0:	4a3e      	ldr	r2, [pc, #248]	; (729c <precalc+0x130>)
    71a2:	f3c3 41c3 	ubfx	r1, r3, #19, #4
	c1 = ((address >> 4) & 0x10) +
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
    71a6:	f3c3 0787 	ubfx	r7, r3, #2, #8
		((address >> 1) & 0x02) +
    71aa:	f3c3 0647 	ubfx	r6, r3, #1, #8
	b = (address >> 19) & 0x0f;
    71ae:	7011      	strb	r1, [r2, #0]
	c1 = ((address >> 4) & 0x10) +
    71b0:	f3c3 1507 	ubfx	r5, r3, #4, #8
		((address >> 3) & 0x08) +
    71b4:	f3c3 01c7 	ubfx	r1, r3, #3, #8
		((address >> 1) & 0x02) +
    71b8:	f006 0202 	and.w	r2, r6, #2
		((address >> 2) & 0x04) +
    71bc:	f007 0404 	and.w	r4, r7, #4
		((address >> 1) & 0x02) +
    71c0:	4314      	orrs	r4, r2
		((address >> 3) & 0x08) +
    71c2:	f001 0e08 	and.w	lr, r1, #8
	c1 = ((address >> 4) & 0x10) +
    71c6:	f005 0210 	and.w	r2, r5, #16
    71ca:	ea42 020e 	orr.w	r2, r2, lr
		((address >> 1) & 0x02) +
    71ce:	4414      	add	r4, r2
		(address & 0x01);
    71d0:	f003 0201 	and.w	r2, r3, #1
		((address >> 1) & 0x02) +
    71d4:	4414      	add	r4, r2
	c1 = ((address >> 4) & 0x10) +
    71d6:	4a32      	ldr	r2, [pc, #200]	; (72a0 <precalc+0x134>)
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    71d8:	f001 0104 	and.w	r1, r1, #4
	c1 = ((address >> 4) & 0x10) +
    71dc:	7014      	strb	r4, [r2, #0]
	d1 = (address >> 10) & 0x1ff;
    71de:	4a31      	ldr	r2, [pc, #196]	; (72a4 <precalc+0x138>)
    71e0:	f3c3 2488 	ubfx	r4, r3, #10, #9
    71e4:	8014      	strh	r4, [r2, #0]
		((address >> 2) & 0x02) +
    71e6:	f007 0702 	and.w	r7, r7, #2
	e = ((address >> 7) & 0x40) +
    71ea:	09da      	lsrs	r2, r3, #7
		((address >> 6) & 0x20) +
    71ec:	099c      	lsrs	r4, r3, #6
	e = ((address >> 7) & 0x40) +
    71ee:	f002 0240 	and.w	r2, r2, #64	; 0x40
		((address >> 6) & 0x20) +
    71f2:	f004 0420 	and.w	r4, r4, #32
		((address >> 2) & 0x02) +
    71f6:	4339      	orrs	r1, r7
		((address >> 1) & 0x01);
    71f8:	f006 0601 	and.w	r6, r6, #1
		((address >> 5) & 0x10) +
    71fc:	095b      	lsrs	r3, r3, #5
	e = ((address >> 7) & 0x40) +
    71fe:	4322      	orrs	r2, r4
		((address >> 2) & 0x02) +
    7200:	4431      	add	r1, r6
		((address >> 5) & 0x10) +
    7202:	f003 0310 	and.w	r3, r3, #16
		((address >> 4) & 0x08) +
    7206:	f005 0508 	and.w	r5, r5, #8
		((address >> 2) & 0x02) +
    720a:	440a      	add	r2, r1
    720c:	432b      	orrs	r3, r5
    720e:	4413      	add	r3, r2
	e = ((address >> 7) & 0x40) +
    7210:	4a25      	ldr	r2, [pc, #148]	; (72a8 <precalc+0x13c>)
    7212:	7013      	strb	r3, [r2, #0]

	if(afh_enabled) {
    7214:	4b25      	ldr	r3, [pc, #148]	; (72ac <precalc+0x140>)
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	b363      	cbz	r3, 7274 <precalc+0x108>
    721a:	2200      	movs	r2, #0
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    721c:	4f24      	ldr	r7, [pc, #144]	; (72b0 <precalc+0x144>)
    721e:	4613      	mov	r3, r2
    7220:	463e      	mov	r6, r7
    7222:	2500      	movs	r5, #0
    7224:	2100      	movs	r1, #0
    7226:	5dd4      	ldrb	r4, [r2, r7]
	for (i = 0; n != 0; i++)
    7228:	ea54 0c05 	orrs.w	ip, r4, r5
    722c:	fa5f fe81 	uxtb.w	lr, r1
    7230:	f101 0101 	add.w	r1, r1, #1
    7234:	d120      	bne.n	7278 <precalc+0x10c>
    7236:	3201      	adds	r2, #1
			used_channels += count_bits((uint64_t) afh_map[i]);
    7238:	4473      	add	r3, lr
		for(i = 0; i < 10; i++)
    723a:	2a0a      	cmp	r2, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    723c:	b2db      	uxtb	r3, r3
		for(i = 0; i < 10; i++)
    723e:	d1f0      	bne.n	7222 <precalc+0xb6>
    7240:	4a1c      	ldr	r2, [pc, #112]	; (72b4 <precalc+0x148>)
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    7242:	254f      	movs	r5, #79	; 0x4f
    7244:	7013      	strb	r3, [r2, #0]
		for(i = 0; i < 10; i++)
    7246:	2300      	movs	r3, #0
    7248:	4619      	mov	r1, r3
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    724a:	fb93 f2f5 	sdiv	r2, r3, r5
    724e:	fb05 3212 	mls	r2, r5, r2, r3
    7252:	b2d7      	uxtb	r7, r2
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    7254:	08fc      	lsrs	r4, r7, #3
    7256:	5d34      	ldrb	r4, [r6, r4]
    7258:	f002 0207 	and.w	r2, r2, #7
    725c:	fa44 f202 	asr.w	r2, r4, r2
    7260:	07d2      	lsls	r2, r2, #31
				bank[j++] = chan;
    7262:	bf48      	it	mi
    7264:	1c4a      	addmi	r2, r1, #1
    7266:	f103 0302 	add.w	r3, r3, #2
    726a:	bf44      	itt	mi
    726c:	5447      	strbmi	r7, [r0, r1]
    726e:	b2d1      	uxtbmi	r1, r2
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    7270:	2b9e      	cmp	r3, #158	; 0x9e
    7272:	d1ea      	bne.n	724a <precalc+0xde>
    7274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		n &= n - 1;
    7278:	f114 38ff 	adds.w	r8, r4, #4294967295	; 0xffffffff
    727c:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
    7280:	ea04 0408 	and.w	r4, r4, r8
    7284:	ea05 0509 	and.w	r5, r5, r9
    7288:	e7ce      	b.n	7228 <precalc+0xbc>
    728a:	bf00      	nop
    728c:	10001668 	.word	0x10001668
    7290:	10001a75 	.word	0x10001a75
    7294:	10001a10 	.word	0x10001a10
    7298:	10001a73 	.word	0x10001a73
    729c:	10001a20 	.word	0x10001a20
    72a0:	10001a74 	.word	0x10001a74
    72a4:	10001a22 	.word	0x10001a22
    72a8:	10001ac4 	.word	0x10001ac4
    72ac:	10001997 	.word	0x10001997
    72b0:	1000137b 	.word	0x1000137b
    72b4:	10001379 	.word	0x10001379

000072b8 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    72b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72bc:	b086      	sub	sp, #24
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    72be:	4b46      	ldr	r3, [pc, #280]	; (73d8 <next_hop+0x120>)
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    72c0:	4c46      	ldr	r4, [pc, #280]	; (73dc <next_hop+0x124>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    72c2:	881e      	ldrh	r6, [r3, #0]
	f = base_f % 79;
    72c4:	234f      	movs	r3, #79	; 0x4f
	base_f = (clock >> 3) & 0x1fffff0;
    72c6:	ea04 04d0 	and.w	r4, r4, r0, lsr #3
	f = base_f % 79;
    72ca:	fbb4 f2f3 	udiv	r2, r4, r3
    72ce:	fb03 4112 	mls	r1, r3, r2, r4
	c = (c1 ^ (clock >> 16)) & 0x1f;
    72d2:	4b43      	ldr	r3, [pc, #268]	; (73e0 <next_hop+0x128>)
	y1 = (clock >> 1) & 0x01;
    72d4:	f3c0 0e40 	ubfx	lr, r0, #1, #1
	c = (c1 ^ (clock >> 16)) & 0x1f;
    72d8:	781a      	ldrb	r2, [r3, #0]
	a = (a1 ^ (clock >> 21)) & 0x1f;
    72da:	4b42      	ldr	r3, [pc, #264]	; (73e4 <next_hop+0x12c>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    72dc:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
	a = (a1 ^ (clock >> 21)) & 0x1f;
    72e0:	781b      	ldrb	r3, [r3, #0]
	c = (c1 ^ (clock >> 16)) & 0x1f;
    72e2:	ea82 4210 	eor.w	r2, r2, r0, lsr #16
	a = (a1 ^ (clock >> 21)) & 0x1f;
    72e6:	ea83 5350 	eor.w	r3, r3, r0, lsr #21

	perm = perm5(
		((x + a) % 32) ^ b,
    72ea:	eb03 0090 	add.w	r0, r3, r0, lsr #2
    72ee:	4b3e      	ldr	r3, [pc, #248]	; (73e8 <next_hop+0x130>)
	y2 = y1 << 5;
    72f0:	ea4f 174e 	mov.w	r7, lr, lsl #5
		((x + a) % 32) ^ b,
    72f4:	781b      	ldrb	r3, [r3, #0]
	y2 = y1 << 5;
    72f6:	b2bd      	uxth	r5, r7
		((x + a) % 32) ^ b,
    72f8:	4058      	eors	r0, r3
	for (i = 0; i < 9; i++)
    72fa:	2300      	movs	r3, #0
		(y1 * 0x1f) ^ c,
    72fc:	eba7 070e 	sub.w	r7, r7, lr
	c = (c1 ^ (clock >> 16)) & 0x1f;
    7300:	f002 021f 	and.w	r2, r2, #31
		(y1 * 0x1f) ^ c,
    7304:	407a      	eors	r2, r7
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    7306:	f3c6 0608 	ubfx	r6, r6, #0, #9
	z &= 0x1f;
    730a:	f000 001f 	and.w	r0, r0, #31
		p[i] = (p_low >> i) & 0x01;
    730e:	af02      	add	r7, sp, #8
    7310:	fa46 fe03 	asr.w	lr, r6, r3
    7314:	f00e 0e01 	and.w	lr, lr, #1
    7318:	f803 e007 	strb.w	lr, [r3, r7]
	for (i = 0; i < 9; i++)
    731c:	3301      	adds	r3, #1
    731e:	2b09      	cmp	r3, #9
    7320:	d1f6      	bne.n	7310 <next_hop+0x58>
    7322:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;
    7324:	eb07 0e03 	add.w	lr, r7, r3
    7328:	fa42 f603 	asr.w	r6, r2, r3
	for (i = 0; i < 5; i++)
    732c:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    732e:	f006 0601 	and.w	r6, r6, #1
	for (i = 0; i < 5; i++)
    7332:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    7334:	f88e 6009 	strb.w	r6, [lr, #9]
	for (i = 0; i < 5; i++)
    7338:	d1f4      	bne.n	7324 <next_hop+0x6c>
    733a:	2200      	movs	r2, #0
		z_bit[i] = (z >> i) & 0x01;
    733c:	fa40 f302 	asr.w	r3, r0, r2
    7340:	f003 0301 	and.w	r3, r3, #1
    7344:	f80d 3002 	strb.w	r3, [sp, r2]
	for (i = 0; i < 5; i++)
    7348:	3201      	adds	r2, #1
    734a:	2a05      	cmp	r2, #5
    734c:	d1f6      	bne.n	733c <next_hop+0x84>
    734e:	220d      	movs	r2, #13
			tmp = z_bit[index1[i]];
    7350:	4e26      	ldr	r6, [pc, #152]	; (73ec <next_hop+0x134>)
			z_bit[index1[i]] = z_bit[index2[i]];
    7352:	f106 0e0e 	add.w	lr, r6, #14
		if (p[i]) {
    7356:	5cbb      	ldrb	r3, [r7, r2]
    7358:	b17b      	cbz	r3, 737a <next_hop+0xc2>
			tmp = z_bit[index1[i]];
    735a:	5d90      	ldrb	r0, [r2, r6]
    735c:	ab06      	add	r3, sp, #24
    735e:	4418      	add	r0, r3
			z_bit[index1[i]] = z_bit[index2[i]];
    7360:	f812 300e 	ldrb.w	r3, [r2, lr]
    7364:	f10d 0818 	add.w	r8, sp, #24
    7368:	4443      	add	r3, r8
			tmp = z_bit[index1[i]];
    736a:	f810 cc18 	ldrb.w	ip, [r0, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    736e:	f813 8c18 	ldrb.w	r8, [r3, #-24]
    7372:	f800 8c18 	strb.w	r8, [r0, #-24]
			z_bit[index2[i]] = tmp;
    7376:	f803 cc18 	strb.w	ip, [r3, #-24]
	for (i = 13; i >= 0; i--) {
    737a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    737e:	d2ea      	bcs.n	7356 <next_hop+0x9e>
    7380:	2200      	movs	r2, #0
    7382:	4610      	mov	r0, r2
		output += z_bit[i] << i;
    7384:	f81d 3000 	ldrb.w	r3, [sp, r0]
    7388:	4083      	lsls	r3, r0
	for (i = 0; i < 5; i++)
    738a:	3001      	adds	r0, #1
		output += z_bit[i] << i;
    738c:	441a      	add	r2, r3
	for (i = 0; i < 5; i++)
    738e:	2805      	cmp	r0, #5
		output += z_bit[i] << i;
    7390:	b2d2      	uxtb	r2, r2
	for (i = 0; i < 5; i++)
    7392:	d1f7      	bne.n	7384 <next_hop+0xcc>
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    7394:	4b16      	ldr	r3, [pc, #88]	; (73f0 <next_hop+0x138>)
    7396:	781b      	ldrb	r3, [r3, #0]
    7398:	189e      	adds	r6, r3, r2
    739a:	194a      	adds	r2, r1, r5
    739c:	214f      	movs	r1, #79	; 0x4f
    739e:	4432      	add	r2, r6
    73a0:	fbb2 f3f1 	udiv	r3, r2, r1
    73a4:	fb01 2213 	mls	r2, r1, r3, r2
    73a8:	4b12      	ldr	r3, [pc, #72]	; (73f4 <next_hop+0x13c>)
    73aa:	5c98      	ldrb	r0, [r3, r2]
	if(afh_enabled) {
    73ac:	4b12      	ldr	r3, [pc, #72]	; (73f8 <next_hop+0x140>)
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	b16b      	cbz	r3, 73ce <next_hop+0x116>
		f_dash = base_f % used_channels;
    73b2:	4b12      	ldr	r3, [pc, #72]	; (73fc <next_hop+0x144>)
    73b4:	7819      	ldrb	r1, [r3, #0]
    73b6:	fbb4 f3f1 	udiv	r3, r4, r1
    73ba:	fb01 4313 	mls	r3, r1, r3, r4
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    73be:	442b      	add	r3, r5
    73c0:	4433      	add	r3, r6
    73c2:	fbb3 f2f1 	udiv	r2, r3, r1
    73c6:	fb01 3312 	mls	r3, r1, r2, r3
    73ca:	4a0d      	ldr	r2, [pc, #52]	; (7400 <next_hop+0x148>)
    73cc:	5cd0      	ldrb	r0, [r2, r3]
	}
	return (2402 + next_channel);

}
    73ce:	f600 1062 	addw	r0, r0, #2402	; 0x962
    73d2:	b006      	add	sp, #24
    73d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73d8:	10001a22 	.word	0x10001a22
    73dc:	01fffff0 	.word	0x01fffff0
    73e0:	10001a74 	.word	0x10001a74
    73e4:	10001a73 	.word	0x10001a73
    73e8:	10001a20 	.word	0x10001a20
    73ec:	0000baa4 	.word	0x0000baa4
    73f0:	10001ac4 	.word	0x10001ac4
    73f4:	10001a75 	.word	0x10001a75
    73f8:	10001997 	.word	0x10001997
    73fc:	10001379 	.word	0x10001379
    7400:	10001a24 	.word	0x10001a24

00007404 <btle_channel_index>:

// calculate channel index from physical channel
// channel is in range [2402, 2480]
uint8_t btle_channel_index(uint16_t channel) {
	uint8_t idx;
	channel = (channel - 2402) / 2;
    7404:	2302      	movs	r3, #2
    7406:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    740a:	fb90 f0f3 	sdiv	r0, r0, r3
    740e:	b283      	uxth	r3, r0
	if (channel == 0)
    7410:	b153      	cbz	r3, 7428 <btle_channel_index+0x24>
		idx = 37;
	else if (channel < 12)
    7412:	2b0b      	cmp	r3, #11
    7414:	d802      	bhi.n	741c <btle_channel_index+0x18>
		idx = channel - 1;
    7416:	3801      	subs	r0, #1
	else if (channel == 12)
		idx = 38;
	else if (channel < 39)
		idx = channel - 2;
    7418:	b2c0      	uxtb	r0, r0
    741a:	4770      	bx	lr
	else if (channel == 12)
    741c:	2b0c      	cmp	r3, #12
    741e:	d005      	beq.n	742c <btle_channel_index+0x28>
	else if (channel < 39)
    7420:	2b26      	cmp	r3, #38	; 0x26
    7422:	d805      	bhi.n	7430 <btle_channel_index+0x2c>
		idx = channel - 2;
    7424:	3802      	subs	r0, #2
    7426:	e7f7      	b.n	7418 <btle_channel_index+0x14>
		idx = 37;
    7428:	2025      	movs	r0, #37	; 0x25
    742a:	4770      	bx	lr
		idx = 38;
    742c:	2026      	movs	r0, #38	; 0x26
    742e:	4770      	bx	lr
	else
		idx = 39;
    7430:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    7432:	4770      	bx	lr

00007434 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    7434:	280a      	cmp	r0, #10
    7436:	d803      	bhi.n	7440 <btle_channel_index_to_phys+0xc>
		phys = 2404 + 2 * idx;
    7438:	0040      	lsls	r0, r0, #1
    743a:	f600 1064 	addw	r0, r0, #2404	; 0x964
    743e:	4770      	bx	lr
	else if (idx < 37)
    7440:	2824      	cmp	r0, #36	; 0x24
    7442:	d803      	bhi.n	744c <btle_channel_index_to_phys+0x18>
		phys = 2428 + 2 * (idx - 11);
    7444:	0040      	lsls	r0, r0, #1
    7446:	f600 1066 	addw	r0, r0, #2406	; 0x966
    744a:	4770      	bx	lr
	else if (idx == 37)
    744c:	2825      	cmp	r0, #37	; 0x25
    744e:	d006      	beq.n	745e <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
    7450:	2826      	cmp	r0, #38	; 0x26
		phys = 2426;
	else
		phys = 2480;
    7452:	f640 107a 	movw	r0, #2426	; 0x97a
    7456:	bf18      	it	ne
    7458:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    745c:	4770      	bx	lr
		phys = 2402;
    745e:	f640 1062 	movw	r0, #2402	; 0x962
	return phys;
}
    7462:	4770      	bx	lr

00007464 <btle_next_hop>:
{
    7464:	b510      	push	{r4, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7466:	7d41      	ldrb	r1, [r0, #21]
{
    7468:	4602      	mov	r2, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    746a:	4608      	mov	r0, r1
    746c:	f7ff ffe2 	bl	7434 <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    7470:	2425      	movs	r4, #37	; 0x25
    7472:	7d93      	ldrb	r3, [r2, #22]
    7474:	440b      	add	r3, r1
    7476:	fb93 f1f4 	sdiv	r1, r3, r4
    747a:	fb04 3311 	mls	r3, r4, r1, r3
    747e:	7553      	strb	r3, [r2, #21]
}
    7480:	bd10      	pop	{r4, pc}
    7482:	0000      	movs	r0, r0

00007484 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    7484:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7486:	460b      	mov	r3, r1
			int next_bit = (state ^ cur) & 1;
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
				state |= 1 << 23;
				state ^= lfsr_mask;
    7488:	4f0b      	ldr	r7, [pc, #44]	; (74b8 <btle_calc_crc+0x34>)
	u32 state = crc_init & 0xffffff;
    748a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    748e:	1a5c      	subs	r4, r3, r1
    7490:	42a2      	cmp	r2, r4
    7492:	dc00      	bgt.n	7496 <btle_calc_crc+0x12>
			}
		}
	}

	return state;
}
    7494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8 cur = data[i];
    7496:	2408      	movs	r4, #8
    7498:	f813 5b01 	ldrb.w	r5, [r3], #1
			int next_bit = (state ^ cur) & 1;
    749c:	ea85 0600 	eor.w	r6, r5, r0
			if (next_bit) {
    74a0:	f016 0f01 	tst.w	r6, #1
    74a4:	ea4f 0050 	mov.w	r0, r0, lsr #1
				state ^= lfsr_mask;
    74a8:	bf18      	it	ne
    74aa:	4078      	eorne	r0, r7
		for (j = 0; j < 8; ++j) {
    74ac:	3c01      	subs	r4, #1
			if (next_bit) {
    74ae:	ea4f 0555 	mov.w	r5, r5, lsr #1
		for (j = 0; j < 8; ++j) {
    74b2:	d1f3      	bne.n	749c <btle_calc_crc+0x18>
    74b4:	e7eb      	b.n	748e <btle_calc_crc+0xa>
    74b6:	bf00      	nop
    74b8:	00da6000 	.word	0x00da6000

000074bc <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    74bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74be:	4603      	mov	r3, r0
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
			state = (state << 1) & 0xffffff;
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
			if (top_bit)
				state ^= lfsr_mask;
    74c0:	4e12      	ldr	r6, [pc, #72]	; (750c <btle_reverse_crc+0x50>)
	for (i = len - 1; i >= 0; --i) {
    74c2:	3a01      	subs	r2, #1
    74c4:	2a00      	cmp	r2, #0
    74c6:	da0e      	bge.n	74e6 <btle_reverse_crc+0x2a>
    74c8:	2200      	movs	r2, #0
    74ca:	4610      	mov	r0, r2
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    74cc:	fa23 f102 	lsr.w	r1, r3, r2
    74d0:	f1c2 0417 	rsb	r4, r2, #23
    74d4:	f001 0101 	and.w	r1, r1, #1
	for (i = 0; i < 24; ++i)
    74d8:	3201      	adds	r2, #1
		ret |= ((state >> i) & 1) << (23 - i);
    74da:	40a1      	lsls	r1, r4
	for (i = 0; i < 24; ++i)
    74dc:	2a18      	cmp	r2, #24
		ret |= ((state >> i) & 1) << (23 - i);
    74de:	ea40 0001 	orr.w	r0, r0, r1
	for (i = 0; i < 24; ++i)
    74e2:	d1f3      	bne.n	74cc <btle_reverse_crc+0x10>

	return ret;
}
    74e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8 cur = data[i];
    74e6:	2407      	movs	r4, #7
    74e8:	5c8f      	ldrb	r7, [r1, r2]
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    74ea:	fa47 f004 	asr.w	r0, r7, r4
			int top_bit = state >> 23;
    74ee:	0ddd      	lsrs	r5, r3, #23
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    74f0:	f000 0001 	and.w	r0, r0, #1
			state = (state << 1) & 0xffffff;
    74f4:	005b      	lsls	r3, r3, #1
    74f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    74fa:	4068      	eors	r0, r5
    74fc:	4303      	orrs	r3, r0
			if (top_bit)
    74fe:	b105      	cbz	r5, 7502 <btle_reverse_crc+0x46>
				state ^= lfsr_mask;
    7500:	4073      	eors	r3, r6
		for (j = 0; j < 8; ++j) {
    7502:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    7506:	d2f0      	bcs.n	74ea <btle_reverse_crc+0x2e>
	for (i = len - 1; i >= 0; --i) {
    7508:	3a01      	subs	r2, #1
    750a:	e7db      	b.n	74c4 <btle_reverse_crc+0x8>
    750c:	00b4c000 	.word	0x00b4c000

00007510 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    7510:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    7512:	460c      	mov	r4, r1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    7514:	4d07      	ldr	r5, [pc, #28]	; (7534 <btle_crcgen_lut+0x24>)
	state = crc_init & 0xffffff;
    7516:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    751a:	1a63      	subs	r3, r4, r1
    751c:	429a      	cmp	r2, r3
    751e:	dc00      	bgt.n	7522 <btle_crcgen_lut+0x12>
	}
	return state;
}
    7520:	bd30      	pop	{r4, r5, pc}
		key = data[i] ^ (state & 0xff);
    7522:	f814 3b01 	ldrb.w	r3, [r4], #1
    7526:	4043      	eors	r3, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    7528:	b2db      	uxtb	r3, r3
    752a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    752e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    7532:	e7f2      	b.n	751a <btle_crcgen_lut+0xa>
    7534:	100004c8 	.word	0x100004c8

00007538 <le_dewhiten>:
/*
 * Dewhiten and reverse the bit order of a buffer in place.
 * Channel is a physical channel in the range [2402, 2480]
 * TODO convert this to use whitening word
 */
void le_dewhiten(uint8_t *data, unsigned size, unsigned channel) {
    7538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    753a:	4604      	mov	r4, r0
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];
    753c:	b290      	uxth	r0, r2
    753e:	f7ff ff61 	bl	7404 <btle_channel_index>
    7542:	4e15      	ldr	r6, [pc, #84]	; (7598 <le_dewhiten+0x60>)
	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
			bit = (data[i] >> (7-j)) & 1;
			bit ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    7544:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
	unsigned idx = whitening_index[btle_channel_index(channel)];
    7548:	5c32      	ldrb	r2, [r6, r0]
    754a:	4620      	mov	r0, r4
    754c:	4421      	add	r1, r4
	for (i = 0; i < size; ++i) {
    754e:	4281      	cmp	r1, r0
    7550:	d020      	beq.n	7594 <le_dewhiten+0x5c>
			bit = (data[i] >> (7-j)) & 1;
    7552:	f04f 0c00 	mov.w	ip, #0
    7556:	4664      	mov	r4, ip
    7558:	f810 7b01 	ldrb.w	r7, [r0], #1
    755c:	f1c4 0507 	rsb	r5, r4, #7
    7560:	fa47 f305 	asr.w	r3, r7, r5
    7564:	f003 0501 	and.w	r5, r3, #1
			bit ^= whitening[idx];
    7568:	18b3      	adds	r3, r6, r2
    756a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    756e:	3201      	adds	r2, #1
			bit ^= whitening[idx];
    7570:	406b      	eors	r3, r5
			idx = (idx + 1) % sizeof(whitening);
    7572:	fbb2 f5fe 	udiv	r5, r2, lr
			out |= bit << j;
    7576:	40a3      	lsls	r3, r4
		for (j = 0; j < 8; ++j) {
    7578:	3401      	adds	r4, #1
			idx = (idx + 1) % sizeof(whitening);
    757a:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
			out |= bit << j;
    757e:	ea4c 0303 	orr.w	r3, ip, r3
		for (j = 0; j < 8; ++j) {
    7582:	2c08      	cmp	r4, #8
			idx = (idx + 1) % sizeof(whitening);
    7584:	eba2 0205 	sub.w	r2, r2, r5
			out |= bit << j;
    7588:	fa5f fc83 	uxtb.w	ip, r3
		for (j = 0; j < 8; ++j) {
    758c:	d1e6      	bne.n	755c <le_dewhiten+0x24>
		}
		data[i] = out;
    758e:	f800 cc01 	strb.w	ip, [r0, #-1]
    7592:	e7dc      	b.n	754e <le_dewhiten+0x16>
    7594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7596:	bf00      	nop
    7598:	0000bac0 	.word	0x0000bac0

0000759c <le_parse_channel_map>:
}

/*
 * Parse a channel map and populate the le_channel_remapping_t struct.
 */
int le_parse_channel_map(uint8_t *channel_map, le_channel_remapping_t *remapping) {
    759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    759e:	460c      	mov	r4, r1
    75a0:	4605      	mov	r5, r0
	unsigned i, j, byte;
	unsigned idx = 0;

	memset(remapping, 0, sizeof(*remapping));
    75a2:	22c0      	movs	r2, #192	; 0xc0
    75a4:	2100      	movs	r1, #0
    75a6:	4620      	mov	r0, r4
    75a8:	f7fc fe2a 	bl	4200 <memset>

	for (i = 0; i < 5; ++i) {
		byte = channel_map[i];
		for (j = 0; j < 8; ++j) {
			if (byte & 1) {
				remapping->channel_in_use[idx] = 1;
    75ac:	2601      	movs	r6, #1
	unsigned idx = 0;
    75ae:	2300      	movs	r3, #0
    75b0:	1e68      	subs	r0, r5, #1
    75b2:	3504      	adds	r5, #4
		byte = channel_map[i];
    75b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    75b8:	f103 0708 	add.w	r7, r3, #8
			if (byte & 1) {
    75bc:	f012 0101 	ands.w	r1, r2, #1
				remapping->channel_in_use[idx] = 1;
    75c0:	bf1b      	ittet	ne
    75c2:	f844 6023 	strne.w	r6, [r4, r3, lsl #2]
				remapping->remapping_index[remapping->total_channels] = idx;
    75c6:	f8d4 10bc 	ldrne.w	r1, [r4, #188]	; 0xbc
				++remapping->total_channels;
			} else {
				remapping->channel_in_use[idx] = 0;
    75ca:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
				remapping->remapping_index[remapping->total_channels] = idx;
    75ce:	eb04 0e01 	addne.w	lr, r4, r1
    75d2:	bf1c      	itt	ne
    75d4:	f88e 3094 	strbne.w	r3, [lr, #148]	; 0x94
				++remapping->total_channels;
    75d8:	3101      	addne	r1, #1
			}

			byte >>= 1;

			++idx;
    75da:	f103 0301 	add.w	r3, r3, #1
				++remapping->total_channels;
    75de:	bf18      	it	ne
    75e0:	f8c4 10bc 	strne.w	r1, [r4, #188]	; 0xbc
			if (idx == 37)
    75e4:	2b25      	cmp	r3, #37	; 0x25
			byte >>= 1;
    75e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
			if (idx == 37)
    75ea:	d001      	beq.n	75f0 <le_parse_channel_map+0x54>
		for (j = 0; j < 8; ++j) {
    75ec:	429f      	cmp	r7, r3
    75ee:	d1e5      	bne.n	75bc <le_parse_channel_map+0x20>
	for (i = 0; i < 5; ++i) {
    75f0:	4285      	cmp	r5, r0
    75f2:	d1df      	bne.n	75b4 <le_parse_channel_map+0x18>
				break;
		}
	}
    return 2;
}
    75f4:	2002      	movs	r0, #2
    75f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000075f8 <le_map_channel>:

/*
 * Map a channel index to a used index given a remapping struct.
 */
uint8_t le_map_channel(uint8_t channel_idx, le_channel_remapping_t *remapping) {
	if (remapping->channel_in_use[channel_idx])
    75f8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    75fc:	b943      	cbnz	r3, 7610 <le_map_channel+0x18>
		return channel_idx;
	else
		return remapping->remapping_index[channel_idx % remapping->total_channels];
    75fe:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    7602:	fbb0 f3f2 	udiv	r3, r0, r2
    7606:	fb02 0013 	mls	r0, r2, r3, r0
    760a:	4401      	add	r1, r0
    760c:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
}
    7610:	4770      	bx	lr
    7612:	0000      	movs	r0, r0

00007614 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    7614:	b513      	push	{r0, r1, r4, lr}
	int rv;
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    7616:	8843      	ldrh	r3, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7618:	6812      	ldr	r2, [r2, #0]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    761a:	f8ad 3000 	strh.w	r3, [sp]
    761e:	8883      	ldrh	r3, [r0, #4]
    7620:	f8ad 3002 	strh.w	r3, [sp, #2]
    7624:	88c3      	ldrh	r3, [r0, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7626:	7840      	ldrb	r0, [r0, #1]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    7628:	f8ad 3004 	strh.w	r3, [sp, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    762c:	4b04      	ldr	r3, [pc, #16]	; (7640 <usb_vendor_request_handler+0x2c>)
    762e:	681c      	ldr	r4, [r3, #0]
    7630:	460b      	mov	r3, r1
    7632:	4669      	mov	r1, sp
    7634:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    7636:	1e43      	subs	r3, r0, #1
    7638:	4258      	negs	r0, r3
    763a:	4158      	adcs	r0, r3
    763c:	b002      	add	sp, #8
    763e:	bd10      	pop	{r4, pc}
    7640:	10003bcc 	.word	0x10003bcc

00007644 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7644:	b570      	push	{r4, r5, r6, lr}
    7646:	b086      	sub	sp, #24
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7648:	ad01      	add	r5, sp, #4
void set_serial_descriptor(u8 *descriptors) {
    764a:	4604      	mov	r4, r0
	get_device_serial(buf, &len);
    764c:	4669      	mov	r1, sp
    764e:	4628      	mov	r0, r5
    7650:	f002 fb44 	bl	9cdc <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7654:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7658:	b9db      	cbnz	r3, 7692 <set_serial_descriptor+0x4e>
    765a:	4620      	mov	r0, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    765c:	461e      	mov	r6, r3
    765e:	461c      	mov	r4, r3
			nibble  = (buf[i+1]>>4) & 0xF;
    7660:	3301      	adds	r3, #1
    7662:	5cea      	ldrb	r2, [r5, r3]
			desc[1+ i * 4] = 0;
    7664:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
			nibble  = (buf[i+1]>>4) & 0xF;
    7668:	0911      	lsrs	r1, r2, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    766a:	2909      	cmp	r1, #9
			nibble = buf[i+1]&0xF;
    766c:	f002 020f 	and.w	r2, r2, #15
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7670:	bf8c      	ite	hi
    7672:	3157      	addhi	r1, #87	; 0x57
    7674:	3130      	addls	r1, #48	; 0x30
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7676:	2a09      	cmp	r2, #9
    7678:	bf8c      	ite	hi
    767a:	3257      	addhi	r2, #87	; 0x57
    767c:	3230      	addls	r2, #48	; 0x30
		for(i=0; i<16; i++) {
    767e:	2b10      	cmp	r3, #16
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7680:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7684:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    7688:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
    768c:	f100 0004 	add.w	r0, r0, #4
		for(i=0; i<16; i++) {
    7690:	d1e6      	bne.n	7660 <set_serial_descriptor+0x1c>
		}
	}
}
    7692:	b006      	add	sp, #24
    7694:	bd70      	pop	{r4, r5, r6, pc}
    7696:	0000      	movs	r0, r0

00007698 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7698:	b538      	push	{r3, r4, r5, lr}
    769a:	4605      	mov	r5, r0
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    769c:	4c0c      	ldr	r4, [pc, #48]	; (76d0 <ubertooth_usb_init+0x38>)
	USBInit();
    769e:	f002 fbf1 	bl	9e84 <USBInit>
	set_serial_descriptor(abDescriptors);
    76a2:	4620      	mov	r0, r4
    76a4:	f7ff ffce 	bl	7644 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    76a8:	4620      	mov	r0, r4
    76aa:	f002 fe2b 	bl	a304 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    76ae:	4b09      	ldr	r3, [pc, #36]	; (76d4 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    76b0:	4a09      	ldr	r2, [pc, #36]	; (76d8 <ubertooth_usb_init+0x40>)
    76b2:	490a      	ldr	r1, [pc, #40]	; (76dc <ubertooth_usb_init+0x44>)
    76b4:	2002      	movs	r0, #2
	v_req_handler = vendor_req_handler;
    76b6:	601d      	str	r5, [r3, #0]
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    76b8:	f002 fbda 	bl	9e70 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    76bc:	4908      	ldr	r1, [pc, #32]	; (76e0 <ubertooth_usb_init+0x48>)
    76be:	20ff      	movs	r0, #255	; 0xff
    76c0:	f002 fe0a 	bl	a2d8 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    76c4:	2001      	movs	r0, #1
    76c6:	f002 fc74 	bl	9fb2 <USBHwConnect>

	return 0;
}
    76ca:	2000      	movs	r0, #0
    76cc:	bd38      	pop	{r3, r4, r5, pc}
    76ce:	bf00      	nop
    76d0:	100008c8 	.word	0x100008c8
    76d4:	10003bcc 	.word	0x10003bcc
    76d8:	10003ac8 	.word	0x10003ac8
    76dc:	00007615 	.word	0x00007615
    76e0:	0000bb67 	.word	0x0000bb67

000076e4 <usb_queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void usb_queue_init(void)
{
	head = 0;
    76e4:	2100      	movs	r1, #0
    76e6:	4b04      	ldr	r3, [pc, #16]	; (76f8 <usb_queue_init+0x14>)
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    76e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    76ec:	4803      	ldr	r0, [pc, #12]	; (76fc <usb_queue_init+0x18>)
	head = 0;
    76ee:	6019      	str	r1, [r3, #0]
	tail = 0;
    76f0:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    76f2:	f7fc bd85 	b.w	4200 <memset>
    76f6:	bf00      	nop
    76f8:	10000ba4 	.word	0x10000ba4
    76fc:	10001ac8 	.word	0x10001ac8

00007700 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
    7700:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
    7702:	4a0a      	ldr	r2, [pc, #40]	; (772c <usb_enqueue+0x2c>)
    7704:	6814      	ldr	r4, [r2, #0]
	u8 t = tail & 0x7F;
    7706:	6853      	ldr	r3, [r2, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    7708:	f004 007f 	and.w	r0, r4, #127	; 0x7f
	u8 t = tail & 0x7F;
    770c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    7710:	1c59      	adds	r1, r3, #1
	if (h == n) {
    7712:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7716:	4288      	cmp	r0, r1
		return NULL;
	}

	++tail;
    7718:	bf1f      	itttt	ne
    771a:	6851      	ldrne	r1, [r2, #4]
	return &fifo[t];
    771c:	4804      	ldrne	r0, [pc, #16]	; (7730 <usb_enqueue+0x30>)
	++tail;
    771e:	3101      	addne	r1, #1
	return &fifo[t];
    7720:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
	++tail;
    7724:	bf14      	ite	ne
    7726:	6051      	strne	r1, [r2, #4]
		return NULL;
    7728:	2000      	moveq	r0, #0

}
    772a:	bd10      	pop	{r4, pc}
    772c:	10000ba4 	.word	0x10000ba4
    7730:	10001ac8 	.word	0x10001ac8

00007734 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7734:	4a08      	ldr	r2, [pc, #32]	; (7758 <dequeue+0x24>)
    7736:	6813      	ldr	r3, [r2, #0]
	u8 t = tail & 0x7F;
    7738:	6851      	ldr	r1, [r2, #4]
	u8 h = head & 0x7F;
    773a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

	/* fail if queue is empty */
	if (h == t) {
    773e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7742:	428b      	cmp	r3, r1
		return NULL;
	}

	++head;
    7744:	bf1f      	itttt	ne
    7746:	6811      	ldrne	r1, [r2, #0]
	return &fifo[h];
    7748:	4804      	ldrne	r0, [pc, #16]	; (775c <dequeue+0x28>)
	++head;
    774a:	3101      	addne	r1, #1
	return &fifo[h];
    774c:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
	++head;
    7750:	bf14      	ite	ne
    7752:	6011      	strne	r1, [r2, #0]
		return NULL;
    7754:	2000      	moveq	r0, #0
}
    7756:	4770      	bx	lr
    7758:	10000ba4 	.word	0x10000ba4
    775c:	10001ac8 	.word	0x10001ac8

00007760 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7760:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7762:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7764:	f7ff ffe6 	bl	7734 <dequeue>
    7768:	4b0d      	ldr	r3, [pc, #52]	; (77a0 <dequeue_send+0x40>)
	if (pkt != NULL) {
    776a:	4604      	mov	r4, r0
    776c:	b140      	cbz	r0, 7780 <dequeue_send+0x20>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    776e:	4601      	mov	r1, r0
    7770:	2240      	movs	r2, #64	; 0x40
    7772:	2082      	movs	r0, #130	; 0x82
		last_usb_pkt = clkn;
    7774:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7776:	f002 fc4d 	bl	a014 <USBHwEPWrite>
		return 1;
    777a:	2001      	movs	r0, #1
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
		}
		return 0;
	}
}
    777c:	b003      	add	sp, #12
    777e:	bd30      	pop	{r4, r5, pc}
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    7780:	689a      	ldr	r2, [r3, #8]
    7782:	4908      	ldr	r1, [pc, #32]	; (77a4 <dequeue_send+0x44>)
    7784:	1aaa      	subs	r2, r5, r2
    7786:	428a      	cmp	r2, r1
    7788:	d908      	bls.n	779c <dequeue_send+0x3c>
			u8 pkt_type = KEEP_ALIVE;
    778a:	2203      	movs	r2, #3
    778c:	a902      	add	r1, sp, #8
    778e:	f801 2d01 	strb.w	r2, [r1, #-1]!
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7792:	2082      	movs	r0, #130	; 0x82
    7794:	2201      	movs	r2, #1
			last_usb_pkt = clkn;
    7796:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7798:	f002 fc3c 	bl	a014 <USBHwEPWrite>
		return 0;
    779c:	4620      	mov	r0, r4
    779e:	e7ed      	b.n	777c <dequeue_send+0x1c>
    77a0:	10000ba4 	.word	0x10000ba4
    77a4:	00061a80 	.word	0x00061a80

000077a8 <handle_usb>:

void handle_usb(u32 clkn)
{
    77a8:	b538      	push	{r3, r4, r5, lr}
    77aa:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    77ac:	2082      	movs	r0, #130	; 0x82
    77ae:	f002 fc0b 	bl	9fc8 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    77b2:	0682      	lsls	r2, r0, #26
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    77b4:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    77b6:	d402      	bmi.n	77be <handle_usb+0x16>
		dequeue_send(clkn);
    77b8:	4620      	mov	r0, r4
    77ba:	f7ff ffd1 	bl	7760 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    77be:	066b      	lsls	r3, r5, #25
    77c0:	d402      	bmi.n	77c8 <handle_usb+0x20>
		dequeue_send(clkn);
    77c2:	4620      	mov	r0, r4
    77c4:	f7ff ffcc 	bl	7760 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    77c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USBHwISR();
    77cc:	f002 bc8a 	b.w	a0e4 <USBHwISR>

000077d0 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    77d0:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    77d2:	229e      	movs	r2, #158	; 0x9e
    77d4:	2100      	movs	r1, #0
    77d6:	4807      	ldr	r0, [pc, #28]	; (77f4 <rssi_reset+0x24>)
    77d8:	f7fc fd12 	bl	4200 <memset>

	rssi_count = 0;
    77dc:	2300      	movs	r3, #0
    77de:	4a06      	ldr	r2, [pc, #24]	; (77f8 <rssi_reset+0x28>)
    77e0:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    77e2:	4a06      	ldr	r2, [pc, #24]	; (77fc <rssi_reset+0x2c>)
    77e4:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    77e6:	2280      	movs	r2, #128	; 0x80
    77e8:	4b05      	ldr	r3, [pc, #20]	; (7800 <rssi_reset+0x30>)
    77ea:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    77ec:	227f      	movs	r2, #127	; 0x7f
    77ee:	4b05      	ldr	r3, [pc, #20]	; (7804 <rssi_reset+0x34>)
    77f0:	701a      	strb	r2, [r3, #0]
    77f2:	bd08      	pop	{r3, pc}
    77f4:	10000bb0 	.word	0x10000bb0
    77f8:	10001996 	.word	0x10001996
    77fc:	10003bd0 	.word	0x10003bd0
    7800:	10001378 	.word	0x10001378
    7804:	1000137a 	.word	0x1000137a

00007808 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    7808:	4a0b      	ldr	r2, [pc, #44]	; (7838 <rssi_add+0x30>)
    780a:	f992 3000 	ldrsb.w	r3, [r2]
    780e:	4283      	cmp	r3, r0
    7810:	bfb8      	it	lt
    7812:	4603      	movlt	r3, r0
    7814:	7013      	strb	r3, [r2, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    7816:	4a09      	ldr	r2, [pc, #36]	; (783c <rssi_add+0x34>)
    7818:	f992 3000 	ldrsb.w	r3, [r2]
    781c:	4283      	cmp	r3, r0
    781e:	bfa8      	it	ge
    7820:	4603      	movge	r3, r0
    7822:	7013      	strb	r3, [r2, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7824:	4a06      	ldr	r2, [pc, #24]	; (7840 <rssi_add+0x38>)
    7826:	6813      	ldr	r3, [r2, #0]
    7828:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    782c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    782e:	4a05      	ldr	r2, [pc, #20]	; (7844 <rssi_add+0x3c>)
    7830:	7813      	ldrb	r3, [r2, #0]
    7832:	3301      	adds	r3, #1
    7834:	7013      	strb	r3, [r2, #0]
    7836:	4770      	bx	lr
    7838:	10001378 	.word	0x10001378
    783c:	1000137a 	.word	0x1000137a
    7840:	10003bd0 	.word	0x10003bd0
    7844:	10001996 	.word	0x10001996

00007848 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    7848:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    784a:	f640 1362 	movw	r3, #2402	; 0x962
    784e:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7852:	bf38      	it	cc
    7854:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7856:	4b0d      	ldr	r3, [pc, #52]	; (788c <rssi_iir_update+0x44>)
	int i = channel - 2402;
    7858:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
	if (rssi_count != 0)
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	b123      	cbz	r3, 786a <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7860:	4a0b      	ldr	r2, [pc, #44]	; (7890 <rssi_iir_update+0x48>)
    7862:	6812      	ldr	r2, [r2, #0]
    7864:	3280      	adds	r2, #128	; 0x80
    7866:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    786a:	24fd      	movs	r4, #253	; 0xfd
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    786c:	4909      	ldr	r1, [pc, #36]	; (7894 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    786e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7872:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7876:	fb04 3302 	mla	r3, r4, r2, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    787a:	f44f 7280 	mov.w	r2, #256	; 0x100
    787e:	3380      	adds	r3, #128	; 0x80
    7880:	fb93 f3f2 	sdiv	r3, r3, r2
    7884:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    7888:	bd10      	pop	{r4, pc}
    788a:	bf00      	nop
    788c:	10001996 	.word	0x10001996
    7890:	10003bd0 	.word	0x10003bd0
    7894:	10000bb0 	.word	0x10000bb0

00007898 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    7898:	f640 1362 	movw	r3, #2402	; 0x962
    789c:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    78a0:	bf38      	it	cc
    78a2:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    78a4:	4b05      	ldr	r3, [pc, #20]	; (78bc <rssi_get_avg+0x24>)
    78a6:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    78aa:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
    78ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    78b2:	3080      	adds	r0, #128	; 0x80
    78b4:	fb90 f0f3 	sdiv	r0, r0, r3
}
    78b8:	b240      	sxtb	r0, r0
    78ba:	4770      	bx	lr
    78bc:	10000bb0 	.word	0x10000bb0

000078c0 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    78c0:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    78c2:	4d13      	ldr	r5, [pc, #76]	; (7910 <cs_threshold_calc_and_set+0x50>)
    78c4:	f995 4000 	ldrsb.w	r4, [r5]
    78c8:	2c00      	cmp	r4, #0
    78ca:	dd05      	ble.n	78d8 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    78cc:	f7ff ffe4 	bl	7898 <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    78d0:	782c      	ldrb	r4, [r5, #0]
    78d2:	3c36      	subs	r4, #54	; 0x36
    78d4:	4404      	add	r4, r0
    78d6:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    78d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    78dc:	4284      	cmp	r4, r0
    78de:	bfb8      	it	lt
    78e0:	4604      	movlt	r4, r0
    78e2:	f06f 0013 	mvn.w	r0, #19
    78e6:	4284      	cmp	r4, r0
    78e8:	bfa8      	it	ge
    78ea:	4604      	movge	r4, r0
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    78ec:	f104 0138 	add.w	r1, r4, #56	; 0x38
    78f0:	f041 0103 	orr.w	r1, r1, #3
    78f4:	b2c9      	uxtb	r1, r1
    78f6:	2006      	movs	r0, #6
    78f8:	f002 f851 	bl	999e <cc2400_set>
	cs_threshold_cur = level;
    78fc:	4b05      	ldr	r3, [pc, #20]	; (7914 <cs_threshold_calc_and_set+0x54>)
	cs_no_squelch = (level <= -120);
    78fe:	f114 0f77 	cmn.w	r4, #119	; 0x77
	cs_threshold_cur = level;
    7902:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    7904:	bfac      	ite	ge
    7906:	2400      	movge	r4, #0
    7908:	2401      	movlt	r4, #1
    790a:	4b03      	ldr	r3, [pc, #12]	; (7918 <cs_threshold_calc_and_set+0x58>)
    790c:	701c      	strb	r4, [r3, #0]
    790e:	bd38      	pop	{r3, r4, r5, pc}
    7910:	10001998 	.word	0x10001998
    7914:	10001a0c 	.word	0x10001a0c
    7918:	10001660 	.word	0x10001660

0000791c <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    791c:	2200      	movs	r2, #0
    791e:	4b07      	ldr	r3, [pc, #28]	; (793c <cs_trigger_enable+0x20>)
    7920:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    7922:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7926:	4b06      	ldr	r3, [pc, #24]	; (7940 <cs_trigger_enable+0x24>)
    7928:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    792a:	2204      	movs	r2, #4
    792c:	4b05      	ldr	r3, [pc, #20]	; (7944 <cs_trigger_enable+0x28>)
    792e:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7930:	4a05      	ldr	r2, [pc, #20]	; (7948 <cs_trigger_enable+0x2c>)
    7932:	6813      	ldr	r3, [r2, #0]
    7934:	f043 0304 	orr.w	r3, r3, #4
    7938:	6013      	str	r3, [r2, #0]
    793a:	4770      	bx	lr
    793c:	10001a0d 	.word	0x10001a0d
    7940:	e000e100 	.word	0xe000e100
    7944:	400280ac 	.word	0x400280ac
    7948:	400280b4 	.word	0x400280b4

0000794c <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    794c:	4a07      	ldr	r2, [pc, #28]	; (796c <cs_trigger_disable+0x20>)
    794e:	6813      	ldr	r3, [r2, #0]
    7950:	f023 0304 	bic.w	r3, r3, #4
    7954:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7956:	2204      	movs	r2, #4
    7958:	4b05      	ldr	r3, [pc, #20]	; (7970 <cs_trigger_disable+0x24>)
    795a:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    795c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7960:	4b04      	ldr	r3, [pc, #16]	; (7974 <cs_trigger_disable+0x28>)
    7962:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    7964:	2200      	movs	r2, #0
    7966:	4b04      	ldr	r3, [pc, #16]	; (7978 <cs_trigger_disable+0x2c>)
    7968:	701a      	strb	r2, [r3, #0]
    796a:	4770      	bx	lr
    796c:	400280b4 	.word	0x400280b4
    7970:	400280ac 	.word	0x400280ac
    7974:	e000e180 	.word	0xe000e180
    7978:	10001a0d 	.word	0x10001a0d

0000797c <cs_reset>:
}

void cs_reset(void)
{
    797c:	b508      	push	{r3, lr}
	cs_trigger_disable();
    797e:	f7ff ffe5 	bl	794c <cs_trigger_disable>

	cs_no_squelch = 0;
    7982:	2200      	movs	r2, #0
    7984:	4b03      	ldr	r3, [pc, #12]	; (7994 <cs_reset+0x18>)
    7986:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7988:	2388      	movs	r3, #136	; 0x88
    798a:	4a03      	ldr	r2, [pc, #12]	; (7998 <cs_reset+0x1c>)
    798c:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    798e:	4a03      	ldr	r2, [pc, #12]	; (799c <cs_reset+0x20>)
    7990:	7013      	strb	r3, [r2, #0]
    7992:	bd08      	pop	{r3, pc}
    7994:	10001660 	.word	0x10001660
    7998:	10001998 	.word	0x10001998
    799c:	10001a0c 	.word	0x10001a0c

000079a0 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    79a0:	2202      	movs	r2, #2
    79a2:	4b0a      	ldr	r3, [pc, #40]	; (79cc <clkn_stop+0x2c>)
    79a4:	601a      	str	r2, [r3, #0]

	clkn = 0;
    79a6:	2300      	movs	r3, #0
    79a8:	4a09      	ldr	r2, [pc, #36]	; (79d0 <clkn_stop+0x30>)
    79aa:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    79ac:	4a09      	ldr	r2, [pc, #36]	; (79d4 <clkn_stop+0x34>)
    79ae:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    79b0:	4a09      	ldr	r2, [pc, #36]	; (79d8 <clkn_stop+0x38>)
    79b2:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    79b4:	4a09      	ldr	r2, [pc, #36]	; (79dc <clkn_stop+0x3c>)
    79b6:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    79b8:	4a09      	ldr	r2, [pc, #36]	; (79e0 <clkn_stop+0x40>)
    79ba:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    79bc:	4a09      	ldr	r2, [pc, #36]	; (79e4 <clkn_stop+0x44>)
    79be:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    79c0:	4a09      	ldr	r2, [pc, #36]	; (79e8 <clkn_stop+0x48>)
    79c2:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    79c4:	4a09      	ldr	r2, [pc, #36]	; (79ec <clkn_stop+0x4c>)
    79c6:	6013      	str	r3, [r2, #0]
    79c8:	4770      	bx	lr
    79ca:	bf00      	nop
    79cc:	40004004 	.word	0x40004004
    79d0:	10001454 	.word	0x10001454
    79d4:	10001370 	.word	0x10001370
    79d8:	10001388 	.word	0x10001388
    79dc:	10001662 	.word	0x10001662
    79e0:	10001994 	.word	0x10001994
    79e4:	10001450 	.word	0x10001450
    79e8:	1000144c 	.word	0x1000144c
    79ec:	100019cc 	.word	0x100019cc

000079f0 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    79f0:	2201      	movs	r2, #1
    79f2:	4b01      	ldr	r3, [pc, #4]	; (79f8 <clkn_start+0x8>)
    79f4:	601a      	str	r2, [r3, #0]
    79f6:	4770      	bx	lr
    79f8:	40004004 	.word	0x40004004

000079fc <clkn_init>:
}

void clkn_init()
{
    79fc:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    79fe:	f7ff ffcf 	bl	79a0 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    7a02:	2204      	movs	r2, #4
    7a04:	4b05      	ldr	r3, [pc, #20]	; (7a1c <clkn_init+0x20>)
    7a06:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    7a08:	f640 4234 	movw	r2, #3124	; 0xc34
    7a0c:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    7a0e:	2203      	movs	r2, #3
    7a10:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    7a12:	2202      	movs	r2, #2
    7a14:	4b02      	ldr	r3, [pc, #8]	; (7a20 <clkn_init+0x24>)
    7a16:	601a      	str	r2, [r3, #0]
    7a18:	bd08      	pop	{r3, pc}
    7a1a:	bf00      	nop
    7a1c:	4000400c 	.word	0x4000400c
    7a20:	e000e100 	.word	0xe000e100

00007a24 <clkn_disable>:
}

// totally disable clkn and timer0
void clkn_disable(void) {
    7a24:	b508      	push	{r3, lr}
	clkn_stop();
    7a26:	f7ff ffbb 	bl	79a0 <clkn_stop>
	ICER0 = ICER0_ICE_TIMER0;
    7a2a:	2202      	movs	r2, #2
    7a2c:	4b01      	ldr	r3, [pc, #4]	; (7a34 <clkn_disable+0x10>)
    7a2e:	601a      	str	r2, [r3, #0]
    7a30:	bd08      	pop	{r3, pc}
    7a32:	bf00      	nop
    7a34:	e000e180 	.word	0xe000e180

00007a38 <dma_poweron>:
dma_lli le_dma_lli[11]; // 11 x 4 bytes


void dma_poweron(void) {
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 616
	PCONP |= PCONP_PCGPDMA;
    7a38:	4a11      	ldr	r2, [pc, #68]	; (7a80 <dma_poweron+0x48>)
    7a3a:	6813      	ldr	r3, [r2, #0]
    7a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    7a40:	6013      	str	r3, [r2, #0]

	// enable DMA interrupts
	ISER0 = ISER0_ISE_DMA;
    7a42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7a46:	4b0f      	ldr	r3, [pc, #60]	; (7a84 <dma_poweron+0x4c>)
    7a48:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7a4a:	2300      	movs	r3, #0
    7a4c:	4a0e      	ldr	r2, [pc, #56]	; (7a88 <dma_poweron+0x50>)
    7a4e:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7a50:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7a52:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    7a54:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    7a56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7a5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7a5e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    7a66:	23ff      	movs	r3, #255	; 0xff
    7a68:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7a6c:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7a6e:	6093      	str	r3, [r2, #8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7a70:	2201      	movs	r2, #1
    7a72:	4b06      	ldr	r3, [pc, #24]	; (7a8c <dma_poweron+0x54>)
    7a74:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7a76:	681a      	ldr	r2, [r3, #0]
    7a78:	07d2      	lsls	r2, r2, #31
    7a7a:	d5fc      	bpl.n	7a76 <dma_poweron+0x3e>
}
    7a7c:	4770      	bx	lr
    7a7e:	bf00      	nop
    7a80:	400fc0c4 	.word	0x400fc0c4
    7a84:	e000e100 	.word	0xe000e100
    7a88:	50004110 	.word	0x50004110
    7a8c:	50004030 	.word	0x50004030

00007a90 <dma_init_rx_symbols>:
void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
	DMACIntErrClr  = 1 << channel;
}

void dma_init_rx_symbols(void) {
    7a90:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    7a92:	2301      	movs	r3, #1
    7a94:	4a13      	ldr	r2, [pc, #76]	; (7ae4 <dma_init_rx_symbols+0x54>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    7a96:	4814      	ldr	r0, [pc, #80]	; (7ae8 <dma_init_rx_symbols+0x58>)
	DMACIntTCClear = 1 << channel;
    7a98:	6013      	str	r3, [r2, #0]
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7a9a:	4c14      	ldr	r4, [pc, #80]	; (7aec <dma_init_rx_symbols+0x5c>)
	DMACIntErrClr  = 1 << channel;
    7a9c:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7a9e:	4914      	ldr	r1, [pc, #80]	; (7af0 <dma_init_rx_symbols+0x60>)
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7aa0:	4b14      	ldr	r3, [pc, #80]	; (7af4 <dma_init_rx_symbols+0x64>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7aa2:	4a15      	ldr	r2, [pc, #84]	; (7af8 <dma_init_rx_symbols+0x68>)
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7aa4:	4d15      	ldr	r5, [pc, #84]	; (7afc <dma_init_rx_symbols+0x6c>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7aa6:	6014      	str	r4, [r2, #0]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7aa8:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7aaa:	6051      	str	r1, [r2, #4]
	rx_dma_lli1.control = (DMA_SIZE) |
    7aac:	60d0      	str	r0, [r2, #12]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7aae:	609a      	str	r2, [r3, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7ab0:	4a13      	ldr	r2, [pc, #76]	; (7b00 <dma_init_rx_symbols+0x70>)
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7ab2:	605d      	str	r5, [r3, #4]
	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7ab4:	601c      	str	r4, [r3, #0]
	rx_dma_lli2.control = (DMA_SIZE) |
    7ab6:	60d8      	str	r0, [r3, #12]
	DMACC0SrcAddr = rx_dma_lli1.src;
    7ab8:	6014      	str	r4, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    7aba:	6051      	str	r1, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7abc:	6093      	str	r3, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    7abe:	f24d 0206 	movw	r2, #53254	; 0xd006
	DMACC0Control = rx_dma_lli1.control;
    7ac2:	4b10      	ldr	r3, [pc, #64]	; (7b04 <dma_init_rx_symbols+0x74>)
    7ac4:	6018      	str	r0, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7ac6:	605a      	str	r2, [r3, #4]
	               | (0x2 << 11)       /* peripheral to memory */
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */

	rx_tc = 0;
    7ac8:	2200      	movs	r2, #0
    7aca:	480f      	ldr	r0, [pc, #60]	; (7b08 <dma_init_rx_symbols+0x78>)
    7acc:	6002      	str	r2, [r0, #0]
	rx_err = 0;
    7ace:	480f      	ldr	r0, [pc, #60]	; (7b0c <dma_init_rx_symbols+0x7c>)
    7ad0:	6002      	str	r2, [r0, #0]

	active_rxbuf = &rxbuf1[0];
    7ad2:	4a0f      	ldr	r2, [pc, #60]	; (7b10 <dma_init_rx_symbols+0x80>)
    7ad4:	6011      	str	r1, [r2, #0]
	idle_rxbuf = &rxbuf2[0];
    7ad6:	4a0f      	ldr	r2, [pc, #60]	; (7b14 <dma_init_rx_symbols+0x84>)
    7ad8:	6015      	str	r5, [r2, #0]

	// enable channel
	DMACC0Config |= 1;
    7ada:	685a      	ldr	r2, [r3, #4]
    7adc:	f042 0201 	orr.w	r2, r2, #1
    7ae0:	605a      	str	r2, [r3, #4]
	DMACC0Config = DIO_SSP_SRC
    7ae2:	bd30      	pop	{r4, r5, pc}
    7ae4:	50004008 	.word	0x50004008
    7ae8:	88009032 	.word	0x88009032
    7aec:	40030008 	.word	0x40030008
    7af0:	100019d5 	.word	0x100019d5
    7af4:	10003c84 	.word	0x10003c84
    7af8:	10003c94 	.word	0x10003c94
    7afc:	10001999 	.word	0x10001999
    7b00:	50004100 	.word	0x50004100
    7b04:	5000410c 	.word	0x5000410c
    7b08:	10001374 	.word	0x10001374
    7b0c:	10001a08 	.word	0x10001a08
    7b10:	10001494 	.word	0x10001494
    7b14:	10001670 	.word	0x10001670

00007b18 <dma_init_le>:
}

void dma_init_le(void) {
    7b18:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    7b1a:	2301      	movs	r3, #1
    7b1c:	4a13      	ldr	r2, [pc, #76]	; (7b6c <dma_init_le+0x54>)
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7b1e:	4d14      	ldr	r5, [pc, #80]	; (7b70 <dma_init_le+0x58>)
	DMACIntTCClear = 1 << channel;
    7b20:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7b22:	6093      	str	r3, [r2, #8]
	for (i = 0; i < 11; ++i) {
    7b24:	2200      	movs	r2, #0
    7b26:	4b13      	ldr	r3, [pc, #76]	; (7b74 <dma_init_le+0x5c>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7b28:	4c13      	ldr	r4, [pc, #76]	; (7b78 <dma_init_le+0x60>)
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7b2a:	4914      	ldr	r1, [pc, #80]	; (7b7c <dma_init_le+0x64>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7b2c:	eb04 0082 	add.w	r0, r4, r2, lsl #2
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7b30:	2a0a      	cmp	r2, #10
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7b32:	f843 0c0c 	str.w	r0, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7b36:	bf14      	ite	ne
    7b38:	4618      	movne	r0, r3
    7b3a:	2000      	moveq	r0, #0
	for (i = 0; i < 11; ++i) {
    7b3c:	3201      	adds	r2, #1
    7b3e:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7b40:	f843 5c10 	str.w	r5, [r3, #-16]
		le_dma_lli[i].control = 4 |
    7b44:	e903 0003 	stmdb	r3, {r0, r1}
    7b48:	f103 0310 	add.w	r3, r3, #16
	for (i = 0; i < 11; ++i) {
    7b4c:	d1ee      	bne.n	7b2c <dma_init_le+0x14>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7b4e:	4b0c      	ldr	r3, [pc, #48]	; (7b80 <dma_init_le+0x68>)
    7b50:	4a0c      	ldr	r2, [pc, #48]	; (7b84 <dma_init_le+0x6c>)
    7b52:	6819      	ldr	r1, [r3, #0]
    7b54:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7b56:	6859      	ldr	r1, [r3, #4]
    7b58:	6051      	str	r1, [r2, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7b5a:	6899      	ldr	r1, [r3, #8]
    7b5c:	6091      	str	r1, [r2, #8]
	DMACC0Control = le_dma_lli[0].control;
    7b5e:	68da      	ldr	r2, [r3, #12]
    7b60:	4b09      	ldr	r3, [pc, #36]	; (7b88 <dma_init_le+0x70>)
    7b62:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7b64:	f24d 0206 	movw	r2, #53254	; 0xd006
    7b68:	605a      	str	r2, [r3, #4]
    7b6a:	bd30      	pop	{r4, r5, pc}
    7b6c:	50004008 	.word	0x50004008
    7b70:	40030008 	.word	0x40030008
    7b74:	10003be4 	.word	0x10003be4
    7b78:	100019d5 	.word	0x100019d5
    7b7c:	88001004 	.word	0x88001004
    7b80:	10003bd4 	.word	0x10003bd4
    7b84:	50004100 	.word	0x50004100
    7b88:	5000410c 	.word	0x5000410c

00007b8c <dio_ssp_start>:
}

void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b90:	4b0a      	ldr	r3, [pc, #40]	; (7bbc <dio_ssp_start+0x30>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7b92:	490b      	ldr	r1, [pc, #44]	; (7bc0 <dio_ssp_start+0x34>)
	DIO_SSEL_SET;
    7b94:	601a      	str	r2, [r3, #0]
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7b96:	680b      	ldr	r3, [r1, #0]
    7b98:	f043 0301 	orr.w	r3, r3, #1
    7b9c:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7b9e:	f851 3c20 	ldr.w	r3, [r1, #-32]
    7ba2:	f043 0302 	orr.w	r3, r3, #2
    7ba6:	f841 3c20 	str.w	r3, [r1, #-32]

	// enable channel
	DMACC0Config |= 1;
    7baa:	4906      	ldr	r1, [pc, #24]	; (7bc4 <dio_ssp_start+0x38>)
    7bac:	680b      	ldr	r3, [r1, #0]
    7bae:	f043 0301 	orr.w	r3, r3, #1
    7bb2:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7bb4:	4b04      	ldr	r3, [pc, #16]	; (7bc8 <dio_ssp_start+0x3c>)
    7bb6:	601a      	str	r2, [r3, #0]
    7bb8:	4770      	bx	lr
    7bba:	bf00      	nop
    7bbc:	2009c098 	.word	0x2009c098
    7bc0:	40030024 	.word	0x40030024
    7bc4:	50004110 	.word	0x50004110
    7bc8:	2009c09c 	.word	0x2009c09c

00007bcc <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7bd0:	4b0a      	ldr	r3, [pc, #40]	; (7bfc <dio_ssp_stop+0x30>)
    7bd2:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP ; disable DMA channel
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7bd4:	4a0a      	ldr	r2, [pc, #40]	; (7c00 <dio_ssp_stop+0x34>)
    7bd6:	6813      	ldr	r3, [r2, #0]
    7bd8:	f023 0301 	bic.w	r3, r3, #1
    7bdc:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7bde:	f852 3c20 	ldr.w	r3, [r2, #-32]
    7be2:	f023 0302 	bic.w	r3, r3, #2
    7be6:	f842 3c20 	str.w	r3, [r2, #-32]
	DMACC0Config = 0;
    7bea:	2200      	movs	r2, #0
    7bec:	4b05      	ldr	r3, [pc, #20]	; (7c04 <dio_ssp_stop+0x38>)
    7bee:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 1 << channel;
    7bf0:	2301      	movs	r3, #1
    7bf2:	4a05      	ldr	r2, [pc, #20]	; (7c08 <dio_ssp_stop+0x3c>)
    7bf4:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7bf6:	6093      	str	r3, [r2, #8]
    7bf8:	4770      	bx	lr
    7bfa:	bf00      	nop
    7bfc:	2009c098 	.word	0x2009c098
    7c00:	40030024 	.word	0x40030024
    7c04:	50004110 	.word	0x50004110
    7c08:	50004008 	.word	0x50004008

00007c0c <le_dma_init>:
			DMACIntErrClr = (1 << 0);
		}
	}
}

static void le_dma_init(void) {
    7c0c:	b530      	push	{r4, r5, lr}
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7c0e:	4b0c      	ldr	r3, [pc, #48]	; (7c40 <le_dma_init+0x34>)
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7c10:	490c      	ldr	r1, [pc, #48]	; (7c44 <le_dma_init+0x38>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    7c12:	4a0d      	ldr	r2, [pc, #52]	; (7c48 <le_dma_init+0x3c>)
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7c14:	480d      	ldr	r0, [pc, #52]	; (7c4c <le_dma_init+0x40>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7c16:	f103 0410 	add.w	r4, r3, #16
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7c1a:	1c4d      	adds	r5, r1, #1
		le_dma_lli[i].control = 1 |
    7c1c:	60da      	str	r2, [r3, #12]
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7c1e:	6018      	str	r0, [r3, #0]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7c20:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7c22:	609c      	str	r4, [r3, #8]
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7c24:	6118      	str	r0, [r3, #16]
		le_dma_lli[i].control = 1 |
    7c26:	61da      	str	r2, [r3, #28]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7c28:	615d      	str	r5, [r3, #20]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7c2a:	619b      	str	r3, [r3, #24]
				(0 << 21) |        // destination width 8 bits
				DMACCxControl_I;   // terminal count interrupt enable
	}

	// configure DMA channel 0
	DMACC0SrcAddr = le_dma_lli[0].src;
    7c2c:	4b08      	ldr	r3, [pc, #32]	; (7c50 <le_dma_init+0x44>)
    7c2e:	6018      	str	r0, [r3, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7c30:	6059      	str	r1, [r3, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7c32:	609c      	str	r4, [r3, #8]
	DMACC0Control = le_dma_lli[0].control;
    7c34:	60da      	str	r2, [r3, #12]
	DMACC0Config =
    7c36:	f24d 0206 	movw	r2, #53254	; 0xd006
    7c3a:	611a      	str	r2, [r3, #16]
    7c3c:	bd30      	pop	{r4, r5, pc}
    7c3e:	bf00      	nop
    7c40:	10000c50 	.word	0x10000c50
    7c44:	10003ce4 	.word	0x10003ce4
    7c48:	80000001 	.word	0x80000001
    7c4c:	40030008 	.word	0x40030008
    7c50:	50004100 	.word	0x50004100

00007c54 <timer1_set_match>:
	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
}

static void timer1_set_match(uint32_t match) {
	T1MR0 = match;
    7c54:	4b03      	ldr	r3, [pc, #12]	; (7c64 <timer1_set_match+0x10>)
	T1MCR |= TMCR_MR0I;
    7c56:	4a04      	ldr	r2, [pc, #16]	; (7c68 <timer1_set_match+0x14>)
	T1MR0 = match;
    7c58:	6018      	str	r0, [r3, #0]
	T1MCR |= TMCR_MR0I;
    7c5a:	6813      	ldr	r3, [r2, #0]
    7c5c:	f043 0301 	orr.w	r3, r3, #1
    7c60:	6013      	str	r3, [r2, #0]
    7c62:	4770      	bx	lr
    7c64:	40008018 	.word	0x40008018
    7c68:	40008014 	.word	0x40008014

00007c6c <timer1_wait_fs_lock>:
static void timer1_clear_match(void) {
	T1MCR &= ~TMCR_MR0I;
}

static void timer1_wait_fs_lock(void) {
	T1MR2 = NOW + USEC(3);
    7c6c:	4b05      	ldr	r3, [pc, #20]	; (7c84 <timer1_wait_fs_lock+0x18>)
    7c6e:	4a06      	ldr	r2, [pc, #24]	; (7c88 <timer1_wait_fs_lock+0x1c>)
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	331e      	adds	r3, #30
    7c74:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR2I;
    7c76:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    7c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c7e:	f842 3c0c 	str.w	r3, [r2, #-12]
    7c82:	4770      	bx	lr
    7c84:	40008008 	.word	0x40008008
    7c88:	40008020 	.word	0x40008020

00007c8c <extract_field>:
	f->status = 0;

	return 1;
}

static unsigned extract_field(le_rx_t *buf, size_t offset, unsigned size) {
    7c8c:	b530      	push	{r4, r5, lr}
	unsigned i, ret = 0;
    7c8e:	2400      	movs	r4, #0

	// this could just be replaced by memcpy... right?
	for (i = 0; i < size; ++i)
    7c90:	4623      	mov	r3, r4
		ret |= buf->data[offset + i] << (i*8);
    7c92:	4401      	add	r1, r0
	for (i = 0; i < size; ++i)
    7c94:	4293      	cmp	r3, r2
    7c96:	d101      	bne.n	7c9c <extract_field+0x10>

	return ret;
}
    7c98:	4620      	mov	r0, r4
    7c9a:	bd30      	pop	{r4, r5, pc}
		ret |= buf->data[offset + i] << (i*8);
    7c9c:	5ccd      	ldrb	r5, [r1, r3]
    7c9e:	00d8      	lsls	r0, r3, #3
    7ca0:	4085      	lsls	r5, r0
    7ca2:	432c      	orrs	r4, r5
	for (i = 0; i < size; ++i)
    7ca4:	3301      	adds	r3, #1
    7ca6:	e7f5      	b.n	7c94 <extract_field+0x8>

00007ca8 <bd_addr_cmp>:
		}
	}
}

// compare a BD addr against target with mask
static int bd_addr_cmp(uint8_t *bd_addr) {
    7ca8:	b510      	push	{r4, lr}
    7caa:	4a08      	ldr	r2, [pc, #32]	; (7ccc <bd_addr_cmp+0x24>)
    7cac:	1e43      	subs	r3, r0, #1
    7cae:	3005      	adds	r0, #5
	unsigned i;
	for (i = 0; i < 6; ++i)
		if ((bd_addr[i] & le.target_mask[i]) != le.target[i])
    7cb0:	79d4      	ldrb	r4, [r2, #7]
    7cb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    7cb6:	4021      	ands	r1, r4
    7cb8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    7cbc:	428c      	cmp	r4, r1
    7cbe:	d103      	bne.n	7cc8 <bd_addr_cmp+0x20>
	for (i = 0; i < 6; ++i)
    7cc0:	4283      	cmp	r3, r0
    7cc2:	d1f5      	bne.n	7cb0 <bd_addr_cmp+0x8>
			return 0;
	return 1;
    7cc4:	2001      	movs	r0, #1
    7cc6:	bd10      	pop	{r4, pc}
			return 0;
    7cc8:	2000      	movs	r0, #0
}
    7cca:	bd10      	pop	{r4, pc}
    7ccc:	10000487 	.word	0x10000487

00007cd0 <reset_conn>:
static void reset_conn(void) {
    7cd0:	b510      	push	{r4, lr}
	memset(&conn, 0, sizeof(conn));
    7cd2:	4c05      	ldr	r4, [pc, #20]	; (7ce8 <reset_conn+0x18>)
    7cd4:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    7cd8:	2100      	movs	r1, #0
    7cda:	f104 0020 	add.w	r0, r4, #32
    7cde:	f7fc fa8f 	bl	4200 <memset>
	conn.access_address = ADVERTISING_AA;
    7ce2:	4b02      	ldr	r3, [pc, #8]	; (7cec <reset_conn+0x1c>)
    7ce4:	6223      	str	r3, [r4, #32]
    7ce6:	bd10      	pop	{r4, pc}
    7ce8:	10000c50 	.word	0x10000c50
    7cec:	8e89bed6 	.word	0x8e89bed6

00007cf0 <buffer_get>:
static le_rx_t *buffer_get(void) {
    7cf0:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    7cf2:	2300      	movs	r3, #0
    7cf4:	f44f 7592 	mov.w	r5, #292	; 0x124
    7cf8:	4c12      	ldr	r4, [pc, #72]	; (7d44 <buffer_get+0x54>)
    7cfa:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
    7cfe:	fb05 f203 	mul.w	r2, r5, r3
    7d02:	188e      	adds	r6, r1, r2
		if (le_buffer_pool[i].available) {
    7d04:	f8d6 0118 	ldr.w	r0, [r6, #280]	; 0x118
    7d08:	b1b8      	cbz	r0, 7d3a <buffer_get+0x4a>
			le_buffer_pool[i].available = 0;
    7d0a:	2500      	movs	r5, #0
    7d0c:	4414      	add	r4, r2
    7d0e:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
	buf->pos = 0;
    7d12:	f8c4 52f0 	str.w	r5, [r4, #752]	; 0x2f0
	buf->size = 0;
    7d16:	f8c4 52ec 	str.w	r5, [r4, #748]	; 0x2ec
	memset(buf->data, 0, sizeof(buf->data));
    7d1a:	f44f 7282 	mov.w	r2, #260	; 0x104
    7d1e:	4629      	mov	r1, r5
    7d20:	4630      	mov	r0, r6
    7d22:	f7fc fa6d 	bl	4200 <memset>
	buf->rssi_min = INT8_MAX;
    7d26:	237f      	movs	r3, #127	; 0x7f
    7d28:	f884 3304 	strb.w	r3, [r4, #772]	; 0x304
	buf->rssi_max = INT8_MIN;
    7d2c:	2380      	movs	r3, #128	; 0x80
	buf->rssi_sum = 0;
    7d2e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
	buf->rssi_max = INT8_MIN;
    7d32:	f884 3305 	strb.w	r3, [r4, #773]	; 0x305
	buf->rssi_sum = 0;
    7d36:	4630      	mov	r0, r6
    7d38:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    7d3a:	3301      	adds	r3, #1
    7d3c:	2b04      	cmp	r3, #4
    7d3e:	d1de      	bne.n	7cfe <buffer_get+0xe>
}
    7d40:	bd70      	pop	{r4, r5, r6, pc}
    7d42:	bf00      	nop
    7d44:	10000c50 	.word	0x10000c50

00007d48 <le_cc2400_init_rf>:
static void le_cc2400_init_rf(void) {
    7d48:	b510      	push	{r4, lr}
	uint32_t sync = rbit(conn.access_address);
    7d4a:	4b1b      	ldr	r3, [pc, #108]	; (7db8 <le_cc2400_init_rf+0x70>)
    7d4c:	6a18      	ldr	r0, [r3, #32]
    7d4e:	f001 fd2f 	bl	97b0 <rbit>
    7d52:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7ffe);
    7d54:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    7d58:	200d      	movs	r0, #13
    7d5a:	f001 fe20 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7d5e:	f642 3122 	movw	r1, #11042	; 0x2b22
    7d62:	2012      	movs	r0, #18
    7d64:	f001 fe1b 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    7d68:	f241 214b 	movw	r1, #4683	; 0x124b
    7d6c:	2014      	movs	r0, #20
    7d6e:	f001 fe16 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    7d72:	f244 41e1 	movw	r1, #17633	; 0x44e1
    7d76:	2020      	movs	r0, #32
    7d78:	f001 fe11 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    7d7c:	b2a1      	uxth	r1, r4
    7d7e:	202c      	movs	r0, #44	; 0x2c
    7d80:	f001 fe0d 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    7d84:	0c21      	lsrs	r1, r4, #16
    7d86:	202d      	movs	r0, #45	; 0x2d
    7d88:	f001 fe09 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   rf_channel - 1); // 1 MHz IF
    7d8c:	4b0b      	ldr	r3, [pc, #44]	; (7dbc <le_cc2400_init_rf+0x74>)
    7d8e:	2002      	movs	r0, #2
    7d90:	8819      	ldrh	r1, [r3, #0]
    7d92:	3901      	subs	r1, #1
    7d94:	b289      	uxth	r1, r1
    7d96:	f001 fe02 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    7d9a:	2140      	movs	r1, #64	; 0x40
    7d9c:	2003      	movs	r0, #3
    7d9e:	f001 fdfe 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7da2:	f001 fe97 	bl	9ad4 <cc2400_status>
    7da6:	0643      	lsls	r3, r0, #25
    7da8:	d5fb      	bpl.n	7da2 <le_cc2400_init_rf+0x5a>
	cc2400_strobe(SFSON);
    7daa:	2061      	movs	r0, #97	; 0x61
    7dac:	f001 fe99 	bl	9ae2 <cc2400_strobe>
}
    7db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer1_wait_fs_lock();
    7db4:	f7ff bf5a 	b.w	7c6c <timer1_wait_fs_lock>
    7db8:	10000c50 	.word	0x10000c50
    7dbc:	10003cd4 	.word	0x10003cd4

00007dc0 <change_channel>:
static void change_channel(void) {
    7dc0:	b570      	push	{r4, r5, r6, lr}
	cc2400_strobe(SRFOFF);
    7dc2:	2064      	movs	r0, #100	; 0x64
    7dc4:	f001 fe8d 	bl	9ae2 <cc2400_strobe>
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7dc8:	4a28      	ldr	r2, [pc, #160]	; (7e6c <change_channel+0xac>)
    7dca:	6813      	ldr	r3, [r2, #0]
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7dcc:	3a1c      	subs	r2, #28
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7dce:	f023 0301 	bic.w	r3, r3, #1
    7dd2:	61d3      	str	r3, [r2, #28]
	while (SSP1SR & SSPSR_RNE) {
    7dd4:	4b26      	ldr	r3, [pc, #152]	; (7e70 <change_channel+0xb0>)
    7dd6:	681c      	ldr	r4, [r3, #0]
    7dd8:	f014 0404 	ands.w	r4, r4, #4
    7ddc:	d130      	bne.n	7e40 <change_channel+0x80>
	buffer_clear(current_rxbuf);
    7dde:	4d25      	ldr	r5, [pc, #148]	; (7e74 <change_channel+0xb4>)
	memset(buf->data, 0, sizeof(buf->data));
    7de0:	f44f 7282 	mov.w	r2, #260	; 0x104
	buffer_clear(current_rxbuf);
    7de4:	f8d5 6678 	ldr.w	r6, [r5, #1656]	; 0x678
	memset(buf->data, 0, sizeof(buf->data));
    7de8:	4621      	mov	r1, r4
	buf->pos = 0;
    7dea:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	buf->size = 0;
    7dee:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
	memset(buf->data, 0, sizeof(buf->data));
    7df2:	4630      	mov	r0, r6
    7df4:	f7fc fa04 	bl	4200 <memset>
	buf->rssi_min = INT8_MAX;
    7df8:	237f      	movs	r3, #127	; 0x7f
    7dfa:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
	buf->rssi_max = INT8_MIN;
    7dfe:	2380      	movs	r3, #128	; 0x80
	buf->rssi_sum = 0;
    7e00:	f8c6 4120 	str.w	r4, [r6, #288]	; 0x120
	buf->rssi_max = INT8_MIN;
    7e04:	f886 311d 	strb.w	r3, [r6, #285]	; 0x11d
	le_dma_init();
    7e08:	f7ff ff00 	bl	7c0c <le_dma_init>
	dio_ssp_start();
    7e0c:	f7ff febe 	bl	7b8c <dio_ssp_start>
	if (conn.access_address == ADVERTISING_AA) {
    7e10:	6a2a      	ldr	r2, [r5, #32]
    7e12:	4b19      	ldr	r3, [pc, #100]	; (7e78 <change_channel+0xb8>)
    7e14:	429a      	cmp	r2, r3
    7e16:	d117      	bne.n	7e48 <change_channel+0x88>
		switch (le_adv_channel) {
    7e18:	f640 127a 	movw	r2, #2426	; 0x97a
    7e1c:	4b17      	ldr	r3, [pc, #92]	; (7e7c <change_channel+0xbc>)
    7e1e:	881b      	ldrh	r3, [r3, #0]
    7e20:	b29b      	uxth	r3, r3
    7e22:	4293      	cmp	r3, r2
    7e24:	d00e      	beq.n	7e44 <change_channel+0x84>
			case 2402: channel_idx = 37; break;
    7e26:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    7e2a:	bf0c      	ite	eq
    7e2c:	2027      	moveq	r0, #39	; 0x27
    7e2e:	2025      	movne	r0, #37	; 0x25
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7e30:	f7ff fb00 	bl	7434 <btle_channel_index_to_phys>
}
    7e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7e38:	4b11      	ldr	r3, [pc, #68]	; (7e80 <change_channel+0xc0>)
    7e3a:	8018      	strh	r0, [r3, #0]
	le_cc2400_init_rf();
    7e3c:	f7ff bf84 	b.w	7d48 <le_cc2400_init_rf>
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7e40:	6811      	ldr	r1, [r2, #0]
    7e42:	e7c8      	b.n	7dd6 <change_channel+0x16>
			case 2426: channel_idx = 38; break;
    7e44:	2026      	movs	r0, #38	; 0x26
    7e46:	e7f3      	b.n	7e30 <change_channel+0x70>
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7e48:	2225      	movs	r2, #37	; 0x25
    7e4a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7e4e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7e52:	f105 0140 	add.w	r1, r5, #64	; 0x40
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7e56:	4403      	add	r3, r0
    7e58:	fb93 f0f2 	sdiv	r0, r3, r2
    7e5c:	fb02 3010 	mls	r0, r2, r0, r3
    7e60:	b2c0      	uxtb	r0, r0
    7e62:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7e66:	f7ff fbc7 	bl	75f8 <le_map_channel>
    7e6a:	e7e1      	b.n	7e30 <change_channel+0x70>
    7e6c:	40030024 	.word	0x40030024
    7e70:	4003000c 	.word	0x4003000c
    7e74:	10000c50 	.word	0x10000c50
    7e78:	8e89bed6 	.word	0x8e89bed6
    7e7c:	100004a0 	.word	0x100004a0
    7e80:	10003cd4 	.word	0x10003cd4

00007e84 <finish_conn_event>:
static void finish_conn_event(void) {
    7e84:	b538      	push	{r3, r4, r5, lr}
    debug_printf("finish_conn_event\n");
    7e86:	482b      	ldr	r0, [pc, #172]	; (7f34 <finish_conn_event+0xb0>)
    7e88:	f001 f93c 	bl	9104 <debug_printf>
	if (conn_event.num_packets == 2) {
    7e8c:	4a2a      	ldr	r2, [pc, #168]	; (7f38 <finish_conn_event+0xb4>)
    7e8e:	4b2b      	ldr	r3, [pc, #172]	; (7f3c <finish_conn_event+0xb8>)
    7e90:	6850      	ldr	r0, [r2, #4]
    7e92:	2802      	cmp	r0, #2
    7e94:	d106      	bne.n	7ea4 <finish_conn_event+0x20>
		last_anchor = conn_event.anchor;
    7e96:	6814      	ldr	r4, [r2, #0]
		conn.anchor_set = 1;
    7e98:	2101      	movs	r1, #1
		conn.last_anchor = last_anchor;
    7e9a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		conn.anchor_set = 1;
    7e9e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7ea2:	e01e      	b.n	7ee2 <finish_conn_event+0x5e>
	else if (conn_event.num_packets == 1 && conn.anchor_set) {
    7ea4:	2801      	cmp	r0, #1
    7ea6:	d10b      	bne.n	7ec0 <finish_conn_event+0x3c>
    7ea8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7eac:	b141      	cbz	r1, 7ec0 <finish_conn_event+0x3c>
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    7eae:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    7eb2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
		uint32_t delta = estimated_anchor - conn_event.anchor;
    7eb4:	6814      	ldr	r4, [r2, #0]
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    7eb6:	4429      	add	r1, r5
		delta += ANCHOR_EPSILON;
    7eb8:	311e      	adds	r1, #30
    7eba:	1b09      	subs	r1, r1, r4
		if (delta < 2 * ANCHOR_EPSILON) {
    7ebc:	293b      	cmp	r1, #59	; 0x3b
    7ebe:	d9eb      	bls.n	7e98 <finish_conn_event+0x14>
	else if (conn.anchor_set) {
    7ec0:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7ec4:	b939      	cbnz	r1, 7ed6 <finish_conn_event+0x52>
		conn.last_anchor = conn_event.anchor;
    7ec6:	6811      	ldr	r1, [r2, #0]
    7ec8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		conn.last_packet_ts = NOW; // FIXME gross hack
    7ecc:	491c      	ldr	r1, [pc, #112]	; (7f40 <finish_conn_event+0xbc>)
    7ece:	6809      	ldr	r1, [r1, #0]
    7ed0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    7ed4:	e005      	b.n	7ee2 <finish_conn_event+0x5e>
		conn.last_anchor += conn.conn_interval;
    7ed6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    7eda:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    7edc:	4421      	add	r1, r4
    7ede:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7ee2:	4c17      	ldr	r4, [pc, #92]	; (7f40 <finish_conn_event+0xbc>)
	if (conn_event.num_packets > 0) {
    7ee4:	b110      	cbz	r0, 7eec <finish_conn_event+0x68>
		conn.last_packet_ts = NOW;
    7ee6:	6821      	ldr	r1, [r4, #0]
    7ee8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	conn_event.num_packets = 0;
    7eec:	2100      	movs	r1, #0
    7eee:	6051      	str	r1, [r2, #4]
	conn_event.opened = 0;
    7ef0:	6091      	str	r1, [r2, #8]
	++conn.conn_event_counter;
    7ef2:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    7ef6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
	++conn.conn_event_counter;
    7efa:	3201      	adds	r2, #1
    7efc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    7f00:	6822      	ldr	r2, [r4, #0]
    7f02:	1a12      	subs	r2, r2, r0
    7f04:	6b58      	ldr	r0, [r3, #52]	; 0x34
    7f06:	4282      	cmp	r2, r0
    7f08:	d905      	bls.n	7f16 <finish_conn_event+0x92>
		reset_conn();
    7f0a:	f7ff fee1 	bl	7cd0 <reset_conn>
}
    7f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		change_channel();
    7f12:	f7ff bf55 	b.w	7dc0 <change_channel>
	else if (cancel_follow) {
    7f16:	4a0b      	ldr	r2, [pc, #44]	; (7f44 <finish_conn_event+0xc0>)
    7f18:	6810      	ldr	r0, [r2, #0]
    7f1a:	b108      	cbz	r0, 7f20 <finish_conn_event+0x9c>
		cancel_follow = 0;
    7f1c:	6011      	str	r1, [r2, #0]
    7f1e:	e7f4      	b.n	7f0a <finish_conn_event+0x86>
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7f20:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    7f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f26:	4418      	add	r0, r3
    7f28:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
}
    7f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7f30:	f7ff be90 	b.w	7c54 <timer1_set_match>
    7f34:	0000bc35 	.word	0x0000bc35
    7f38:	10003cd8 	.word	0x10003cd8
    7f3c:	10000c50 	.word	0x10000c50
    7f40:	40008008 	.word	0x40008008
    7f44:	10000a70 	.word	0x10000a70

00007f48 <le_DMA_IRQHandler>:
void le_DMA_IRQHandler(void) {
    7f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    debug_printf("le_DMA_IRQHandler\n");
    7f4a:	4869      	ldr	r0, [pc, #420]	; (80f0 <le_DMA_IRQHandler+0x1a8>)
    7f4c:	f001 f8da 	bl	9104 <debug_printf>
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7f50:	4d68      	ldr	r5, [pc, #416]	; (80f4 <le_DMA_IRQHandler+0x1ac>)
	if (DMACIntStat & (1 << 0)) {
    7f52:	4b69      	ldr	r3, [pc, #420]	; (80f8 <le_DMA_IRQHandler+0x1b0>)
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7f54:	682f      	ldr	r7, [r5, #0]
	if (DMACIntStat & (1 << 0)) {
    7f56:	681b      	ldr	r3, [r3, #0]
    7f58:	07de      	lsls	r6, r3, #31
    7f5a:	d549      	bpl.n	7ff0 <le_DMA_IRQHandler+0xa8>
		if (DMACIntTCStat & (1 << 0)) {
    7f5c:	4b67      	ldr	r3, [pc, #412]	; (80fc <le_DMA_IRQHandler+0x1b4>)
    7f5e:	681b      	ldr	r3, [r3, #0]
    7f60:	07dc      	lsls	r4, r3, #31
    7f62:	d53e      	bpl.n	7fe2 <le_DMA_IRQHandler+0x9a>
			DMACIntTCClear = (1 << 0);
    7f64:	2301      	movs	r3, #1
    7f66:	4e66      	ldr	r6, [pc, #408]	; (8100 <le_DMA_IRQHandler+0x1b8>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7f68:	2006      	movs	r0, #6
			DMACIntTCClear = (1 << 0);
    7f6a:	6033      	str	r3, [r6, #0]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7f6c:	f001 fd0e 	bl	998c <cc2400_get>
			current_rxbuf->rssi_sum += rssi;
    7f70:	4c64      	ldr	r4, [pc, #400]	; (8104 <le_DMA_IRQHandler+0x1bc>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7f72:	f340 2007 	sbfx	r0, r0, #8, #8
			current_rxbuf->rssi_sum += rssi;
    7f76:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7f7a:	f993 211c 	ldrsb.w	r2, [r3, #284]	; 0x11c
			current_rxbuf->rssi_sum += rssi;
    7f7e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7f82:	4282      	cmp	r2, r0
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f84:	f993 211d 	ldrsb.w	r2, [r3, #285]	; 0x11d
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7f88:	bfc8      	it	gt
    7f8a:	f883 011c 	strbgt.w	r0, [r3, #284]	; 0x11c
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f8e:	4282      	cmp	r2, r0
			pos = current_rxbuf->pos;
    7f90:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			current_rxbuf->rssi_sum += rssi;
    7f94:	4401      	add	r1, r0
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7f96:	bfb8      	it	lt
    7f98:	f883 011d 	strblt.w	r0, [r3, #285]	; 0x11d
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    7f9c:	485a      	ldr	r0, [pc, #360]	; (8108 <le_DMA_IRQHandler+0x1c0>)
			current_rxbuf->rssi_sum += rssi;
    7f9e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    7fa2:	f002 0101 	and.w	r1, r2, #1
    7fa6:	5c41      	ldrb	r1, [r0, r1]
    7fa8:	5499      	strb	r1, [r3, r2]
			pos += 1;
    7faa:	3201      	adds	r2, #1
			if (pos == 1) {
    7fac:	2a01      	cmp	r2, #1
			current_rxbuf->pos = pos;
    7fae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (pos == 1) {
    7fb2:	d11e      	bne.n	7ff2 <le_DMA_IRQHandler+0xaa>
				current_rxbuf->channel = rf_channel;
    7fb4:	4955      	ldr	r1, [pc, #340]	; (810c <le_DMA_IRQHandler+0x1c4>)
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7fb6:	f5a7 77c8 	sub.w	r7, r7, #400	; 0x190
				current_rxbuf->channel = rf_channel;
    7fba:	880a      	ldrh	r2, [r1, #0]
				if (btle_channel_index(rf_channel) < 37) {
    7fbc:	8808      	ldrh	r0, [r1, #0]
				current_rxbuf->channel = rf_channel;
    7fbe:	b292      	uxth	r2, r2
    7fc0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				current_rxbuf->access_address = conn.access_address;
    7fc4:	6a22      	ldr	r2, [r4, #32]
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7fc6:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
				current_rxbuf->access_address = conn.access_address;
    7fca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
				if (btle_channel_index(rf_channel) < 37) {
    7fce:	b280      	uxth	r0, r0
    7fd0:	f7ff fa18 	bl	7404 <btle_channel_index>
    7fd4:	2824      	cmp	r0, #36	; 0x24
    7fd6:	d804      	bhi.n	7fe2 <le_DMA_IRQHandler+0x9a>
	T1MCR &= ~TMCR_MR0I;
    7fd8:	4a4d      	ldr	r2, [pc, #308]	; (8110 <le_DMA_IRQHandler+0x1c8>)
    7fda:	6813      	ldr	r3, [r2, #0]
    7fdc:	f023 0301 	bic.w	r3, r3, #1
    7fe0:	6013      	str	r3, [r2, #0]
		if (DMACIntErrStat & (1 << 0)) {
    7fe2:	4b4c      	ldr	r3, [pc, #304]	; (8114 <le_DMA_IRQHandler+0x1cc>)
    7fe4:	681b      	ldr	r3, [r3, #0]
    7fe6:	07db      	lsls	r3, r3, #31
			DMACIntErrClr = (1 << 0);
    7fe8:	bf42      	ittt	mi
    7fea:	2201      	movmi	r2, #1
    7fec:	4b4a      	ldrmi	r3, [pc, #296]	; (8118 <le_DMA_IRQHandler+0x1d0>)
    7fee:	601a      	strmi	r2, [r3, #0]
    7ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pos == 2) {
    7ff2:	2a02      	cmp	r2, #2
    7ff4:	d12e      	bne.n	8054 <le_DMA_IRQHandler+0x10c>
	int idx = whitening_index[btle_channel_index(channel)];
    7ff6:	f8b3 0110 	ldrh.w	r0, [r3, #272]	; 0x110
				uint8_t length = dewhiten_length(current_rxbuf->channel, current_rxbuf->data[1]);
    7ffa:	785e      	ldrb	r6, [r3, #1]
	int idx = whitening_index[btle_channel_index(channel)];
    7ffc:	f7ff fa02 	bl	7404 <btle_channel_index>
	idx = (idx + 8) % sizeof(whitening);
    8000:	277f      	movs	r7, #127	; 0x7f
	uint8_t out = 0;
    8002:	2100      	movs	r1, #0
	int idx = whitening_index[btle_channel_index(channel)];
    8004:	4d45      	ldr	r5, [pc, #276]	; (811c <le_DMA_IRQHandler+0x1d4>)
    8006:	5c2b      	ldrb	r3, [r5, r0]
    8008:	46ae      	mov	lr, r5
	idx = (idx + 8) % sizeof(whitening);
    800a:	3308      	adds	r3, #8
    800c:	fbb3 f2f7 	udiv	r2, r3, r7
	for (i = 0; i < 8; ++i) {
    8010:	4608      	mov	r0, r1
	idx = (idx + 8) % sizeof(whitening);
    8012:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    8016:	1a9b      	subs	r3, r3, r2
		bit = (data >> (7-i)) & 1;
    8018:	f1c0 0207 	rsb	r2, r0, #7
    801c:	fa46 f202 	asr.w	r2, r6, r2
    8020:	f002 0501 	and.w	r5, r2, #1
		bit ^= whitening[idx];
    8024:	eb0e 0203 	add.w	r2, lr, r3
    8028:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
		idx = (idx + 1) % sizeof(whitening);
    802c:	3301      	adds	r3, #1
		bit ^= whitening[idx];
    802e:	406a      	eors	r2, r5
		idx = (idx + 1) % sizeof(whitening);
    8030:	fbb3 f5f7 	udiv	r5, r3, r7
		out |= bit << i;
    8034:	4082      	lsls	r2, r0
	for (i = 0; i < 8; ++i) {
    8036:	3001      	adds	r0, #1
		idx = (idx + 1) % sizeof(whitening);
    8038:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
		out |= bit << i;
    803c:	430a      	orrs	r2, r1
	for (i = 0; i < 8; ++i) {
    803e:	2808      	cmp	r0, #8
		idx = (idx + 1) % sizeof(whitening);
    8040:	eba3 0305 	sub.w	r3, r3, r5
		out |= bit << i;
    8044:	b2d1      	uxtb	r1, r2
	for (i = 0; i < 8; ++i) {
    8046:	d1e7      	bne.n	8018 <le_DMA_IRQHandler+0xd0>
				current_rxbuf->size = length + 2 + 3; // two bytes for header and three for CRC
    8048:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    804c:	3105      	adds	r1, #5
    804e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    8052:	e7c6      	b.n	7fe2 <le_DMA_IRQHandler+0x9a>
			if (pos > 2 && pos >= current_rxbuf->size) {
    8054:	d9c5      	bls.n	7fe2 <le_DMA_IRQHandler+0x9a>
    8056:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    805a:	429a      	cmp	r2, r3
    805c:	d3c1      	bcc.n	7fe2 <le_DMA_IRQHandler+0x9a>
				cc2400_strobe(SFSON);
    805e:	2061      	movs	r0, #97	; 0x61
    8060:	f001 fd3f 	bl	9ae2 <cc2400_strobe>
				DMACC0Config = 0;
    8064:	2200      	movs	r2, #0
    8066:	4b2e      	ldr	r3, [pc, #184]	; (8120 <le_DMA_IRQHandler+0x1d8>)
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    8068:	492e      	ldr	r1, [pc, #184]	; (8124 <le_DMA_IRQHandler+0x1dc>)
				DMACC0Config = 0;
    806a:	601a      	str	r2, [r3, #0]
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    806c:	2301      	movs	r3, #1
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    806e:	4a2e      	ldr	r2, [pc, #184]	; (8128 <le_DMA_IRQHandler+0x1e0>)
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    8070:	6033      	str	r3, [r6, #0]
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    8072:	6813      	ldr	r3, [r2, #0]
				while (SSP1SR & SSPSR_RNE) {
    8074:	3a18      	subs	r2, #24
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    8076:	f023 0301 	bic.w	r3, r3, #1
    807a:	6193      	str	r3, [r2, #24]
				while (SSP1SR & SSPSR_RNE) {
    807c:	6813      	ldr	r3, [r2, #0]
    807e:	0758      	lsls	r0, r3, #29
    8080:	d426      	bmi.n	80d0 <le_DMA_IRQHandler+0x188>
				queue_insert(&packet_queue, current_rxbuf);
    8082:	f8d4 1678 	ldr.w	r1, [r4, #1656]	; 0x678
    8086:	4829      	ldr	r0, [pc, #164]	; (812c <le_DMA_IRQHandler+0x1e4>)
    8088:	f000 fb1a 	bl	86c0 <queue_insert>
				if (btle_channel_index(rf_channel) < 37) {
    808c:	4b1f      	ldr	r3, [pc, #124]	; (810c <le_DMA_IRQHandler+0x1c4>)
    808e:	8818      	ldrh	r0, [r3, #0]
    8090:	b280      	uxth	r0, r0
    8092:	f7ff f9b7 	bl	7404 <btle_channel_index>
    8096:	2824      	cmp	r0, #36	; 0x24
    8098:	d80f      	bhi.n	80ba <le_DMA_IRQHandler+0x172>
					++conn_event.num_packets;
    809a:	4a25      	ldr	r2, [pc, #148]	; (8130 <le_DMA_IRQHandler+0x1e8>)
    809c:	6853      	ldr	r3, [r2, #4]
    809e:	3301      	adds	r3, #1
					if (conn_event.num_packets == 1) {
    80a0:	2b01      	cmp	r3, #1
					++conn_event.num_packets;
    80a2:	6053      	str	r3, [r2, #4]
					if (conn_event.num_packets == 1) {
    80a4:	d116      	bne.n	80d4 <le_DMA_IRQHandler+0x18c>
						conn_event.anchor = current_rxbuf->timestamp;
    80a6:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    80aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    80ae:	6013      	str	r3, [r2, #0]
						timer1_set_match(NOW + IFS_TIMEOUT); // set a timeout for next packet
    80b0:	6828      	ldr	r0, [r5, #0]
    80b2:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
    80b6:	f7ff fdcd 	bl	7c54 <timer1_set_match>
				current_rxbuf = buffer_get();
    80ba:	f7ff fe19 	bl	7cf0 <buffer_get>
    80be:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
				le_dma_init();
    80c2:	f7ff fda3 	bl	7c0c <le_dma_init>
				dio_ssp_start();
    80c6:	f7ff fd61 	bl	7b8c <dio_ssp_start>
				timer1_wait_fs_lock();
    80ca:	f7ff fdcf 	bl	7c6c <timer1_wait_fs_lock>
    80ce:	e788      	b.n	7fe2 <le_DMA_IRQHandler+0x9a>
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    80d0:	680b      	ldr	r3, [r1, #0]
    80d2:	e7d3      	b.n	807c <le_DMA_IRQHandler+0x134>
					else if (conn_event.num_packets == 2) {
    80d4:	2b02      	cmp	r3, #2
    80d6:	d1f0      	bne.n	80ba <le_DMA_IRQHandler+0x172>
						cc2400_strobe(SRFOFF);
    80d8:	2064      	movs	r0, #100	; 0x64
    80da:	f001 fd02 	bl	9ae2 <cc2400_strobe>
						current_rxbuf = buffer_get();
    80de:	f7ff fe07 	bl	7cf0 <buffer_get>
    80e2:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
}
    80e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						finish_conn_event();
    80ea:	f7ff becb 	b.w	7e84 <finish_conn_event>
    80ee:	bf00      	nop
    80f0:	0000bc48 	.word	0x0000bc48
    80f4:	40008008 	.word	0x40008008
    80f8:	50004000 	.word	0x50004000
    80fc:	50004004 	.word	0x50004004
    8100:	50004008 	.word	0x50004008
    8104:	10000c50 	.word	0x10000c50
    8108:	10003ce4 	.word	0x10003ce4
    810c:	10003cd4 	.word	0x10003cd4
    8110:	40008014 	.word	0x40008014
    8114:	5000400c 	.word	0x5000400c
    8118:	50004010 	.word	0x50004010
    811c:	0000bb8e 	.word	0x0000bb8e
    8120:	50004110 	.word	0x50004110
    8124:	40030008 	.word	0x40030008
    8128:	40030024 	.word	0x40030024
    812c:	10003ca4 	.word	0x10003ca4
    8130:	10003cd8 	.word	0x10003cd8

00008134 <TIMER1_IRQHandler>:
void TIMER1_IRQHandler(void) {
    8134:	b538      	push	{r3, r4, r5, lr}
	if (T1IR & TIR_MR0_Interrupt) {
    8136:	4b49      	ldr	r3, [pc, #292]	; (825c <TIMER1_IRQHandler+0x128>)
    8138:	681a      	ldr	r2, [r3, #0]
    813a:	07d0      	lsls	r0, r2, #31
    813c:	d55a      	bpl.n	81f4 <TIMER1_IRQHandler+0xc0>
		T1IR = TIR_MR0_Interrupt;
    813e:	2101      	movs	r1, #1
    8140:	6019      	str	r1, [r3, #0]
		if (conn.conn_update_pending &&
    8142:	4b47      	ldr	r3, [pc, #284]	; (8260 <TIMER1_IRQHandler+0x12c>)
    8144:	4d47      	ldr	r5, [pc, #284]	; (8264 <TIMER1_IRQHandler+0x130>)
    8146:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    814a:	461c      	mov	r4, r3
    814c:	b392      	cbz	r2, 81b4 <TIMER1_IRQHandler+0x80>
    814e:	f8b3 010c 	ldrh.w	r0, [r3, #268]	; 0x10c
    8152:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
    8156:	4290      	cmp	r0, r2
    8158:	d12c      	bne.n	81b4 <TIMER1_IRQHandler+0x80>
			if (!conn_event.opened && conn.win_offset > 0) {
    815a:	68aa      	ldr	r2, [r5, #8]
    815c:	b962      	cbnz	r2, 8178 <TIMER1_IRQHandler+0x44>
    815e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    8160:	b150      	cbz	r0, 8178 <TIMER1_IRQHandler+0x44>
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    8162:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    8166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8168:	4410      	add	r0, r2
    816a:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    816e:	4418      	add	r0, r3
    8170:	f7ff fd70 	bl	7c54 <timer1_set_match>
				conn_event.opened = 1;
    8174:	60a9      	str	r1, [r5, #8]
    8176:	bd38      	pop	{r3, r4, r5, pc}
				conn_event.opened = 1;
    8178:	2301      	movs	r3, #1
    817a:	60ab      	str	r3, [r5, #8]
				conn.anchor_set = 0;
    817c:	2300      	movs	r3, #0
				conn.conn_interval = conn.conn_update_pending_interval;
    817e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
				conn.anchor_set = 0;
    8182:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
				conn.conn_update_pending = 0;
    8186:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    818a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
				conn.conn_interval = conn.conn_update_pending_interval;
    818e:	6320      	str	r0, [r4, #48]	; 0x30
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    8190:	4418      	add	r0, r3
    8192:	f500 40a5 	add.w	r0, r0, #21120	; 0x5280
    8196:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8198:	3050      	adds	r0, #80	; 0x50
    819a:	4418      	add	r0, r3
						conn.win_offset + conn.win_size + USEC(2120));
    819c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    81a0:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    81a4:	4418      	add	r0, r3
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    81a6:	6362      	str	r2, [r4, #52]	; 0x34
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    81a8:	f7ff fd54 	bl	7c54 <timer1_set_match>
}
    81ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				change_channel();
    81b0:	f7ff be06 	b.w	7dc0 <change_channel>
		if (conn.channel_map_update_pending &&
    81b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    81b8:	b173      	cbz	r3, 81d8 <TIMER1_IRQHandler+0xa4>
    81ba:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    81be:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
    81c2:	429a      	cmp	r2, r3
    81c4:	d108      	bne.n	81d8 <TIMER1_IRQHandler+0xa4>
			conn.remapping = conn.pending_remapping;
    81c6:	4928      	ldr	r1, [pc, #160]	; (8268 <TIMER1_IRQHandler+0x134>)
    81c8:	22c0      	movs	r2, #192	; 0xc0
    81ca:	f1a1 00e8 	sub.w	r0, r1, #232	; 0xe8
    81ce:	f002 fefb 	bl	afc8 <memcpy>
			conn.channel_map_update_pending = 0;
    81d2:	2300      	movs	r3, #0
    81d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		if (!conn_event.opened) {
    81d8:	68ab      	ldr	r3, [r5, #8]
    81da:	2b00      	cmp	r3, #0
    81dc:	d135      	bne.n	824a <TIMER1_IRQHandler+0x116>
			conn_event.opened = 1;
    81de:	2301      	movs	r3, #1
    81e0:	60ab      	str	r3, [r5, #8]
			timer1_set_match(NOW + USEC(2120) + RX_WARMUP_TIME);
    81e2:	4b22      	ldr	r3, [pc, #136]	; (826c <TIMER1_IRQHandler+0x138>)
    81e4:	6818      	ldr	r0, [r3, #0]
    81e6:	f500 40bd 	add.w	r0, r0, #24192	; 0x5e80
    81ea:	3008      	adds	r0, #8
    81ec:	f7ff fd32 	bl	7c54 <timer1_set_match>
			change_channel();
    81f0:	f7ff fde6 	bl	7dc0 <change_channel>
	if (T1IR & TIR_MR1_Interrupt) {
    81f4:	4b19      	ldr	r3, [pc, #100]	; (825c <TIMER1_IRQHandler+0x128>)
    81f6:	681a      	ldr	r2, [r3, #0]
    81f8:	0791      	lsls	r1, r2, #30
    81fa:	d50d      	bpl.n	8218 <TIMER1_IRQHandler+0xe4>
		T1IR = TIR_MR1_Interrupt;
    81fc:	2202      	movs	r2, #2
		T1MCR &= ~TMCR_MR1I;
    81fe:	491c      	ldr	r1, [pc, #112]	; (8270 <TIMER1_IRQHandler+0x13c>)
		T1IR = TIR_MR1_Interrupt;
    8200:	601a      	str	r2, [r3, #0]
		T1MCR &= ~TMCR_MR1I;
    8202:	680b      	ldr	r3, [r1, #0]
    8204:	f023 0308 	bic.w	r3, r3, #8
    8208:	600b      	str	r3, [r1, #0]
		TXLED_CLR;
    820a:	f44f 7180 	mov.w	r1, #256	; 0x100
    820e:	4b19      	ldr	r3, [pc, #100]	; (8274 <TIMER1_IRQHandler+0x140>)
    8210:	6019      	str	r1, [r3, #0]
		RXLED_CLR;
    8212:	2110      	movs	r1, #16
    8214:	6019      	str	r1, [r3, #0]
		USRLED_CLR;
    8216:	601a      	str	r2, [r3, #0]
	if (T1IR & TIR_MR2_Interrupt) {
    8218:	4b10      	ldr	r3, [pc, #64]	; (825c <TIMER1_IRQHandler+0x128>)
    821a:	681a      	ldr	r2, [r3, #0]
    821c:	0752      	lsls	r2, r2, #29
    821e:	d51b      	bpl.n	8258 <TIMER1_IRQHandler+0x124>
		T1IR = TIR_MR2_Interrupt;
    8220:	2204      	movs	r2, #4
    8222:	601a      	str	r2, [r3, #0]
		if (cc2400_status() & FS_LOCK) {
    8224:	f001 fc56 	bl	9ad4 <cc2400_status>
    8228:	0743      	lsls	r3, r0, #29
    822a:	d511      	bpl.n	8250 <TIMER1_IRQHandler+0x11c>
	cc2400_strobe(SRX);
    822c:	2062      	movs	r0, #98	; 0x62
    822e:	f001 fc58 	bl	9ae2 <cc2400_strobe>
	PAEN_SET;
    8232:	2280      	movs	r2, #128	; 0x80
    8234:	4b10      	ldr	r3, [pc, #64]	; (8278 <TIMER1_IRQHandler+0x144>)
    8236:	601a      	str	r2, [r3, #0]
	HGM_SET;
    8238:	f44f 7280 	mov.w	r2, #256	; 0x100
    823c:	601a      	str	r2, [r3, #0]
			T1MCR &= ~TMCR_MR2I;
    823e:	4a0c      	ldr	r2, [pc, #48]	; (8270 <TIMER1_IRQHandler+0x13c>)
    8240:	6813      	ldr	r3, [r2, #0]
    8242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8246:	6013      	str	r3, [r2, #0]
    8248:	bd38      	pop	{r3, r4, r5, pc}
				finish_conn_event();
    824a:	f7ff fe1b 	bl	7e84 <finish_conn_event>
    824e:	e7d1      	b.n	81f4 <TIMER1_IRQHandler+0xc0>
}
    8250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			timer1_wait_fs_lock();
    8254:	f7ff bd0a 	b.w	7c6c <timer1_wait_fs_lock>
    8258:	bd38      	pop	{r3, r4, r5, pc}
    825a:	bf00      	nop
    825c:	40008000 	.word	0x40008000
    8260:	10000c50 	.word	0x10000c50
    8264:	10003cd8 	.word	0x10003cd8
    8268:	10000d78 	.word	0x10000d78
    826c:	40008008 	.word	0x40008008
    8270:	40008014 	.word	0x40008014
    8274:	2009c03c 	.word	0x2009c03c
    8278:	2009c058 	.word	0x2009c058

0000827c <le_phy_main>:
	}

	return 0;
}

void le_phy_main(void) {
    827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8280:	b087      	sub	sp, #28
	// disable USB interrupts -- we poll them below
	// n.b., they should not be enabled but let's be careful
	ICER0 = ICER0_ICE_USB;
    8282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
		le_buffer_pool[i].available = 1;
    8286:	2501      	movs	r5, #1
	ICER0 = ICER0_ICE_USB;
    8288:	f8df 8350 	ldr.w	r8, [pc, #848]	; 85dc <le_phy_main+0x360>
		le_buffer_pool[i].available = 1;
    828c:	4cc0      	ldr	r4, [pc, #768]	; (8590 <le_phy_main+0x314>)
	ICER0 = ICER0_ICE_USB;
    828e:	f8c8 3000 	str.w	r3, [r8]
	// disable clkn and timer0
	clkn_disable();
    8292:	f7ff fbc7 	bl	7a24 <clkn_disable>

	buffers_init();
	queue_init(&packet_queue);
    8296:	48bf      	ldr	r0, [pc, #764]	; (8594 <le_phy_main+0x318>)
		le_buffer_pool[i].available = 1;
    8298:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
    829c:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
    82a0:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
    82a4:	f8c4 566c 	str.w	r5, [r4, #1644]	; 0x66c
	queue_init(&packet_queue);
    82a8:	f000 fa06 	bl	86b8 <queue_init>
	T1TCR = TCR_Counter_Reset;
    82ac:	2302      	movs	r3, #2
    82ae:	4eba      	ldr	r6, [pc, #744]	; (8598 <le_phy_main+0x31c>)
	T1PR = 4; // 100 ns
    82b0:	4aba      	ldr	r2, [pc, #744]	; (859c <le_phy_main+0x320>)
	T1TCR = TCR_Counter_Reset;
    82b2:	6033      	str	r3, [r6, #0]
	T1PR = 4; // 100 ns
    82b4:	2304      	movs	r3, #4
    82b6:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_TIMER1;
    82b8:	4ab9      	ldr	r2, [pc, #740]	; (85a0 <le_phy_main+0x324>)
	T1TCR = TCR_Counter_Enable;
    82ba:	6035      	str	r5, [r6, #0]
	ISER0 = ISER0_ISE_TIMER1;
    82bc:	6013      	str	r3, [r2, #0]
	timer1_start();

	current_rxbuf = buffer_get();
    82be:	f7ff fd17 	bl	7cf0 <buffer_get>
	rf_channel = le_adv_channel; // FIXME
    82c2:	4bb8      	ldr	r3, [pc, #736]	; (85a4 <le_phy_main+0x328>)
    82c4:	4ab8      	ldr	r2, [pc, #736]	; (85a8 <le_phy_main+0x32c>)
    82c6:	881b      	ldrh	r3, [r3, #0]
	current_rxbuf = buffer_get();
    82c8:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
	rf_channel = le_adv_channel; // FIXME
    82cc:	b29b      	uxth	r3, r3
    82ce:	8013      	strh	r3, [r2, #0]
	conn.access_address = ADVERTISING_AA;
    82d0:	4bb6      	ldr	r3, [pc, #728]	; (85ac <le_phy_main+0x330>)
	le_sys_init();
	le_cc2400_init_rf();

	cancel_follow = 0;
    82d2:	4fb7      	ldr	r7, [pc, #732]	; (85b0 <le_phy_main+0x334>)
	conn.access_address = ADVERTISING_AA;
    82d4:	6223      	str	r3, [r4, #32]
	usb_queue_init(); // USB FIFO FIXME replace with safer queue
    82d6:	f7ff fa05 	bl	76e4 <usb_queue_init>
	dio_ssp_init();   // init SSP and raise !CS (self-routed GPIO)
    82da:	f001 facd 	bl	9878 <dio_ssp_init>
	le_dma_init();    // prepare DMA + interrupts
    82de:	f7ff fc95 	bl	7c0c <le_dma_init>
	dio_ssp_start();  // enable SSP + DMA
    82e2:	f7ff fc53 	bl	7b8c <dio_ssp_start>
	le_cc2400_init_rf();
    82e6:	f7ff fd2f 	bl	7d48 <le_cc2400_init_rf>
	cancel_follow = 0;
    82ea:	2000      	movs	r0, #0
	T1MCR |= TMCR_MR1I;
    82ec:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 85e0 <le_phy_main+0x364>
	cancel_follow = 0;
    82f0:	6038      	str	r0, [r7, #0]
	debug_uart_init(0);
    82f2:	f000 fea9 	bl	9048 <debug_uart_init>
    82f6:	f8cd 8004 	str.w	r8, [sp, #4]
    82fa:	9602      	str	r6, [sp, #8]
	while (requested_mode == MODE_BT_FOLLOW_LE) {
    82fc:	4bad      	ldr	r3, [pc, #692]	; (85b4 <le_phy_main+0x338>)
    82fe:	781b      	ldrb	r3, [r3, #0]
    8300:	2b09      	cmp	r3, #9
    8302:	d011      	beq.n	8328 <le_phy_main+0xac>
	T1TCR = TCR_Counter_Reset;
    8304:	2202      	movs	r2, #2
    8306:	9b02      	ldr	r3, [sp, #8]
	ICER0 = ICER0_ICE_TIMER1;
    8308:	9901      	ldr	r1, [sp, #4]
	T1TCR = TCR_Counter_Reset;
    830a:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_TIMER1;
    830c:	2304      	movs	r3, #4
    830e:	600b      	str	r3, [r1, #0]
	}

	timer1_stop();

	// reset state
	RXLED_CLR;
    8310:	2110      	movs	r1, #16
    8312:	4ba9      	ldr	r3, [pc, #676]	; (85b8 <le_phy_main+0x33c>)
    8314:	6019      	str	r1, [r3, #0]
	TXLED_CLR;
    8316:	f44f 7180 	mov.w	r1, #256	; 0x100
    831a:	6019      	str	r1, [r3, #0]
	USRLED_CLR;
    831c:	601a      	str	r2, [r3, #0]
	clkn_init();
    831e:	f7ff fb6d 	bl	79fc <clkn_init>

	// TODO kill CC2400
}
    8322:	b007      	add	sp, #28
    8324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		le_rx_t *packet = NULL;
    8328:	2300      	movs	r3, #0
    832a:	a906      	add	r1, sp, #24
    832c:	f841 3d04 	str.w	r3, [r1, #-4]!
		if (queue_remove(&packet_queue, (void **)&packet)) {
    8330:	4898      	ldr	r0, [pc, #608]	; (8594 <le_phy_main+0x318>)
    8332:	f000 f9d3 	bl	86dc <queue_remove>
    8336:	2800      	cmp	r0, #0
    8338:	f000 80dd 	beq.w	84f6 <le_phy_main+0x27a>
			le_dewhiten(packet->data, packet->size, packet->channel);
    833c:	9805      	ldr	r0, [sp, #20]
	if (!le.target_set)
    833e:	4e9f      	ldr	r6, [pc, #636]	; (85bc <le_phy_main+0x340>)
			le_dewhiten(packet->data, packet->size, packet->channel);
    8340:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    8344:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    8348:	f7ff f8f6 	bl	7538 <le_dewhiten>
	if (!le.target_set)
    834c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    834e:	2b00      	cmp	r3, #0
    8350:	f040 80b8 	bne.w	84c4 <le_phy_main+0x248>
		RXLED_SET;
    8354:	2310      	movs	r3, #16
    8356:	4a9a      	ldr	r2, [pc, #616]	; (85c0 <le_phy_main+0x344>)
				usb_enqueue_le(packet);
    8358:	f8dd 8014 	ldr.w	r8, [sp, #20]
		RXLED_SET;
    835c:	6013      	str	r3, [r2, #0]
	T1MR1 = NOW + MSEC(10);
    835e:	4b99      	ldr	r3, [pc, #612]	; (85c4 <le_phy_main+0x348>)
    8360:	4a99      	ldr	r2, [pc, #612]	; (85c8 <le_phy_main+0x34c>)
    8362:	681b      	ldr	r3, [r3, #0]
    8364:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
    8368:	33a0      	adds	r3, #160	; 0xa0
    836a:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR1I;
    836c:	f8d9 3000 	ldr.w	r3, [r9]
    8370:	f043 0308 	orr.w	r3, r3, #8
    8374:	f8c9 3000 	str.w	r3, [r9]
	usb_pkt_rx* f = usb_enqueue();
    8378:	f7ff f9c2 	bl	7700 <usb_enqueue>
	if (f == NULL) {
    837c:	4605      	mov	r5, r0
    837e:	2800      	cmp	r0, #0
    8380:	f040 80d4 	bne.w	852c <le_phy_main+0x2b0>
				packet_handler(packet);
    8384:	9d05      	ldr	r5, [sp, #20]
	if (btle_channel_index(buf->channel) >= 37) {
    8386:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    838a:	f7ff f83b 	bl	7404 <btle_channel_index>
    838e:	2824      	cmp	r0, #36	; 0x24
    8390:	7829      	ldrb	r1, [r5, #0]
    8392:	f240 8127 	bls.w	85e4 <le_phy_main+0x368>
		switch (buf->data[0] & 0xf) {
    8396:	f001 010f 	and.w	r1, r1, #15
    839a:	2905      	cmp	r1, #5
    839c:	f040 80a7 	bne.w	84ee <le_phy_main+0x272>
	if (!le.do_follow)
    83a0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    83a2:	2b00      	cmp	r3, #0
    83a4:	f000 80a3 	beq.w	84ee <le_phy_main+0x272>
	if (buf->size != 2 + 6 + 6 + 22 + 3)
    83a8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    83ac:	2b27      	cmp	r3, #39	; 0x27
    83ae:	f040 809e 	bne.w	84ee <le_phy_main+0x272>
	if (cancel_follow)
    83b2:	683b      	ldr	r3, [r7, #0]
    83b4:	b10b      	cbz	r3, 83ba <le_phy_main+0x13e>
		cancel_follow = 0;
    83b6:	2300      	movs	r3, #0
    83b8:	603b      	str	r3, [r7, #0]
	conn.access_address     = extract_field(buf, 14, 4);
    83ba:	2204      	movs	r2, #4
    83bc:	210e      	movs	r1, #14
    83be:	4628      	mov	r0, r5
    83c0:	f7ff fc64 	bl	7c8c <extract_field>
	conn.crc_init           = extract_field(buf, 18, 3);
    83c4:	2203      	movs	r2, #3
    83c6:	2112      	movs	r1, #18
	conn.access_address     = extract_field(buf, 14, 4);
    83c8:	6220      	str	r0, [r4, #32]
	conn.crc_init           = extract_field(buf, 18, 3);
    83ca:	4628      	mov	r0, r5
    83cc:	f7ff fc5e 	bl	7c8c <extract_field>
    83d0:	6260      	str	r0, [r4, #36]	; 0x24
	conn.crc_init_reversed  = rbit(conn.crc_init);
    83d2:	f001 f9ed 	bl	97b0 <rbit>
	conn.win_size           = extract_field(buf, 21, 1);
    83d6:	2201      	movs	r2, #1
	conn.crc_init_reversed  = rbit(conn.crc_init);
    83d8:	62a0      	str	r0, [r4, #40]	; 0x28
	conn.win_size           = extract_field(buf, 21, 1);
    83da:	2115      	movs	r1, #21
    83dc:	4628      	mov	r0, r5
    83de:	f7ff fc55 	bl	7c8c <extract_field>
	conn.win_offset         = extract_field(buf, 22, 2);
    83e2:	2202      	movs	r2, #2
	conn.win_size           = extract_field(buf, 21, 1);
    83e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn.win_offset         = extract_field(buf, 22, 2);
    83e8:	2116      	movs	r1, #22
	conn.win_size           = extract_field(buf, 21, 1);
    83ea:	4682      	mov	sl, r0
	conn.win_offset         = extract_field(buf, 22, 2);
    83ec:	4628      	mov	r0, r5
    83ee:	f7ff fc4d 	bl	7c8c <extract_field>
	conn.conn_interval      = extract_field(buf, 24, 2);
    83f2:	2202      	movs	r2, #2
	conn.win_offset         = extract_field(buf, 22, 2);
    83f4:	63e0      	str	r0, [r4, #60]	; 0x3c
	conn.conn_interval      = extract_field(buf, 24, 2);
    83f6:	2118      	movs	r1, #24
	conn.win_offset         = extract_field(buf, 22, 2);
    83f8:	4680      	mov	r8, r0
	conn.conn_interval      = extract_field(buf, 24, 2);
    83fa:	4628      	mov	r0, r5
    83fc:	f7ff fc46 	bl	7c8c <extract_field>
	conn.supervision_timeout = extract_field(buf, 28, 2);
    8400:	2202      	movs	r2, #2
	conn.conn_interval      = extract_field(buf, 24, 2);
    8402:	4606      	mov	r6, r0
    8404:	6320      	str	r0, [r4, #48]	; 0x30
	conn.supervision_timeout = extract_field(buf, 28, 2);
    8406:	211c      	movs	r1, #28
    8408:	4628      	mov	r0, r5
    840a:	f7ff fc3f 	bl	7c8c <extract_field>
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    840e:	2201      	movs	r2, #1
	conn.supervision_timeout = extract_field(buf, 28, 2);
    8410:	6360      	str	r0, [r4, #52]	; 0x34
    8412:	4683      	mov	fp, r0
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    8414:	2123      	movs	r1, #35	; 0x23
    8416:	4628      	mov	r0, r5
    8418:	f7ff fc38 	bl	7c8c <extract_field>
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    841c:	f640 437a 	movw	r3, #3194	; 0xc7a
    8420:	1fb2      	subs	r2, r6, #6
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    8422:	f000 001f 	and.w	r0, r0, #31
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    8426:	429a      	cmp	r2, r3
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    8428:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    842c:	f200 80ad 	bhi.w	858a <le_phy_main+0x30e>
		conn.conn_interval *= USEC(1250);
    8430:	f243 03d4 	movw	r3, #12500	; 0x30d4
    8434:	435e      	muls	r6, r3
	conn.win_offset *= USEC(1250);
    8436:	fb03 f208 	mul.w	r2, r3, r8
	if (conn.win_offset > conn.conn_interval)
    843a:	4296      	cmp	r6, r2
		conn.conn_interval *= USEC(1250);
    843c:	6326      	str	r6, [r4, #48]	; 0x30
	conn.win_offset *= USEC(1250);
    843e:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (conn.win_offset > conn.conn_interval)
    8440:	f0c0 80a3 	bcc.w	858a <le_phy_main+0x30e>
	win_size = conn.win_size * USEC(1250);
    8444:	fa5f fa8a 	uxtb.w	sl, sl
    8448:	fb03 fa0a 	mul.w	sl, r3, sl
	if (win_size < USEC(1250) || win_size > max_win_size)
    844c:	f243 03d3 	movw	r3, #12499	; 0x30d3
    8450:	459a      	cmp	sl, r3
    8452:	f340 809a 	ble.w	858a <le_phy_main+0x30e>
    8456:	4b5d      	ldr	r3, [pc, #372]	; (85cc <le_phy_main+0x350>)
	max_win_size = conn.conn_interval - USEC(1250);
    8458:	f5a6 5643 	sub.w	r6, r6, #12480	; 0x30c0
    845c:	3e14      	subs	r6, #20
	if (win_size < USEC(1250) || win_size > max_win_size)
    845e:	429e      	cmp	r6, r3
    8460:	bf28      	it	cs
    8462:	461e      	movcs	r6, r3
    8464:	45b2      	cmp	sl, r6
    8466:	f200 8090 	bhi.w	858a <le_phy_main+0x30e>
	conn.supervision_timeout *= MSEC(10);
    846a:	fb03 f30b 	mul.w	r3, r3, fp
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    846e:	f5a3 2b74 	sub.w	fp, r3, #999424	; 0xf4000
	conn.supervision_timeout *= MSEC(10);
    8472:	6363      	str	r3, [r4, #52]	; 0x34
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    8474:	4b56      	ldr	r3, [pc, #344]	; (85d0 <le_phy_main+0x354>)
    8476:	f5ab 7b10 	sub.w	fp, fp, #576	; 0x240
    847a:	459b      	cmp	fp, r3
    847c:	f200 8085 	bhi.w	858a <le_phy_main+0x30e>
	le_parse_channel_map(&buf->data[30], &conn.remapping);
    8480:	4954      	ldr	r1, [pc, #336]	; (85d4 <le_phy_main+0x358>)
    8482:	f105 001e 	add.w	r0, r5, #30
    8486:	f7ff f889 	bl	759c <le_parse_channel_map>
	if (conn.remapping.total_channels == 0)
    848a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    848e:	2b00      	cmp	r3, #0
    8490:	d07b      	beq.n	858a <le_phy_main+0x30e>
	conn_event.num_packets = 0;
    8492:	2200      	movs	r2, #0
	T1MCR &= ~TMCR_MR2I;
    8494:	f8d9 3000 	ldr.w	r3, [r9]
    8498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    849c:	f8c9 3000 	str.w	r3, [r9]
	conn_event.num_packets = 0;
    84a0:	4b4d      	ldr	r3, [pc, #308]	; (85d8 <le_phy_main+0x35c>)
	timer1_set_match(buf->timestamp + PACKET_DURATION(buf) +
    84a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	conn_event.num_packets = 0;
    84a4:	605a      	str	r2, [r3, #4]
	conn_event.opened = 0;
    84a6:	609a      	str	r2, [r3, #8]
	timer1_set_match(buf->timestamp + PACKET_DURATION(buf) +
    84a8:	2250      	movs	r2, #80	; 0x50
    84aa:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    84ae:	f500 501a 	add.w	r0, r0, #9856	; 0x2680
    84b2:	302c      	adds	r0, #44	; 0x2c
    84b4:	4418      	add	r0, r3
    84b6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    84ba:	fb02 0003 	mla	r0, r2, r3, r0
    84be:	f7ff fbc9 	bl	7c54 <timer1_set_match>
    84c2:	e014      	b.n	84ee <le_phy_main+0x272>
			if (filter_match(packet)) {
    84c4:	9d05      	ldr	r5, [sp, #20]
	if (btle_channel_index(buf->channel) < 37)
    84c6:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    84ca:	f7fe ff9b 	bl	7404 <btle_channel_index>
    84ce:	2824      	cmp	r0, #36	; 0x24
    84d0:	f67f af40 	bls.w	8354 <le_phy_main+0xd8>
    84d4:	782b      	ldrb	r3, [r5, #0]
    84d6:	f003 020f 	and.w	r2, r3, #15
    84da:	2a06      	cmp	r2, #6
    84dc:	d807      	bhi.n	84ee <le_phy_main+0x272>
    84de:	2301      	movs	r3, #1
    84e0:	4093      	lsls	r3, r2
    84e2:	f013 0f55 	tst.w	r3, #85	; 0x55
    84e6:	d10a      	bne.n	84fe <le_phy_main+0x282>
    84e8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    84ec:	d111      	bne.n	8512 <le_phy_main+0x296>
	buffer->available = 1;
    84ee:	2201      	movs	r2, #1
    84f0:	9b05      	ldr	r3, [sp, #20]
    84f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		handle_usb(0);
    84f6:	2000      	movs	r0, #0
    84f8:	f7ff f956 	bl	77a8 <handle_usb>
    84fc:	e6fe      	b.n	82fc <le_phy_main+0x80>
			if (buf->size < 2 + 6)
    84fe:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    8502:	2b07      	cmp	r3, #7
    8504:	d9f3      	bls.n	84ee <le_phy_main+0x272>
			return bd_addr_cmp(&buf->data[2]);
    8506:	1ca8      	adds	r0, r5, #2
				   bd_addr_cmp(&buf->data[8]);
    8508:	f7ff fbce 	bl	7ca8 <bd_addr_cmp>
			return bd_addr_cmp(&buf->data[2]) ||
    850c:	2800      	cmp	r0, #0
    850e:	d0ee      	beq.n	84ee <le_phy_main+0x272>
    8510:	e720      	b.n	8354 <le_phy_main+0xd8>
			if (buf->size < 2 + 6 + 6)
    8512:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    8516:	2b0d      	cmp	r3, #13
    8518:	d9e9      	bls.n	84ee <le_phy_main+0x272>
			return bd_addr_cmp(&buf->data[2]) ||
    851a:	1ca8      	adds	r0, r5, #2
    851c:	f7ff fbc4 	bl	7ca8 <bd_addr_cmp>
    8520:	2800      	cmp	r0, #0
    8522:	f47f af17 	bne.w	8354 <le_phy_main+0xd8>
				   bd_addr_cmp(&buf->data[8]);
    8526:	f105 0008 	add.w	r0, r5, #8
    852a:	e7ed      	b.n	8508 <le_phy_main+0x28c>
	f->clkn_high = 0;
    852c:	f04f 0a00 	mov.w	sl, #0
	f->pkt_type = LE_PACKET;
    8530:	2301      	movs	r3, #1
	f->clkn_high = 0;
    8532:	f880 a003 	strb.w	sl, [r0, #3]
	f->pkt_type = LE_PACKET;
    8536:	7003      	strb	r3, [r0, #0]
	f->clk100ns = packet->timestamp;
    8538:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
	memcpy(f->data, &packet->access_address, 4);
    853c:	f508 718a 	add.w	r1, r8, #276	; 0x114
	f->clk100ns = packet->timestamp;
    8540:	6043      	str	r3, [r0, #4]
	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    8542:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
	memcpy(f->data, &packet->access_address, 4);
    8546:	300e      	adds	r0, #14
	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    8548:	3b62      	subs	r3, #98	; 0x62
    854a:	f800 3c0c 	strb.w	r3, [r0, #-12]
	f->rssi_avg = packet->rssi_sum / packet->size;
    854e:	f8d8 2104 	ldr.w	r2, [r8, #260]	; 0x104
    8552:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
    8556:	fbb3 f3f2 	udiv	r3, r3, r2
    855a:	f800 3c04 	strb.w	r3, [r0, #-4]
	f->rssi_min = packet->rssi_min;
    855e:	f898 311c 	ldrb.w	r3, [r8, #284]	; 0x11c
	memcpy(f->data, &packet->access_address, 4);
    8562:	2204      	movs	r2, #4
	f->rssi_min = packet->rssi_min;
    8564:	f800 3c05 	strb.w	r3, [r0, #-5]
	f->rssi_max = packet->rssi_max;
    8568:	f898 311d 	ldrb.w	r3, [r8, #285]	; 0x11d
	f->rssi_count = 0;
    856c:	f800 ac03 	strb.w	sl, [r0, #-3]
	f->rssi_max = packet->rssi_max;
    8570:	f800 3c06 	strb.w	r3, [r0, #-6]
	memcpy(f->data, &packet->access_address, 4);
    8574:	f002 fd28 	bl	afc8 <memcpy>
	memcpy(f->data+4, packet->data, DMA_SIZE-4);
    8578:	222e      	movs	r2, #46	; 0x2e
    857a:	4641      	mov	r1, r8
    857c:	f105 0012 	add.w	r0, r5, #18
    8580:	f002 fd22 	bl	afc8 <memcpy>
	f->status = 0;
    8584:	f885 a001 	strb.w	sl, [r5, #1]
    8588:	e6fc      	b.n	8384 <le_phy_main+0x108>
	reset_conn();
    858a:	f7ff fba1 	bl	7cd0 <reset_conn>
    858e:	e7ae      	b.n	84ee <le_phy_main+0x272>
    8590:	10000c50 	.word	0x10000c50
    8594:	10003ca4 	.word	0x10003ca4
    8598:	40008004 	.word	0x40008004
    859c:	4000800c 	.word	0x4000800c
    85a0:	e000e100 	.word	0xe000e100
    85a4:	100004a0 	.word	0x100004a0
    85a8:	10003cd4 	.word	0x10003cd4
    85ac:	8e89bed6 	.word	0x8e89bed6
    85b0:	10000a70 	.word	0x10000a70
    85b4:	10000a5e 	.word	0x10000a5e
    85b8:	2009c03c 	.word	0x2009c03c
    85bc:	10000450 	.word	0x10000450
    85c0:	2009c038 	.word	0x2009c038
    85c4:	40008008 	.word	0x40008008
    85c8:	4000801c 	.word	0x4000801c
    85cc:	000186a0 	.word	0x000186a0
    85d0:	13038dc0 	.word	0x13038dc0
    85d4:	10000c90 	.word	0x10000c90
    85d8:	10003cd8 	.word	0x10003cd8
    85dc:	e000e180 	.word	0xe000e180
    85e0:	40008014 	.word	0x40008014
		if ((buf->data[0] & 0b11) == 0b11 && buf->data[1] > 0) {
    85e4:	f001 0103 	and.w	r1, r1, #3
    85e8:	2903      	cmp	r1, #3
    85ea:	d180      	bne.n	84ee <le_phy_main+0x272>
    85ec:	f895 8001 	ldrb.w	r8, [r5, #1]
    85f0:	f1b8 0f00 	cmp.w	r8, #0
    85f4:	f43f af7b 	beq.w	84ee <le_phy_main+0x272>
			switch (buf->data[2]) {
    85f8:	78ab      	ldrb	r3, [r5, #2]
    85fa:	b1a3      	cbz	r3, 8626 <le_phy_main+0x3aa>
    85fc:	2b01      	cmp	r3, #1
    85fe:	f47f af76 	bne.w	84ee <le_phy_main+0x272>
					if (buf->data[1] == 8)
    8602:	f1b8 0f08 	cmp.w	r8, #8
    8606:	f47f af72 	bne.w	84ee <le_phy_main+0x272>
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    860a:	4641      	mov	r1, r8
    860c:	2202      	movs	r2, #2
    860e:	4628      	mov	r0, r5
	conn.channel_map_update_pending = 1;
    8610:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    8614:	f7ff fb3a 	bl	7c8c <extract_field>
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    8618:	4925      	ldr	r1, [pc, #148]	; (86b0 <le_phy_main+0x434>)
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    861a:	f8a4 0124 	strh.w	r0, [r4, #292]	; 0x124
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    861e:	1ce8      	adds	r0, r5, #3
    8620:	f7fe ffbc 	bl	759c <le_parse_channel_map>
    8624:	e763      	b.n	84ee <le_phy_main+0x272>
					if (buf->data[1] == 12)
    8626:	f1b8 0f0c 	cmp.w	r8, #12
    862a:	f47f af60 	bne.w	84ee <le_phy_main+0x272>
	conn.win_size            = extract_field(buf, 3, 1);
    862e:	2201      	movs	r2, #1
    8630:	4628      	mov	r0, r5
    8632:	f7ff fb2b 	bl	7c8c <extract_field>
	conn.win_offset          = extract_field(buf, 4, 2);
    8636:	2202      	movs	r2, #2
	conn.win_size            = extract_field(buf, 3, 1);
    8638:	b2c6      	uxtb	r6, r0
	conn.win_offset          = extract_field(buf, 4, 2);
    863a:	2104      	movs	r1, #4
    863c:	4628      	mov	r0, r5
	conn.win_size            = extract_field(buf, 3, 1);
    863e:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset          = extract_field(buf, 4, 2);
    8642:	f7ff fb23 	bl	7c8c <extract_field>
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    8646:	2202      	movs	r2, #2
	conn.win_offset          = extract_field(buf, 4, 2);
    8648:	4682      	mov	sl, r0
    864a:	63e0      	str	r0, [r4, #60]	; 0x3c
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    864c:	2106      	movs	r1, #6
    864e:	4628      	mov	r0, r5
    8650:	f7ff fb1c 	bl	7c8c <extract_field>
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    8654:	2202      	movs	r2, #2
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    8656:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    865a:	9003      	str	r0, [sp, #12]
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    865c:	210a      	movs	r1, #10
    865e:	4628      	mov	r0, r5
    8660:	f7ff fb14 	bl	7c8c <extract_field>
	conn.conn_update_instant = extract_field(buf, 12, 2);
    8664:	2202      	movs	r2, #2
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    8666:	4683      	mov	fp, r0
    8668:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
	conn.conn_update_instant = extract_field(buf, 12, 2);
    866c:	4641      	mov	r1, r8
    866e:	4628      	mov	r0, r5
    8670:	f7ff fb0c 	bl	7c8c <extract_field>
	conn.win_size   *= USEC(1250);
    8674:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8678:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    867c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
	conn.win_offset *= USEC(1250);
    8680:	f243 02d4 	movw	r2, #12500	; 0x30d4
	conn.conn_update_pending_interval *= USEC(1250);
    8684:	9b03      	ldr	r3, [sp, #12]
	conn.win_offset *= USEC(1250);
    8686:	fb02 f10a 	mul.w	r1, r2, sl
	conn.conn_update_pending_interval *= USEC(1250);
    868a:	4353      	muls	r3, r2
    868c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    8690:	4b08      	ldr	r3, [pc, #32]	; (86b4 <le_phy_main+0x438>)
	conn.win_size   *= USEC(1250);
    8692:	00b6      	lsls	r6, r6, #2
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    8694:	fb03 f30b 	mul.w	r3, r3, fp
    8698:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	conn.conn_update_pending = 1;
    869c:	2301      	movs	r3, #1
	conn.conn_update_instant = extract_field(buf, 12, 2);
    869e:	f8a4 011c 	strh.w	r0, [r4, #284]	; 0x11c
	conn.win_size   *= USEC(1250);
    86a2:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset *= USEC(1250);
    86a6:	63e1      	str	r1, [r4, #60]	; 0x3c
	conn.conn_update_pending = 1;
    86a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    86ac:	e71f      	b.n	84ee <le_phy_main+0x272>
    86ae:	bf00      	nop
    86b0:	10000d78 	.word	0x10000d78
    86b4:	000186a0 	.word	0x000186a0

000086b8 <queue_init>:

// queue implementation is based heavily on Koopman's "Better Embedded
// Systems Software" section 20.3.3.1 pg 209

void queue_init(queue_t *f) {
	f->head = 0;
    86b8:	2300      	movs	r3, #0
    86ba:	6283      	str	r3, [r0, #40]	; 0x28
	f->tail = 0;
    86bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    86be:	4770      	bx	lr

000086c0 <queue_insert>:

// insert
int queue_insert(queue_t *f, void *x) {
	unsigned newtail;
	// access next free element
	newtail = f->tail + 1;
    86c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    86c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
	newtail = f->tail + 1;
    86c4:	3301      	adds	r3, #1
	if (newtail >= FIFOSIZE) { newtail = 0; }
    86c6:	2b0a      	cmp	r3, #10
    86c8:	bf28      	it	cs
    86ca:	2300      	movcs	r3, #0
	if (newtail == f->head) { return 0; }
    86cc:	4293      	cmp	r3, r2

	// write data before updating pointer
	f->data[newtail] = x;
    86ce:	bf1d      	ittte	ne
    86d0:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
	f->tail = newtail;
    86d4:	62c3      	strne	r3, [r0, #44]	; 0x2c

	return 1;
    86d6:	2001      	movne	r0, #1
	if (newtail == f->head) { return 0; }
    86d8:	2000      	moveq	r0, #0
}
    86da:	4770      	bx	lr

000086dc <queue_remove>:

// TODO remove
int queue_remove(queue_t *f, void **x) {
	unsigned newhead;

	if (f->head == f->tail) { return 0; }
    86dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    86de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    86e0:	4293      	cmp	r3, r2
    86e2:	d009      	beq.n	86f8 <queue_remove+0x1c>

	newhead = f->head + 1;
    86e4:	3301      	adds	r3, #1

	if (newhead >= FIFOSIZE) { newhead = 0; }
    86e6:	2b0a      	cmp	r3, #10
    86e8:	bf28      	it	cs
    86ea:	2300      	movcs	r3, #0

	*x = f->data[newhead];
    86ec:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    86f0:	600a      	str	r2, [r1, #0]
	f->head = newhead;
    86f2:	6283      	str	r3, [r0, #40]	; 0x28

	return 1;
    86f4:	2001      	movs	r0, #1
    86f6:	4770      	bx	lr
	if (f->head == f->tail) { return 0; }
    86f8:	2000      	movs	r0, #0
}
    86fa:	4770      	bx	lr

000086fc <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    86fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8700:	b098      	sub	sp, #96	; 0x60
    8702:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    8704:	2315      	movs	r3, #21
    8706:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	txbuf[1] = 0; // request
    870a:	2300      	movs	r3, #0
    870c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	// read device serial number
	command[0] = 58;
    8710:	233a      	movs	r3, #58	; 0x3a
    8712:	60bb      	str	r3, [r7, #8]
	iap_entry(command, result);
    8714:	4b98      	ldr	r3, [pc, #608]	; (8978 <cc2400_rangetest+0x27c>)
{
    8716:	4682      	mov	sl, r0
	iap_entry(command, result);
    8718:	681b      	ldr	r3, [r3, #0]
    871a:	f107 011c 	add.w	r1, r7, #28
    871e:	f107 0008 	add.w	r0, r7, #8
{
    8722:	f8c7 d004 	str.w	sp, [r7, #4]
	iap_entry(command, result);
    8726:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8728:	7f3b      	ldrb	r3, [r7, #28]
    872a:	2b00      	cmp	r3, #0
    872c:	f040 8120 	bne.w	8970 <cc2400_rangetest+0x274>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8730:	6a3b      	ldr	r3, [r7, #32]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    8732:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8736:	0e1a      	lsrs	r2, r3, #24
    8738:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
	txbuf[3] = (result[1] >> 16) & 0xFF;
    873c:	0c1a      	lsrs	r2, r3, #16
    873e:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
	txbuf[5] = result[1] & 0xFF;
    8742:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8746:	0a1a      	lsrs	r2, r3, #8
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[4] = (result[1] >> 8) & 0xFF;
    874a:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
	txbuf[6] = (result[2] >> 24) & 0xFF;
    874e:	0e1a      	lsrs	r2, r3, #24
    8750:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8754:	0c1a      	lsrs	r2, r3, #16
    8756:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
	txbuf[9] = result[2] & 0xFF;
    875a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	txbuf[8] = (result[2] >> 8) & 0xFF;
    875e:	0a1a      	lsrs	r2, r3, #8
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8760:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8762:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8766:	0e1a      	lsrs	r2, r3, #24
    8768:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    876c:	0c1a      	lsrs	r2, r3, #16
    876e:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
	txbuf[13] = result[3] & 0xFF;
    8772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8776:	0a1a      	lsrs	r2, r3, #8
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[12] = (result[3] >> 8) & 0xFF;
    877a:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
	txbuf[14] = (result[4] >> 24) & 0xFF;
    877e:	0e1a      	lsrs	r2, r3, #24
    8780:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8784:	0c1a      	lsrs	r2, r3, #16
    8786:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
	txbuf[17] = result[4] & 0xFF;
    878a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	txbuf[16] = (result[4] >> 8) & 0xFF;
    878e:	0a1a      	lsrs	r2, r3, #8
	txbuf[20] = 0xff; // reply pa
    8790:	23ff      	movs	r3, #255	; 0xff
	cc2400_set(LMTST,   0x2b22);
    8792:	2012      	movs	r0, #18
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8794:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
	txbuf[20] = 0xff; // reply pa
    8798:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	txbuf[21] = 0xff; // reply number
    879c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	cc2400_set(LMTST,   0x2b22);
    87a0:	f001 f8fd 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    87a4:	f241 314b 	movw	r1, #4939	; 0x134b
    87a8:	2014      	movs	r0, #20
    87aa:	f001 f8f8 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    87ae:	f640 51f1 	movw	r1, #3569	; 0xdf1
    87b2:	2020      	movs	r0, #32
    87b4:	f001 f8f3 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    87b8:	f8ba 1000 	ldrh.w	r1, [sl]
    87bc:	2002      	movs	r0, #2
    87be:	b289      	uxth	r1, r1
    87c0:	f001 f8ed 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    87c4:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    87c8:	202d      	movs	r0, #45	; 0x2d
    87ca:	f001 f8e8 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    87ce:	f241 5184 	movw	r1, #5508	; 0x1584
    87d2:	202c      	movs	r0, #44	; 0x2c
    87d4:	f001 f8e3 	bl	999e <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    87d8:	2108      	movs	r1, #8
    87da:	2005      	movs	r0, #5
    87dc:	f001 f8df 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    87e0:	2129      	movs	r1, #41	; 0x29
    87e2:	2003      	movs	r0, #3
    87e4:	f001 f8db 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    87e8:	f001 f974 	bl	9ad4 <cc2400_status>
    87ec:	0642      	lsls	r2, r0, #25
    87ee:	d5fb      	bpl.n	87e8 <cc2400_rangetest+0xec>
	cc2400_strobe(SFSON);
    87f0:	2061      	movs	r0, #97	; 0x61
    87f2:	f001 f976 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    87f6:	f001 f96d 	bl	9ad4 <cc2400_status>
    87fa:	0743      	lsls	r3, r0, #29
    87fc:	d5fb      	bpl.n	87f6 <cc2400_rangetest+0xfa>
	TXLED_SET;
    87fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    8802:	4b5e      	ldr	r3, [pc, #376]	; (897c <cc2400_rangetest+0x280>)
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8804:	2180      	movs	r1, #128	; 0x80
    8806:	2400      	movs	r4, #0
    8808:	4698      	mov	r8, r3
	TXLED_SET;
    880a:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    880c:	4a5c      	ldr	r2, [pc, #368]	; (8980 <cc2400_rangetest+0x284>)
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    880e:	f107 0530 	add.w	r5, r7, #48	; 0x30
	PAEN_SET;
    8812:	6011      	str	r1, [r2, #0]
    8814:	b2e6      	uxtb	r6, r4
		cc2400_set(FREND, 8 | pa);
    8816:	f046 0108 	orr.w	r1, r6, #8
    881a:	2005      	movs	r0, #5
    881c:	f001 f8bf 	bl	999e <cc2400_set>
		txbuf[18] = pa;
    8820:	f887 6042 	strb.w	r6, [r7, #66]	; 0x42
		for (i = 0; i < 16; i++) {
    8824:	2600      	movs	r6, #0
			txbuf[19] = i;
    8826:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    882a:	200e      	movs	r0, #14
    882c:	f001 f8ae 	bl	998c <cc2400_get>
    8830:	f000 001f 	and.w	r0, r0, #31
    8834:	280f      	cmp	r0, #15
    8836:	d1f8      	bne.n	882a <cc2400_rangetest+0x12e>
    8838:	f04f 0900 	mov.w	r9, #0
				cc2400_set8(FIFOREG, txbuf[j]);
    883c:	f815 1009 	ldrb.w	r1, [r5, r9]
    8840:	2070      	movs	r0, #112	; 0x70
			for (j = 0; j < len; j++)
    8842:	f109 0901 	add.w	r9, r9, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    8846:	f001 f8b8 	bl	99ba <cc2400_set8>
			for (j = 0; j < len; j++)
    884a:	f1b9 0f16 	cmp.w	r9, #22
    884e:	d1f5      	bne.n	883c <cc2400_rangetest+0x140>
			cc2400_strobe(STX);
    8850:	2063      	movs	r0, #99	; 0x63
		for (i = 0; i < 16; i++) {
    8852:	3601      	adds	r6, #1
			cc2400_strobe(STX);
    8854:	f001 f945 	bl	9ae2 <cc2400_strobe>
		for (i = 0; i < 16; i++) {
    8858:	2e10      	cmp	r6, #16
    885a:	d1e4      	bne.n	8826 <cc2400_rangetest+0x12a>
    885c:	3401      	adds	r4, #1
	for (pa = 0; pa < 8; pa++) {
    885e:	2c08      	cmp	r4, #8
    8860:	d1d8      	bne.n	8814 <cc2400_rangetest+0x118>
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8862:	200e      	movs	r0, #14
    8864:	f001 f892 	bl	998c <cc2400_get>
    8868:	f000 001f 	and.w	r0, r0, #31
    886c:	280f      	cmp	r0, #15
    886e:	d1f8      	bne.n	8862 <cc2400_rangetest+0x166>
	TXLED_CLR;
    8870:	f44f 7380 	mov.w	r3, #256	; 0x100
    8874:	4c43      	ldr	r4, [pc, #268]	; (8984 <cc2400_rangetest+0x288>)
	cc2400_strobe(SRFOFF);
    8876:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    8878:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
    887a:	f001 f932 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    887e:	f001 f929 	bl	9ad4 <cc2400_status>
    8882:	0746      	lsls	r6, r0, #29
    8884:	d4fb      	bmi.n	887e <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8886:	f8ba 1000 	ldrh.w	r1, [sl]
    888a:	2002      	movs	r0, #2
    888c:	3901      	subs	r1, #1
    888e:	b289      	uxth	r1, r1
    8890:	f001 f885 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8894:	f001 f91e 	bl	9ad4 <cc2400_status>
    8898:	0640      	lsls	r0, r0, #25
    889a:	d5fb      	bpl.n	8894 <cc2400_rangetest+0x198>
	cc2400_strobe(SFSON);
    889c:	2061      	movs	r0, #97	; 0x61
    889e:	f001 f920 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    88a2:	f001 f917 	bl	9ad4 <cc2400_status>
    88a6:	0741      	lsls	r1, r0, #29
    88a8:	d5fb      	bpl.n	88a2 <cc2400_rangetest+0x1a6>
	RXLED_SET;
    88aa:	2310      	movs	r3, #16
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
    88ac:	f107 0648 	add.w	r6, r7, #72	; 0x48
	RXLED_SET;
    88b0:	f8c8 3000 	str.w	r3, [r8]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    88b4:	200e      	movs	r0, #14
    88b6:	f001 f869 	bl	998c <cc2400_get>
    88ba:	f000 001f 	and.w	r0, r0, #31
    88be:	280f      	cmp	r0, #15
    88c0:	d1f8      	bne.n	88b4 <cc2400_rangetest+0x1b8>
		cc2400_strobe(SRX);
    88c2:	2062      	movs	r0, #98	; 0x62
    88c4:	f001 f90d 	bl	9ae2 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    88c8:	f001 f904 	bl	9ad4 <cc2400_status>
    88cc:	06c2      	lsls	r2, r0, #27
    88ce:	d5fb      	bpl.n	88c8 <cc2400_rangetest+0x1cc>
		USRLED_SET;
    88d0:	2302      	movs	r3, #2
		for (j = 0; j < len; j++)
    88d2:	f04f 0900 	mov.w	r9, #0
		USRLED_SET;
    88d6:	f8c8 3000 	str.w	r3, [r8]
			rxbuf[j] = cc2400_get8(FIFOREG);
    88da:	2070      	movs	r0, #112	; 0x70
    88dc:	f001 f864 	bl	99a8 <cc2400_get8>
    88e0:	f806 0009 	strb.w	r0, [r6, r9]
		for (j = 0; j < len; j++)
    88e4:	f109 0901 	add.w	r9, r9, #1
    88e8:	f1b9 0f16 	cmp.w	r9, #22
    88ec:	d1f5      	bne.n	88da <cc2400_rangetest+0x1de>
		if (cc2400_status() & STATUS_CRC_OK)
    88ee:	f001 f8f1 	bl	9ad4 <cc2400_status>
    88f2:	0703      	lsls	r3, r0, #28
    88f4:	d402      	bmi.n	88fc <cc2400_rangetest+0x200>
			break;
		USRLED_CLR;
    88f6:	2302      	movs	r3, #2
    88f8:	6023      	str	r3, [r4, #0]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    88fa:	e7db      	b.n	88b4 <cc2400_rangetest+0x1b8>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    88fc:	200e      	movs	r0, #14
    88fe:	f001 f845 	bl	998c <cc2400_get>
    8902:	f000 001f 	and.w	r0, r0, #31
    8906:	280f      	cmp	r0, #15
    8908:	d1f8      	bne.n	88fc <cc2400_rangetest+0x200>
	cc2400_strobe(SRFOFF);
    890a:	2064      	movs	r0, #100	; 0x64
    890c:	f001 f8e9 	bl	9ae2 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8910:	f001 f8e0 	bl	9ad4 <cc2400_status>
    8914:	f010 0004 	ands.w	r0, r0, #4
    8918:	d1fa      	bne.n	8910 <cc2400_rangetest+0x214>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    891a:	2280      	movs	r2, #128	; 0x80
    891c:	4b1a      	ldr	r3, [pc, #104]	; (8988 <cc2400_rangetest+0x28c>)
    891e:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8920:	2310      	movs	r3, #16
    8922:	6023      	str	r3, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    8924:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
	rr.valid       = 1;
    8928:	4b18      	ldr	r3, [pc, #96]	; (898c <cc2400_rangetest+0x290>)
    892a:	2201      	movs	r2, #1
	rr.request_pa  = rxbuf[18];
    892c:	7059      	strb	r1, [r3, #1]
	rr.request_num = rxbuf[19];
    892e:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
	rr.valid       = 1;
    8932:	701a      	strb	r2, [r3, #0]
	rr.request_num = rxbuf[19];
    8934:	7099      	strb	r1, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8936:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    893a:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
	rr.reply_pa    = rxbuf[20];
    893e:	70d9      	strb	r1, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8940:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
    8944:	7119      	strb	r1, [r3, #4]
	for (i = 0; i < 18; i++)
    8946:	4601      	mov	r1, r0
		if (rxbuf[i] != txbuf[i])
    8948:	f816 c001 	ldrb.w	ip, [r6, r1]
    894c:	f815 e001 	ldrb.w	lr, [r5, r1]
    8950:	45f4      	cmp	ip, lr
    8952:	bf18      	it	ne
    8954:	1c8a      	addne	r2, r1, #2
	for (i = 0; i < 18; i++)
    8956:	f101 0101 	add.w	r1, r1, #1
    895a:	bf1c      	itt	ne
    895c:	b2d2      	uxtbne	r2, r2
		if (rxbuf[i] != txbuf[i])
    895e:	2001      	movne	r0, #1
	for (i = 0; i < 18; i++)
    8960:	2912      	cmp	r1, #18
    8962:	d1f1      	bne.n	8948 <cc2400_rangetest+0x24c>
    8964:	b100      	cbz	r0, 8968 <cc2400_rangetest+0x26c>
    8966:	701a      	strb	r2, [r3, #0]
			rr.valid = 2 + i;

	USRLED_CLR;
    8968:	2302      	movs	r3, #2
    896a:	6023      	str	r3, [r4, #0]
    896c:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
    8970:	3760      	adds	r7, #96	; 0x60
    8972:	46bd      	mov	sp, r7
    8974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8978:	0000bcb0 	.word	0x0000bcb0
    897c:	2009c038 	.word	0x2009c038
    8980:	2009c058 	.word	0x2009c058
    8984:	2009c03c 	.word	0x2009c03c
    8988:	2009c05c 	.word	0x2009c05c
    898c:	100019d0 	.word	0x100019d0

00008990 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8994:	b087      	sub	sp, #28
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
    8996:	f8df a170 	ldr.w	sl, [pc, #368]	; 8b08 <cc2400_repeater+0x178>
{
    899a:	4681      	mov	r9, r0
		cc2400_set(FSDIV,   *chan_ptr - 1);
    899c:	2502      	movs	r5, #2
    899e:	46d3      	mov	fp, sl
		cc2400_set(LMTST,   0x2b22);
    89a0:	f642 3122 	movw	r1, #11042	; 0x2b22
    89a4:	2012      	movs	r0, #18
    89a6:	f000 fffa 	bl	999e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    89aa:	f241 314b 	movw	r1, #4939	; 0x134b
    89ae:	2014      	movs	r0, #20
    89b0:	f000 fff5 	bl	999e <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    89b4:	f8b9 1000 	ldrh.w	r1, [r9]
    89b8:	2002      	movs	r0, #2
    89ba:	3901      	subs	r1, #1
    89bc:	b289      	uxth	r1, r1
    89be:	f000 ffee 	bl	999e <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    89c2:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    89c6:	202d      	movs	r0, #45	; 0x2d
    89c8:	f000 ffe9 	bl	999e <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    89cc:	f241 5184 	movw	r1, #5508	; 0x1584
    89d0:	202c      	movs	r0, #44	; 0x2c
    89d2:	f000 ffe4 	bl	999e <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    89d6:	2108      	movs	r1, #8
    89d8:	2005      	movs	r0, #5
    89da:	f000 ffe0 	bl	999e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    89de:	2129      	movs	r1, #41	; 0x29
    89e0:	2003      	movs	r0, #3
    89e2:	f000 ffdc 	bl	999e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    89e6:	f001 f875 	bl	9ad4 <cc2400_status>
    89ea:	0641      	lsls	r1, r0, #25
    89ec:	d5fb      	bpl.n	89e6 <cc2400_repeater+0x56>
		cc2400_strobe(SFSON);
    89ee:	2061      	movs	r0, #97	; 0x61
    89f0:	f001 f877 	bl	9ae2 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    89f4:	f001 f86e 	bl	9ad4 <cc2400_status>
    89f8:	0742      	lsls	r2, r0, #29
    89fa:	d5fb      	bpl.n	89f4 <cc2400_repeater+0x64>
		RXLED_SET;
    89fc:	2310      	movs	r3, #16
    89fe:	f8ca 3000 	str.w	r3, [sl]
		TXLED_CLR;
    8a02:	f44f 7380 	mov.w	r3, #256	; 0x100
    8a06:	4c3e      	ldr	r4, [pc, #248]	; (8b00 <cc2400_repeater+0x170>)
		USRLED_CLR;
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8a08:	2280      	movs	r2, #128	; 0x80
    8a0a:	4627      	mov	r7, r4
		TXLED_CLR;
    8a0c:	6023      	str	r3, [r4, #0]
		PAEN_SET;
    8a0e:	4b3d      	ldr	r3, [pc, #244]	; (8b04 <cc2400_repeater+0x174>)
		USRLED_CLR;
    8a10:	6025      	str	r5, [r4, #0]
		PAEN_SET;
    8a12:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8a14:	200e      	movs	r0, #14
    8a16:	f000 ffb9 	bl	998c <cc2400_get>
    8a1a:	f000 001f 	and.w	r0, r0, #31
    8a1e:	280f      	cmp	r0, #15
    8a20:	d1f8      	bne.n	8a14 <cc2400_repeater+0x84>
			USRLED_CLR;
    8a22:	603d      	str	r5, [r7, #0]
			cc2400_strobe(SRX);
    8a24:	2062      	movs	r0, #98	; 0x62
    8a26:	f001 f85c 	bl	9ae2 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8a2a:	f001 f853 	bl	9ad4 <cc2400_status>
    8a2e:	06c3      	lsls	r3, r0, #27
    8a30:	d5fb      	bpl.n	8a2a <cc2400_repeater+0x9a>
			USRLED_SET;
			for (i = 0; i < len; i++)
    8a32:	2600      	movs	r6, #0
			USRLED_SET;
    8a34:	f8cb 5000 	str.w	r5, [fp]
				buf[i] = cc2400_get8(FIFOREG);
    8a38:	2070      	movs	r0, #112	; 0x70
    8a3a:	f000 ffb5 	bl	99a8 <cc2400_get8>
    8a3e:	f80d 0006 	strb.w	r0, [sp, r6]
			for (i = 0; i < len; i++)
    8a42:	3601      	adds	r6, #1
    8a44:	2e16      	cmp	r6, #22
    8a46:	d1f7      	bne.n	8a38 <cc2400_repeater+0xa8>
			if (cc2400_status() & STATUS_CRC_OK)
    8a48:	f001 f844 	bl	9ad4 <cc2400_status>
    8a4c:	0706      	lsls	r6, r0, #28
    8a4e:	d5e1      	bpl.n	8a14 <cc2400_repeater+0x84>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
		RXLED_CLR;
    8a50:	2310      	movs	r3, #16
		USRLED_CLR;
    8a52:	6025      	str	r5, [r4, #0]
		cc2400_strobe(SRFOFF);
    8a54:	2064      	movs	r0, #100	; 0x64
		RXLED_CLR;
    8a56:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    8a58:	f001 f843 	bl	9ae2 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8a5c:	f001 f83a 	bl	9ad4 <cc2400_status>
    8a60:	0740      	lsls	r0, r0, #29
    8a62:	d4fb      	bmi.n	8a5c <cc2400_repeater+0xcc>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8a64:	f001 f836 	bl	9ad4 <cc2400_status>
    8a68:	0641      	lsls	r1, r0, #25
    8a6a:	d5fb      	bpl.n	8a64 <cc2400_repeater+0xd4>
		cc2400_set(FSDIV, *chan_ptr);
    8a6c:	f8b9 1000 	ldrh.w	r1, [r9]
    8a70:	2002      	movs	r0, #2
    8a72:	b289      	uxth	r1, r1
    8a74:	f000 ff93 	bl	999e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8a78:	f001 f82c 	bl	9ad4 <cc2400_status>
    8a7c:	0642      	lsls	r2, r0, #25
    8a7e:	d5fb      	bpl.n	8a78 <cc2400_repeater+0xe8>
		cc2400_strobe(SFSON);
    8a80:	2061      	movs	r0, #97	; 0x61
    8a82:	f001 f82e 	bl	9ae2 <cc2400_strobe>
		TXLED_SET;
    8a86:	f44f 7380 	mov.w	r3, #256	; 0x100
    8a8a:	f8cb 3000 	str.w	r3, [fp]
		buf[0] = len - 1; // length of data (rest of payload)
    8a8e:	2315      	movs	r3, #21
    8a90:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    8a94:	2301      	movs	r3, #1
    8a96:	2600      	movs	r6, #0
    8a98:	f88d 3001 	strb.w	r3, [sp, #1]
    8a9c:	b2f7      	uxtb	r7, r6
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
    8a9e:	f047 0108 	orr.w	r1, r7, #8
    8aa2:	2005      	movs	r0, #5
    8aa4:	f000 ff7b 	bl	999e <cc2400_set>
			buf[20] = pa;
    8aa8:	f88d 7014 	strb.w	r7, [sp, #20]
			for (i = 0; i < 16; i++) {
    8aac:	2700      	movs	r7, #0
				buf[21] = i;
    8aae:	f88d 7015 	strb.w	r7, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ab2:	200e      	movs	r0, #14
    8ab4:	f000 ff6a 	bl	998c <cc2400_get>
    8ab8:	f000 001f 	and.w	r0, r0, #31
    8abc:	280f      	cmp	r0, #15
    8abe:	d1f8      	bne.n	8ab2 <cc2400_repeater+0x122>
    8ac0:	f04f 0800 	mov.w	r8, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    8ac4:	f81d 1008 	ldrb.w	r1, [sp, r8]
    8ac8:	2070      	movs	r0, #112	; 0x70
				for (j = 0; j < len; j++)
    8aca:	f108 0801 	add.w	r8, r8, #1
					cc2400_set8(FIFOREG, buf[j]);
    8ace:	f000 ff74 	bl	99ba <cc2400_set8>
				for (j = 0; j < len; j++)
    8ad2:	f1b8 0f16 	cmp.w	r8, #22
    8ad6:	d1f5      	bne.n	8ac4 <cc2400_repeater+0x134>
				cc2400_strobe(STX);
    8ad8:	2063      	movs	r0, #99	; 0x63
			for (i = 0; i < 16; i++) {
    8ada:	3701      	adds	r7, #1
				cc2400_strobe(STX);
    8adc:	f001 f801 	bl	9ae2 <cc2400_strobe>
			for (i = 0; i < 16; i++) {
    8ae0:	2f10      	cmp	r7, #16
    8ae2:	d1e4      	bne.n	8aae <cc2400_repeater+0x11e>
    8ae4:	3601      	adds	r6, #1
		for (pa = 0; pa < 8; pa++) {
    8ae6:	2e08      	cmp	r6, #8
    8ae8:	d1d8      	bne.n	8a9c <cc2400_repeater+0x10c>
			}
		}
		TXLED_CLR;
    8aea:	f44f 7380 	mov.w	r3, #256	; 0x100
		cc2400_strobe(SRFOFF);
    8aee:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    8af0:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    8af2:	f000 fff6 	bl	9ae2 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8af6:	f000 ffed 	bl	9ad4 <cc2400_status>
    8afa:	0743      	lsls	r3, r0, #29
    8afc:	d4fb      	bmi.n	8af6 <cc2400_repeater+0x166>
    8afe:	e74f      	b.n	89a0 <cc2400_repeater+0x10>
    8b00:	2009c03c 	.word	0x2009c03c
    8b04:	2009c058 	.word	0x2009c058
    8b08:	2009c038 	.word	0x2009c038

00008b0c <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8b0c:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8b0e:	7803      	ldrb	r3, [r0, #0]
{
    8b10:	460d      	mov	r5, r1
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8b12:	b38b      	cbz	r3, 8b78 <cc2400_txtest+0x6c>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8b14:	7803      	ldrb	r3, [r0, #0]
    8b16:	2b01      	cmp	r3, #1
    8b18:	d12d      	bne.n	8b76 <cc2400_txtest+0x6a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8b1a:	2440      	movs	r4, #64	; 0x40
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    8b1c:	f642 3122 	movw	r1, #11042	; 0x2b22
    8b20:	2012      	movs	r0, #18
    8b22:	f000 ff3c 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8b26:	f243 314b 	movw	r1, #13131	; 0x334b
    8b2a:	2014      	movs	r0, #20
    8b2c:	f000 ff37 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8b30:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8b34:	2020      	movs	r0, #32
    8b36:	f000 ff32 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8b3a:	8829      	ldrh	r1, [r5, #0]
    8b3c:	2002      	movs	r0, #2
    8b3e:	b289      	uxth	r1, r1
    8b40:	f000 ff2d 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    8b44:	4621      	mov	r1, r4
    8b46:	2003      	movs	r0, #3
    8b48:	f000 ff29 	bl	999e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8b4c:	f000 ffc2 	bl	9ad4 <cc2400_status>
    8b50:	0642      	lsls	r2, r0, #25
    8b52:	d5fb      	bpl.n	8b4c <cc2400_txtest+0x40>
	cc2400_strobe(SFSON);
    8b54:	2061      	movs	r0, #97	; 0x61
    8b56:	f000 ffc4 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8b5a:	f000 ffbb 	bl	9ad4 <cc2400_status>
    8b5e:	0743      	lsls	r3, r0, #29
    8b60:	d5fb      	bpl.n	8b5a <cc2400_txtest+0x4e>
	TXLED_SET;
    8b62:	f44f 7280 	mov.w	r2, #256	; 0x100
    8b66:	4b05      	ldr	r3, [pc, #20]	; (8b7c <cc2400_txtest+0x70>)
	cc2400_strobe(STX);
    8b68:	2063      	movs	r0, #99	; 0x63
	TXLED_SET;
    8b6a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8b6c:	f000 ffb9 	bl	9ae2 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8b70:	2280      	movs	r2, #128	; 0x80
    8b72:	4b03      	ldr	r3, [pc, #12]	; (8b80 <cc2400_txtest+0x74>)
    8b74:	601a      	str	r2, [r3, #0]
    8b76:	bd38      	pop	{r3, r4, r5, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    8b78:	2429      	movs	r4, #41	; 0x29
    8b7a:	e7cf      	b.n	8b1c <cc2400_txtest+0x10>
    8b7c:	2009c038 	.word	0x2009c038
    8b80:	2009c058 	.word	0x2009c058

00008b84 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8b88:	4b03      	ldr	r3, [pc, #12]	; (8b98 <ssp_stop+0x14>)
    8b8a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8b8c:	4a03      	ldr	r2, [pc, #12]	; (8b9c <ssp_stop+0x18>)
    8b8e:	6813      	ldr	r3, [r2, #0]
    8b90:	f023 0302 	bic.w	r3, r3, #2
    8b94:	6013      	str	r3, [r2, #0]
    8b96:	4770      	bx	lr
    8b98:	2009c098 	.word	0x2009c098
    8b9c:	40030004 	.word	0x40030004

00008ba0 <do_rx>:
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
    8ba0:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    8ba2:	4c06      	ldr	r4, [pc, #24]	; (8bbc <do_rx+0x1c>)
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8ba4:	4906      	ldr	r1, [pc, #24]	; (8bc0 <do_rx+0x20>)
    8ba6:	1e43      	subs	r3, r0, #1
    8ba8:	3023      	adds	r0, #35	; 0x23
		while (!(SSP1SR & SSPSR_RNE)) ;
    8baa:	6822      	ldr	r2, [r4, #0]
    8bac:	0752      	lsls	r2, r2, #29
    8bae:	d5fc      	bpl.n	8baa <do_rx+0xa>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8bb0:	680a      	ldr	r2, [r1, #0]
    8bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8bb6:	4283      	cmp	r3, r0
    8bb8:	d1f7      	bne.n	8baa <do_rx+0xa>
	}
}
    8bba:	bd10      	pop	{r4, pc}
    8bbc:	4003000c 	.word	0x4003000c
    8bc0:	40030008 	.word	0x40030008

00008bc4 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    8bc4:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    8bc6:	f640 4435 	movw	r4, #3125	; 0xc35
    8bca:	4b07      	ldr	r3, [pc, #28]	; (8be8 <sleep_ms+0x24>)
    8bcc:	4a07      	ldr	r2, [pc, #28]	; (8bec <sleep_ms+0x28>)
    8bce:	681b      	ldr	r3, [r3, #0]
    8bd0:	6812      	ldr	r2, [r2, #0]
    8bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8bd6:	fb04 2303 	mla	r3, r4, r3, r2
    8bda:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    8bdc:	f242 7310 	movw	r3, #10000	; 0x2710
    8be0:	4359      	muls	r1, r3
    8be2:	60c1      	str	r1, [r0, #12]
    8be4:	bd10      	pop	{r4, pc}
    8be6:	bf00      	nop
    8be8:	10001454 	.word	0x10001454
    8bec:	40004008 	.word	0x40004008

00008bf0 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    8bf0:	f640 4135 	movw	r1, #3125	; 0xc35
    8bf4:	4b0a      	ldr	r3, [pc, #40]	; (8c20 <sleep_elapsed+0x30>)
    8bf6:	4a0b      	ldr	r2, [pc, #44]	; (8c24 <sleep_elapsed+0x34>)
    8bf8:	681b      	ldr	r3, [r3, #0]
    8bfa:	6812      	ldr	r2, [r2, #0]
    8bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8c00:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    8c04:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8c06:	68c0      	ldr	r0, [r0, #12]
	if (now < state->sleep_start)
    8c08:	4293      	cmp	r3, r2
		now += 3276800000;
    8c0a:	bf3c      	itt	cc
    8c0c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    8c10:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8c14:	1a9b      	subs	r3, r3, r2
}
    8c16:	4283      	cmp	r3, r0
    8c18:	bf34      	ite	cc
    8c1a:	2000      	movcc	r0, #0
    8c1c:	2001      	movcs	r0, #1
    8c1e:	4770      	bx	lr
    8c20:	10001454 	.word	0x10001454
    8c24:	40004008 	.word	0x40004008

00008c28 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    8c28:	4770      	bx	lr
    8c2a:	0000      	movs	r0, r0

00008c2c <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    8c2c:	2300      	movs	r3, #0
	channel = channels[state->channel_index];
    8c2e:	f640 1268 	movw	r2, #2408	; 0x968
	state->channel_index = 0;
    8c32:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    8c34:	4b02      	ldr	r3, [pc, #8]	; (8c40 <init_state+0x14>)
    8c36:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8c38:	2301      	movs	r3, #1
    8c3a:	7003      	strb	r3, [r0, #0]
    8c3c:	4770      	bx	lr
    8c3e:	bf00      	nop
    8c40:	1000049c 	.word	0x1000049c

00008c44 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8c44:	2301      	movs	r3, #1
    8c46:	7003      	strb	r3, [r0, #0]
    8c48:	4770      	bx	lr
    8c4a:	0000      	movs	r0, r0

00008c4c <cap_state>:
static void cap_state(ego_fsm_state_t *state) {
    8c4c:	b530      	push	{r4, r5, lr}
    8c4e:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    8c50:	2228      	movs	r2, #40	; 0x28
static void cap_state(ego_fsm_state_t *state) {
    8c52:	4604      	mov	r4, r0
	ego_packet_t packet = {
    8c54:	2100      	movs	r1, #0
    8c56:	4668      	mov	r0, sp
    8c58:	f7fb fad2 	bl	4200 <memset>
		.rxtime = CLK100NS,
    8c5c:	f640 4135 	movw	r1, #3125	; 0xc35
    8c60:	4b1a      	ldr	r3, [pc, #104]	; (8ccc <cap_state+0x80>)
    8c62:	4a1b      	ldr	r2, [pc, #108]	; (8cd0 <cap_state+0x84>)
    8c64:	681b      	ldr	r3, [r3, #0]
    8c66:	6812      	ldr	r2, [r2, #0]
    8c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8c6c:	fb01 2303 	mla	r3, r1, r3, r2
	if (sleep_elapsed(state)) {
    8c70:	4620      	mov	r0, r4
	ego_packet_t packet = {
    8c72:	9309      	str	r3, [sp, #36]	; 0x24
	if (sleep_elapsed(state)) {
    8c74:	f7ff ffbc 	bl	8bf0 <sleep_elapsed>
    8c78:	b128      	cbz	r0, 8c86 <cap_state+0x3a>
		sleep_ms(state, 4);
    8c7a:	2104      	movs	r1, #4
    8c7c:	4620      	mov	r0, r4
    8c7e:	f7ff ffa1 	bl	8bc4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8c82:	2303      	movs	r3, #3
    8c84:	7023      	strb	r3, [r4, #0]
	return cc2400_status() & SYNC_RECEIVED;
    8c86:	f000 ff25 	bl	9ad4 <cc2400_status>
	if (sync_received()) {
    8c8a:	06c3      	lsls	r3, r0, #27
    8c8c:	d512      	bpl.n	8cb4 <cap_state+0x68>
		RXLED_SET;
    8c8e:	2510      	movs	r5, #16
    8c90:	4b10      	ldr	r3, [pc, #64]	; (8cd4 <cap_state+0x88>)
		do_rx(&packet);
    8c92:	4668      	mov	r0, sp
		RXLED_SET;
    8c94:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    8c96:	f7ff ff83 	bl	8ba0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c9c:	4669      	mov	r1, sp
    8c9e:	2006      	movs	r0, #6
    8ca0:	f7fc f8dc 	bl	4e5c <enqueue_with_ts>
		RXLED_CLR;
    8ca4:	4b0c      	ldr	r3, [pc, #48]	; (8cd8 <cap_state+0x8c>)
		sleep_ms(state, 6);
    8ca6:	2106      	movs	r1, #6
		RXLED_CLR;
    8ca8:	601d      	str	r5, [r3, #0]
		sleep_ms(state, 6);
    8caa:	4620      	mov	r0, r4
    8cac:	f7ff ff8a 	bl	8bc4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8cb0:	2303      	movs	r3, #3
    8cb2:	7023      	strb	r3, [r4, #0]
	if (state->state != EGO_ST_CAP) {
    8cb4:	7823      	ldrb	r3, [r4, #0]
    8cb6:	2b02      	cmp	r3, #2
    8cb8:	d006      	beq.n	8cc8 <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    8cba:	2064      	movs	r0, #100	; 0x64
    8cbc:	f000 ff11 	bl	9ae2 <cc2400_strobe>
		ssp_stop();
    8cc0:	f7ff ff60 	bl	8b84 <ssp_stop>
		state->timer_active = 1;
    8cc4:	2301      	movs	r3, #1
    8cc6:	6123      	str	r3, [r4, #16]
}
    8cc8:	b00b      	add	sp, #44	; 0x2c
    8cca:	bd30      	pop	{r4, r5, pc}
    8ccc:	10001454 	.word	0x10001454
    8cd0:	40004008 	.word	0x40004008
    8cd4:	2009c038 	.word	0x2009c038
    8cd8:	2009c03c 	.word	0x2009c03c

00008cdc <start_rf_state>:
static void start_rf_state(ego_fsm_state_t *state) {
    8cdc:	b510      	push	{r4, lr}
	cc2400_set(MANAND,  0x7fff);
    8cde:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_rf_state(ego_fsm_state_t *state) {
    8ce2:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    8ce4:	200d      	movs	r0, #13
    8ce6:	f000 fe5a 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8cea:	f642 3122 	movw	r1, #11042	; 0x2b22
    8cee:	2012      	movs	r0, #18
    8cf0:	f000 fe55 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8cf4:	f241 314b 	movw	r1, #4939	; 0x134b
    8cf8:	2014      	movs	r0, #20
    8cfa:	f000 fe50 	bl	999e <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8cfe:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8d02:	2020      	movs	r0, #32
    8d04:	f000 fe4b 	bl	999e <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8d08:	4b1d      	ldr	r3, [pc, #116]	; (8d80 <start_rf_state+0xa4>)
    8d0a:	2002      	movs	r0, #2
    8d0c:	8819      	ldrh	r1, [r3, #0]
    8d0e:	3901      	subs	r1, #1
    8d10:	b289      	uxth	r1, r1
    8d12:	f000 fe44 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8d16:	2126      	movs	r1, #38	; 0x26
    8d18:	2003      	movs	r0, #3
    8d1a:	f000 fe40 	bl	999e <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8d1e:	2103      	movs	r1, #3
    8d20:	2021      	movs	r0, #33	; 0x21
    8d22:	f000 fe3c 	bl	999e <cc2400_set>
	cc2400_set(SYNCH,   0x630f);
    8d26:	f246 310f 	movw	r1, #25359	; 0x630f
    8d2a:	202d      	movs	r0, #45	; 0x2d
    8d2c:	f000 fe37 	bl	999e <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    8d30:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8d34:	202c      	movs	r0, #44	; 0x2c
    8d36:	f000 fe32 	bl	999e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8d3a:	f000 fecb 	bl	9ad4 <cc2400_status>
    8d3e:	0642      	lsls	r2, r0, #25
    8d40:	d5fb      	bpl.n	8d3a <start_rf_state+0x5e>
	DIO_SSEL_SET;
    8d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8d46:	4b0f      	ldr	r3, [pc, #60]	; (8d84 <start_rf_state+0xa8>)
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8d48:	490f      	ldr	r1, [pc, #60]	; (8d88 <start_rf_state+0xac>)
	DIO_SSEL_SET;
    8d4a:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8d4c:	680b      	ldr	r3, [r1, #0]
	cc2400_strobe(SFSON);
    8d4e:	2061      	movs	r0, #97	; 0x61
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8d50:	f043 0302 	orr.w	r3, r3, #2
    8d54:	600b      	str	r3, [r1, #0]
	DIO_SSEL_CLR;
    8d56:	4b0d      	ldr	r3, [pc, #52]	; (8d8c <start_rf_state+0xb0>)
    8d58:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
    8d5a:	f000 fec2 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8d5e:	f000 feb9 	bl	9ad4 <cc2400_status>
    8d62:	0743      	lsls	r3, r0, #29
    8d64:	d5fb      	bpl.n	8d5e <start_rf_state+0x82>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d66:	200e      	movs	r0, #14
    8d68:	f000 fe10 	bl	998c <cc2400_get>
    8d6c:	f000 001f 	and.w	r0, r0, #31
    8d70:	280f      	cmp	r0, #15
    8d72:	d1f8      	bne.n	8d66 <start_rf_state+0x8a>
	cc2400_strobe(SRX);
    8d74:	2062      	movs	r0, #98	; 0x62
    8d76:	f000 feb4 	bl	9ae2 <cc2400_strobe>
	state->state = EGO_ST_CAP;
    8d7a:	2302      	movs	r3, #2
    8d7c:	7023      	strb	r3, [r4, #0]
    8d7e:	bd10      	pop	{r4, pc}
    8d80:	1000049c 	.word	0x1000049c
    8d84:	2009c098 	.word	0x2009c098
    8d88:	40030004 	.word	0x40030004
    8d8c:	2009c09c 	.word	0x2009c09c

00008d90 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8d90:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8d92:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_jamming_state(ego_fsm_state_t *state) {
    8d96:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    8d98:	200d      	movs	r0, #13
    8d9a:	f000 fe00 	bl	999e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8d9e:	f642 3122 	movw	r1, #11042	; 0x2b22
    8da2:	2012      	movs	r0, #18
    8da4:	f000 fdfb 	bl	999e <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8da8:	f243 314b 	movw	r1, #13131	; 0x334b
    8dac:	2014      	movs	r0, #20
    8dae:	f000 fdf6 	bl	999e <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8db2:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8db6:	2020      	movs	r0, #32
    8db8:	f000 fdf1 	bl	999e <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    8dbc:	4b1a      	ldr	r3, [pc, #104]	; (8e28 <start_jamming_state+0x98>)
    8dbe:	2002      	movs	r0, #2
    8dc0:	8819      	ldrh	r1, [r3, #0]
    8dc2:	b289      	uxth	r1, r1
    8dc4:	f000 fdeb 	bl	999e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8dc8:	2126      	movs	r1, #38	; 0x26
    8dca:	2003      	movs	r0, #3
    8dcc:	f000 fde7 	bl	999e <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8dd0:	2103      	movs	r1, #3
    8dd2:	2021      	movs	r0, #33	; 0x21
    8dd4:	f000 fde3 	bl	999e <cc2400_set>
	cc2400_set(FREND, 0xf);
    8dd8:	210f      	movs	r1, #15
    8dda:	2005      	movs	r0, #5
    8ddc:	f000 fddf 	bl	999e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8de0:	f000 fe78 	bl	9ad4 <cc2400_status>
    8de4:	0642      	lsls	r2, r0, #25
    8de6:	d5fb      	bpl.n	8de0 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8de8:	2061      	movs	r0, #97	; 0x61
    8dea:	f000 fe7a 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8dee:	f000 fe71 	bl	9ad4 <cc2400_status>
    8df2:	0743      	lsls	r3, r0, #29
    8df4:	d5fb      	bpl.n	8dee <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8df6:	200e      	movs	r0, #14
    8df8:	f000 fdc8 	bl	998c <cc2400_get>
    8dfc:	f000 001f 	and.w	r0, r0, #31
    8e00:	280f      	cmp	r0, #15
    8e02:	d1f8      	bne.n	8df6 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8e04:	2280      	movs	r2, #128	; 0x80
    8e06:	4b09      	ldr	r3, [pc, #36]	; (8e2c <start_jamming_state+0x9c>)
#endif

	cc2400_strobe(STX);
    8e08:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
    8e0a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8e0c:	f000 fe69 	bl	9ae2 <cc2400_strobe>
	TXLED_SET;
    8e10:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e14:	4b06      	ldr	r3, [pc, #24]	; (8e30 <start_jamming_state+0xa0>)
    8e16:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    8e18:	2305      	movs	r3, #5
    8e1a:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    8e1c:	69a3      	ldr	r3, [r4, #24]
    8e1e:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8e20:	f644 6320 	movw	r3, #20000	; 0x4e20
    8e24:	60e3      	str	r3, [r4, #12]
    8e26:	bd10      	pop	{r4, pc}
    8e28:	1000049c 	.word	0x1000049c
    8e2c:	2009c058 	.word	0x2009c058
    8e30:	2009c038 	.word	0x2009c038

00008e34 <sleep_state>:
static void sleep_state(ego_fsm_state_t *state) {
    8e34:	b510      	push	{r4, lr}
    8e36:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8e38:	f7ff feda 	bl	8bf0 <sleep_elapsed>
    8e3c:	b1a8      	cbz	r0, 8e6a <sleep_state+0x36>
		state->channel_index = (state->channel_index + 1) % 4;
    8e3e:	6863      	ldr	r3, [r4, #4]
		sleep_ms(state, 7);
    8e40:	2107      	movs	r1, #7
		state->channel_index = (state->channel_index + 1) % 4;
    8e42:	3301      	adds	r3, #1
    8e44:	425a      	negs	r2, r3
    8e46:	f002 0203 	and.w	r2, r2, #3
    8e4a:	f003 0303 	and.w	r3, r3, #3
    8e4e:	bf58      	it	pl
    8e50:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    8e52:	4a06      	ldr	r2, [pc, #24]	; (8e6c <sleep_state+0x38>)
		state->channel_index = (state->channel_index + 1) % 4;
    8e54:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8e56:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8e5a:	4b05      	ldr	r3, [pc, #20]	; (8e70 <sleep_state+0x3c>)
		sleep_ms(state, 7);
    8e5c:	4620      	mov	r0, r4
		channel = channels[state->channel_index];
    8e5e:	801a      	strh	r2, [r3, #0]
		sleep_ms(state, 7);
    8e60:	f7ff feb0 	bl	8bc4 <sleep_ms>
		state->timer_active = 1;
    8e64:	2301      	movs	r3, #1
    8e66:	6123      	str	r3, [r4, #16]
		state->state = EGO_ST_START_RX;
    8e68:	7023      	strb	r3, [r4, #0]
    8e6a:	bd10      	pop	{r4, pc}
    8e6c:	0000bc5c 	.word	0x0000bc5c
    8e70:	1000049c 	.word	0x1000049c

00008e74 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    8e74:	b510      	push	{r4, lr}
    8e76:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8e78:	f7ff feba 	bl	8bf0 <sleep_elapsed>
    8e7c:	b130      	cbz	r0, 8e8c <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    8e7e:	2301      	movs	r3, #1
    8e80:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    8e82:	6123      	str	r3, [r4, #16]
	state->sleep_start = state->anchor;
    8e84:	69a3      	ldr	r3, [r4, #24]
    8e86:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8e88:	4b01      	ldr	r3, [pc, #4]	; (8e90 <jam_sleep_state+0x1c>)
    8e8a:	60e3      	str	r3, [r4, #12]
    8e8c:	bd10      	pop	{r4, pc}
    8e8e:	bf00      	nop
    8e90:	0001adb0 	.word	0x0001adb0

00008e94 <jamming_state>:
void jamming_state(ego_fsm_state_t *state) {
    8e94:	b510      	push	{r4, lr}
    8e96:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8e98:	f7ff feaa 	bl	8bf0 <sleep_elapsed>
    8e9c:	b1f8      	cbz	r0, 8ede <jamming_state+0x4a>
		cc2400_strobe(SRFOFF);
    8e9e:	2064      	movs	r0, #100	; 0x64
    8ea0:	f000 fe1f 	bl	9ae2 <cc2400_strobe>
		PAEN_CLR;
    8ea4:	2280      	movs	r2, #128	; 0x80
    8ea6:	4b0e      	ldr	r3, [pc, #56]	; (8ee0 <jamming_state+0x4c>)
    8ea8:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
    8eae:	f843 2c20 	str.w	r2, [r3, #-32]
		state->channel_index = (state->channel_index + 1) % 4;
    8eb2:	6863      	ldr	r3, [r4, #4]
    8eb4:	3301      	adds	r3, #1
    8eb6:	425a      	negs	r2, r3
    8eb8:	f002 0203 	and.w	r2, r2, #3
    8ebc:	f003 0303 	and.w	r3, r3, #3
    8ec0:	bf58      	it	pl
    8ec2:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    8ec4:	4a07      	ldr	r2, [pc, #28]	; (8ee4 <jamming_state+0x50>)
		state->channel_index = (state->channel_index + 1) % 4;
    8ec6:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8ec8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8ecc:	4b06      	ldr	r3, [pc, #24]	; (8ee8 <jamming_state+0x54>)
    8ece:	801a      	strh	r2, [r3, #0]
		state->state = EGO_ST_SLEEP;
    8ed0:	2303      	movs	r3, #3
    8ed2:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    8ed4:	69a3      	ldr	r3, [r4, #24]
    8ed6:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8ed8:	f64e 2360 	movw	r3, #60000	; 0xea60
    8edc:	60e3      	str	r3, [r4, #12]
    8ede:	bd10      	pop	{r4, pc}
    8ee0:	2009c05c 	.word	0x2009c05c
    8ee4:	0000bc5c 	.word	0x0000bc5c
    8ee8:	1000049c 	.word	0x1000049c

00008eec <jam_cap_state>:
static void jam_cap_state(ego_fsm_state_t *state) {
    8eec:	b510      	push	{r4, lr}
    8eee:	4604      	mov	r4, r0
	return cc2400_status() & SYNC_RECEIVED;
    8ef0:	f000 fdf0 	bl	9ad4 <cc2400_status>
	if (sync_received()) {
    8ef4:	06c3      	lsls	r3, r0, #27
    8ef6:	d50e      	bpl.n	8f16 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    8ef8:	2304      	movs	r3, #4
    8efa:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    8efc:	2301      	movs	r3, #1
		state->anchor = CLK100NS;
    8efe:	f640 4135 	movw	r1, #3125	; 0xc35
		state->packet_observed = 1;
    8f02:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    8f04:	4b10      	ldr	r3, [pc, #64]	; (8f48 <jam_cap_state+0x5c>)
    8f06:	4a11      	ldr	r2, [pc, #68]	; (8f4c <jam_cap_state+0x60>)
    8f08:	681b      	ldr	r3, [r3, #0]
    8f0a:	6812      	ldr	r2, [r2, #0]
    8f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8f10:	fb01 2303 	mla	r3, r1, r3, r2
    8f14:	61a3      	str	r3, [r4, #24]
	if (state->timer_active && sleep_elapsed(state)) {
    8f16:	6923      	ldr	r3, [r4, #16]
    8f18:	b15b      	cbz	r3, 8f32 <jam_cap_state+0x46>
    8f1a:	4620      	mov	r0, r4
    8f1c:	f7ff fe68 	bl	8bf0 <sleep_elapsed>
    8f20:	b138      	cbz	r0, 8f32 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    8f22:	2304      	movs	r3, #4
    8f24:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    8f26:	2300      	movs	r3, #0
		sleep_ms(state, 11); // 11 ms hop interval
    8f28:	210b      	movs	r1, #11
		state->packet_observed = 0;
    8f2a:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    8f2c:	4620      	mov	r0, r4
    8f2e:	f7ff fe49 	bl	8bc4 <sleep_ms>
	if (state->state != EGO_ST_CAP) {
    8f32:	7823      	ldrb	r3, [r4, #0]
    8f34:	2b02      	cmp	r3, #2
    8f36:	d006      	beq.n	8f46 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    8f38:	2064      	movs	r0, #100	; 0x64
    8f3a:	f000 fdd2 	bl	9ae2 <cc2400_strobe>
}
    8f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ssp_stop();
    8f42:	f7ff be1f 	b.w	8b84 <ssp_stop>
    8f46:	bd10      	pop	{r4, pc}
    8f48:	10001454 	.word	0x10001454
    8f4c:	40004008 	.word	0x40004008

00008f50 <continuous_cap_state>:
static void continuous_cap_state(ego_fsm_state_t *state) {
    8f50:	b510      	push	{r4, lr}
    8f52:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    8f54:	2228      	movs	r2, #40	; 0x28
    8f56:	2100      	movs	r1, #0
    8f58:	4668      	mov	r0, sp
    8f5a:	f7fb f951 	bl	4200 <memset>
		.rxtime = CLK100NS,
    8f5e:	f640 4135 	movw	r1, #3125	; 0xc35
    8f62:	4b16      	ldr	r3, [pc, #88]	; (8fbc <continuous_cap_state+0x6c>)
    8f64:	4a16      	ldr	r2, [pc, #88]	; (8fc0 <continuous_cap_state+0x70>)
    8f66:	681b      	ldr	r3, [r3, #0]
    8f68:	6812      	ldr	r2, [r2, #0]
    8f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8f6e:	fb01 2303 	mla	r3, r1, r3, r2
	ego_packet_t packet = {
    8f72:	9309      	str	r3, [sp, #36]	; 0x24
	return cc2400_status() & SYNC_RECEIVED;
    8f74:	f000 fdae 	bl	9ad4 <cc2400_status>
	if (sync_received()) {
    8f78:	06c2      	lsls	r2, r0, #27
    8f7a:	d51d      	bpl.n	8fb8 <continuous_cap_state+0x68>
		RXLED_SET;
    8f7c:	2410      	movs	r4, #16
    8f7e:	4b11      	ldr	r3, [pc, #68]	; (8fc4 <continuous_cap_state+0x74>)
		do_rx(&packet);
    8f80:	4668      	mov	r0, sp
		RXLED_SET;
    8f82:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    8f84:	f7ff fe0c 	bl	8ba0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8f8a:	4669      	mov	r1, sp
    8f8c:	2006      	movs	r0, #6
    8f8e:	f7fb ff65 	bl	4e5c <enqueue_with_ts>
		RXLED_CLR;
    8f92:	4b0d      	ldr	r3, [pc, #52]	; (8fc8 <continuous_cap_state+0x78>)
		cc2400_strobe(SFSON);
    8f94:	2061      	movs	r0, #97	; 0x61
		RXLED_CLR;
    8f96:	601c      	str	r4, [r3, #0]
		cc2400_strobe(SFSON);
    8f98:	f000 fda3 	bl	9ae2 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8f9c:	f000 fd9a 	bl	9ad4 <cc2400_status>
    8fa0:	0743      	lsls	r3, r0, #29
    8fa2:	d5fb      	bpl.n	8f9c <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8fa4:	200e      	movs	r0, #14
    8fa6:	f000 fcf1 	bl	998c <cc2400_get>
    8faa:	f000 001f 	and.w	r0, r0, #31
    8fae:	280f      	cmp	r0, #15
    8fb0:	d1f8      	bne.n	8fa4 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    8fb2:	2062      	movs	r0, #98	; 0x62
    8fb4:	f000 fd95 	bl	9ae2 <cc2400_strobe>
}
    8fb8:	b00a      	add	sp, #40	; 0x28
    8fba:	bd10      	pop	{r4, pc}
    8fbc:	10001454 	.word	0x10001454
    8fc0:	40004008 	.word	0x40004008
    8fc4:	2009c038 	.word	0x2009c038
    8fc8:	2009c03c 	.word	0x2009c03c

00008fcc <ego_main>:
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    8fcc:	b530      	push	{r4, r5, lr}
    8fce:	b089      	sub	sp, #36	; 0x24
    8fd0:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8fd2:	221c      	movs	r2, #28
    8fd4:	2100      	movs	r1, #0
    8fd6:	a801      	add	r0, sp, #4
    8fd8:	f7fb f912 	bl	4200 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    8fdc:	2c01      	cmp	r4, #1
    8fde:	4d14      	ldr	r5, [pc, #80]	; (9030 <ego_main+0x64>)
    8fe0:	d006      	beq.n	8ff0 <ego_main+0x24>
    8fe2:	d316      	bcc.n	9012 <ego_main+0x46>
    8fe4:	2c02      	cmp	r4, #2
    8fe6:	d016      	beq.n	9016 <ego_main+0x4a>
		case EGO_JAM:
			handler = jam_handler;
			break;
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    8fe8:	2300      	movs	r3, #0
    8fea:	702b      	strb	r3, [r5, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    8fec:	b009      	add	sp, #36	; 0x24
    8fee:	bd30      	pop	{r4, r5, pc}
			handler = continuous_rx_handler;
    8ff0:	4c10      	ldr	r4, [pc, #64]	; (9034 <ego_main+0x68>)
	ISER0 = ISER0_ISE_USB;
    8ff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8ff6:	4b10      	ldr	r3, [pc, #64]	; (9038 <ego_main+0x6c>)
    8ff8:	601a      	str	r2, [r3, #0]
	dio_ssp_init();
    8ffa:	f000 fc3d 	bl	9878 <dio_ssp_init>
		if (requested_mode != MODE_EGO)
    8ffe:	782b      	ldrb	r3, [r5, #0]
    9000:	2b0d      	cmp	r3, #13
    9002:	d10a      	bne.n	901a <ego_main+0x4e>
		handler[state.state](&state);
    9004:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9008:	a801      	add	r0, sp, #4
    900a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    900e:	4798      	blx	r3
		if (requested_mode != MODE_EGO)
    9010:	e7f5      	b.n	8ffe <ego_main+0x32>
			handler = follow_handler;
    9012:	4c0a      	ldr	r4, [pc, #40]	; (903c <ego_main+0x70>)
    9014:	e7ed      	b.n	8ff2 <ego_main+0x26>
			handler = jam_handler;
    9016:	4c0a      	ldr	r4, [pc, #40]	; (9040 <ego_main+0x74>)
    9018:	e7eb      	b.n	8ff2 <ego_main+0x26>
	cc2400_strobe(SRFOFF);
    901a:	2064      	movs	r0, #100	; 0x64
    901c:	f000 fd61 	bl	9ae2 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    9020:	f7ff fdb0 	bl	8b84 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    9024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9028:	4b06      	ldr	r3, [pc, #24]	; (9044 <ego_main+0x78>)
    902a:	601a      	str	r2, [r3, #0]
    902c:	e7de      	b.n	8fec <ego_main+0x20>
    902e:	bf00      	nop
    9030:	10000a5e 	.word	0x10000a5e
    9034:	0000bc80 	.word	0x0000bc80
    9038:	e000e100 	.word	0xe000e100
    903c:	0000bc64 	.word	0x0000bc64
    9040:	0000bc98 	.word	0x0000bc98
    9044:	e000e180 	.word	0xe000e180

00009048 <debug_uart_init>:
int debug_dma_active = 0;
char debug_buffer[256];

void debug_uart_init(int flow_control) {
	// power on UART1 peripheral
	PCONP |= PCONP_PCUART1;
    9048:	4a28      	ldr	r2, [pc, #160]	; (90ec <debug_uart_init+0xa4>)

	// 8N1, enable access to divisor latches
	U1LCR = 0b10000011;

	// divisor: 11, fractional: 3/13. final baud: 115,411
	U1DLL = 11;
    904a:	210b      	movs	r1, #11
	PCONP |= PCONP_PCUART1;
    904c:	6813      	ldr	r3, [r2, #0]
    904e:	f043 0310 	orr.w	r3, r3, #16
    9052:	6013      	str	r3, [r2, #0]
	U1LCR = 0b10000011;
    9054:	2283      	movs	r2, #131	; 0x83
    9056:	4b26      	ldr	r3, [pc, #152]	; (90f0 <debug_uart_init+0xa8>)
    9058:	601a      	str	r2, [r3, #0]
	U1DLL = 11;
    905a:	4a26      	ldr	r2, [pc, #152]	; (90f4 <debug_uart_init+0xac>)
    905c:	3304      	adds	r3, #4
    905e:	6011      	str	r1, [r2, #0]
	U1DLM = 0;
    9060:	2100      	movs	r1, #0
    9062:	6051      	str	r1, [r2, #4]
	U1FDR = (3 << 0) | (13 << 4);
    9064:	21d3      	movs	r1, #211	; 0xd3
    9066:	6291      	str	r1, [r2, #40]	; 0x28

	// block access to divisor latches
	U1LCR &= ~0b10000000;
    9068:	f853 2c04 	ldr.w	r2, [r3, #-4]
    906c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    9070:	f843 2c04 	str.w	r2, [r3, #-4]

	// enable auto RTS/CTS
	if (flow_control)
    9074:	2800      	cmp	r0, #0
    9076:	d036      	beq.n	90e6 <debug_uart_init+0x9e>
		U1MCR = 0b11000000;
    9078:	22c0      	movs	r2, #192	; 0xc0
    907a:	601a      	str	r2, [r3, #0]
	else
		U1MCR = 0;

	// enable FIFO and DMA
	U1FCR = 0b1001;
    907c:	2209      	movs	r2, #9
    907e:	4b1e      	ldr	r3, [pc, #120]	; (90f8 <debug_uart_init+0xb0>)
    9080:	601a      	str	r2, [r3, #0]

	// set P0.15 as TXD1, with pullup
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    9082:	4a1e      	ldr	r2, [pc, #120]	; (90fc <debug_uart_init+0xb4>)
    9084:	6813      	ldr	r3, [r2, #0]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);

	// set P0.16 as RXD1, with pullup
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    9086:	3204      	adds	r2, #4
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    9088:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    908c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    9090:	f842 3c04 	str.w	r3, [r2, #-4]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);
    9094:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    9096:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    909a:	63d3      	str	r3, [r2, #60]	; 0x3c
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    909c:	6813      	ldr	r3, [r2, #0]
    909e:	f023 0303 	bic.w	r3, r3, #3
    90a2:	f043 0301 	orr.w	r3, r3, #1
    90a6:	6013      	str	r3, [r2, #0]
	PINMODE1 = (PINMODE1 & ~(0b11 <<  0)) | (0b00 <<  0);
    90a8:	4b15      	ldr	r3, [pc, #84]	; (9100 <debug_uart_init+0xb8>)
    90aa:	6819      	ldr	r1, [r3, #0]
    90ac:	f021 0103 	bic.w	r1, r1, #3
    90b0:	6019      	str	r1, [r3, #0]

	if (flow_control) {
    90b2:	b1b8      	cbz	r0, 90e4 <debug_uart_init+0x9c>
		// set P0.17 as CTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 <<  2)) | (0b01 <<  2);
    90b4:	6811      	ldr	r1, [r2, #0]
    90b6:	f021 010c 	bic.w	r1, r1, #12
    90ba:	f041 0104 	orr.w	r1, r1, #4
    90be:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 <<  2)) | (0b10 <<  2);
    90c0:	6819      	ldr	r1, [r3, #0]
    90c2:	f021 010c 	bic.w	r1, r1, #12
    90c6:	f041 0108 	orr.w	r1, r1, #8
    90ca:	6019      	str	r1, [r3, #0]

		// set P0.22 as RTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 << 12)) | (0b01 << 12);
    90cc:	6811      	ldr	r1, [r2, #0]
    90ce:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
    90d2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    90d6:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 << 12)) | (0b10 << 12);
    90d8:	681a      	ldr	r2, [r3, #0]
    90da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    90de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    90e2:	601a      	str	r2, [r3, #0]
    90e4:	4770      	bx	lr
		U1MCR = 0;
    90e6:	6018      	str	r0, [r3, #0]
    90e8:	e7c8      	b.n	907c <debug_uart_init+0x34>
    90ea:	bf00      	nop
    90ec:	400fc0c4 	.word	0x400fc0c4
    90f0:	4001000c 	.word	0x4001000c
    90f4:	40010000 	.word	0x40010000
    90f8:	40010008 	.word	0x40010008
    90fc:	4002c000 	.word	0x4002c000
    9100:	4002c044 	.word	0x4002c044

00009104 <debug_printf>:
			DMACCxConfig_ITC  ; // allow terminal count interrupts

	DMACC7Config |= 1;
}

void debug_printf(char *fmt, ...) {
    9104:	b40f      	push	{r0, r1, r2, r3}
    9106:	b537      	push	{r0, r1, r2, r4, r5, lr}
	va_list ap;
	void *ret;

	// TODO warn user?
	if (debug_dma_active)
    9108:	4b13      	ldr	r3, [pc, #76]	; (9158 <debug_printf+0x54>)
    910a:	681d      	ldr	r5, [r3, #0]
    910c:	b9fd      	cbnz	r5, 914e <debug_printf+0x4a>
		return;
	debug_dma_active = 1;
    910e:	2201      	movs	r2, #1

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9110:	4c12      	ldr	r4, [pc, #72]	; (915c <debug_printf+0x58>)
	debug_dma_active = 1;
    9112:	601a      	str	r2, [r3, #0]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9114:	21ff      	movs	r1, #255	; 0xff
	va_start(ap, fmt);
    9116:	ab07      	add	r3, sp, #28
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9118:	9a06      	ldr	r2, [sp, #24]
    911a:	4620      	mov	r0, r4
	va_start(ap, fmt);
    911c:	9301      	str	r3, [sp, #4]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    911e:	f000 faf3 	bl	9708 <tfp_vsnprintf>
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;

	size_t len = strlen(debug_buffer);
    9122:	4620      	mov	r0, r4
	debug_buffer[sizeof(debug_buffer) - 1] = 0;
    9124:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
	size_t len = strlen(debug_buffer);
    9128:	f001 ffc4 	bl	b0b4 <strlen>
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    912c:	4b0c      	ldr	r3, [pc, #48]	; (9160 <debug_printf+0x5c>)
	DMACC7DestAddr = (uint32_t)&U1THR;
    912e:	4a0d      	ldr	r2, [pc, #52]	; (9164 <debug_printf+0x60>)
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    9130:	601c      	str	r4, [r3, #0]
	DMACC7DestAddr = (uint32_t)&U1THR;
    9132:	605a      	str	r2, [r3, #4]
	DMACC7Config =
    9134:	f64c 2280 	movw	r2, #51840	; 0xca80
			(0b000 << 12)    | // source burst: 1 byte
    9138:	f3c0 000b 	ubfx	r0, r0, #0, #12
			DMACCxControl_SI | // source increment
    913c:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
	DMACC7LLI = 0;
    9140:	609d      	str	r5, [r3, #8]
	DMACC7Control =
    9142:	60d8      	str	r0, [r3, #12]
	DMACC7Config =
    9144:	611a      	str	r2, [r3, #16]
	DMACC7Config |= 1;
    9146:	691a      	ldr	r2, [r3, #16]
    9148:	f042 0201 	orr.w	r2, r2, #1
    914c:	611a      	str	r2, [r3, #16]
	debug_send_dma(len);
}
    914e:	b003      	add	sp, #12
    9150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    9154:	b004      	add	sp, #16
    9156:	4770      	bx	lr
    9158:	100012cc 	.word	0x100012cc
    915c:	10003ce6 	.word	0x10003ce6
    9160:	500041e0 	.word	0x500041e0
    9164:	40010000 	.word	0x40010000

00009168 <ulli2a>:


#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
    9168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    916c:	2700      	movs	r7, #0
{
    916e:	4680      	mov	r8, r0
    9170:	4689      	mov	r9, r1
    9172:	4693      	mov	fp, r2
    unsigned long long int d = 1;
    9174:	2401      	movs	r4, #1
    9176:	2500      	movs	r5, #0
    char *bf = p->bf;
    9178:	f8d2 a010 	ldr.w	sl, [r2, #16]
    while (num / d >= p->base)
    917c:	68d6      	ldr	r6, [r2, #12]
    917e:	4622      	mov	r2, r4
    9180:	462b      	mov	r3, r5
    9182:	4640      	mov	r0, r8
    9184:	4649      	mov	r1, r9
    9186:	f001 fd93 	bl	acb0 <__aeabi_uldivmod>
    918a:	42b9      	cmp	r1, r7
    918c:	bf08      	it	eq
    918e:	42b0      	cmpeq	r0, r6
    9190:	d208      	bcs.n	91a4 <ulli2a+0x3c>
    9192:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    9194:	ea54 0305 	orrs.w	r3, r4, r5
    9198:	d10c      	bne.n	91b4 <ulli2a+0x4c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    919a:	2300      	movs	r3, #0
    919c:	f88a 3000 	strb.w	r3, [sl]
    91a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    91a4:	fb04 f307 	mul.w	r3, r4, r7
    91a8:	fb06 3305 	mla	r3, r6, r5, r3
    91ac:	fba4 4506 	umull	r4, r5, r4, r6
    91b0:	441d      	add	r5, r3
    91b2:	e7e4      	b.n	917e <ulli2a+0x16>
        int dgt = num / d;
    91b4:	4622      	mov	r2, r4
    91b6:	462b      	mov	r3, r5
    91b8:	4640      	mov	r0, r8
    91ba:	4649      	mov	r1, r9
    91bc:	f001 fd78 	bl	acb0 <__aeabi_uldivmod>
        num %= d;
    91c0:	4622      	mov	r2, r4
    91c2:	462b      	mov	r3, r5
    91c4:	4649      	mov	r1, r9
        int dgt = num / d;
    91c6:	4607      	mov	r7, r0
        num %= d;
    91c8:	4640      	mov	r0, r8
    91ca:	f001 fd71 	bl	acb0 <__aeabi_uldivmod>
        d /= p->base;
    91ce:	4620      	mov	r0, r4
    91d0:	4629      	mov	r1, r5
        num %= d;
    91d2:	4690      	mov	r8, r2
    91d4:	4699      	mov	r9, r3
        d /= p->base;
    91d6:	f8db 200c 	ldr.w	r2, [fp, #12]
    91da:	2300      	movs	r3, #0
    91dc:	f001 fd68 	bl	acb0 <__aeabi_uldivmod>
    91e0:	4604      	mov	r4, r0
    91e2:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    91e4:	b926      	cbnz	r6, 91f0 <ulli2a+0x88>
    91e6:	2f00      	cmp	r7, #0
    91e8:	dc02      	bgt.n	91f0 <ulli2a+0x88>
    91ea:	ea54 0305 	orrs.w	r3, r4, r5
    91ee:	d1d1      	bne.n	9194 <ulli2a+0x2c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    91f0:	2f09      	cmp	r7, #9
    91f2:	f10a 0201 	add.w	r2, sl, #1
    91f6:	dd0c      	ble.n	9212 <ulli2a+0xaa>
    91f8:	f89b 3000 	ldrb.w	r3, [fp]
    91fc:	f013 0f04 	tst.w	r3, #4
    9200:	bf14      	ite	ne
    9202:	2337      	movne	r3, #55	; 0x37
    9204:	2357      	moveq	r3, #87	; 0x57
    9206:	441f      	add	r7, r3
    9208:	f88a 7000 	strb.w	r7, [sl]
            ++n;
    920c:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    920e:	4692      	mov	sl, r2
    9210:	e7c0      	b.n	9194 <ulli2a+0x2c>
    9212:	2330      	movs	r3, #48	; 0x30
    9214:	e7f7      	b.n	9206 <ulli2a+0x9e>

00009216 <uli2a>:
}
#endif

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
    9216:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned long int d = 1;
    9218:	2301      	movs	r3, #1
    char *bf = p->bf;
    921a:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    921c:	68cc      	ldr	r4, [r1, #12]
    921e:	fbb0 f5f3 	udiv	r5, r0, r3
    9222:	42a5      	cmp	r5, r4
    9224:	d203      	bcs.n	922e <uli2a+0x18>
    9226:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    9228:	b91b      	cbnz	r3, 9232 <uli2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    922a:	7013      	strb	r3, [r2, #0]
    922c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    922e:	4363      	muls	r3, r4
    9230:	e7f5      	b.n	921e <uli2a+0x8>
        int dgt = num / d;
    9232:	fbb0 f5f3 	udiv	r5, r0, r3
        d /= p->base;
    9236:	68cc      	ldr	r4, [r1, #12]
        num %= d;
    9238:	fb03 0015 	mls	r0, r3, r5, r0
        d /= p->base;
    923c:	fbb3 f3f4 	udiv	r3, r3, r4
        if (n || dgt > 0 || d == 0) {
    9240:	b91e      	cbnz	r6, 924a <uli2a+0x34>
    9242:	2d00      	cmp	r5, #0
    9244:	dc01      	bgt.n	924a <uli2a+0x34>
    9246:	2b00      	cmp	r3, #0
    9248:	d1ee      	bne.n	9228 <uli2a+0x12>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    924a:	2d09      	cmp	r5, #9
    924c:	f102 0701 	add.w	r7, r2, #1
    9250:	dd0a      	ble.n	9268 <uli2a+0x52>
    9252:	780c      	ldrb	r4, [r1, #0]
    9254:	f014 0f04 	tst.w	r4, #4
    9258:	bf14      	ite	ne
    925a:	2437      	movne	r4, #55	; 0x37
    925c:	2457      	moveq	r4, #87	; 0x57
    925e:	442c      	add	r4, r5
    9260:	7014      	strb	r4, [r2, #0]
            ++n;
    9262:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    9264:	463a      	mov	r2, r7
    9266:	e7df      	b.n	9228 <uli2a+0x12>
    9268:	2430      	movs	r4, #48	; 0x30
    926a:	e7f8      	b.n	925e <uli2a+0x48>

0000926c <ui2a>:
    uli2a(num, p);
}
#endif

static void ui2a(unsigned int num, struct param *p)
{
    926c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned int d = 1;
    926e:	2301      	movs	r3, #1
    char *bf = p->bf;
    9270:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    9272:	68cc      	ldr	r4, [r1, #12]
    9274:	fbb0 f5f3 	udiv	r5, r0, r3
    9278:	42a5      	cmp	r5, r4
    927a:	d203      	bcs.n	9284 <ui2a+0x18>
    927c:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    927e:	b91b      	cbnz	r3, 9288 <ui2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    9280:	7013      	strb	r3, [r2, #0]
    9282:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    9284:	4363      	muls	r3, r4
    9286:	e7f5      	b.n	9274 <ui2a+0x8>
        int dgt = num / d;
    9288:	fbb0 f5f3 	udiv	r5, r0, r3
        d /= p->base;
    928c:	68cc      	ldr	r4, [r1, #12]
        num %= d;
    928e:	fb03 0015 	mls	r0, r3, r5, r0
        d /= p->base;
    9292:	fbb3 f3f4 	udiv	r3, r3, r4
        if (n || dgt > 0 || d == 0) {
    9296:	b91e      	cbnz	r6, 92a0 <ui2a+0x34>
    9298:	2d00      	cmp	r5, #0
    929a:	dc01      	bgt.n	92a0 <ui2a+0x34>
    929c:	2b00      	cmp	r3, #0
    929e:	d1ee      	bne.n	927e <ui2a+0x12>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    92a0:	2d09      	cmp	r5, #9
    92a2:	f102 0701 	add.w	r7, r2, #1
    92a6:	dd0a      	ble.n	92be <ui2a+0x52>
    92a8:	780c      	ldrb	r4, [r1, #0]
    92aa:	f014 0f04 	tst.w	r4, #4
    92ae:	bf14      	ite	ne
    92b0:	2437      	movne	r4, #55	; 0x37
    92b2:	2457      	moveq	r4, #87	; 0x57
    92b4:	442c      	add	r4, r5
    92b6:	7014      	strb	r4, [r2, #0]
            ++n;
    92b8:	3601      	adds	r6, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    92ba:	463a      	mov	r2, r7
    92bc:	e7df      	b.n	927e <ui2a+0x12>
    92be:	2430      	movs	r4, #48	; 0x30
    92c0:	e7f8      	b.n	92b4 <ui2a+0x48>

000092c2 <putchw>:
    *nump = num;
    return ch;
}

static void putchw(void *putp, putcf putf, struct param *p)
{
    92c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92c6:	4606      	mov	r6, r0
    92c8:	460f      	mov	r7, r1
    92ca:	4615      	mov	r5, r2
    char ch;
    int n = p->width;
    92cc:	6854      	ldr	r4, [r2, #4]
    char *bf = p->bf;
    92ce:	6913      	ldr	r3, [r2, #16]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    92d0:	f813 2b01 	ldrb.w	r2, [r3], #1
    92d4:	2a00      	cmp	r2, #0
    92d6:	d144      	bne.n	9362 <putchw+0xa0>
        n--;
    if (p->sign)
    92d8:	7a2b      	ldrb	r3, [r5, #8]
    92da:	2b00      	cmp	r3, #0
    92dc:	d145      	bne.n	936a <putchw+0xa8>
        n--;
    if (p->alt && p->base == 16)
    92de:	782b      	ldrb	r3, [r5, #0]
    92e0:	0799      	lsls	r1, r3, #30
    92e2:	d503      	bpl.n	92ec <putchw+0x2a>
    92e4:	68ea      	ldr	r2, [r5, #12]
    92e6:	2a10      	cmp	r2, #16
    92e8:	d141      	bne.n	936e <putchw+0xac>
        n -= 2;
    92ea:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Fill with space to align to the right, before alternate or sign */
    if (!p->lz && !p->align_left) {
    92ec:	f013 0f09 	tst.w	r3, #9
    92f0:	d108      	bne.n	9304 <putchw+0x42>
    92f2:	46a0      	mov	r8, r4
        while (n-- > 0)
    92f4:	f1b8 0f00 	cmp.w	r8, #0
    92f8:	dc3e      	bgt.n	9378 <putchw+0xb6>
    92fa:	1e63      	subs	r3, r4, #1
    92fc:	2c00      	cmp	r4, #0
    92fe:	bfb4      	ite	lt
    9300:	461c      	movlt	r4, r3
    9302:	1b1c      	subge	r4, r3, r4
            putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    9304:	7a29      	ldrb	r1, [r5, #8]
    9306:	b109      	cbz	r1, 930c <putchw+0x4a>
        putf(putp, p->sign);
    9308:	4630      	mov	r0, r6
    930a:	47b8      	blx	r7

    /* Alternate */
    if (p->alt && p->base == 16) {
    930c:	782b      	ldrb	r3, [r5, #0]
    930e:	079a      	lsls	r2, r3, #30
    9310:	d50d      	bpl.n	932e <putchw+0x6c>
    9312:	68eb      	ldr	r3, [r5, #12]
    9314:	2b10      	cmp	r3, #16
    9316:	d135      	bne.n	9384 <putchw+0xc2>
        putf(putp, '0');
    9318:	2130      	movs	r1, #48	; 0x30
    931a:	4630      	mov	r0, r6
    931c:	47b8      	blx	r7
        putf(putp, (p->uc ? 'X' : 'x'));
    931e:	782b      	ldrb	r3, [r5, #0]
    9320:	f013 0f04 	tst.w	r3, #4
    9324:	bf14      	ite	ne
    9326:	2158      	movne	r1, #88	; 0x58
    9328:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        putf(putp, '0');
    932a:	4630      	mov	r0, r6
    932c:	47b8      	blx	r7
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    932e:	782b      	ldrb	r3, [r5, #0]
    9330:	07db      	lsls	r3, r3, #31
    9332:	d508      	bpl.n	9346 <putchw+0x84>
    9334:	46a0      	mov	r8, r4
        while (n-- > 0)
    9336:	f1b8 0f00 	cmp.w	r8, #0
    933a:	dc27      	bgt.n	938c <putchw+0xca>
    933c:	1e63      	subs	r3, r4, #1
    933e:	2c00      	cmp	r4, #0
    9340:	bfb4      	ite	lt
    9342:	461c      	movlt	r4, r3
    9344:	1b1c      	subge	r4, r3, r4
            putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    9346:	f8d5 8010 	ldr.w	r8, [r5, #16]
    while ((ch = *bf++))
    934a:	f818 1b01 	ldrb.w	r1, [r8], #1
    934e:	bb19      	cbnz	r1, 9398 <putchw+0xd6>
        putf(putp, ch);

    /* Fill with space to align to the left, after string */
    if (!p->lz && p->align_left) {
    9350:	782b      	ldrb	r3, [r5, #0]
    9352:	f003 0309 	and.w	r3, r3, #9
    9356:	2b08      	cmp	r3, #8
    9358:	d101      	bne.n	935e <putchw+0x9c>
        while (n-- > 0)
    935a:	2c00      	cmp	r4, #0
    935c:	dc1f      	bgt.n	939e <putchw+0xdc>
    935e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (*bf++ && n > 0)
    9362:	2c00      	cmp	r4, #0
    9364:	ddb8      	ble.n	92d8 <putchw+0x16>
        n--;
    9366:	3c01      	subs	r4, #1
    9368:	e7b2      	b.n	92d0 <putchw+0xe>
        n--;
    936a:	3c01      	subs	r4, #1
    936c:	e7b7      	b.n	92de <putchw+0x1c>
    else if (p->alt && p->base == 8)
    936e:	2a08      	cmp	r2, #8
        n--;
    9370:	bf08      	it	eq
    9372:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    9376:	e7b9      	b.n	92ec <putchw+0x2a>
            putf(putp, ' ');
    9378:	2120      	movs	r1, #32
    937a:	4630      	mov	r0, r6
    937c:	47b8      	blx	r7
    937e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    9382:	e7b7      	b.n	92f4 <putchw+0x32>
    } else if (p->alt && p->base == 8) {
    9384:	2b08      	cmp	r3, #8
    9386:	d1d2      	bne.n	932e <putchw+0x6c>
        putf(putp, '0');
    9388:	2130      	movs	r1, #48	; 0x30
    938a:	e7ce      	b.n	932a <putchw+0x68>
            putf(putp, '0');
    938c:	2130      	movs	r1, #48	; 0x30
    938e:	4630      	mov	r0, r6
    9390:	47b8      	blx	r7
    9392:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    9396:	e7ce      	b.n	9336 <putchw+0x74>
        putf(putp, ch);
    9398:	4630      	mov	r0, r6
    939a:	47b8      	blx	r7
    939c:	e7d5      	b.n	934a <putchw+0x88>
            putf(putp, ' ');
    939e:	2120      	movs	r1, #32
    93a0:	4630      	mov	r0, r6
    93a2:	47b8      	blx	r7
    93a4:	3c01      	subs	r4, #1
    93a6:	e7d8      	b.n	935a <putchw+0x98>

000093a8 <_vsnprintf_putcf>:
};

static void _vsnprintf_putcf(void *p, char c)
{
  struct _vsnprintf_putcf_data *data = (struct _vsnprintf_putcf_data*)p;
  if (data->num_chars < data->dest_capacity)
    93a8:	6883      	ldr	r3, [r0, #8]
    93aa:	6802      	ldr	r2, [r0, #0]
    93ac:	4293      	cmp	r3, r2
    data->dest[data->num_chars] = c;
    93ae:	bf3c      	itt	cc
    93b0:	6842      	ldrcc	r2, [r0, #4]
    93b2:	54d1      	strbcc	r1, [r2, r3]
  data->num_chars ++;
    93b4:	6883      	ldr	r3, [r0, #8]
    93b6:	3301      	adds	r3, #1
    93b8:	6083      	str	r3, [r0, #8]
    93ba:	4770      	bx	lr

000093bc <tfp_format>:
{
    93bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    93c0:	b08c      	sub	sp, #48	; 0x30
    93c2:	4680      	mov	r8, r0
    93c4:	4689      	mov	r9, r1
    93c6:	461c      	mov	r4, r3
    p.bf = bf;
    93c8:	ae06      	add	r6, sp, #24
    93ca:	9605      	str	r6, [sp, #20]
    while ((ch = *(fmt++))) {
    93cc:	7815      	ldrb	r5, [r2, #0]
    93ce:	1c57      	adds	r7, r2, #1
    93d0:	b915      	cbnz	r5, 93d8 <tfp_format+0x1c>
}
    93d2:	b00c      	add	sp, #48	; 0x30
    93d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (ch != '%') {
    93d8:	2d25      	cmp	r5, #37	; 0x25
    93da:	d008      	beq.n	93ee <tfp_format+0x32>
			if (ch == '\n')
    93dc:	2d0a      	cmp	r5, #10
    93de:	d102      	bne.n	93e6 <tfp_format+0x2a>
				putf(putp, '\r');
    93e0:	210d      	movs	r1, #13
    93e2:	4640      	mov	r0, r8
    93e4:	47c8      	blx	r9
            putf(putp, ch);
    93e6:	4629      	mov	r1, r5
                putf(putp, ch);
    93e8:	4640      	mov	r0, r8
    93ea:	47c8      	blx	r9
    93ec:	e096      	b.n	951c <tfp_format+0x160>
            p.width = 0;
    93ee:	2200      	movs	r2, #0
            while ((ch = *(fmt++))) {
    93f0:	4696      	mov	lr, r2
    93f2:	4611      	mov	r1, r2
    93f4:	4694      	mov	ip, r2
    93f6:	4610      	mov	r0, r2
    93f8:	4692      	mov	sl, r2
            p.lz = 0;
    93fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
            p.width = 0;
    93fe:	9202      	str	r2, [sp, #8]
            p.align_left = 0;
    9400:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    9404:	f362 03c3 	bfi	r3, r2, #3, #1
    9408:	f88d 3004 	strb.w	r3, [sp, #4]
            p.sign = 0;
    940c:	f88d 200c 	strb.w	r2, [sp, #12]
            while ((ch = *(fmt++))) {
    9410:	463d      	mov	r5, r7
    9412:	f815 3b01 	ldrb.w	r3, [r5], #1
    9416:	2b00      	cmp	r3, #0
    9418:	d149      	bne.n	94ae <tfp_format+0xf2>
    941a:	b128      	cbz	r0, 9428 <tfp_format+0x6c>
    941c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9420:	f36a 00c3 	bfi	r0, sl, #3, #1
    9424:	f88d 0004 	strb.w	r0, [sp, #4]
    9428:	b129      	cbz	r1, 9436 <tfp_format+0x7a>
    942a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    942e:	f36c 0100 	bfi	r1, ip, #0, #1
    9432:	f88d 1004 	strb.w	r1, [sp, #4]
    9436:	b12a      	cbz	r2, 9444 <tfp_format+0x88>
    9438:	f89d 2004 	ldrb.w	r2, [sp, #4]
    943c:	f36e 0241 	bfi	r2, lr, #1, #1
    9440:	f88d 2004 	strb.w	r2, [sp, #4]
            if (ch >= '0' && ch <= '9') {
    9444:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9448:	2a09      	cmp	r2, #9
    944a:	d80f      	bhi.n	946c <tfp_format+0xb0>
    944c:	2100      	movs	r1, #0
        num = num * base + digit;
    944e:	200a      	movs	r0, #10
    if (ch >= '0' && ch <= '9')
    9450:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9454:	b2d7      	uxtb	r7, r2
    9456:	2f09      	cmp	r7, #9
    9458:	d939      	bls.n	94ce <tfp_format+0x112>
    else if (ch >= 'a' && ch <= 'f')
    945a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    945e:	2a05      	cmp	r2, #5
    9460:	d83a      	bhi.n	94d8 <tfp_format+0x11c>
        return ch - 'a' + 10;
    9462:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
        if (digit > base)
    9466:	2a0a      	cmp	r2, #10
    9468:	dd31      	ble.n	94ce <tfp_format+0x112>
    *nump = num;
    946a:	9102      	str	r1, [sp, #8]
            if (ch == '.') {
    946c:	2b2e      	cmp	r3, #46	; 0x2e
    946e:	d10b      	bne.n	9488 <tfp_format+0xcc>
              p.lz = 1;  /* zero-padding */
    9470:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9474:	f043 0301 	orr.w	r3, r3, #1
    9478:	f88d 3004 	strb.w	r3, [sp, #4]
                ch = *(fmt++);
    947c:	f815 3b01 	ldrb.w	r3, [r5], #1
              } while ((ch >= '0') && (ch <= '9'));
    9480:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9484:	2a09      	cmp	r2, #9
    9486:	d9f9      	bls.n	947c <tfp_format+0xc0>
            if (ch == 'z') {
    9488:	2b7a      	cmp	r3, #122	; 0x7a
    948a:	d12c      	bne.n	94e6 <tfp_format+0x12a>
                ch = *(fmt++);
    948c:	782b      	ldrb	r3, [r5, #0]
    948e:	1c6f      	adds	r7, r5, #1
            switch (ch) {
    9490:	2b69      	cmp	r3, #105	; 0x69
    9492:	d00a      	beq.n	94aa <tfp_format+0xee>
    9494:	f200 80dd 	bhi.w	9652 <tfp_format+0x296>
    9498:	2b58      	cmp	r3, #88	; 0x58
    949a:	f000 80e3 	beq.w	9664 <tfp_format+0x2a8>
    949e:	d931      	bls.n	9504 <tfp_format+0x148>
    94a0:	2b63      	cmp	r3, #99	; 0x63
    94a2:	f000 80c1 	beq.w	9628 <tfp_format+0x26c>
    94a6:	2b64      	cmp	r3, #100	; 0x64
    94a8:	d138      	bne.n	951c <tfp_format+0x160>
    94aa:	2301      	movs	r3, #1
    94ac:	e07c      	b.n	95a8 <tfp_format+0x1ec>
                switch (ch) {
    94ae:	2b2d      	cmp	r3, #45	; 0x2d
    94b0:	d006      	beq.n	94c0 <tfp_format+0x104>
    94b2:	2b30      	cmp	r3, #48	; 0x30
    94b4:	d008      	beq.n	94c8 <tfp_format+0x10c>
    94b6:	2b23      	cmp	r3, #35	; 0x23
    94b8:	d1af      	bne.n	941a <tfp_format+0x5e>
                    continue;
    94ba:	2201      	movs	r2, #1
                    p.alt = 1;
    94bc:	4696      	mov	lr, r2
                    continue;
    94be:	e001      	b.n	94c4 <tfp_format+0x108>
                switch (ch) {
    94c0:	2001      	movs	r0, #1
                    p.align_left = 1;
    94c2:	4682      	mov	sl, r0
    94c4:	462f      	mov	r7, r5
    94c6:	e7a3      	b.n	9410 <tfp_format+0x54>
                switch (ch) {
    94c8:	2101      	movs	r1, #1
                    p.lz = 1;
    94ca:	468c      	mov	ip, r1
    94cc:	e7fa      	b.n	94c4 <tfp_format+0x108>
        num = num * base + digit;
    94ce:	fb00 2101 	mla	r1, r0, r1, r2
        ch = *p++;
    94d2:	f815 3b01 	ldrb.w	r3, [r5], #1
    94d6:	e7bb      	b.n	9450 <tfp_format+0x94>
    else if (ch >= 'A' && ch <= 'F')
    94d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    94dc:	2a05      	cmp	r2, #5
    94de:	d8c4      	bhi.n	946a <tfp_format+0xae>
        return ch - 'A' + 10;
    94e0:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
    94e4:	e7bf      	b.n	9466 <tfp_format+0xaa>
            if (ch == 'l') {
    94e6:	2b6c      	cmp	r3, #108	; 0x6c
    94e8:	f040 80cc 	bne.w	9684 <tfp_format+0x2c8>
                ch = *(fmt++);
    94ec:	782b      	ldrb	r3, [r5, #0]
                if (ch == 'l') {
    94ee:	2b6c      	cmp	r3, #108	; 0x6c
    94f0:	f040 80ad 	bne.w	964e <tfp_format+0x292>
                  ch = *(fmt++);
    94f4:	786b      	ldrb	r3, [r5, #1]
    94f6:	1caf      	adds	r7, r5, #2
            switch (ch) {
    94f8:	2b69      	cmp	r3, #105	; 0x69
    94fa:	d054      	beq.n	95a6 <tfp_format+0x1ea>
    94fc:	d810      	bhi.n	9520 <tfp_format+0x164>
    94fe:	2b58      	cmp	r3, #88	; 0x58
    9500:	d01c      	beq.n	953c <tfp_format+0x180>
    9502:	d806      	bhi.n	9512 <tfp_format+0x156>
    9504:	2b00      	cmp	r3, #0
    9506:	f43f af64 	beq.w	93d2 <tfp_format+0x16>
    950a:	2b25      	cmp	r3, #37	; 0x25
    950c:	f000 809d 	beq.w	964a <tfp_format+0x28e>
    9510:	e004      	b.n	951c <tfp_format+0x160>
    9512:	2b63      	cmp	r3, #99	; 0x63
    9514:	f000 8088 	beq.w	9628 <tfp_format+0x26c>
    9518:	2b64      	cmp	r3, #100	; 0x64
    951a:	d044      	beq.n	95a6 <tfp_format+0x1ea>
                p.bf = va_arg(va, char *);
    951c:	463a      	mov	r2, r7
    951e:	e755      	b.n	93cc <tfp_format+0x10>
            switch (ch) {
    9520:	2b73      	cmp	r3, #115	; 0x73
    9522:	f000 8087 	beq.w	9634 <tfp_format+0x278>
    9526:	d805      	bhi.n	9534 <tfp_format+0x178>
    9528:	2b6f      	cmp	r3, #111	; 0x6f
    952a:	d06e      	beq.n	960a <tfp_format+0x24e>
    952c:	2b70      	cmp	r3, #112	; 0x70
    952e:	f000 80c5 	beq.w	96bc <tfp_format+0x300>
    9532:	e7f3      	b.n	951c <tfp_format+0x160>
    9534:	2b75      	cmp	r3, #117	; 0x75
    9536:	d014      	beq.n	9562 <tfp_format+0x1a6>
    9538:	2b78      	cmp	r3, #120	; 0x78
    953a:	d1ef      	bne.n	951c <tfp_format+0x160>
                p.base = 16;
    953c:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    953e:	f1a3 0058 	sub.w	r0, r3, #88	; 0x58
    9542:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9546:	4243      	negs	r3, r0
    9548:	4143      	adcs	r3, r0
    954a:	f363 0182 	bfi	r1, r3, #2, #1
                    ulli2a(va_arg(va, unsigned long long int), &p);
    954e:	1de3      	adds	r3, r4, #7
                p.base = 16;
    9550:	9204      	str	r2, [sp, #16]
                    ulli2a(va_arg(va, unsigned long long int), &p);
    9552:	f023 0307 	bic.w	r3, r3, #7
                p.uc = (ch == 'X')?1:0;
    9556:	aa0c      	add	r2, sp, #48	; 0x30
    9558:	f802 1d2c 	strb.w	r1, [r2, #-44]!
                    ulli2a(va_arg(va, unsigned long long int), &p);
    955c:	f103 0408 	add.w	r4, r3, #8
    9560:	e00a      	b.n	9578 <tfp_format+0x1bc>
                  lng = 2;
    9562:	2302      	movs	r3, #2
                p.base = 10;
    9564:	220a      	movs	r2, #10
                if (2 == lng)
    9566:	2b02      	cmp	r3, #2
                p.base = 10;
    9568:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    956a:	d10d      	bne.n	9588 <tfp_format+0x1cc>
                    ulli2a(va_arg(va, unsigned long long int), &p);
    956c:	1de3      	adds	r3, r4, #7
    956e:	f023 0307 	bic.w	r3, r3, #7
    9572:	f103 0408 	add.w	r4, r3, #8
    9576:	aa01      	add	r2, sp, #4
                    ulli2a(va_arg(va, unsigned long long int), &p);
    9578:	e9d3 0100 	ldrd	r0, r1, [r3]
    957c:	e02a      	b.n	95d4 <tfp_format+0x218>
            switch (ch) {
    957e:	2301      	movs	r3, #1
    9580:	e7f0      	b.n	9564 <tfp_format+0x1a8>
    9582:	462f      	mov	r7, r5
            char lng = 0;  /* 1 for long, 2 for long long */
    9584:	2300      	movs	r3, #0
    9586:	e7ed      	b.n	9564 <tfp_format+0x1a8>
                  if (1 == lng)
    9588:	2b01      	cmp	r3, #1
                    uli2a(va_arg(va, unsigned long int), &p);
    958a:	a901      	add	r1, sp, #4
    958c:	6820      	ldr	r0, [r4, #0]
    958e:	f104 0504 	add.w	r5, r4, #4
                  if (1 == lng)
    9592:	d136      	bne.n	9602 <tfp_format+0x246>
    uli2a(num, p);
    9594:	f7ff fe3f 	bl	9216 <uli2a>
                    i2a(va_arg(va, int), &p);
    9598:	462c      	mov	r4, r5
                putchw(putp, putf, &p);
    959a:	aa01      	add	r2, sp, #4
    959c:	4649      	mov	r1, r9
    959e:	4640      	mov	r0, r8
    95a0:	f7ff fe8f 	bl	92c2 <putchw>
                break;
    95a4:	e7ba      	b.n	951c <tfp_format+0x160>
                  lng = 2;
    95a6:	2302      	movs	r3, #2
                p.base = 10;
    95a8:	220a      	movs	r2, #10
                if (2 == lng)
    95aa:	2b02      	cmp	r3, #2
                p.base = 10;
    95ac:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    95ae:	d114      	bne.n	95da <tfp_format+0x21e>
                    lli2a(va_arg(va, long long int), &p);
    95b0:	1de3      	adds	r3, r4, #7
    95b2:	f023 0307 	bic.w	r3, r3, #7
    95b6:	e9d3 0100 	ldrd	r0, r1, [r3]
    if (num < 0) {
    95ba:	2800      	cmp	r0, #0
                    lli2a(va_arg(va, long long int), &p);
    95bc:	f103 0408 	add.w	r4, r3, #8
    if (num < 0) {
    95c0:	f171 0300 	sbcs.w	r3, r1, #0
    95c4:	da05      	bge.n	95d2 <tfp_format+0x216>
        p->sign = '-';
    95c6:	232d      	movs	r3, #45	; 0x2d
        num = -num;
    95c8:	4240      	negs	r0, r0
    95ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = '-';
    95ce:	f88d 300c 	strb.w	r3, [sp, #12]
    ulli2a(num, p);
    95d2:	aa01      	add	r2, sp, #4
                    ulli2a(va_arg(va, unsigned long long int), &p);
    95d4:	f7ff fdc8 	bl	9168 <ulli2a>
    95d8:	e7df      	b.n	959a <tfp_format+0x1de>
                  if (1 == lng)
    95da:	2b01      	cmp	r3, #1
                    li2a(va_arg(va, long int), &p);
    95dc:	6820      	ldr	r0, [r4, #0]
    95de:	f104 0504 	add.w	r5, r4, #4
                  if (1 == lng)
    95e2:	d107      	bne.n	95f4 <tfp_format+0x238>
    if (num < 0) {
    95e4:	2800      	cmp	r0, #0
        p->sign = '-';
    95e6:	bfbe      	ittt	lt
    95e8:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    95ea:	4240      	neglt	r0, r0
        p->sign = '-';
    95ec:	f88d 300c 	strblt.w	r3, [sp, #12]
    uli2a(num, p);
    95f0:	a901      	add	r1, sp, #4
    95f2:	e7cf      	b.n	9594 <tfp_format+0x1d8>
    if (num < 0) {
    95f4:	2800      	cmp	r0, #0
        p->sign = '-';
    95f6:	bfbe      	ittt	lt
    95f8:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    95fa:	4240      	neglt	r0, r0
        p->sign = '-';
    95fc:	f88d 300c 	strblt.w	r3, [sp, #12]
    ui2a(num, p);
    9600:	a901      	add	r1, sp, #4
    9602:	f7ff fe33 	bl	926c <ui2a>
    9606:	e7c7      	b.n	9598 <tfp_format+0x1dc>
            switch (ch) {
    9608:	462f      	mov	r7, r5
                p.base = 8;
    960a:	2308      	movs	r3, #8
                ui2a(va_arg(va, unsigned int), &p);
    960c:	a901      	add	r1, sp, #4
    960e:	6820      	ldr	r0, [r4, #0]
                p.base = 8;
    9610:	9304      	str	r3, [sp, #16]
                ui2a(va_arg(va, unsigned int), &p);
    9612:	f7ff fe2b 	bl	926c <ui2a>
                putchw(putp, putf, &p);
    9616:	aa01      	add	r2, sp, #4
    9618:	4649      	mov	r1, r9
    961a:	4640      	mov	r0, r8
                ui2a(va_arg(va, unsigned int), &p);
    961c:	1d25      	adds	r5, r4, #4
                putchw(putp, putf, &p);
    961e:	f7ff fe50 	bl	92c2 <putchw>
                putf(putp, (char)(va_arg(va, int)));
    9622:	462c      	mov	r4, r5
                break;
    9624:	e77a      	b.n	951c <tfp_format+0x160>
            switch (ch) {
    9626:	462f      	mov	r7, r5
                putf(putp, (char)(va_arg(va, int)));
    9628:	7821      	ldrb	r1, [r4, #0]
    962a:	4640      	mov	r0, r8
    962c:	1d25      	adds	r5, r4, #4
    962e:	47c8      	blx	r9
    9630:	e7f7      	b.n	9622 <tfp_format+0x266>
            switch (ch) {
    9632:	462f      	mov	r7, r5
                p.bf = va_arg(va, char *);
    9634:	6823      	ldr	r3, [r4, #0]
                putchw(putp, putf, &p);
    9636:	aa01      	add	r2, sp, #4
    9638:	4649      	mov	r1, r9
    963a:	4640      	mov	r0, r8
                p.bf = va_arg(va, char *);
    963c:	9305      	str	r3, [sp, #20]
    963e:	1d25      	adds	r5, r4, #4
                putchw(putp, putf, &p);
    9640:	f7ff fe3f 	bl	92c2 <putchw>
                p.bf = bf;
    9644:	9605      	str	r6, [sp, #20]
    9646:	e7ec      	b.n	9622 <tfp_format+0x266>
            switch (ch) {
    9648:	462f      	mov	r7, r5
                putf(putp, ch);
    964a:	2125      	movs	r1, #37	; 0x25
    964c:	e6cc      	b.n	93e8 <tfp_format+0x2c>
                ch = *(fmt++);
    964e:	1c6f      	adds	r7, r5, #1
    9650:	e71e      	b.n	9490 <tfp_format+0xd4>
            switch (ch) {
    9652:	2b73      	cmp	r3, #115	; 0x73
    9654:	d0ee      	beq.n	9634 <tfp_format+0x278>
    9656:	f67f af67 	bls.w	9528 <tfp_format+0x16c>
    965a:	2b75      	cmp	r3, #117	; 0x75
    965c:	d08f      	beq.n	957e <tfp_format+0x1c2>
    965e:	2b78      	cmp	r3, #120	; 0x78
    9660:	f47f af5c 	bne.w	951c <tfp_format+0x160>
                p.base = 16;
    9664:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    9666:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    966a:	424b      	negs	r3, r1
                p.base = 16;
    966c:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    966e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9672:	414b      	adcs	r3, r1
    9674:	f363 0282 	bfi	r2, r3, #2, #1
    9678:	a90c      	add	r1, sp, #48	; 0x30
    967a:	f801 2d2c 	strb.w	r2, [r1, #-44]!
                    uli2a(va_arg(va, unsigned long int), &p);
    967e:	1d25      	adds	r5, r4, #4
    9680:	6820      	ldr	r0, [r4, #0]
    9682:	e787      	b.n	9594 <tfp_format+0x1d8>
            switch (ch) {
    9684:	2b69      	cmp	r3, #105	; 0x69
    9686:	d00e      	beq.n	96a6 <tfp_format+0x2ea>
    9688:	d810      	bhi.n	96ac <tfp_format+0x2f0>
    968a:	2b58      	cmp	r3, #88	; 0x58
    968c:	d02f      	beq.n	96ee <tfp_format+0x332>
    968e:	d806      	bhi.n	969e <tfp_format+0x2e2>
    9690:	2b00      	cmp	r3, #0
    9692:	f43f ae9e 	beq.w	93d2 <tfp_format+0x16>
    9696:	2b25      	cmp	r3, #37	; 0x25
    9698:	d0d6      	beq.n	9648 <tfp_format+0x28c>
    969a:	462f      	mov	r7, r5
    969c:	e73e      	b.n	951c <tfp_format+0x160>
    969e:	2b63      	cmp	r3, #99	; 0x63
    96a0:	d0c1      	beq.n	9626 <tfp_format+0x26a>
    96a2:	2b64      	cmp	r3, #100	; 0x64
    96a4:	d1f9      	bne.n	969a <tfp_format+0x2de>
    96a6:	462f      	mov	r7, r5
            char lng = 0;  /* 1 for long, 2 for long long */
    96a8:	2300      	movs	r3, #0
    96aa:	e77d      	b.n	95a8 <tfp_format+0x1ec>
            switch (ch) {
    96ac:	2b73      	cmp	r3, #115	; 0x73
    96ae:	d0c0      	beq.n	9632 <tfp_format+0x276>
    96b0:	d818      	bhi.n	96e4 <tfp_format+0x328>
    96b2:	2b6f      	cmp	r3, #111	; 0x6f
    96b4:	d0a8      	beq.n	9608 <tfp_format+0x24c>
    96b6:	2b70      	cmp	r3, #112	; 0x70
    96b8:	d1ef      	bne.n	969a <tfp_format+0x2de>
    96ba:	462f      	mov	r7, r5
                p.base = 16;
    96bc:	2210      	movs	r2, #16
    96be:	463d      	mov	r5, r7
                p.alt = 1;
    96c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
                p.base = 16;
    96c4:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    96c6:	f043 0302 	orr.w	r3, r3, #2
    96ca:	f36f 0382 	bfc	r3, #2, #1
    96ce:	f88d 3004 	strb.w	r3, [sp, #4]
                    ui2a(va_arg(va, unsigned int), &p);
    96d2:	6820      	ldr	r0, [r4, #0]
    96d4:	f104 0a04 	add.w	sl, r4, #4
    96d8:	a901      	add	r1, sp, #4
    96da:	f7ff fdc7 	bl	926c <ui2a>
    96de:	462f      	mov	r7, r5
    96e0:	4654      	mov	r4, sl
    96e2:	e75a      	b.n	959a <tfp_format+0x1de>
            switch (ch) {
    96e4:	2b75      	cmp	r3, #117	; 0x75
    96e6:	f43f af4c 	beq.w	9582 <tfp_format+0x1c6>
    96ea:	2b78      	cmp	r3, #120	; 0x78
    96ec:	d1d5      	bne.n	969a <tfp_format+0x2de>
                p.base = 16;
    96ee:	2210      	movs	r2, #16
    96f0:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    96f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    96f6:	4253      	negs	r3, r2
    96f8:	4153      	adcs	r3, r2
    96fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    96fe:	f363 0282 	bfi	r2, r3, #2, #1
    9702:	f88d 2004 	strb.w	r2, [sp, #4]
    9706:	e7e4      	b.n	96d2 <tfp_format+0x316>

00009708 <tfp_vsnprintf>:
}

int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
    9708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    970a:	2400      	movs	r4, #0
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    970c:	b189      	cbz	r1, 9732 <tfp_vsnprintf+0x2a>
    return 0;

  data.dest = str;
  data.dest_capacity = size-1;
    970e:	3901      	subs	r1, #1
  data.dest = str;
    9710:	9002      	str	r0, [sp, #8]
  data.dest_capacity = size-1;
    9712:	9101      	str	r1, [sp, #4]
  data.num_chars = 0;
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    9714:	a801      	add	r0, sp, #4
    9716:	4908      	ldr	r1, [pc, #32]	; (9738 <tfp_vsnprintf+0x30>)
  data.num_chars = 0;
    9718:	9403      	str	r4, [sp, #12]
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    971a:	f7ff fe4f 	bl	93bc <tfp_format>

  if (data.num_chars < data.dest_capacity)
    971e:	9903      	ldr	r1, [sp, #12]
    9720:	9b01      	ldr	r3, [sp, #4]
    9722:	9a02      	ldr	r2, [sp, #8]
    9724:	4299      	cmp	r1, r3
    data.dest[data.num_chars] = '\0';
    9726:	bf34      	ite	cc
    9728:	5454      	strbcc	r4, [r2, r1]
  else
    data.dest[data.dest_capacity] = '\0';
    972a:	54d4      	strbcs	r4, [r2, r3]

  return data.num_chars;
    972c:	9803      	ldr	r0, [sp, #12]
}
    972e:	b004      	add	sp, #16
    9730:	bd10      	pop	{r4, pc}
    return 0;
    9732:	4608      	mov	r0, r1
    9734:	e7fb      	b.n	972e <tfp_vsnprintf+0x26>
    9736:	bf00      	nop
    9738:	000093a9 	.word	0x000093a9

0000973c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    973c:	f000 bcd2 	b.w	a0e4 <USBHwISR>

00009740 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9740:	b508      	push	{r3, lr}
    9742:	4a0d      	ldr	r2, [pc, #52]	; (9778 <Reset_Handler+0x38>)
    9744:	4b0d      	ldr	r3, [pc, #52]	; (977c <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9746:	490e      	ldr	r1, [pc, #56]	; (9780 <Reset_Handler+0x40>)
    9748:	428b      	cmp	r3, r1
    974a:	d30c      	bcc.n	9766 <Reset_Handler+0x26>

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
	{
		*src++ = 0;
    974c:	2100      	movs	r1, #0
    974e:	4b0d      	ldr	r3, [pc, #52]	; (9784 <Reset_Handler+0x44>)
	while (src < &_ebss)
    9750:	4a0d      	ldr	r2, [pc, #52]	; (9788 <Reset_Handler+0x48>)
    9752:	4293      	cmp	r3, r2
    9754:	d30c      	bcc.n	9770 <Reset_Handler+0x30>
	}

	__libc_init_array();
    9756:	f7fa fd2b 	bl	41b0 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    975a:	4b0c      	ldr	r3, [pc, #48]	; (978c <Reset_Handler+0x4c>)
    975c:	4a0c      	ldr	r2, [pc, #48]	; (9790 <Reset_Handler+0x50>)
    975e:	601a      	str	r2, [r3, #0]

	main();
    9760:	f7fd fc7e 	bl	7060 <main>
    9764:	e7fe      	b.n	9764 <Reset_Handler+0x24>
		*dest++ = *src++;
    9766:	f852 0f04 	ldr.w	r0, [r2, #4]!
    976a:	f843 0b04 	str.w	r0, [r3], #4
    976e:	e7eb      	b.n	9748 <Reset_Handler+0x8>
		*src++ = 0;
    9770:	f843 1b04 	str.w	r1, [r3], #4
    9774:	e7ed      	b.n	9752 <Reset_Handler+0x12>
    9776:	bf00      	nop
    9778:	0000bd04 	.word	0x0000bd04
    977c:	10000020 	.word	0x10000020
    9780:	10000a29 	.word	0x10000a29
    9784:	10000a30 	.word	0x10000a30
    9788:	10003de6 	.word	0x10003de6
    978c:	e000ed08 	.word	0xe000ed08
    9790:	00004000 	.word	0x00004000

00009794 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9794:	e7fe      	b.n	9794 <ADC_IRQHandler>
    9796:	0000      	movs	r0, r0

00009798 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    9798:	220a      	movs	r2, #10
    979a:	4b04      	ldr	r3, [pc, #16]	; (97ac <spi_delay+0x14>)
    979c:	601a      	str	r2, [r3, #0]
       while (--delay_counter);
    979e:	681a      	ldr	r2, [r3, #0]
    97a0:	3a01      	subs	r2, #1
    97a2:	601a      	str	r2, [r3, #0]
    97a4:	2a00      	cmp	r2, #0
    97a6:	d1fa      	bne.n	979e <spi_delay+0x6>
}
    97a8:	4770      	bx	lr
    97aa:	bf00      	nop
    97ac:	100012d0 	.word	0x100012d0

000097b0 <rbit>:
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    97b0:	fa90 f0a0 	rbit	r0, r0
}
    97b4:	4770      	bx	lr
    97b6:	0000      	movs	r0, r0

000097b8 <wait_us>:
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    97b8:	08c3      	lsrs	r3, r0, #3
    97ba:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    97be:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    97c2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    97c6:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    97ca:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
	wait_us_counter =
    97ce:	4b04      	ldr	r3, [pc, #16]	; (97e0 <wait_us+0x28>)
    97d0:	6058      	str	r0, [r3, #4]
	while(--wait_us_counter);
    97d2:	685a      	ldr	r2, [r3, #4]
    97d4:	3a01      	subs	r2, #1
    97d6:	605a      	str	r2, [r3, #4]
    97d8:	2a00      	cmp	r2, #0
    97da:	d1fa      	bne.n	97d2 <wait_us+0x1a>
}
    97dc:	4770      	bx	lr
    97de:	bf00      	nop
    97e0:	100012d0 	.word	0x100012d0

000097e4 <wait>:
	wait_us(seconds * 1000000);
    97e4:	4b01      	ldr	r3, [pc, #4]	; (97ec <wait+0x8>)
    97e6:	4358      	muls	r0, r3
    97e8:	f7ff bfe6 	b.w	97b8 <wait_us>
    97ec:	000f4240 	.word	0x000f4240

000097f0 <all_pins_off>:
	PINSEL0 = 0;
    97f0:	2300      	movs	r3, #0
    97f2:	4a10      	ldr	r2, [pc, #64]	; (9834 <all_pins_off+0x44>)
    97f4:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    97f6:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    97f8:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    97fa:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    97fc:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    97fe:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    9800:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    9802:	6293      	str	r3, [r2, #40]	; 0x28
	FIO0DIR = 0;
    9804:	4a0c      	ldr	r2, [pc, #48]	; (9838 <all_pins_off+0x48>)
    9806:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    9808:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    980a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    980c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    980e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	PINMODE0 = 0;
    9812:	4a0a      	ldr	r2, [pc, #40]	; (983c <all_pins_off+0x4c>)
    9814:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    9816:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    9818:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    981a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    981c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    981e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    9820:	6253      	str	r3, [r2, #36]	; 0x24
	FIO0PIN = 0;
    9822:	4a07      	ldr	r2, [pc, #28]	; (9840 <all_pins_off+0x50>)
    9824:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    9826:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    9828:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    982a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    982c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    9830:	4770      	bx	lr
    9832:	bf00      	nop
    9834:	4002c000 	.word	0x4002c000
    9838:	2009c000 	.word	0x2009c000
    983c:	4002c040 	.word	0x4002c040
    9840:	2009c014 	.word	0x2009c014

00009844 <gpio_init>:
{
    9844:	b508      	push	{r3, lr}
	all_pins_off();
    9846:	f7ff ffd3 	bl	97f0 <all_pins_off>
	FIO0DIR = 0;
    984a:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    984c:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO0DIR = 0;
    9850:	4a08      	ldr	r2, [pc, #32]	; (9874 <gpio_init+0x30>)
    9852:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9854:	6211      	str	r1, [r2, #32]
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9856:	f240 11b1 	movw	r1, #433	; 0x1b1
    985a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    985c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	FIO3DIR = 0;
    9860:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9862:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO0PIN = 0;
    9866:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    9868:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    986a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    986c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    986e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    9872:	bd08      	pop	{r3, pc}
    9874:	2009c000 	.word	0x2009c000

00009878 <dio_ssp_init>:
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9878:	4b11      	ldr	r3, [pc, #68]	; (98c0 <dio_ssp_init+0x48>)
    987a:	681a      	ldr	r2, [r3, #0]
    987c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    9880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    9884:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9886:	681a      	ldr	r2, [r3, #0]
    9888:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    988c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9890:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9892:	681a      	ldr	r2, [r3, #0]
    9894:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    9898:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    989c:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    989e:	681a      	ldr	r2, [r3, #0]
    98a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    98a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    98a8:	601a      	str	r2, [r3, #0]
	DIO_SSEL_SET;
    98aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    98ae:	4b05      	ldr	r3, [pc, #20]	; (98c4 <dio_ssp_init+0x4c>)
    98b0:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    98b2:	22c7      	movs	r2, #199	; 0xc7
    98b4:	4b04      	ldr	r3, [pc, #16]	; (98c8 <dio_ssp_init+0x50>)
    98b6:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    98b8:	220c      	movs	r2, #12
    98ba:	605a      	str	r2, [r3, #4]
    98bc:	4770      	bx	lr
    98be:	bf00      	nop
    98c0:	4002c000 	.word	0x4002c000
    98c4:	2009c098 	.word	0x2009c098
    98c8:	40030000 	.word	0x40030000

000098cc <atest_init>:
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    98cc:	4a09      	ldr	r2, [pc, #36]	; (98f4 <atest_init+0x28>)
    98ce:	6813      	ldr	r3, [r2, #0]
    98d0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    98d4:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    98d6:	4a08      	ldr	r2, [pc, #32]	; (98f8 <atest_init+0x2c>)
    98d8:	6813      	ldr	r3, [r2, #0]
    98da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    98de:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    98e0:	4b06      	ldr	r3, [pc, #24]	; (98fc <atest_init+0x30>)
    98e2:	681a      	ldr	r2, [r3, #0]
    98e4:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    98e8:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    98ea:	681a      	ldr	r2, [r3, #0]
    98ec:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    98f0:	601a      	str	r2, [r3, #0]
    98f2:	4770      	bx	lr
    98f4:	4002c004 	.word	0x4002c004
    98f8:	2009c000 	.word	0x2009c000
    98fc:	4002c044 	.word	0x4002c044

00009900 <cc2400_spi>:
{
    9900:	b5f0      	push	{r4, r5, r6, r7, lr}
		SCLK_SET;
    9902:	2510      	movs	r5, #16
	CSN_CLR;
    9904:	2420      	movs	r4, #32
	u32 msb = 1 << (len - 1);
    9906:	2201      	movs	r2, #1
    9908:	46ae      	mov	lr, r5
	CSN_CLR;
    990a:	4b0f      	ldr	r3, [pc, #60]	; (9948 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);
    990c:	1e46      	subs	r6, r0, #1
	CSN_CLR;
    990e:	601c      	str	r4, [r3, #0]
		if (MISO)
    9910:	4f0e      	ldr	r7, [pc, #56]	; (994c <cc2400_spi+0x4c>)
    9912:	4c0f      	ldr	r4, [pc, #60]	; (9950 <cc2400_spi+0x50>)
	u32 msb = 1 << (len - 1);
    9914:	fa02 f606 	lsl.w	r6, r2, r6
	while (len--) {
    9918:	3801      	subs	r0, #1
    991a:	b2c0      	uxtb	r0, r0
    991c:	28ff      	cmp	r0, #255	; 0xff
    991e:	d103      	bne.n	9928 <cc2400_spi+0x28>
	CSN_SET;
    9920:	2320      	movs	r3, #32
}
    9922:	4608      	mov	r0, r1
	CSN_SET;
    9924:	6023      	str	r3, [r4, #0]
}
    9926:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data & msb)
    9928:	4231      	tst	r1, r6
			MOSI_SET;
    992a:	bf14      	ite	ne
    992c:	6022      	strne	r2, [r4, #0]
			MOSI_CLR;
    992e:	601a      	streq	r2, [r3, #0]
		SCLK_SET;
    9930:	6025      	str	r5, [r4, #0]
		if (MISO)
    9932:	f8d7 c000 	ldr.w	ip, [r7]
		data <<= 1;
    9936:	0049      	lsls	r1, r1, #1
		if (MISO)
    9938:	f01c 0f02 	tst.w	ip, #2
			data |= 1;
    993c:	bf18      	it	ne
    993e:	f041 0101 	orrne.w	r1, r1, #1
		SCLK_CLR;
    9942:	f8c3 e000 	str.w	lr, [r3]
    9946:	e7e7      	b.n	9918 <cc2400_spi+0x18>
    9948:	2009c05c 	.word	0x2009c05c
    994c:	2009c054 	.word	0x2009c054
    9950:	2009c058 	.word	0x2009c058

00009954 <cc2400_init>:
{
    9954:	b508      	push	{r3, lr}
	atest_init();
    9956:	f7ff ffb9 	bl	98cc <atest_init>
	CC1V8_SET;
    995a:	f44f 7300 	mov.w	r3, #512	; 0x200
    995e:	4908      	ldr	r1, [pc, #32]	; (9980 <cc2400_init+0x2c>)
	wait_us(50);
    9960:	2032      	movs	r0, #50	; 0x32
	CC1V8_SET;
    9962:	600b      	str	r3, [r1, #0]
	wait_us(50);
    9964:	f7ff ff28 	bl	97b8 <wait_us>
	CSN_SET;
    9968:	2220      	movs	r2, #32
    996a:	4b06      	ldr	r3, [pc, #24]	; (9984 <cc2400_init+0x30>)
	cc2400_spi(24, out);
    996c:	2018      	movs	r0, #24
	CSN_SET;
    996e:	601a      	str	r2, [r3, #0]
	CC3V3_SET;
    9970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    9974:	600b      	str	r3, [r1, #0]
	cc2400_spi(24, out);
    9976:	4904      	ldr	r1, [pc, #16]	; (9988 <cc2400_init+0x34>)
}
    9978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_spi(24, out);
    997c:	f7ff bfc0 	b.w	9900 <cc2400_spi>
    9980:	2009c038 	.word	0x2009c038
    9984:	2009c058 	.word	0x2009c058
    9988:	000d7fff 	.word	0x000d7fff

0000998c <cc2400_get>:
{
    998c:	b508      	push	{r3, lr}
	u32 out = (reg | 0x80) << 16;
    998e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    9992:	0409      	lsls	r1, r1, #16
    9994:	2018      	movs	r0, #24
    9996:	f7ff ffb3 	bl	9900 <cc2400_spi>
}
    999a:	b280      	uxth	r0, r0
    999c:	bd08      	pop	{r3, pc}

0000999e <cc2400_set>:
	cc2400_spi(24, out);
    999e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    99a2:	2018      	movs	r0, #24
    99a4:	f7ff bfac 	b.w	9900 <cc2400_spi>

000099a8 <cc2400_get8>:
{
    99a8:	b508      	push	{r3, lr}
	u16 out = (reg | 0x80) << 8;
    99aa:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    99ae:	0209      	lsls	r1, r1, #8
    99b0:	2010      	movs	r0, #16
    99b2:	f7ff ffa5 	bl	9900 <cc2400_spi>
}
    99b6:	b2c0      	uxtb	r0, r0
    99b8:	bd08      	pop	{r3, pc}

000099ba <cc2400_set8>:
	cc2400_spi(16, out);
    99ba:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    99be:	2010      	movs	r0, #16
    99c0:	f7ff bf9e 	b.w	9900 <cc2400_spi>

000099c4 <cc2400_fifo_write>:


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    99c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    99c6:	2220      	movs	r2, #32
    99c8:	4b1e      	ldr	r3, [pc, #120]	; (9a44 <cc2400_fifo_write+0x80>)
	u8 reg = FIFOREG;
    99ca:	2570      	movs	r5, #112	; 0x70
	CSN_CLR;
    99cc:	601a      	str	r2, [r3, #0]
    99ce:	2701      	movs	r7, #1
    99d0:	2208      	movs	r2, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    99d2:	2610      	movs	r6, #16
    99d4:	4c1c      	ldr	r4, [pc, #112]	; (9a48 <cc2400_fifo_write+0x84>)
		if (reg & msb)
    99d6:	f015 0f80 	tst.w	r5, #128	; 0x80
    99da:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
			MOSI_SET;
    99de:	bf14      	ite	ne
    99e0:	6027      	strne	r7, [r4, #0]
			MOSI_CLR;
    99e2:	601f      	streq	r7, [r3, #0]
		reg <<= 1;
    99e4:	006d      	lsls	r5, r5, #1
	for (i = 0; i < 8; ++i) {
    99e6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    99ea:	6026      	str	r6, [r4, #0]
		reg <<= 1;
    99ec:	b2ed      	uxtb	r5, r5
		SCLK_CLR;
    99ee:	601e      	str	r6, [r3, #0]
	for (i = 0; i < 8; ++i) {
    99f0:	d1f1      	bne.n	99d6 <cc2400_fifo_write+0x12>
    99f2:	460e      	mov	r6, r1
    99f4:	2701      	movs	r7, #1
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
			SCLK_SET;
    99f6:	f04f 0e10 	mov.w	lr, #16
	for (i = 0; i < len; ++i) {
    99fa:	1a72      	subs	r2, r6, r1
    99fc:	b2d2      	uxtb	r2, r2
    99fe:	4290      	cmp	r0, r2
    9a00:	d80c      	bhi.n	9a1c <cc2400_fifo_write+0x58>
    9a02:	2208      	movs	r2, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    9a04:	2110      	movs	r1, #16
    9a06:	3a01      	subs	r2, #1
	for (i = 0; i < 8; ++i) {
    9a08:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9a0c:	6021      	str	r1, [r4, #0]
		SCLK_CLR;
    9a0e:	6019      	str	r1, [r3, #0]
	for (i = 0; i < 8; ++i) {
    9a10:	d1f9      	bne.n	9a06 <cc2400_fifo_write+0x42>
	}
	
	spi_delay();
    9a12:	f7ff fec1 	bl	9798 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    9a16:	2320      	movs	r3, #32
    9a18:	6023      	str	r3, [r4, #0]
    9a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = data[i];
    9a1c:	2208      	movs	r2, #8
    9a1e:	f816 5b01 	ldrb.w	r5, [r6], #1
			if (temp & msb)
    9a22:	f015 0f80 	tst.w	r5, #128	; 0x80
    9a26:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				MOSI_SET;
    9a2a:	bf14      	ite	ne
    9a2c:	6027      	strne	r7, [r4, #0]
				MOSI_CLR;
    9a2e:	601f      	streq	r7, [r3, #0]
			temp <<= 1;
    9a30:	006d      	lsls	r5, r5, #1
		for (j = 0; j < 8; ++j) {
    9a32:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			SCLK_SET;
    9a36:	f8c4 e000 	str.w	lr, [r4]
			temp <<= 1;
    9a3a:	b2ed      	uxtb	r5, r5
			SCLK_CLR;
    9a3c:	f8c3 e000 	str.w	lr, [r3]
		for (j = 0; j < 8; ++j) {
    9a40:	d1ef      	bne.n	9a22 <cc2400_fifo_write+0x5e>
    9a42:	e7da      	b.n	99fa <cc2400_fifo_write+0x36>
    9a44:	2009c05c 	.word	0x2009c05c
    9a48:	2009c058 	.word	0x2009c058

00009a4c <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    9a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9a50:	2320      	movs	r3, #32
    9a52:	4d1d      	ldr	r5, [pc, #116]	; (9ac8 <cc2400_fifo_read+0x7c>)
	reg = 0x80 | FIFOREG;
    9a54:	22f0      	movs	r2, #240	; 0xf0
	CSN_CLR;
    9a56:	602b      	str	r3, [r5, #0]
    9a58:	2601      	movs	r6, #1
    9a5a:	2308      	movs	r3, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    9a5c:	2410      	movs	r4, #16
    9a5e:	4f1b      	ldr	r7, [pc, #108]	; (9acc <cc2400_fifo_read+0x80>)
		if (reg & msb)
    9a60:	f012 0f80 	tst.w	r2, #128	; 0x80
    9a64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
			MOSI_SET;
    9a68:	bf14      	ite	ne
    9a6a:	603e      	strne	r6, [r7, #0]
			MOSI_CLR;
    9a6c:	602e      	streq	r6, [r5, #0]
		reg <<= 1;
    9a6e:	0052      	lsls	r2, r2, #1
	for (i = 0; i < 8; ++i) {
    9a70:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    9a74:	603c      	str	r4, [r7, #0]
		reg <<= 1;
    9a76:	b2d2      	uxtb	r2, r2
		SCLK_CLR;
    9a78:	602c      	str	r4, [r5, #0]
	for (i = 0; i < 8; ++i) {
    9a7a:	d1f1      	bne.n	9a60 <cc2400_fifo_read+0x14>
    9a7c:	3801      	subs	r0, #1
    9a7e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    9a82:	4408      	add	r0, r1

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
    9a84:	2110      	movs	r1, #16
			temp <<= 1;
			if (MISO)
    9a86:	f8df 9048 	ldr.w	r9, [pc, #72]	; 9ad0 <cc2400_fifo_read+0x84>
	for (i = 0; i < len; ++i) {
    9a8a:	4580      	cmp	r8, r0
    9a8c:	d105      	bne.n	9a9a <cc2400_fifo_read+0x4e>
		}
		buf[i] = temp;
	}

	/* end transaction by raising CSN */
	spi_delay();
    9a8e:	f7ff fe83 	bl	9798 <spi_delay>
	CSN_SET;
    9a92:	2320      	movs	r3, #32
    9a94:	603b      	str	r3, [r7, #0]
    9a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9a9a:	2608      	movs	r6, #8
    9a9c:	2400      	movs	r4, #0
			spi_delay();
    9a9e:	f7ff fe7b 	bl	9798 <spi_delay>
			SCLK_SET;
    9aa2:	6039      	str	r1, [r7, #0]
			if (MISO)
    9aa4:	f8d9 3000 	ldr.w	r3, [r9]
			temp <<= 1;
    9aa8:	0064      	lsls	r4, r4, #1
			if (MISO)
    9aaa:	079b      	lsls	r3, r3, #30
			temp <<= 1;
    9aac:	b2e4      	uxtb	r4, r4
				temp |= 1;
    9aae:	bf48      	it	mi
    9ab0:	f044 0401 	orrmi.w	r4, r4, #1
			spi_delay();
    9ab4:	f7ff fe70 	bl	9798 <spi_delay>
    9ab8:	3e01      	subs	r6, #1
		for (j = 0; j < 8; ++j) {
    9aba:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_CLR;
    9abe:	6029      	str	r1, [r5, #0]
		for (j = 0; j < 8; ++j) {
    9ac0:	d1ed      	bne.n	9a9e <cc2400_fifo_read+0x52>
		buf[i] = temp;
    9ac2:	f808 4f01 	strb.w	r4, [r8, #1]!
    9ac6:	e7e0      	b.n	9a8a <cc2400_fifo_read+0x3e>
    9ac8:	2009c05c 	.word	0x2009c05c
    9acc:	2009c058 	.word	0x2009c058
    9ad0:	2009c054 	.word	0x2009c054

00009ad4 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    9ad4:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    9ad6:	2100      	movs	r1, #0
    9ad8:	2008      	movs	r0, #8
    9ada:	f7ff ff11 	bl	9900 <cc2400_spi>
}
    9ade:	b2c0      	uxtb	r0, r0
    9ae0:	bd08      	pop	{r3, pc}

00009ae2 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9ae2:	b508      	push	{r3, lr}
	return cc2400_spi(8, reg);
    9ae4:	4601      	mov	r1, r0
    9ae6:	2008      	movs	r0, #8
    9ae8:	f7ff ff0a 	bl	9900 <cc2400_spi>
}
    9aec:	b2c0      	uxtb	r0, r0
    9aee:	bd08      	pop	{r3, pc}

00009af0 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9af0:	b508      	push	{r3, lr}
	cc2400_spi(24, out);
    9af2:	2100      	movs	r1, #0
    9af4:	2018      	movs	r0, #24
    9af6:	f7ff ff03 	bl	9900 <cc2400_spi>
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    9afa:	2000      	movs	r0, #0
    9afc:	f7ff ff46 	bl	998c <cc2400_get>
    9b00:	2800      	cmp	r0, #0
    9b02:	d1fa      	bne.n	9afa <cc2400_reset+0xa>
	cc2400_spi(24, out);
    9b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9b08:	2018      	movs	r0, #24
    9b0a:	f7ff fef9 	bl	9900 <cc2400_spi>
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    9b0e:	2000      	movs	r0, #0
    9b10:	f7ff ff3c 	bl	998c <cc2400_get>
    9b14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9b18:	d1f9      	bne.n	9b0e <cc2400_reset+0x1e>
}
    9b1a:	bd08      	pop	{r3, pc}

00009b1c <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9b20:	f244 023a 	movw	r2, #16442	; 0x403a
    9b24:	4b3f      	ldr	r3, [pc, #252]	; (9c24 <clock_start+0x108>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9b26:	4e40      	ldr	r6, [pc, #256]	; (9c28 <clock_start+0x10c>)
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9b28:	601a      	str	r2, [r3, #0]
	CLKSRCSEL = 0;
    9b2a:	2300      	movs	r3, #0

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9b2c:	4d3f      	ldr	r5, [pc, #252]	; (9c2c <clock_start+0x110>)
	CLKSRCSEL = 0;
    9b2e:	6033      	str	r3, [r6, #0]
	PLL0CON &= ~PLL0CON_PLLC0;
    9b30:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9b32:	4c3f      	ldr	r4, [pc, #252]	; (9c30 <clock_start+0x114>)
	PLL0CON &= ~PLL0CON_PLLC0;
    9b34:	f023 0302 	bic.w	r3, r3, #2
    9b38:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9b3a:	23aa      	movs	r3, #170	; 0xaa
    9b3c:	6023      	str	r3, [r4, #0]
    9b3e:	2355      	movs	r3, #85	; 0x55
    9b40:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9b42:	4b3c      	ldr	r3, [pc, #240]	; (9c34 <clock_start+0x118>)
    9b44:	461f      	mov	r7, r3
    9b46:	681a      	ldr	r2, [r3, #0]
    9b48:	0190      	lsls	r0, r2, #6
    9b4a:	d4fc      	bmi.n	9b46 <clock_start+0x2a>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9b4c:	682b      	ldr	r3, [r5, #0]
    9b4e:	f023 0301 	bic.w	r3, r3, #1
    9b52:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9b54:	23aa      	movs	r3, #170	; 0xaa
    9b56:	6023      	str	r3, [r4, #0]
    9b58:	2355      	movs	r3, #85	; 0x55
    9b5a:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9b5c:	683b      	ldr	r3, [r7, #0]
    9b5e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    9b62:	d1fb      	bne.n	9b5c <clock_start+0x40>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9b64:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 9c58 <clock_start+0x13c>
    9b68:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9b6c:	f7ff ffc0 	bl	9af0 <cc2400_reset>
	cc2400_spi(24, out);
    9b70:	4931      	ldr	r1, [pc, #196]	; (9c38 <clock_start+0x11c>)
    9b72:	2018      	movs	r0, #24
    9b74:	f7ff fec4 	bl	9900 <cc2400_spi>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    9b78:	2060      	movs	r0, #96	; 0x60
    9b7a:	f7ff ffb2 	bl	9ae2 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9b7e:	f7ff ffa9 	bl	9ad4 <cc2400_status>
    9b82:	0641      	lsls	r1, r0, #25
    9b84:	d5fb      	bpl.n	9b7e <clock_start+0x62>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9b86:	2220      	movs	r2, #32
    9b88:	4b2c      	ldr	r3, [pc, #176]	; (9c3c <clock_start+0x120>)
    9b8a:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9b8c:	681a      	ldr	r2, [r3, #0]
    9b8e:	0652      	lsls	r2, r2, #25
    9b90:	d5fc      	bpl.n	9b8c <clock_start+0x70>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    9b92:	2228      	movs	r2, #40	; 0x28
    9b94:	4b2a      	ldr	r3, [pc, #168]	; (9c40 <clock_start+0x124>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    9b96:	21aa      	movs	r1, #170	; 0xaa
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    9b98:	601a      	str	r2, [r3, #0]
	PCLKSEL1  = 0;
    9b9a:	2200      	movs	r2, #0
    9b9c:	605a      	str	r2, [r3, #4]
	CLKSRCSEL = 1;
    9b9e:	2301      	movs	r3, #1
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9ba0:	4a28      	ldr	r2, [pc, #160]	; (9c44 <clock_start+0x128>)
	CLKSRCSEL = 1;
    9ba2:	6033      	str	r3, [r6, #0]
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9ba4:	4b28      	ldr	r3, [pc, #160]	; (9c48 <clock_start+0x12c>)
    9ba6:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9ba8:	2255      	movs	r2, #85	; 0x55
    9baa:	6021      	str	r1, [r4, #0]
    9bac:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9bae:	682b      	ldr	r3, [r5, #0]
    9bb0:	f043 0301 	orr.w	r3, r3, #1
    9bb4:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9bb6:	6021      	str	r1, [r4, #0]
    9bb8:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9bba:	683b      	ldr	r3, [r7, #0]
    9bbc:	01de      	lsls	r6, r3, #7
    9bbe:	d5fc      	bpl.n	9bba <clock_start+0x9e>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9bc0:	2303      	movs	r3, #3
    9bc2:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9bc6:	682b      	ldr	r3, [r5, #0]
    9bc8:	f043 0302 	orr.w	r3, r3, #2
    9bcc:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9bce:	23aa      	movs	r3, #170	; 0xaa
    9bd0:	6023      	str	r3, [r4, #0]
    9bd2:	2355      	movs	r3, #85	; 0x55
    9bd4:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9bd6:	683b      	ldr	r3, [r7, #0]
    9bd8:	019d      	lsls	r5, r3, #6
    9bda:	d5fc      	bpl.n	9bd6 <clock_start+0xba>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9bdc:	2222      	movs	r2, #34	; 0x22
	PLL1FEED_SEQUENCE;
    9bde:	2055      	movs	r0, #85	; 0x55
    9be0:	24aa      	movs	r4, #170	; 0xaa
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9be2:	4b1a      	ldr	r3, [pc, #104]	; (9c4c <clock_start+0x130>)
    9be4:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9be6:	3308      	adds	r3, #8

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9be8:	4a19      	ldr	r2, [pc, #100]	; (9c50 <clock_start+0x134>)
	PLL1FEED_SEQUENCE;
    9bea:	601c      	str	r4, [r3, #0]
    9bec:	6018      	str	r0, [r3, #0]
	PLL1CON |= PLL1CON_PLLE1;
    9bee:	6811      	ldr	r1, [r2, #0]
    9bf0:	f041 0101 	orr.w	r1, r1, #1
    9bf4:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9bf6:	4917      	ldr	r1, [pc, #92]	; (9c54 <clock_start+0x138>)
	PLL1FEED_SEQUENCE;
    9bf8:	601c      	str	r4, [r3, #0]
    9bfa:	6018      	str	r0, [r3, #0]
    9bfc:	4608      	mov	r0, r1
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9bfe:	680c      	ldr	r4, [r1, #0]
    9c00:	05e4      	lsls	r4, r4, #23
    9c02:	d5fc      	bpl.n	9bfe <clock_start+0xe2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9c04:	6801      	ldr	r1, [r0, #0]
    9c06:	0549      	lsls	r1, r1, #21
    9c08:	d5fc      	bpl.n	9c04 <clock_start+0xe8>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9c0a:	6811      	ldr	r1, [r2, #0]
    9c0c:	f041 0102 	orr.w	r1, r1, #2
    9c10:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    9c12:	22aa      	movs	r2, #170	; 0xaa
    9c14:	601a      	str	r2, [r3, #0]
    9c16:	2255      	movs	r2, #85	; 0x55
    9c18:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9c1a:	6803      	ldr	r3, [r0, #0]
    9c1c:	059b      	lsls	r3, r3, #22
    9c1e:	d5fc      	bpl.n	9c1a <clock_start+0xfe>
}
    9c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c24:	400fc000 	.word	0x400fc000
    9c28:	400fc10c 	.word	0x400fc10c
    9c2c:	400fc080 	.word	0x400fc080
    9c30:	400fc08c 	.word	0x400fc08c
    9c34:	400fc088 	.word	0x400fc088
    9c38:	00081570 	.word	0x00081570
    9c3c:	400fc1a0 	.word	0x400fc1a0
    9c40:	400fc1a8 	.word	0x400fc1a8
    9c44:	00010018 	.word	0x00010018
    9c48:	400fc084 	.word	0x400fc084
    9c4c:	400fc0a4 	.word	0x400fc0a4
    9c50:	400fc0a0 	.word	0x400fc0a0
    9c54:	400fc0a8 	.word	0x400fc0a8
    9c58:	400fc104 	.word	0x400fc104

00009c5c <ubertooth_init>:
{
    9c5c:	b508      	push	{r3, lr}
	gpio_init();
    9c5e:	f7ff fdf1 	bl	9844 <gpio_init>
	cc2400_init();
    9c62:	f7ff fe77 	bl	9954 <cc2400_init>
}
    9c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_start();
    9c6a:	f7ff bf57 	b.w	9b1c <clock_start>
    9c6e:	0000      	movs	r0, r0

00009c70 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9c70:	b508      	push	{r3, lr}
	all_pins_off();
    9c72:	f7ff fdbd 	bl	97f0 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9c76:	2202      	movs	r2, #2
    9c78:	4b08      	ldr	r3, [pc, #32]	; (9c9c <reset+0x2c>)
	wait_us(seconds * 1000000);
    9c7a:	4809      	ldr	r0, [pc, #36]	; (9ca0 <reset+0x30>)
	USRLED_CLR;
    9c7c:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9c82:	6813      	ldr	r3, [r2, #0]
    9c84:	f043 0303 	orr.w	r3, r3, #3
    9c88:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9c8a:	22aa      	movs	r2, #170	; 0xaa
    9c8c:	4b05      	ldr	r3, [pc, #20]	; (9ca4 <reset+0x34>)
    9c8e:	601a      	str	r2, [r3, #0]
    9c90:	2255      	movs	r2, #85	; 0x55
    9c92:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    9c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wait_us(seconds * 1000000);
    9c98:	f7ff bd8e 	b.w	97b8 <wait_us>
    9c9c:	2009c03c 	.word	0x2009c03c
    9ca0:	000f4240 	.word	0x000f4240
    9ca4:	40000008 	.word	0x40000008

00009ca8 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    9ca8:	b530      	push	{r4, r5, lr}
    9caa:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    9cac:	2336      	movs	r3, #54	; 0x36
{
    9cae:	4604      	mov	r4, r0
    9cb0:	460d      	mov	r5, r1
	command[0] = 54; /* read part number */
    9cb2:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9cb4:	a905      	add	r1, sp, #20
    9cb6:	4668      	mov	r0, sp
    9cb8:	4b07      	ldr	r3, [pc, #28]	; (9cd8 <get_part_num+0x30>)
    9cba:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    9cbc:	9b05      	ldr	r3, [sp, #20]
    9cbe:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9cc0:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9cc2:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    9cc4:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9cc6:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9cc8:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    9cca:	0e1b      	lsrs	r3, r3, #24
    9ccc:	7123      	strb	r3, [r4, #4]
	*len = 5;
    9cce:	2305      	movs	r3, #5
	buffer[3] = (result[1] >> 16) & 0xFF;
    9cd0:	70e2      	strb	r2, [r4, #3]
	*len = 5;
    9cd2:	602b      	str	r3, [r5, #0]
	
}
    9cd4:	b00b      	add	sp, #44	; 0x2c
    9cd6:	bd30      	pop	{r4, r5, pc}
    9cd8:	1fff1ff1 	.word	0x1fff1ff1

00009cdc <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    9cdc:	b530      	push	{r4, r5, lr}
    9cde:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    9ce0:	233a      	movs	r3, #58	; 0x3a
{
    9ce2:	4604      	mov	r4, r0
    9ce4:	460d      	mov	r5, r1
	command[0] = 58; /* read device serial number */
    9ce6:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9ce8:	a905      	add	r1, sp, #20
    9cea:	4668      	mov	r0, sp
    9cec:	4b13      	ldr	r3, [pc, #76]	; (9d3c <get_device_serial+0x60>)
    9cee:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    9cf0:	9b05      	ldr	r3, [sp, #20]
    9cf2:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9cf4:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9cf6:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    9cf8:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9cfa:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9cfc:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    9cfe:	0e1b      	lsrs	r3, r3, #24
    9d00:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    9d02:	9b07      	ldr	r3, [sp, #28]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9d04:	70e2      	strb	r2, [r4, #3]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9d06:	0a1a      	lsrs	r2, r3, #8
	buffer[5] = result[2] & 0xFF;
    9d08:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9d0a:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9d0c:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    9d0e:	0e1b      	lsrs	r3, r3, #24
    9d10:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    9d12:	9b08      	ldr	r3, [sp, #32]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9d14:	71e2      	strb	r2, [r4, #7]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9d16:	0a1a      	lsrs	r2, r3, #8
	buffer[9] = result[3] & 0xFF;
    9d18:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9d1a:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    9d1c:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    9d1e:	0e1b      	lsrs	r3, r3, #24
    9d20:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    9d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[11] = (result[3] >> 16) & 0xFF;
    9d24:	72e2      	strb	r2, [r4, #11]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9d26:	0a1a      	lsrs	r2, r3, #8
	buffer[13] = result[4] & 0xFF;
    9d28:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9d2a:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    9d2c:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    9d2e:	0e1b      	lsrs	r3, r3, #24
    9d30:	7423      	strb	r3, [r4, #16]
	*len = 17;
    9d32:	2311      	movs	r3, #17
	buffer[15] = (result[4] >> 16) & 0xFF;
    9d34:	73e2      	strb	r2, [r4, #15]
	*len = 17;
    9d36:	602b      	str	r3, [r5, #0]
}
    9d38:	b00b      	add	sp, #44	; 0x2c
    9d3a:	bd30      	pop	{r4, r5, pc}
    9d3c:	1fff1ff1 	.word	0x1fff1ff1

00009d40 <set_isp>:

void set_isp(void)
{
    9d40:	b500      	push	{lr}
    9d42:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    9d44:	2339      	movs	r3, #57	; 0x39
	iap_entry(command, result);
    9d46:	a905      	add	r1, sp, #20
	command[0] = 57;
    9d48:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9d4a:	4668      	mov	r0, sp
    9d4c:	4b02      	ldr	r3, [pc, #8]	; (9d58 <set_isp+0x18>)
    9d4e:	4798      	blx	r3
}
    9d50:	b00b      	add	sp, #44	; 0x2c
    9d52:	f85d fb04 	ldr.w	pc, [sp], #4
    9d56:	bf00      	nop
    9d58:	1fff1ff1 	.word	0x1fff1ff1

00009d5c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9d5c:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9d5e:	4c08      	ldr	r4, [pc, #32]	; (9d80 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    9d60:	2080      	movs	r0, #128	; 0x80
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9d62:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    9d64:	6861      	ldr	r1, [r4, #4]
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9d66:	2d40      	cmp	r5, #64	; 0x40
    9d68:	bfa8      	it	ge
    9d6a:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    9d6c:	462a      	mov	r2, r5
    9d6e:	f000 f951 	bl	a014 <USBHwEPWrite>
	pbData += iChunk;
    9d72:	6863      	ldr	r3, [r4, #4]
    9d74:	442b      	add	r3, r5
    9d76:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    9d78:	6823      	ldr	r3, [r4, #0]
    9d7a:	1b5d      	subs	r5, r3, r5
    9d7c:	6025      	str	r5, [r4, #0]
    9d7e:	bd38      	pop	{r3, r4, r5, pc}
    9d80:	100012d8 	.word	0x100012d8

00009d84 <_HandleRequest.constprop.1>:
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    9d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9d86:	4810      	ldr	r0, [pc, #64]	; (9dc8 <_HandleRequest.constprop.1+0x44>)
    9d88:	7a04      	ldrb	r4, [r0, #8]
    9d8a:	4605      	mov	r5, r0
    9d8c:	f3c4 1441 	ubfx	r4, r4, #5, #2
	if(iType == REQTYPE_TYPE_VENDOR) {
    9d90:	2c02      	cmp	r4, #2
    9d92:	d10d      	bne.n	9db0 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    9d94:	2300      	movs	r3, #0
    9d96:	a902      	add	r1, sp, #8
    9d98:	f841 3d04 	str.w	r3, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9d9c:	f100 0210 	add.w	r2, r0, #16
    9da0:	1d03      	adds	r3, r0, #4
    9da2:	3008      	adds	r0, #8
    9da4:	f000 fa64 	bl	a270 <USBFilterOsVendorMessage>
    9da8:	b110      	cbz	r0, 9db0 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    9daa:	9801      	ldr	r0, [sp, #4]
}
    9dac:	b003      	add	sp, #12
    9dae:	bd30      	pop	{r4, r5, pc}
	pfnHandler = apfnReqHandlers[iType];
    9db0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    9db4:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    9db6:	b12b      	cbz	r3, 9dc4 <_HandleRequest.constprop.1+0x40>
	return pfnHandler(pSetup, piLen, ppbData);
    9db8:	4a04      	ldr	r2, [pc, #16]	; (9dcc <_HandleRequest.constprop.1+0x48>)
    9dba:	f102 010c 	add.w	r1, r2, #12
    9dbe:	1d10      	adds	r0, r2, #4
    9dc0:	4798      	blx	r3
    9dc2:	e7f3      	b.n	9dac <_HandleRequest.constprop.1+0x28>
		return FALSE;
    9dc4:	4618      	mov	r0, r3
    9dc6:	e7f1      	b.n	9dac <_HandleRequest.constprop.1+0x28>
    9dc8:	100012d8 	.word	0x100012d8
    9dcc:	100012dc 	.word	0x100012dc

00009dd0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9dd0:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    9dd2:	2800      	cmp	r0, #0
    9dd4:	d147      	bne.n	9e66 <USBHandleControlTransfer+0x96>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9dd6:	f011 0104 	ands.w	r1, r1, #4
    9dda:	4c24      	ldr	r4, [pc, #144]	; (9e6c <USBHandleControlTransfer+0x9c>)
    9ddc:	d023      	beq.n	9e26 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9dde:	2208      	movs	r2, #8
    9de0:	18a1      	adds	r1, r4, r2
    9de2:	f000 f941 	bl	a068 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9de6:	7a22      	ldrb	r2, [r4, #8]
    9de8:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    9dec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9df2:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    9df4:	89e3      	ldrh	r3, [r4, #14]
    9df6:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    9df8:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    9dfa:	b10b      	cbz	r3, 9e00 <USBHandleControlTransfer+0x30>
    9dfc:	09d3      	lsrs	r3, r2, #7
    9dfe:	d034      	beq.n	9e6a <USBHandleControlTransfer+0x9a>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9e00:	f7ff ffc0 	bl	9d84 <_HandleRequest.constprop.1>
    9e04:	b928      	cbnz	r0, 9e12 <USBHandleControlTransfer+0x42>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    9e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBHwEPStall(0x80, TRUE);
    9e0a:	2101      	movs	r1, #1
    9e0c:	2080      	movs	r0, #128	; 0x80
    9e0e:	f000 b8f5 	b.w	9ffc <USBHwEPStall>
				iResidue = MIN(iLen, Setup.wLength);
    9e12:	89e2      	ldrh	r2, [r4, #14]
    9e14:	6923      	ldr	r3, [r4, #16]
    9e16:	429a      	cmp	r2, r3
    9e18:	bfd4      	ite	le
    9e1a:	6022      	strle	r2, [r4, #0]
    9e1c:	6023      	strgt	r3, [r4, #0]
}
    9e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
    9e22:	f7ff bf9b 	b.w	9d5c <DataIn>
			if (iResidue > 0) {
    9e26:	6822      	ldr	r2, [r4, #0]
    9e28:	2a00      	cmp	r2, #0
    9e2a:	dd17      	ble.n	9e5c <USBHandleControlTransfer+0x8c>
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    9e2c:	6861      	ldr	r1, [r4, #4]
    9e2e:	f000 f91b 	bl	a068 <USBHwEPRead>
				if (iChunk < 0) {
    9e32:	2800      	cmp	r0, #0
    9e34:	dbe7      	blt.n	9e06 <USBHandleControlTransfer+0x36>
				pbData += iChunk;
    9e36:	6863      	ldr	r3, [r4, #4]
    9e38:	4403      	add	r3, r0
    9e3a:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    9e3c:	6823      	ldr	r3, [r4, #0]
    9e3e:	1a18      	subs	r0, r3, r0
    9e40:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    9e42:	b990      	cbnz	r0, 9e6a <USBHandleControlTransfer+0x9a>
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9e44:	7a23      	ldrb	r3, [r4, #8]
    9e46:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    9e4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e50:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9e52:	f7ff ff97 	bl	9d84 <_HandleRequest.constprop.1>
    9e56:	2800      	cmp	r0, #0
    9e58:	d0d5      	beq.n	9e06 <USBHandleControlTransfer+0x36>
    9e5a:	e7e0      	b.n	9e1e <USBHandleControlTransfer+0x4e>
				iChunk = USBHwEPRead(0x00, NULL, 0);
    9e5c:	460a      	mov	r2, r1
}
    9e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				iChunk = USBHwEPRead(0x00, NULL, 0);
    9e62:	f000 b901 	b.w	a068 <USBHwEPRead>
	else if (bEP == 0x80) {
    9e66:	2880      	cmp	r0, #128	; 0x80
    9e68:	d0d9      	beq.n	9e1e <USBHandleControlTransfer+0x4e>
    9e6a:	bd10      	pop	{r4, pc}
    9e6c:	100012d8 	.word	0x100012d8

00009e70 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    9e70:	4b02      	ldr	r3, [pc, #8]	; (9e7c <USBRegisterRequestHandler+0xc>)
    9e72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9e76:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    9e78:	6242      	str	r2, [r0, #36]	; 0x24
    9e7a:	4770      	bx	lr
    9e7c:	100012d8 	.word	0x100012d8

00009e80 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    9e80:	4770      	bx	lr
    9e82:	0000      	movs	r0, r0

00009e84 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    9e84:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    9e86:	4c0e      	ldr	r4, [pc, #56]	; (9ec0 <USBInit+0x3c>)
	USBHwInit();
    9e88:	f000 f99a 	bl	a1c0 <USBHwInit>
	USBHwRegisterDevIntHandler(HandleUsbReset);
    9e8c:	480d      	ldr	r0, [pc, #52]	; (9ec4 <USBInit+0x40>)
    9e8e:	f000 f87f 	bl	9f90 <USBHwRegisterDevIntHandler>
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    9e92:	4621      	mov	r1, r4
    9e94:	2000      	movs	r0, #0
    9e96:	f000 f861 	bl	9f5c <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    9e9a:	4621      	mov	r1, r4
    9e9c:	2080      	movs	r0, #128	; 0x80
    9e9e:	f000 f85d 	bl	9f5c <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    9ea2:	2140      	movs	r1, #64	; 0x40
    9ea4:	2000      	movs	r0, #0
    9ea6:	f000 f83b 	bl	9f20 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    9eaa:	2140      	movs	r1, #64	; 0x40
    9eac:	2080      	movs	r0, #128	; 0x80
    9eae:	f000 f837 	bl	9f20 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    9eb2:	4a05      	ldr	r2, [pc, #20]	; (9ec8 <USBInit+0x44>)
    9eb4:	4905      	ldr	r1, [pc, #20]	; (9ecc <USBInit+0x48>)
    9eb6:	2000      	movs	r0, #0
    9eb8:	f7ff ffda 	bl	9e70 <USBRegisterRequestHandler>

	return TRUE;
}
    9ebc:	2001      	movs	r0, #1
    9ebe:	bd10      	pop	{r4, pc}
    9ec0:	00009dd1 	.word	0x00009dd1
    9ec4:	00009e81 	.word	0x00009e81
    9ec8:	1000130c 	.word	0x1000130c
    9ecc:	0000a365 	.word	0x0000a365

00009ed0 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    9ed0:	4a03      	ldr	r2, [pc, #12]	; (9ee0 <Wait4DevInt+0x10>)
    9ed2:	6813      	ldr	r3, [r2, #0]
    9ed4:	ea30 0303 	bics.w	r3, r0, r3
    9ed8:	d1fb      	bne.n	9ed2 <Wait4DevInt+0x2>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    9eda:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <Wait4DevInt+0x14>)
    9edc:	6018      	str	r0, [r3, #0]
    9ede:	4770      	bx	lr
    9ee0:	5000c200 	.word	0x5000c200
    9ee4:	5000c208 	.word	0x5000c208

00009ee8 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    9ee8:	2230      	movs	r2, #48	; 0x30
    9eea:	4b04      	ldr	r3, [pc, #16]	; (9efc <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9eec:	0400      	lsls	r0, r0, #16
    9eee:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    USBDevIntClr = CDFULL | CCEMTY;
    9ef2:	601a      	str	r2, [r3, #0]
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9ef4:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    9ef6:	2010      	movs	r0, #16
    9ef8:	f7ff bfea 	b.w	9ed0 <Wait4DevInt>
    9efc:	5000c208 	.word	0x5000c208

00009f00 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    9f00:	b508      	push	{r3, lr}
    // write command code
    USBHwCmd(bCmd);
    9f02:	f7ff fff1 	bl	9ee8 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    9f06:	4b05      	ldr	r3, [pc, #20]	; (9f1c <USBHwCmdWrite+0x1c>)
    9f08:	0409      	lsls	r1, r1, #16
    9f0a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    9f0e:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CCEMTY);
    9f10:	2010      	movs	r0, #16
}
    9f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wait4DevInt(CCEMTY);
    9f16:	f7ff bfdb 	b.w	9ed0 <Wait4DevInt>
    9f1a:	bf00      	nop
    9f1c:	5000c210 	.word	0x5000c210

00009f20 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    9f20:	b510      	push	{r4, lr}
    USBReEp |= (1 << idx);
    9f22:	2301      	movs	r3, #1
    9f24:	4a0b      	ldr	r2, [pc, #44]	; (9f54 <USBHwEPConfig+0x34>)
    int idx;
    
    idx = EP2IDX(bEP);
    9f26:	0044      	lsls	r4, r0, #1
    9f28:	f004 041e 	and.w	r4, r4, #30
    9f2c:	ea44 14d0 	orr.w	r4, r4, r0, lsr #7
    USBReEp |= (1 << idx);
    9f30:	6810      	ldr	r0, [r2, #0]
    9f32:	40a3      	lsls	r3, r4
    9f34:	4303      	orrs	r3, r0
    9f36:	6013      	str	r3, [r2, #0]
    USBEpIn = idx;
    9f38:	4b07      	ldr	r3, [pc, #28]	; (9f58 <USBHwEPConfig+0x38>)
    Wait4DevInt(EP_RLZED);
    9f3a:	f44f 7080 	mov.w	r0, #256	; 0x100
    USBEpIn = idx;
    9f3e:	601c      	str	r4, [r3, #0]
    USBMaxPSize = wMaxPSize;
    9f40:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    9f42:	f7ff ffc5 	bl	9ed0 <Wait4DevInt>
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9f46:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    9f4a:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    9f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9f50:	f7ff bfd6 	b.w	9f00 <USBHwCmdWrite>
    9f54:	5000c244 	.word	0x5000c244
    9f58:	5000c248 	.word	0x5000c248

00009f5c <USBHwRegisterEPIntHandler>:
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    9f5c:	0042      	lsls	r2, r0, #1
    9f5e:	f002 021e 	and.w	r2, r2, #30

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    9f62:	ea42 13d0 	orr.w	r3, r2, r0, lsr #7
    9f66:	4808      	ldr	r0, [pc, #32]	; (9f88 <USBHwRegisterEPIntHandler+0x2c>)
    9f68:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    9f6c:	2001      	movs	r0, #1
    9f6e:	4a07      	ldr	r2, [pc, #28]	; (9f8c <USBHwRegisterEPIntHandler+0x30>)
    9f70:	4098      	lsls	r0, r3
    9f72:	6811      	ldr	r1, [r2, #0]
    9f74:	4308      	orrs	r0, r1
    9f76:	6010      	str	r0, [r2, #0]
    USBDevIntEn |= EP_SLOW;
    9f78:	f852 3c30 	ldr.w	r3, [r2, #-48]
    9f7c:	f043 0304 	orr.w	r3, r3, #4
    9f80:	f842 3c30 	str.w	r3, [r2, #-48]
    9f84:	4770      	bx	lr
    9f86:	bf00      	nop
    9f88:	10001314 	.word	0x10001314
    9f8c:	5000c234 	.word	0x5000c234

00009f90 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    9f90:	4b03      	ldr	r3, [pc, #12]	; (9fa0 <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    9f92:	4a04      	ldr	r2, [pc, #16]	; (9fa4 <USBHwRegisterDevIntHandler+0x14>)
    _pfnDevIntHandler = pfnHandler;
    9f94:	6418      	str	r0, [r3, #64]	; 0x40
    USBDevIntEn |= DEV_STAT;
    9f96:	6813      	ldr	r3, [r2, #0]
    9f98:	f043 0308 	orr.w	r3, r3, #8
    9f9c:	6013      	str	r3, [r2, #0]
    9f9e:	4770      	bx	lr
    9fa0:	10001314 	.word	0x10001314
    9fa4:	5000c204 	.word	0x5000c204

00009fa8 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    9fa8:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    9fac:	20d0      	movs	r0, #208	; 0xd0
    9fae:	f7ff bfa7 	b.w	9f00 <USBHwCmdWrite>

00009fb2 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    9fb2:	1c01      	adds	r1, r0, #0
    9fb4:	bf18      	it	ne
    9fb6:	2101      	movne	r1, #1
    9fb8:	20fe      	movs	r0, #254	; 0xfe
    9fba:	f7ff bfa1 	b.w	9f00 <USBHwCmdWrite>

00009fbe <USBHwNakIntEnable>:
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    9fbe:	4601      	mov	r1, r0
    9fc0:	20f3      	movs	r0, #243	; 0xf3
    9fc2:	f7ff bf9d 	b.w	9f00 <USBHwCmdWrite>
    9fc6:	0000      	movs	r0, r0

00009fc8 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    9fc8:	b508      	push	{r3, lr}
    int idx = EP2IDX(bEP);
    9fca:	0041      	lsls	r1, r0, #1
    9fcc:	f001 011e 	and.w	r1, r1, #30
    9fd0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
    USBHwCmd(bCmd);
    9fd4:	4608      	mov	r0, r1
    9fd6:	f7ff ff87 	bl	9ee8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9fda:	4b06      	ldr	r3, [pc, #24]	; (9ff4 <USBHwEPGetStatus+0x2c>)
    9fdc:	0409      	lsls	r1, r1, #16
    9fde:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    9fe2:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CDFULL);
    9fe4:	2020      	movs	r0, #32
    9fe6:	f7ff ff73 	bl	9ed0 <Wait4DevInt>
    return USBCmdData;
    9fea:	4b03      	ldr	r3, [pc, #12]	; (9ff8 <USBHwEPGetStatus+0x30>)
    9fec:	6818      	ldr	r0, [r3, #0]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    9fee:	b2c0      	uxtb	r0, r0
    9ff0:	bd08      	pop	{r3, pc}
    9ff2:	bf00      	nop
    9ff4:	5000c210 	.word	0x5000c210
    9ff8:	5000c214 	.word	0x5000c214

00009ffc <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    9ffc:	0043      	lsls	r3, r0, #1
    9ffe:	f003 031e 	and.w	r3, r3, #30
    a002:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a006:	3100      	adds	r1, #0
    a008:	bf18      	it	ne
    a00a:	2101      	movne	r1, #1
    a00c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a010:	f7ff bf76 	b.w	9f00 <USBHwCmdWrite>

0000a014 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a014:	b538      	push	{r3, r4, r5, lr}
    a016:	4603      	mov	r3, r0
    U32 idx;
    
    idx = EP2IDX(bEP);
    a018:	0040      	lsls	r0, r0, #1
    a01a:	f000 001e 	and.w	r0, r0, #30
    a01e:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a022:	009b      	lsls	r3, r3, #2
    a024:	4c0d      	ldr	r4, [pc, #52]	; (a05c <USBHwEPWrite+0x48>)
    a026:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    a02a:	f043 0302 	orr.w	r3, r3, #2
    a02e:	6023      	str	r3, [r4, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a030:	4b0b      	ldr	r3, [pc, #44]	; (a060 <USBHwEPWrite+0x4c>)
{
    a032:	4615      	mov	r5, r2
    USBTxPLen = iLen;
    a034:	601a      	str	r2, [r3, #0]
    a036:	4623      	mov	r3, r4
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a038:	4a0a      	ldr	r2, [pc, #40]	; (a064 <USBHwEPWrite+0x50>)
    while (USBCtrl & WR_EN) {
    a03a:	681c      	ldr	r4, [r3, #0]
    a03c:	f014 0402 	ands.w	r4, r4, #2
    a040:	d107      	bne.n	a052 <USBHwEPWrite+0x3e>
        pbBuf += 4;
    }

    USBCtrl = 0;
    a042:	601c      	str	r4, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a044:	f7ff ff50 	bl	9ee8 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a048:	20fa      	movs	r0, #250	; 0xfa
    a04a:	f7ff ff4d 	bl	9ee8 <USBHwCmd>
    
    return iLen;
}
    a04e:	4628      	mov	r0, r5
    a050:	bd38      	pop	{r3, r4, r5, pc}
    a052:	f851 4b04 	ldr.w	r4, [r1], #4
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a056:	6014      	str	r4, [r2, #0]
    a058:	e7ef      	b.n	a03a <USBHwEPWrite+0x26>
    a05a:	bf00      	nop
    a05c:	5000c228 	.word	0x5000c228
    a060:	5000c224 	.word	0x5000c224
    a064:	5000c21c 	.word	0x5000c21c

0000a068 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a06a:	4603      	mov	r3, r0
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a06c:	0040      	lsls	r0, r0, #1
    a06e:	f000 001e 	and.w	r0, r0, #30
    a072:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a076:	009b      	lsls	r3, r3, #2
    a078:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    a07c:	4e13      	ldr	r6, [pc, #76]	; (a0cc <USBHwEPRead+0x64>)
    a07e:	f043 0301 	orr.w	r3, r3, #1
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a082:	4c13      	ldr	r4, [pc, #76]	; (a0d0 <USBHwEPRead+0x68>)
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a084:	6033      	str	r3, [r6, #0]
        dwLen = USBRxPLen;
    a086:	6823      	ldr	r3, [r4, #0]
    } while ((dwLen & PKT_RDY) == 0);
    a088:	051d      	lsls	r5, r3, #20
    a08a:	d5fc      	bpl.n	a086 <USBHwEPRead+0x1e>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a08c:	055c      	lsls	r4, r3, #21
    a08e:	d51a      	bpl.n	a0c6 <USBHwEPRead+0x5e>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    a090:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    a092:	462c      	mov	r4, r5
        if ((i % 4) == 0) {
            dwData = USBRxData;
    a094:	4f0f      	ldr	r7, [pc, #60]	; (a0d4 <USBHwEPRead+0x6c>)
    dwLen &= PKT_LNGTH_MASK;
    a096:	f3c3 0309 	ubfx	r3, r3, #0, #10
    for (i = 0; i < dwLen; i++) {
    a09a:	429c      	cmp	r4, r3
    a09c:	d108      	bne.n	a0b0 <USBHwEPRead+0x48>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a09e:	2300      	movs	r3, #0
    a0a0:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a0a2:	f7ff ff21 	bl	9ee8 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a0a6:	20f2      	movs	r0, #242	; 0xf2
    a0a8:	f7ff ff1e 	bl	9ee8 <USBHwCmd>
    
    return dwLen;
    a0ac:	4620      	mov	r0, r4
    a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((i % 4) == 0) {
    a0b0:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    a0b4:	bf08      	it	eq
    a0b6:	683d      	ldreq	r5, [r7, #0]
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a0b8:	b111      	cbz	r1, a0c0 <USBHwEPRead+0x58>
    a0ba:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    a0bc:	bf38      	it	cc
    a0be:	550d      	strbcc	r5, [r1, r4]
        dwData >>= 8;
    a0c0:	0a2d      	lsrs	r5, r5, #8
    for (i = 0; i < dwLen; i++) {
    a0c2:	3401      	adds	r4, #1
    a0c4:	e7e9      	b.n	a09a <USBHwEPRead+0x32>
        return -1;
    a0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0cc:	5000c228 	.word	0x5000c228
    a0d0:	5000c220 	.word	0x5000c220
    a0d4:	5000c218 	.word	0x5000c218

0000a0d8 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a0d8:	1c01      	adds	r1, r0, #0
    a0da:	bf18      	it	ne
    a0dc:	2101      	movne	r1, #1
    a0de:	20d8      	movs	r0, #216	; 0xd8
    a0e0:	f7ff bf0e 	b.w	9f00 <USBHwCmdWrite>

0000a0e4 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a0e6:	4b2d      	ldr	r3, [pc, #180]	; (a19c <USBHwISR+0xb8>)
    a0e8:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a0ea:	07e1      	lsls	r1, r4, #31
    a0ec:	d511      	bpl.n	a112 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    a0ee:	2201      	movs	r2, #1
    a0f0:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a0f2:	4b2b      	ldr	r3, [pc, #172]	; (a1a0 <USBHwISR+0xbc>)
    a0f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    a0f6:	b161      	cbz	r1, a112 <USBHwISR+0x2e>
    USBHwCmd(bCmd);
    a0f8:	20f5      	movs	r0, #245	; 0xf5
    a0fa:	f7ff fef5 	bl	9ee8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a0fe:	4b29      	ldr	r3, [pc, #164]	; (a1a4 <USBHwISR+0xc0>)
    a100:	4a29      	ldr	r2, [pc, #164]	; (a1a8 <USBHwISR+0xc4>)
    Wait4DevInt(CDFULL);
    a102:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a104:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    a106:	f7ff fee3 	bl	9ed0 <Wait4DevInt>
    return USBCmdData;
    a10a:	4b28      	ldr	r3, [pc, #160]	; (a1ac <USBHwISR+0xc8>)
    a10c:	6818      	ldr	r0, [r3, #0]
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    a10e:	b2c0      	uxtb	r0, r0
    a110:	4788      	blx	r1
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a112:	0722      	lsls	r2, r4, #28
    a114:	d51b      	bpl.n	a14e <USBHwISR+0x6a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a116:	2208      	movs	r2, #8
    a118:	4b25      	ldr	r3, [pc, #148]	; (a1b0 <USBHwISR+0xcc>)
    USBHwCmd(bCmd);
    a11a:	20fe      	movs	r0, #254	; 0xfe
        USBDevIntClr = DEV_STAT;
    a11c:	601a      	str	r2, [r3, #0]
    USBHwCmd(bCmd);
    a11e:	f7ff fee3 	bl	9ee8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a122:	4b20      	ldr	r3, [pc, #128]	; (a1a4 <USBHwISR+0xc0>)
    a124:	4a23      	ldr	r2, [pc, #140]	; (a1b4 <USBHwISR+0xd0>)
    Wait4DevInt(CDFULL);
    a126:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a128:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    a12a:	f7ff fed1 	bl	9ed0 <Wait4DevInt>
    return USBCmdData;
    a12e:	4b1f      	ldr	r3, [pc, #124]	; (a1ac <USBHwISR+0xc8>)
    a130:	681b      	ldr	r3, [r3, #0]
    a132:	b2d8      	uxtb	r0, r3
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a134:	f010 0f1a 	tst.w	r0, #26
    a138:	d009      	beq.n	a14e <USBHwISR+0x6a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a13a:	4a19      	ldr	r2, [pc, #100]	; (a1a0 <USBHwISR+0xbc>)
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
    a13c:	b25b      	sxtb	r3, r3
            if (_pfnDevIntHandler != NULL) {
    a13e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    a140:	b12a      	cbz	r2, a14e <USBHwISR+0x6a>
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
    a142:	f003 0314 	and.w	r3, r3, #20
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a146:	f000 0001 	and.w	r0, r0, #1
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a14a:	4318      	orrs	r0, r3
    a14c:	4790      	blx	r2
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a14e:	0763      	lsls	r3, r4, #29
    a150:	d522      	bpl.n	a198 <USBHwISR+0xb4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a152:	2204      	movs	r2, #4
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a154:	2400      	movs	r4, #0
        USBDevIntClr = EP_SLOW;
    a156:	4b16      	ldr	r3, [pc, #88]	; (a1b0 <USBHwISR+0xcc>)
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    a158:	4d17      	ldr	r5, [pc, #92]	; (a1b8 <USBHwISR+0xd4>)
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a15a:	4e18      	ldr	r6, [pc, #96]	; (a1bc <USBHwISR+0xd8>)
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    a15c:	4f13      	ldr	r7, [pc, #76]	; (a1ac <USBHwISR+0xc8>)
        USBDevIntClr = EP_SLOW;
    a15e:	601a      	str	r2, [r3, #0]
            dwIntBit = (1 << i);
    a160:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    a162:	682a      	ldr	r2, [r5, #0]
            dwIntBit = (1 << i);
    a164:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    a166:	4213      	tst	r3, r2
    a168:	d013      	beq.n	a192 <USBHwISR+0xae>
                USBEpIntClr = dwIntBit;
    a16a:	6033      	str	r3, [r6, #0]
                Wait4DevInt(CDFULL);
    a16c:	2020      	movs	r0, #32
    a16e:	f7ff feaf 	bl	9ed0 <Wait4DevInt>
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a172:	4a0b      	ldr	r2, [pc, #44]	; (a1a0 <USBHwISR+0xbc>)
    a174:	1060      	asrs	r0, r4, #1
                bEPStat = USBCmdData;
    a176:	683b      	ldr	r3, [r7, #0]
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a178:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
    a17c:	b259      	sxtb	r1, r3
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a17e:	b142      	cbz	r2, a192 <USBHwISR+0xae>
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
    a180:	f001 011e 	and.w	r1, r1, #30
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a184:	f003 0301 	and.w	r3, r3, #1
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a188:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    a18c:	4319      	orrs	r1, r3
    a18e:	b2c0      	uxtb	r0, r0
    a190:	4790      	blx	r2
        for (i = 0; i < 32; i++) {
    a192:	3401      	adds	r4, #1
    a194:	2c20      	cmp	r4, #32
    a196:	d1e3      	bne.n	a160 <USBHwISR+0x7c>
    a198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a19a:	bf00      	nop
    a19c:	5000c200 	.word	0x5000c200
    a1a0:	10001314 	.word	0x10001314
    a1a4:	5000c210 	.word	0x5000c210
    a1a8:	00f50200 	.word	0x00f50200
    a1ac:	5000c214 	.word	0x5000c214
    a1b0:	5000c208 	.word	0x5000c208
    a1b4:	00fe0200 	.word	0x00fe0200
    a1b8:	5000c230 	.word	0x5000c230
    a1bc:	5000c238 	.word	0x5000c238

0000a1c0 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a1c0:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a1c2:	4a25      	ldr	r2, [pc, #148]	; (a258 <USBHwInit+0x98>)
    a1c4:	6813      	ldr	r3, [r2, #0]
    a1c6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a1ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a1ce:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a1d0:	f852 3c04 	ldr.w	r3, [r2, #-4]
    a1d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a1d8:	f043 0310 	orr.w	r3, r3, #16
    a1dc:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a1e0:	f852 3c04 	ldr.w	r3, [r2, #-4]
    a1e4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a1e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a1ec:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a1f0:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    a1f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a1f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a1fc:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a200:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    a204:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a20c:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a210:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    a214:	32b4      	adds	r2, #180	; 0xb4
    a216:	6813      	ldr	r3, [r2, #0]
    a218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a21c:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a21e:	4a0f      	ldr	r2, [pc, #60]	; (a25c <USBHwInit+0x9c>)
    a220:	6813      	ldr	r3, [r2, #0]
    a222:	f043 0312 	orr.w	r3, r3, #18
    a226:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a228:	4b0d      	ldr	r3, [pc, #52]	; (a260 <USBHwInit+0xa0>)
    a22a:	461a      	mov	r2, r3
    a22c:	6819      	ldr	r1, [r3, #0]
    a22e:	0789      	lsls	r1, r1, #30
    a230:	d5fc      	bpl.n	a22c <USBHwInit+0x6c>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a232:	6813      	ldr	r3, [r2, #0]
    a234:	06db      	lsls	r3, r3, #27
    a236:	d5fc      	bpl.n	a232 <USBHwInit+0x72>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a238:	2000      	movs	r0, #0
    a23a:	4b0a      	ldr	r3, [pc, #40]	; (a264 <USBHwInit+0xa4>)
    USBDevIntClr = 0xFFFFFFFF;
    a23c:	4a0a      	ldr	r2, [pc, #40]	; (a268 <USBHwInit+0xa8>)
    USBDevIntEn = 0;
    a23e:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a244:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    a246:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    a248:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    a24a:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    a24c:	4b07      	ldr	r3, [pc, #28]	; (a26c <USBHwInit+0xac>)
    a24e:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a250:	f7ff feb5 	bl	9fbe <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    a254:	2001      	movs	r0, #1
    a256:	bd08      	pop	{r3, pc}
    a258:	4002c010 	.word	0x4002c010
    a25c:	5000cff4 	.word	0x5000cff4
    a260:	5000cff8 	.word	0x5000cff8
    a264:	5000c204 	.word	0x5000c204
    a268:	5000c208 	.word	0x5000c208
    a26c:	5000c240 	.word	0x5000c240

0000a270 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a270:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    a272:	4c16      	ldr	r4, [pc, #88]	; (a2cc <USBFilterOsVendorMessage+0x5c>)
    a274:	7825      	ldrb	r5, [r4, #0]
    a276:	2400      	movs	r4, #0
    a278:	b325      	cbz	r5, a2c4 <USBFilterOsVendorMessage+0x54>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a27a:	7846      	ldrb	r6, [r0, #1]
    a27c:	42ae      	cmp	r6, r5
    a27e:	d123      	bne.n	a2c8 <USBFilterOsVendorMessage+0x58>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a280:	600c      	str	r4, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
    a282:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a284:	8844      	ldrh	r4, [r0, #2]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    a286:	8880      	ldrh	r0, [r0, #4]
    a288:	2804      	cmp	r0, #4
    a28a:	d003      	beq.n	a294 <USBFilterOsVendorMessage+0x24>
    a28c:	2805      	cmp	r0, #5
    a28e:	d015      	beq.n	a2bc <USBFilterOsVendorMessage+0x4c>
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    a290:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    a292:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a294:	480e      	ldr	r0, [pc, #56]	; (a2d0 <USBFilterOsVendorMessage+0x60>)
    a296:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a298:	2028      	movs	r0, #40	; 0x28
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a29a:	6010      	str	r0, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a29c:	0a20      	lsrs	r0, r4, #8
		if (*piLen < iPageOffset) {
    a29e:	6814      	ldr	r4, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a2a0:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    a2a2:	42a0      	cmp	r0, r4
    a2a4:	dcf4      	bgt.n	a290 <USBFilterOsVendorMessage+0x20>
		*ppbData += iPageOffset;
    a2a6:	681d      	ldr	r5, [r3, #0]
    a2a8:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    a2aa:	1a20      	subs	r0, r4, r0
		*ppbData += iPageOffset;
    a2ac:	601d      	str	r5, [r3, #0]
    a2ae:	42b0      	cmp	r0, r6
    a2b0:	bfd4      	ite	le
    a2b2:	6010      	strle	r0, [r2, #0]
    a2b4:	6016      	strgt	r6, [r2, #0]
		*pfSuccess = TRUE;
    a2b6:	2001      	movs	r0, #1
    a2b8:	6008      	str	r0, [r1, #0]
		return TRUE;
    a2ba:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a2bc:	4805      	ldr	r0, [pc, #20]	; (a2d4 <USBFilterOsVendorMessage+0x64>)
    a2be:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a2c0:	2092      	movs	r0, #146	; 0x92
    a2c2:	e7ea      	b.n	a29a <USBFilterOsVendorMessage+0x2a>
		return FALSE;
    a2c4:	4628      	mov	r0, r5
    a2c6:	bd70      	pop	{r4, r5, r6, pc}
    a2c8:	4620      	mov	r0, r4
    a2ca:	bd70      	pop	{r4, r5, r6, pc}
    a2cc:	1000135c 	.word	0x1000135c
    a2d0:	0000bcb4 	.word	0x0000bcb4
    a2d4:	10000985 	.word	0x10000985

0000a2d8 <USBRegisterWinusbInterface>:
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
	bMsVendorIndex = bVendorRequestIndex;
    a2d8:	4b08      	ldr	r3, [pc, #32]	; (a2fc <USBRegisterWinusbInterface+0x24>)
    a2da:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    a2dc:	b161      	cbz	r1, a2f8 <USBRegisterWinusbInterface+0x20>
    a2de:	4b08      	ldr	r3, [pc, #32]	; (a300 <USBRegisterWinusbInterface+0x28>)
    a2e0:	1e4a      	subs	r2, r1, #1
    a2e2:	3125      	adds	r1, #37	; 0x25
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    a2e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    a2e8:	b118      	cbz	r0, a2f2 <USBRegisterWinusbInterface+0x1a>
	for(int i = 0; i < ciMaxLength; i++) {
    a2ea:	428a      	cmp	r2, r1
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a2ec:	f803 0b02 	strb.w	r0, [r3], #2
	for(int i = 0; i < ciMaxLength; i++) {
    a2f0:	d1f8      	bne.n	a2e4 <USBRegisterWinusbInterface+0xc>
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a2f2:	2200      	movs	r2, #0
    a2f4:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a2f6:	709a      	strb	r2, [r3, #2]
    a2f8:	4770      	bx	lr
    a2fa:	bf00      	nop
    a2fc:	1000135c 	.word	0x1000135c
    a300:	100009c7 	.word	0x100009c7

0000a304 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    a304:	4b01      	ldr	r3, [pc, #4]	; (a30c <USBRegisterDescriptors+0x8>)
    a306:	6058      	str	r0, [r3, #4]
    a308:	4770      	bx	lr
    a30a:	bf00      	nop
    a30c:	1000135c 	.word	0x1000135c

0000a310 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    a310:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    a312:	0a01      	lsrs	r1, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    a314:	2903      	cmp	r1, #3
	bIndex = GET_DESC_INDEX(wTypeIndex);
    a316:	b2c4      	uxtb	r4, r0
	bType = GET_DESC_TYPE(wTypeIndex);
    a318:	b2ce      	uxtb	r6, r1
    a31a:	4810      	ldr	r0, [pc, #64]	; (a35c <USBGetDescriptor+0x4c>)
    if (bType == DESC_STRING &&
    a31c:	d10a      	bne.n	a334 <USBGetDescriptor+0x24>
    a31e:	2cee      	cmp	r4, #238	; 0xee
    a320:	d108      	bne.n	a334 <USBGetDescriptor+0x24>
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a322:	490f      	ldr	r1, [pc, #60]	; (a360 <USBGetDescriptor+0x50>)
    a324:	7800      	ldrb	r0, [r0, #0]
	*ppbData = abOsStringDescriptor;
    a326:	3192      	adds	r1, #146	; 0x92
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a328:	7408      	strb	r0, [r1, #16]
	*ppbData = abOsStringDescriptor;
    a32a:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a32c:	2312      	movs	r3, #18
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    a32e:	6013      	str	r3, [r2, #0]
				}
				return TRUE;
    a330:	2001      	movs	r0, #1
    a332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	iCurIndex = 0;
    a334:	2500      	movs	r5, #0
	pab = (U8 *)pabDescrip;
    a336:	6841      	ldr	r1, [r0, #4]
	while (pab[DESC_bLength] != 0) {
    a338:	7808      	ldrb	r0, [r1, #0]
    a33a:	b900      	cbnz	r0, a33e <USBGetDescriptor+0x2e>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    a33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pab[DESC_bDescriptorType] == bType) {
    a33e:	784f      	ldrb	r7, [r1, #1]
    a340:	42b7      	cmp	r7, r6
    a342:	d108      	bne.n	a356 <USBGetDescriptor+0x46>
			if (iCurIndex == bIndex) {
    a344:	42a5      	cmp	r5, r4
    a346:	d105      	bne.n	a354 <USBGetDescriptor+0x44>
				*ppbData = pab;
    a348:	6019      	str	r1, [r3, #0]
				if (bType == DESC_CONFIGURATION) {
    a34a:	2e02      	cmp	r6, #2
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    a34c:	bf0c      	ite	eq
    a34e:	884b      	ldrheq	r3, [r1, #2]
					*piLen = pab[DESC_bLength];
    a350:	780b      	ldrbne	r3, [r1, #0]
    a352:	e7ec      	b.n	a32e <USBGetDescriptor+0x1e>
			iCurIndex++;
    a354:	3501      	adds	r5, #1
		pab += pab[DESC_bLength];
    a356:	4401      	add	r1, r0
    a358:	e7ee      	b.n	a338 <USBGetDescriptor+0x28>
    a35a:	bf00      	nop
    a35c:	1000135c 	.word	0x1000135c
    a360:	10000985 	.word	0x10000985

0000a364 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a368:	4c55      	ldr	r4, [pc, #340]	; (a4c0 <USBHandleStandardRequest+0x15c>)
{
    a36a:	4605      	mov	r5, r0
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a36c:	68a3      	ldr	r3, [r4, #8]
{
    a36e:	460f      	mov	r7, r1
    a370:	4691      	mov	r9, r2
    a372:	46a0      	mov	r8, r4
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a374:	b953      	cbnz	r3, a38c <USBHandleStandardRequest+0x28>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    a376:	7828      	ldrb	r0, [r5, #0]
    a378:	f000 061f 	and.w	r6, r0, #31
    a37c:	2e01      	cmp	r6, #1
    a37e:	d06b      	beq.n	a458 <USBHandleStandardRequest+0xf4>
    a380:	d30a      	bcc.n	a398 <USBHandleStandardRequest+0x34>
    a382:	2e02      	cmp	r6, #2
    a384:	d07c      	beq.n	a480 <USBHandleStandardRequest+0x11c>
			return FALSE;
    a386:	2000      	movs	r0, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    a388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a38c:	4798      	blx	r3
    a38e:	2800      	cmp	r0, #0
    a390:	d0f1      	beq.n	a376 <USBHandleStandardRequest+0x12>
		return TRUE;
    a392:	2001      	movs	r0, #1
    a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pSetup->bRequest) {
    a398:	786a      	ldrb	r2, [r5, #1]
	U8	*pbData = *ppbData;
    a39a:	f8d9 3000 	ldr.w	r3, [r9]
	switch (pSetup->bRequest) {
    a39e:	2a09      	cmp	r2, #9
    a3a0:	d8f1      	bhi.n	a386 <USBHandleStandardRequest+0x22>
    a3a2:	a101      	add	r1, pc, #4	; (adr r1, a3a8 <USBHandleStandardRequest+0x44>)
    a3a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    a3a8:	0000a3d1 	.word	0x0000a3d1
    a3ac:	0000a387 	.word	0x0000a387
    a3b0:	0000a387 	.word	0x0000a387
    a3b4:	0000a387 	.word	0x0000a387
    a3b8:	0000a387 	.word	0x0000a387
    a3bc:	0000a3dd 	.word	0x0000a3dd
    a3c0:	0000a3e5 	.word	0x0000a3e5
    a3c4:	0000a387 	.word	0x0000a387
    a3c8:	0000a3f5 	.word	0x0000a3f5
    a3cc:	0000a403 	.word	0x0000a403
		pbData[0] = 0;
    a3d0:	2200      	movs	r2, #0
    a3d2:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    a3d4:	705a      	strb	r2, [r3, #1]
		*piLen = 2;
    a3d6:	2302      	movs	r3, #2
		*piLen = 0;
    a3d8:	603b      	str	r3, [r7, #0]
    a3da:	e7da      	b.n	a392 <USBHandleStandardRequest+0x2e>
		USBHwSetAddress(pSetup->wValue);
    a3dc:	78a8      	ldrb	r0, [r5, #2]
    a3de:	f7ff fde3 	bl	9fa8 <USBHwSetAddress>
    a3e2:	e7d6      	b.n	a392 <USBHandleStandardRequest+0x2e>
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    a3e4:	464b      	mov	r3, r9
    a3e6:	463a      	mov	r2, r7
    a3e8:	88a9      	ldrh	r1, [r5, #4]
    a3ea:	8868      	ldrh	r0, [r5, #2]
}
    a3ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    a3f0:	f7ff bf8e 	b.w	a310 <USBGetDescriptor>
		*piLen = 1;
    a3f4:	2001      	movs	r0, #1
		pbData[0] = bConfiguration;
    a3f6:	f898 200c 	ldrb.w	r2, [r8, #12]
    a3fa:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    a3fc:	6038      	str	r0, [r7, #0]
    a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    a402:	78ae      	ldrb	r6, [r5, #2]
	if (bConfigIndex == 0) {
    a404:	b936      	cbnz	r6, a414 <USBHandleStandardRequest+0xb0>
		USBHwConfigDevice(FALSE);
    a406:	4630      	mov	r0, r6
		USBHwConfigDevice(TRUE);
    a408:	f7ff fe66 	bl	a0d8 <USBHwConfigDevice>
		bConfiguration = pSetup->wValue & 0xFF;	
    a40c:	886b      	ldrh	r3, [r5, #2]
    a40e:	f888 300c 	strb.w	r3, [r8, #12]
    a412:	e7be      	b.n	a392 <USBHandleStandardRequest+0x2e>
		bCurAltSetting = 0xFF;
    a414:	27ff      	movs	r7, #255	; 0xff
		bCurConfig = 0xFF;
    a416:	46b9      	mov	r9, r7
		pab = (U8 *)pabDescrip;
    a418:	f8d8 4004 	ldr.w	r4, [r8, #4]
		while (pab[DESC_bLength] != 0) {
    a41c:	7823      	ldrb	r3, [r4, #0]
    a41e:	b90b      	cbnz	r3, a424 <USBHandleStandardRequest+0xc0>
		USBHwConfigDevice(TRUE);
    a420:	2001      	movs	r0, #1
    a422:	e7f1      	b.n	a408 <USBHandleStandardRequest+0xa4>
			switch (pab[DESC_bDescriptorType]) {
    a424:	7863      	ldrb	r3, [r4, #1]
    a426:	2b04      	cmp	r3, #4
    a428:	d008      	beq.n	a43c <USBHandleStandardRequest+0xd8>
    a42a:	2b05      	cmp	r3, #5
    a42c:	d008      	beq.n	a440 <USBHandleStandardRequest+0xdc>
    a42e:	2b02      	cmp	r3, #2
    a430:	d101      	bne.n	a436 <USBHandleStandardRequest+0xd2>
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    a432:	f894 9005 	ldrb.w	r9, [r4, #5]
			pab += pab[DESC_bLength];
    a436:	7823      	ldrb	r3, [r4, #0]
    a438:	441c      	add	r4, r3
    a43a:	e7ef      	b.n	a41c <USBHandleStandardRequest+0xb8>
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    a43c:	78e7      	ldrb	r7, [r4, #3]
    a43e:	e7fa      	b.n	a436 <USBHandleStandardRequest+0xd2>
				if ((bCurConfig == bConfigIndex) &&
    a440:	454e      	cmp	r6, r9
    a442:	d1f8      	bne.n	a436 <USBHandleStandardRequest+0xd2>
    a444:	2f00      	cmp	r7, #0
    a446:	d1f6      	bne.n	a436 <USBHandleStandardRequest+0xd2>
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    a448:	7961      	ldrb	r1, [r4, #5]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    a44a:	7923      	ldrb	r3, [r4, #4]
					USBHwEPConfig(bEP, wMaxPktSize);
    a44c:	78a0      	ldrb	r0, [r4, #2]
    a44e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    a452:	f7ff fd65 	bl	9f20 <USBHwEPConfig>
    a456:	e7ee      	b.n	a436 <USBHandleStandardRequest+0xd2>
	switch (pSetup->bRequest) {
    a458:	786b      	ldrb	r3, [r5, #1]
    a45a:	f8d9 2000 	ldr.w	r2, [r9]
    a45e:	2b0a      	cmp	r3, #10
    a460:	d006      	beq.n	a470 <USBHandleStandardRequest+0x10c>
    a462:	2b0b      	cmp	r3, #11
    a464:	d008      	beq.n	a478 <USBHandleStandardRequest+0x114>
    a466:	2b00      	cmp	r3, #0
    a468:	d18d      	bne.n	a386 <USBHandleStandardRequest+0x22>
		pbData[0] = 0;
    a46a:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    a46c:	7053      	strb	r3, [r2, #1]
    a46e:	e7b2      	b.n	a3d6 <USBHandleStandardRequest+0x72>
		pbData[0] = 0;
    a470:	2300      	movs	r3, #0
    a472:	7013      	strb	r3, [r2, #0]
		*piLen = 2;
    a474:	603e      	str	r6, [r7, #0]
    a476:	e78c      	b.n	a392 <USBHandleStandardRequest+0x2e>
		if (pSetup->wValue != 0) {
    a478:	886b      	ldrh	r3, [r5, #2]
    a47a:	2b00      	cmp	r3, #0
    a47c:	d0ac      	beq.n	a3d8 <USBHandleStandardRequest+0x74>
    a47e:	e782      	b.n	a386 <USBHandleStandardRequest+0x22>
	switch (pSetup->bRequest) {
    a480:	786c      	ldrb	r4, [r5, #1]
    a482:	2c01      	cmp	r4, #1
    a484:	d014      	beq.n	a4b0 <USBHandleStandardRequest+0x14c>
    a486:	d308      	bcc.n	a49a <USBHandleStandardRequest+0x136>
    a488:	2c03      	cmp	r4, #3
    a48a:	f47f af7c 	bne.w	a386 <USBHandleStandardRequest+0x22>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a48e:	886b      	ldrh	r3, [r5, #2]
    a490:	2b00      	cmp	r3, #0
    a492:	f47f af78 	bne.w	a386 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    a496:	2101      	movs	r1, #1
    a498:	e00e      	b.n	a4b8 <USBHandleStandardRequest+0x154>
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    a49a:	7928      	ldrb	r0, [r5, #4]
    a49c:	f8d9 4000 	ldr.w	r4, [r9]
    a4a0:	f7ff fd92 	bl	9fc8 <USBHwEPGetStatus>
		pbData[1] = 0;
    a4a4:	2300      	movs	r3, #0
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    a4a6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a4aa:	7020      	strb	r0, [r4, #0]
		pbData[1] = 0;
    a4ac:	7063      	strb	r3, [r4, #1]
    a4ae:	e7e1      	b.n	a474 <USBHandleStandardRequest+0x110>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a4b0:	8869      	ldrh	r1, [r5, #2]
    a4b2:	2900      	cmp	r1, #0
    a4b4:	f47f af67 	bne.w	a386 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    a4b8:	7928      	ldrb	r0, [r5, #4]
    a4ba:	f7ff fd9f 	bl	9ffc <USBHwEPStall>
    a4be:	e768      	b.n	a392 <USBHandleStandardRequest+0x2e>
    a4c0:	1000135c 	.word	0x1000135c

0000a4c4 <__aeabi_llsl>:
    a4c4:	4091      	lsls	r1, r2
    a4c6:	1c03      	adds	r3, r0, #0
    a4c8:	4090      	lsls	r0, r2
    a4ca:	469c      	mov	ip, r3
    a4cc:	3a20      	subs	r2, #32
    a4ce:	4093      	lsls	r3, r2
    a4d0:	4319      	orrs	r1, r3
    a4d2:	4252      	negs	r2, r2
    a4d4:	4663      	mov	r3, ip
    a4d6:	40d3      	lsrs	r3, r2
    a4d8:	4319      	orrs	r1, r3
    a4da:	4770      	bx	lr

0000a4dc <__aeabi_drsub>:
    a4dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    a4e0:	e002      	b.n	a4e8 <__adddf3>
    a4e2:	bf00      	nop

0000a4e4 <__aeabi_dsub>:
    a4e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a4e8 <__adddf3>:
    a4e8:	b530      	push	{r4, r5, lr}
    a4ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a4ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a4f2:	ea94 0f05 	teq	r4, r5
    a4f6:	bf08      	it	eq
    a4f8:	ea90 0f02 	teqeq	r0, r2
    a4fc:	bf1f      	itttt	ne
    a4fe:	ea54 0c00 	orrsne.w	ip, r4, r0
    a502:	ea55 0c02 	orrsne.w	ip, r5, r2
    a506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a50a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a50e:	f000 80e2 	beq.w	a6d6 <__adddf3+0x1ee>
    a512:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a51a:	bfb8      	it	lt
    a51c:	426d      	neglt	r5, r5
    a51e:	dd0c      	ble.n	a53a <__adddf3+0x52>
    a520:	442c      	add	r4, r5
    a522:	ea80 0202 	eor.w	r2, r0, r2
    a526:	ea81 0303 	eor.w	r3, r1, r3
    a52a:	ea82 0000 	eor.w	r0, r2, r0
    a52e:	ea83 0101 	eor.w	r1, r3, r1
    a532:	ea80 0202 	eor.w	r2, r0, r2
    a536:	ea81 0303 	eor.w	r3, r1, r3
    a53a:	2d36      	cmp	r5, #54	; 0x36
    a53c:	bf88      	it	hi
    a53e:	bd30      	pophi	{r4, r5, pc}
    a540:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a544:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a548:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    a54c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    a550:	d002      	beq.n	a558 <__adddf3+0x70>
    a552:	4240      	negs	r0, r0
    a554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a558:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    a55c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    a564:	d002      	beq.n	a56c <__adddf3+0x84>
    a566:	4252      	negs	r2, r2
    a568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a56c:	ea94 0f05 	teq	r4, r5
    a570:	f000 80a7 	beq.w	a6c2 <__adddf3+0x1da>
    a574:	f1a4 0401 	sub.w	r4, r4, #1
    a578:	f1d5 0e20 	rsbs	lr, r5, #32
    a57c:	db0d      	blt.n	a59a <__adddf3+0xb2>
    a57e:	fa02 fc0e 	lsl.w	ip, r2, lr
    a582:	fa22 f205 	lsr.w	r2, r2, r5
    a586:	1880      	adds	r0, r0, r2
    a588:	f141 0100 	adc.w	r1, r1, #0
    a58c:	fa03 f20e 	lsl.w	r2, r3, lr
    a590:	1880      	adds	r0, r0, r2
    a592:	fa43 f305 	asr.w	r3, r3, r5
    a596:	4159      	adcs	r1, r3
    a598:	e00e      	b.n	a5b8 <__adddf3+0xd0>
    a59a:	f1a5 0520 	sub.w	r5, r5, #32
    a59e:	f10e 0e20 	add.w	lr, lr, #32
    a5a2:	2a01      	cmp	r2, #1
    a5a4:	fa03 fc0e 	lsl.w	ip, r3, lr
    a5a8:	bf28      	it	cs
    a5aa:	f04c 0c02 	orrcs.w	ip, ip, #2
    a5ae:	fa43 f305 	asr.w	r3, r3, r5
    a5b2:	18c0      	adds	r0, r0, r3
    a5b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    a5b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a5bc:	d507      	bpl.n	a5ce <__adddf3+0xe6>
    a5be:	f04f 0e00 	mov.w	lr, #0
    a5c2:	f1dc 0c00 	rsbs	ip, ip, #0
    a5c6:	eb7e 0000 	sbcs.w	r0, lr, r0
    a5ca:	eb6e 0101 	sbc.w	r1, lr, r1
    a5ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a5d2:	d31b      	bcc.n	a60c <__adddf3+0x124>
    a5d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    a5d8:	d30c      	bcc.n	a5f4 <__adddf3+0x10c>
    a5da:	0849      	lsrs	r1, r1, #1
    a5dc:	ea5f 0030 	movs.w	r0, r0, rrx
    a5e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    a5e4:	f104 0401 	add.w	r4, r4, #1
    a5e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    a5ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    a5f0:	f080 809a 	bcs.w	a728 <__adddf3+0x240>
    a5f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a5f8:	bf08      	it	eq
    a5fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a5fe:	f150 0000 	adcs.w	r0, r0, #0
    a602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a606:	ea41 0105 	orr.w	r1, r1, r5
    a60a:	bd30      	pop	{r4, r5, pc}
    a60c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    a610:	4140      	adcs	r0, r0
    a612:	eb41 0101 	adc.w	r1, r1, r1
    a616:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a61a:	f1a4 0401 	sub.w	r4, r4, #1
    a61e:	d1e9      	bne.n	a5f4 <__adddf3+0x10c>
    a620:	f091 0f00 	teq	r1, #0
    a624:	bf04      	itt	eq
    a626:	4601      	moveq	r1, r0
    a628:	2000      	moveq	r0, #0
    a62a:	fab1 f381 	clz	r3, r1
    a62e:	bf08      	it	eq
    a630:	3320      	addeq	r3, #32
    a632:	f1a3 030b 	sub.w	r3, r3, #11
    a636:	f1b3 0220 	subs.w	r2, r3, #32
    a63a:	da0c      	bge.n	a656 <__adddf3+0x16e>
    a63c:	320c      	adds	r2, #12
    a63e:	dd08      	ble.n	a652 <__adddf3+0x16a>
    a640:	f102 0c14 	add.w	ip, r2, #20
    a644:	f1c2 020c 	rsb	r2, r2, #12
    a648:	fa01 f00c 	lsl.w	r0, r1, ip
    a64c:	fa21 f102 	lsr.w	r1, r1, r2
    a650:	e00c      	b.n	a66c <__adddf3+0x184>
    a652:	f102 0214 	add.w	r2, r2, #20
    a656:	bfd8      	it	le
    a658:	f1c2 0c20 	rsble	ip, r2, #32
    a65c:	fa01 f102 	lsl.w	r1, r1, r2
    a660:	fa20 fc0c 	lsr.w	ip, r0, ip
    a664:	bfdc      	itt	le
    a666:	ea41 010c 	orrle.w	r1, r1, ip
    a66a:	4090      	lslle	r0, r2
    a66c:	1ae4      	subs	r4, r4, r3
    a66e:	bfa2      	ittt	ge
    a670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    a674:	4329      	orrge	r1, r5
    a676:	bd30      	popge	{r4, r5, pc}
    a678:	ea6f 0404 	mvn.w	r4, r4
    a67c:	3c1f      	subs	r4, #31
    a67e:	da1c      	bge.n	a6ba <__adddf3+0x1d2>
    a680:	340c      	adds	r4, #12
    a682:	dc0e      	bgt.n	a6a2 <__adddf3+0x1ba>
    a684:	f104 0414 	add.w	r4, r4, #20
    a688:	f1c4 0220 	rsb	r2, r4, #32
    a68c:	fa20 f004 	lsr.w	r0, r0, r4
    a690:	fa01 f302 	lsl.w	r3, r1, r2
    a694:	ea40 0003 	orr.w	r0, r0, r3
    a698:	fa21 f304 	lsr.w	r3, r1, r4
    a69c:	ea45 0103 	orr.w	r1, r5, r3
    a6a0:	bd30      	pop	{r4, r5, pc}
    a6a2:	f1c4 040c 	rsb	r4, r4, #12
    a6a6:	f1c4 0220 	rsb	r2, r4, #32
    a6aa:	fa20 f002 	lsr.w	r0, r0, r2
    a6ae:	fa01 f304 	lsl.w	r3, r1, r4
    a6b2:	ea40 0003 	orr.w	r0, r0, r3
    a6b6:	4629      	mov	r1, r5
    a6b8:	bd30      	pop	{r4, r5, pc}
    a6ba:	fa21 f004 	lsr.w	r0, r1, r4
    a6be:	4629      	mov	r1, r5
    a6c0:	bd30      	pop	{r4, r5, pc}
    a6c2:	f094 0f00 	teq	r4, #0
    a6c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    a6ca:	bf06      	itte	eq
    a6cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    a6d0:	3401      	addeq	r4, #1
    a6d2:	3d01      	subne	r5, #1
    a6d4:	e74e      	b.n	a574 <__adddf3+0x8c>
    a6d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a6da:	bf18      	it	ne
    a6dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a6e0:	d029      	beq.n	a736 <__adddf3+0x24e>
    a6e2:	ea94 0f05 	teq	r4, r5
    a6e6:	bf08      	it	eq
    a6e8:	ea90 0f02 	teqeq	r0, r2
    a6ec:	d005      	beq.n	a6fa <__adddf3+0x212>
    a6ee:	ea54 0c00 	orrs.w	ip, r4, r0
    a6f2:	bf04      	itt	eq
    a6f4:	4619      	moveq	r1, r3
    a6f6:	4610      	moveq	r0, r2
    a6f8:	bd30      	pop	{r4, r5, pc}
    a6fa:	ea91 0f03 	teq	r1, r3
    a6fe:	bf1e      	ittt	ne
    a700:	2100      	movne	r1, #0
    a702:	2000      	movne	r0, #0
    a704:	bd30      	popne	{r4, r5, pc}
    a706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    a70a:	d105      	bne.n	a718 <__adddf3+0x230>
    a70c:	0040      	lsls	r0, r0, #1
    a70e:	4149      	adcs	r1, r1
    a710:	bf28      	it	cs
    a712:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a716:	bd30      	pop	{r4, r5, pc}
    a718:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    a71c:	bf3c      	itt	cc
    a71e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    a722:	bd30      	popcc	{r4, r5, pc}
    a724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a728:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    a72c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a730:	f04f 0000 	mov.w	r0, #0
    a734:	bd30      	pop	{r4, r5, pc}
    a736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a73a:	bf1a      	itte	ne
    a73c:	4619      	movne	r1, r3
    a73e:	4610      	movne	r0, r2
    a740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    a744:	bf1c      	itt	ne
    a746:	460b      	movne	r3, r1
    a748:	4602      	movne	r2, r0
    a74a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a74e:	bf06      	itte	eq
    a750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    a754:	ea91 0f03 	teqeq	r1, r3
    a758:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    a75c:	bd30      	pop	{r4, r5, pc}
    a75e:	bf00      	nop

0000a760 <__aeabi_ui2d>:
    a760:	f090 0f00 	teq	r0, #0
    a764:	bf04      	itt	eq
    a766:	2100      	moveq	r1, #0
    a768:	4770      	bxeq	lr
    a76a:	b530      	push	{r4, r5, lr}
    a76c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a770:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a774:	f04f 0500 	mov.w	r5, #0
    a778:	f04f 0100 	mov.w	r1, #0
    a77c:	e750      	b.n	a620 <__adddf3+0x138>
    a77e:	bf00      	nop

0000a780 <__aeabi_i2d>:
    a780:	f090 0f00 	teq	r0, #0
    a784:	bf04      	itt	eq
    a786:	2100      	moveq	r1, #0
    a788:	4770      	bxeq	lr
    a78a:	b530      	push	{r4, r5, lr}
    a78c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a790:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a794:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    a798:	bf48      	it	mi
    a79a:	4240      	negmi	r0, r0
    a79c:	f04f 0100 	mov.w	r1, #0
    a7a0:	e73e      	b.n	a620 <__adddf3+0x138>
    a7a2:	bf00      	nop

0000a7a4 <__aeabi_f2d>:
    a7a4:	0042      	lsls	r2, r0, #1
    a7a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    a7aa:	ea4f 0131 	mov.w	r1, r1, rrx
    a7ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
    a7b2:	bf1f      	itttt	ne
    a7b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    a7b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a7bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    a7c0:	4770      	bxne	lr
    a7c2:	f092 0f00 	teq	r2, #0
    a7c6:	bf14      	ite	ne
    a7c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a7cc:	4770      	bxeq	lr
    a7ce:	b530      	push	{r4, r5, lr}
    a7d0:	f44f 7460 	mov.w	r4, #896	; 0x380
    a7d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a7d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a7dc:	e720      	b.n	a620 <__adddf3+0x138>
    a7de:	bf00      	nop

0000a7e0 <__aeabi_ul2d>:
    a7e0:	ea50 0201 	orrs.w	r2, r0, r1
    a7e4:	bf08      	it	eq
    a7e6:	4770      	bxeq	lr
    a7e8:	b530      	push	{r4, r5, lr}
    a7ea:	f04f 0500 	mov.w	r5, #0
    a7ee:	e00a      	b.n	a806 <__aeabi_l2d+0x16>

0000a7f0 <__aeabi_l2d>:
    a7f0:	ea50 0201 	orrs.w	r2, r0, r1
    a7f4:	bf08      	it	eq
    a7f6:	4770      	bxeq	lr
    a7f8:	b530      	push	{r4, r5, lr}
    a7fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    a7fe:	d502      	bpl.n	a806 <__aeabi_l2d+0x16>
    a800:	4240      	negs	r0, r0
    a802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a806:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a80a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a80e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    a812:	f43f aedc 	beq.w	a5ce <__adddf3+0xe6>
    a816:	f04f 0203 	mov.w	r2, #3
    a81a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a81e:	bf18      	it	ne
    a820:	3203      	addne	r2, #3
    a822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a826:	bf18      	it	ne
    a828:	3203      	addne	r2, #3
    a82a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    a82e:	f1c2 0320 	rsb	r3, r2, #32
    a832:	fa00 fc03 	lsl.w	ip, r0, r3
    a836:	fa20 f002 	lsr.w	r0, r0, r2
    a83a:	fa01 fe03 	lsl.w	lr, r1, r3
    a83e:	ea40 000e 	orr.w	r0, r0, lr
    a842:	fa21 f102 	lsr.w	r1, r1, r2
    a846:	4414      	add	r4, r2
    a848:	e6c1      	b.n	a5ce <__adddf3+0xe6>
    a84a:	bf00      	nop

0000a84c <__aeabi_dmul>:
    a84c:	b570      	push	{r4, r5, r6, lr}
    a84e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a85a:	bf1d      	ittte	ne
    a85c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a860:	ea94 0f0c 	teqne	r4, ip
    a864:	ea95 0f0c 	teqne	r5, ip
    a868:	f000 f8de 	bleq	aa28 <__aeabi_dmul+0x1dc>
    a86c:	442c      	add	r4, r5
    a86e:	ea81 0603 	eor.w	r6, r1, r3
    a872:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    a876:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    a87a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    a87e:	bf18      	it	ne
    a880:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    a884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a88c:	d038      	beq.n	a900 <__aeabi_dmul+0xb4>
    a88e:	fba0 ce02 	umull	ip, lr, r0, r2
    a892:	f04f 0500 	mov.w	r5, #0
    a896:	fbe1 e502 	umlal	lr, r5, r1, r2
    a89a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    a89e:	fbe0 e503 	umlal	lr, r5, r0, r3
    a8a2:	f04f 0600 	mov.w	r6, #0
    a8a6:	fbe1 5603 	umlal	r5, r6, r1, r3
    a8aa:	f09c 0f00 	teq	ip, #0
    a8ae:	bf18      	it	ne
    a8b0:	f04e 0e01 	orrne.w	lr, lr, #1
    a8b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    a8b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    a8bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    a8c0:	d204      	bcs.n	a8cc <__aeabi_dmul+0x80>
    a8c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    a8c6:	416d      	adcs	r5, r5
    a8c8:	eb46 0606 	adc.w	r6, r6, r6
    a8cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    a8d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    a8d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    a8d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    a8dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    a8e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a8e4:	bf88      	it	hi
    a8e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a8ea:	d81e      	bhi.n	a92a <__aeabi_dmul+0xde>
    a8ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    a8f0:	bf08      	it	eq
    a8f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    a8f6:	f150 0000 	adcs.w	r0, r0, #0
    a8fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a8fe:	bd70      	pop	{r4, r5, r6, pc}
    a900:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    a904:	ea46 0101 	orr.w	r1, r6, r1
    a908:	ea40 0002 	orr.w	r0, r0, r2
    a90c:	ea81 0103 	eor.w	r1, r1, r3
    a910:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    a914:	bfc2      	ittt	gt
    a916:	ebd4 050c 	rsbsgt	r5, r4, ip
    a91a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a91e:	bd70      	popgt	{r4, r5, r6, pc}
    a920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a924:	f04f 0e00 	mov.w	lr, #0
    a928:	3c01      	subs	r4, #1
    a92a:	f300 80ab 	bgt.w	aa84 <__aeabi_dmul+0x238>
    a92e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    a932:	bfde      	ittt	le
    a934:	2000      	movle	r0, #0
    a936:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    a93a:	bd70      	pople	{r4, r5, r6, pc}
    a93c:	f1c4 0400 	rsb	r4, r4, #0
    a940:	3c20      	subs	r4, #32
    a942:	da35      	bge.n	a9b0 <__aeabi_dmul+0x164>
    a944:	340c      	adds	r4, #12
    a946:	dc1b      	bgt.n	a980 <__aeabi_dmul+0x134>
    a948:	f104 0414 	add.w	r4, r4, #20
    a94c:	f1c4 0520 	rsb	r5, r4, #32
    a950:	fa00 f305 	lsl.w	r3, r0, r5
    a954:	fa20 f004 	lsr.w	r0, r0, r4
    a958:	fa01 f205 	lsl.w	r2, r1, r5
    a95c:	ea40 0002 	orr.w	r0, r0, r2
    a960:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    a964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    a96c:	fa21 f604 	lsr.w	r6, r1, r4
    a970:	eb42 0106 	adc.w	r1, r2, r6
    a974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a978:	bf08      	it	eq
    a97a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a97e:	bd70      	pop	{r4, r5, r6, pc}
    a980:	f1c4 040c 	rsb	r4, r4, #12
    a984:	f1c4 0520 	rsb	r5, r4, #32
    a988:	fa00 f304 	lsl.w	r3, r0, r4
    a98c:	fa20 f005 	lsr.w	r0, r0, r5
    a990:	fa01 f204 	lsl.w	r2, r1, r4
    a994:	ea40 0002 	orr.w	r0, r0, r2
    a998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a99c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    a9a0:	f141 0100 	adc.w	r1, r1, #0
    a9a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a9a8:	bf08      	it	eq
    a9aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a9ae:	bd70      	pop	{r4, r5, r6, pc}
    a9b0:	f1c4 0520 	rsb	r5, r4, #32
    a9b4:	fa00 f205 	lsl.w	r2, r0, r5
    a9b8:	ea4e 0e02 	orr.w	lr, lr, r2
    a9bc:	fa20 f304 	lsr.w	r3, r0, r4
    a9c0:	fa01 f205 	lsl.w	r2, r1, r5
    a9c4:	ea43 0302 	orr.w	r3, r3, r2
    a9c8:	fa21 f004 	lsr.w	r0, r1, r4
    a9cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a9d0:	fa21 f204 	lsr.w	r2, r1, r4
    a9d4:	ea20 0002 	bic.w	r0, r0, r2
    a9d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    a9dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a9e0:	bf08      	it	eq
    a9e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a9e6:	bd70      	pop	{r4, r5, r6, pc}
    a9e8:	f094 0f00 	teq	r4, #0
    a9ec:	d10f      	bne.n	aa0e <__aeabi_dmul+0x1c2>
    a9ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    a9f2:	0040      	lsls	r0, r0, #1
    a9f4:	eb41 0101 	adc.w	r1, r1, r1
    a9f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a9fc:	bf08      	it	eq
    a9fe:	3c01      	subeq	r4, #1
    aa00:	d0f7      	beq.n	a9f2 <__aeabi_dmul+0x1a6>
    aa02:	ea41 0106 	orr.w	r1, r1, r6
    aa06:	f095 0f00 	teq	r5, #0
    aa0a:	bf18      	it	ne
    aa0c:	4770      	bxne	lr
    aa0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    aa12:	0052      	lsls	r2, r2, #1
    aa14:	eb43 0303 	adc.w	r3, r3, r3
    aa18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    aa1c:	bf08      	it	eq
    aa1e:	3d01      	subeq	r5, #1
    aa20:	d0f7      	beq.n	aa12 <__aeabi_dmul+0x1c6>
    aa22:	ea43 0306 	orr.w	r3, r3, r6
    aa26:	4770      	bx	lr
    aa28:	ea94 0f0c 	teq	r4, ip
    aa2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    aa30:	bf18      	it	ne
    aa32:	ea95 0f0c 	teqne	r5, ip
    aa36:	d00c      	beq.n	aa52 <__aeabi_dmul+0x206>
    aa38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    aa3c:	bf18      	it	ne
    aa3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    aa42:	d1d1      	bne.n	a9e8 <__aeabi_dmul+0x19c>
    aa44:	ea81 0103 	eor.w	r1, r1, r3
    aa48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aa4c:	f04f 0000 	mov.w	r0, #0
    aa50:	bd70      	pop	{r4, r5, r6, pc}
    aa52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    aa56:	bf06      	itte	eq
    aa58:	4610      	moveq	r0, r2
    aa5a:	4619      	moveq	r1, r3
    aa5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    aa60:	d019      	beq.n	aa96 <__aeabi_dmul+0x24a>
    aa62:	ea94 0f0c 	teq	r4, ip
    aa66:	d102      	bne.n	aa6e <__aeabi_dmul+0x222>
    aa68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    aa6c:	d113      	bne.n	aa96 <__aeabi_dmul+0x24a>
    aa6e:	ea95 0f0c 	teq	r5, ip
    aa72:	d105      	bne.n	aa80 <__aeabi_dmul+0x234>
    aa74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    aa78:	bf1c      	itt	ne
    aa7a:	4610      	movne	r0, r2
    aa7c:	4619      	movne	r1, r3
    aa7e:	d10a      	bne.n	aa96 <__aeabi_dmul+0x24a>
    aa80:	ea81 0103 	eor.w	r1, r1, r3
    aa84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aa88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    aa8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    aa90:	f04f 0000 	mov.w	r0, #0
    aa94:	bd70      	pop	{r4, r5, r6, pc}
    aa96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    aa9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    aa9e:	bd70      	pop	{r4, r5, r6, pc}

0000aaa0 <__aeabi_ddiv>:
    aaa0:	b570      	push	{r4, r5, r6, lr}
    aaa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    aaa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    aaaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    aaae:	bf1d      	ittte	ne
    aab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    aab4:	ea94 0f0c 	teqne	r4, ip
    aab8:	ea95 0f0c 	teqne	r5, ip
    aabc:	f000 f8a7 	bleq	ac0e <__aeabi_ddiv+0x16e>
    aac0:	eba4 0405 	sub.w	r4, r4, r5
    aac4:	ea81 0e03 	eor.w	lr, r1, r3
    aac8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    aacc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    aad0:	f000 8088 	beq.w	abe4 <__aeabi_ddiv+0x144>
    aad4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    aad8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    aadc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    aae0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    aae4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    aae8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    aaec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    aaf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    aaf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    aaf8:	429d      	cmp	r5, r3
    aafa:	bf08      	it	eq
    aafc:	4296      	cmpeq	r6, r2
    aafe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ab02:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ab06:	d202      	bcs.n	ab0e <__aeabi_ddiv+0x6e>
    ab08:	085b      	lsrs	r3, r3, #1
    ab0a:	ea4f 0232 	mov.w	r2, r2, rrx
    ab0e:	1ab6      	subs	r6, r6, r2
    ab10:	eb65 0503 	sbc.w	r5, r5, r3
    ab14:	085b      	lsrs	r3, r3, #1
    ab16:	ea4f 0232 	mov.w	r2, r2, rrx
    ab1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ab1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ab22:	ebb6 0e02 	subs.w	lr, r6, r2
    ab26:	eb75 0e03 	sbcs.w	lr, r5, r3
    ab2a:	bf22      	ittt	cs
    ab2c:	1ab6      	subcs	r6, r6, r2
    ab2e:	4675      	movcs	r5, lr
    ab30:	ea40 000c 	orrcs.w	r0, r0, ip
    ab34:	085b      	lsrs	r3, r3, #1
    ab36:	ea4f 0232 	mov.w	r2, r2, rrx
    ab3a:	ebb6 0e02 	subs.w	lr, r6, r2
    ab3e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ab42:	bf22      	ittt	cs
    ab44:	1ab6      	subcs	r6, r6, r2
    ab46:	4675      	movcs	r5, lr
    ab48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ab4c:	085b      	lsrs	r3, r3, #1
    ab4e:	ea4f 0232 	mov.w	r2, r2, rrx
    ab52:	ebb6 0e02 	subs.w	lr, r6, r2
    ab56:	eb75 0e03 	sbcs.w	lr, r5, r3
    ab5a:	bf22      	ittt	cs
    ab5c:	1ab6      	subcs	r6, r6, r2
    ab5e:	4675      	movcs	r5, lr
    ab60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ab64:	085b      	lsrs	r3, r3, #1
    ab66:	ea4f 0232 	mov.w	r2, r2, rrx
    ab6a:	ebb6 0e02 	subs.w	lr, r6, r2
    ab6e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ab72:	bf22      	ittt	cs
    ab74:	1ab6      	subcs	r6, r6, r2
    ab76:	4675      	movcs	r5, lr
    ab78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ab7c:	ea55 0e06 	orrs.w	lr, r5, r6
    ab80:	d018      	beq.n	abb4 <__aeabi_ddiv+0x114>
    ab82:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ab86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ab8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ab8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ab92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ab96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ab9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ab9e:	d1c0      	bne.n	ab22 <__aeabi_ddiv+0x82>
    aba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    aba4:	d10b      	bne.n	abbe <__aeabi_ddiv+0x11e>
    aba6:	ea41 0100 	orr.w	r1, r1, r0
    abaa:	f04f 0000 	mov.w	r0, #0
    abae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    abb2:	e7b6      	b.n	ab22 <__aeabi_ddiv+0x82>
    abb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    abb8:	bf04      	itt	eq
    abba:	4301      	orreq	r1, r0
    abbc:	2000      	moveq	r0, #0
    abbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    abc2:	bf88      	it	hi
    abc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    abc8:	f63f aeaf 	bhi.w	a92a <__aeabi_dmul+0xde>
    abcc:	ebb5 0c03 	subs.w	ip, r5, r3
    abd0:	bf04      	itt	eq
    abd2:	ebb6 0c02 	subseq.w	ip, r6, r2
    abd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    abda:	f150 0000 	adcs.w	r0, r0, #0
    abde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    abe2:	bd70      	pop	{r4, r5, r6, pc}
    abe4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    abe8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    abec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    abf0:	bfc2      	ittt	gt
    abf2:	ebd4 050c 	rsbsgt	r5, r4, ip
    abf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    abfa:	bd70      	popgt	{r4, r5, r6, pc}
    abfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ac00:	f04f 0e00 	mov.w	lr, #0
    ac04:	3c01      	subs	r4, #1
    ac06:	e690      	b.n	a92a <__aeabi_dmul+0xde>
    ac08:	ea45 0e06 	orr.w	lr, r5, r6
    ac0c:	e68d      	b.n	a92a <__aeabi_dmul+0xde>
    ac0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ac12:	ea94 0f0c 	teq	r4, ip
    ac16:	bf08      	it	eq
    ac18:	ea95 0f0c 	teqeq	r5, ip
    ac1c:	f43f af3b 	beq.w	aa96 <__aeabi_dmul+0x24a>
    ac20:	ea94 0f0c 	teq	r4, ip
    ac24:	d10a      	bne.n	ac3c <__aeabi_ddiv+0x19c>
    ac26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ac2a:	f47f af34 	bne.w	aa96 <__aeabi_dmul+0x24a>
    ac2e:	ea95 0f0c 	teq	r5, ip
    ac32:	f47f af25 	bne.w	aa80 <__aeabi_dmul+0x234>
    ac36:	4610      	mov	r0, r2
    ac38:	4619      	mov	r1, r3
    ac3a:	e72c      	b.n	aa96 <__aeabi_dmul+0x24a>
    ac3c:	ea95 0f0c 	teq	r5, ip
    ac40:	d106      	bne.n	ac50 <__aeabi_ddiv+0x1b0>
    ac42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ac46:	f43f aefd 	beq.w	aa44 <__aeabi_dmul+0x1f8>
    ac4a:	4610      	mov	r0, r2
    ac4c:	4619      	mov	r1, r3
    ac4e:	e722      	b.n	aa96 <__aeabi_dmul+0x24a>
    ac50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ac54:	bf18      	it	ne
    ac56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ac5a:	f47f aec5 	bne.w	a9e8 <__aeabi_dmul+0x19c>
    ac5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ac62:	f47f af0d 	bne.w	aa80 <__aeabi_dmul+0x234>
    ac66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ac6a:	f47f aeeb 	bne.w	aa44 <__aeabi_dmul+0x1f8>
    ac6e:	e712      	b.n	aa96 <__aeabi_dmul+0x24a>

0000ac70 <__aeabi_d2uiz>:
    ac70:	004a      	lsls	r2, r1, #1
    ac72:	d211      	bcs.n	ac98 <__aeabi_d2uiz+0x28>
    ac74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ac78:	d211      	bcs.n	ac9e <__aeabi_d2uiz+0x2e>
    ac7a:	d50d      	bpl.n	ac98 <__aeabi_d2uiz+0x28>
    ac7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ac80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ac84:	d40e      	bmi.n	aca4 <__aeabi_d2uiz+0x34>
    ac86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ac8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ac8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ac92:	fa23 f002 	lsr.w	r0, r3, r2
    ac96:	4770      	bx	lr
    ac98:	f04f 0000 	mov.w	r0, #0
    ac9c:	4770      	bx	lr
    ac9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    aca2:	d102      	bne.n	acaa <__aeabi_d2uiz+0x3a>
    aca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aca8:	4770      	bx	lr
    acaa:	f04f 0000 	mov.w	r0, #0
    acae:	4770      	bx	lr

0000acb0 <__aeabi_uldivmod>:
    acb0:	b953      	cbnz	r3, acc8 <__aeabi_uldivmod+0x18>
    acb2:	b94a      	cbnz	r2, acc8 <__aeabi_uldivmod+0x18>
    acb4:	2900      	cmp	r1, #0
    acb6:	bf08      	it	eq
    acb8:	2800      	cmpeq	r0, #0
    acba:	bf1c      	itt	ne
    acbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    acc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    acc4:	f000 b97a 	b.w	afbc <__aeabi_idiv0>
    acc8:	f1ad 0c08 	sub.w	ip, sp, #8
    accc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    acd0:	f000 f806 	bl	ace0 <__udivmoddi4>
    acd4:	f8dd e004 	ldr.w	lr, [sp, #4]
    acd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    acdc:	b004      	add	sp, #16
    acde:	4770      	bx	lr

0000ace0 <__udivmoddi4>:
    ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ace4:	468c      	mov	ip, r1
    ace6:	460e      	mov	r6, r1
    ace8:	4604      	mov	r4, r0
    acea:	9d08      	ldr	r5, [sp, #32]
    acec:	2b00      	cmp	r3, #0
    acee:	d150      	bne.n	ad92 <__udivmoddi4+0xb2>
    acf0:	428a      	cmp	r2, r1
    acf2:	4617      	mov	r7, r2
    acf4:	d96c      	bls.n	add0 <__udivmoddi4+0xf0>
    acf6:	fab2 fe82 	clz	lr, r2
    acfa:	f1be 0f00 	cmp.w	lr, #0
    acfe:	d00b      	beq.n	ad18 <__udivmoddi4+0x38>
    ad00:	f1ce 0c20 	rsb	ip, lr, #32
    ad04:	fa01 f60e 	lsl.w	r6, r1, lr
    ad08:	fa20 fc0c 	lsr.w	ip, r0, ip
    ad0c:	fa02 f70e 	lsl.w	r7, r2, lr
    ad10:	ea4c 0c06 	orr.w	ip, ip, r6
    ad14:	fa00 f40e 	lsl.w	r4, r0, lr
    ad18:	0c3a      	lsrs	r2, r7, #16
    ad1a:	fbbc f9f2 	udiv	r9, ip, r2
    ad1e:	b2bb      	uxth	r3, r7
    ad20:	fb02 cc19 	mls	ip, r2, r9, ip
    ad24:	fb09 fa03 	mul.w	sl, r9, r3
    ad28:	ea4f 4814 	mov.w	r8, r4, lsr #16
    ad2c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
    ad30:	45b2      	cmp	sl, r6
    ad32:	d90a      	bls.n	ad4a <__udivmoddi4+0x6a>
    ad34:	19f6      	adds	r6, r6, r7
    ad36:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    ad3a:	f080 8125 	bcs.w	af88 <__udivmoddi4+0x2a8>
    ad3e:	45b2      	cmp	sl, r6
    ad40:	f240 8122 	bls.w	af88 <__udivmoddi4+0x2a8>
    ad44:	f1a9 0902 	sub.w	r9, r9, #2
    ad48:	443e      	add	r6, r7
    ad4a:	eba6 060a 	sub.w	r6, r6, sl
    ad4e:	fbb6 f0f2 	udiv	r0, r6, r2
    ad52:	fb02 6610 	mls	r6, r2, r0, r6
    ad56:	fb00 f303 	mul.w	r3, r0, r3
    ad5a:	b2a4      	uxth	r4, r4
    ad5c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    ad60:	42a3      	cmp	r3, r4
    ad62:	d909      	bls.n	ad78 <__udivmoddi4+0x98>
    ad64:	19e4      	adds	r4, r4, r7
    ad66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    ad6a:	f080 810b 	bcs.w	af84 <__udivmoddi4+0x2a4>
    ad6e:	42a3      	cmp	r3, r4
    ad70:	f240 8108 	bls.w	af84 <__udivmoddi4+0x2a4>
    ad74:	3802      	subs	r0, #2
    ad76:	443c      	add	r4, r7
    ad78:	2100      	movs	r1, #0
    ad7a:	1ae4      	subs	r4, r4, r3
    ad7c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    ad80:	2d00      	cmp	r5, #0
    ad82:	d062      	beq.n	ae4a <__udivmoddi4+0x16a>
    ad84:	2300      	movs	r3, #0
    ad86:	fa24 f40e 	lsr.w	r4, r4, lr
    ad8a:	602c      	str	r4, [r5, #0]
    ad8c:	606b      	str	r3, [r5, #4]
    ad8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad92:	428b      	cmp	r3, r1
    ad94:	d907      	bls.n	ada6 <__udivmoddi4+0xc6>
    ad96:	2d00      	cmp	r5, #0
    ad98:	d055      	beq.n	ae46 <__udivmoddi4+0x166>
    ad9a:	2100      	movs	r1, #0
    ad9c:	e885 0041 	stmia.w	r5, {r0, r6}
    ada0:	4608      	mov	r0, r1
    ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ada6:	fab3 f183 	clz	r1, r3
    adaa:	2900      	cmp	r1, #0
    adac:	f040 808f 	bne.w	aece <__udivmoddi4+0x1ee>
    adb0:	42b3      	cmp	r3, r6
    adb2:	d302      	bcc.n	adba <__udivmoddi4+0xda>
    adb4:	4282      	cmp	r2, r0
    adb6:	f200 80fc 	bhi.w	afb2 <__udivmoddi4+0x2d2>
    adba:	1a84      	subs	r4, r0, r2
    adbc:	eb66 0603 	sbc.w	r6, r6, r3
    adc0:	2001      	movs	r0, #1
    adc2:	46b4      	mov	ip, r6
    adc4:	2d00      	cmp	r5, #0
    adc6:	d040      	beq.n	ae4a <__udivmoddi4+0x16a>
    adc8:	e885 1010 	stmia.w	r5, {r4, ip}
    adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    add0:	b912      	cbnz	r2, add8 <__udivmoddi4+0xf8>
    add2:	2701      	movs	r7, #1
    add4:	fbb7 f7f2 	udiv	r7, r7, r2
    add8:	fab7 fe87 	clz	lr, r7
    addc:	f1be 0f00 	cmp.w	lr, #0
    ade0:	d135      	bne.n	ae4e <__udivmoddi4+0x16e>
    ade2:	2101      	movs	r1, #1
    ade4:	1bf6      	subs	r6, r6, r7
    ade6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    adea:	fa1f f887 	uxth.w	r8, r7
    adee:	fbb6 f2fc 	udiv	r2, r6, ip
    adf2:	fb0c 6612 	mls	r6, ip, r2, r6
    adf6:	fb08 f002 	mul.w	r0, r8, r2
    adfa:	0c23      	lsrs	r3, r4, #16
    adfc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
    ae00:	42b0      	cmp	r0, r6
    ae02:	d907      	bls.n	ae14 <__udivmoddi4+0x134>
    ae04:	19f6      	adds	r6, r6, r7
    ae06:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    ae0a:	d202      	bcs.n	ae12 <__udivmoddi4+0x132>
    ae0c:	42b0      	cmp	r0, r6
    ae0e:	f200 80d2 	bhi.w	afb6 <__udivmoddi4+0x2d6>
    ae12:	461a      	mov	r2, r3
    ae14:	1a36      	subs	r6, r6, r0
    ae16:	fbb6 f0fc 	udiv	r0, r6, ip
    ae1a:	fb0c 6610 	mls	r6, ip, r0, r6
    ae1e:	fb08 f800 	mul.w	r8, r8, r0
    ae22:	b2a3      	uxth	r3, r4
    ae24:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
    ae28:	45a0      	cmp	r8, r4
    ae2a:	d907      	bls.n	ae3c <__udivmoddi4+0x15c>
    ae2c:	19e4      	adds	r4, r4, r7
    ae2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    ae32:	d202      	bcs.n	ae3a <__udivmoddi4+0x15a>
    ae34:	45a0      	cmp	r8, r4
    ae36:	f200 80b9 	bhi.w	afac <__udivmoddi4+0x2cc>
    ae3a:	4618      	mov	r0, r3
    ae3c:	eba4 0408 	sub.w	r4, r4, r8
    ae40:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    ae44:	e79c      	b.n	ad80 <__udivmoddi4+0xa0>
    ae46:	4629      	mov	r1, r5
    ae48:	4628      	mov	r0, r5
    ae4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae4e:	fa07 f70e 	lsl.w	r7, r7, lr
    ae52:	f1ce 0320 	rsb	r3, lr, #32
    ae56:	fa26 f203 	lsr.w	r2, r6, r3
    ae5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    ae5e:	fbb2 f1fc 	udiv	r1, r2, ip
    ae62:	fa1f f887 	uxth.w	r8, r7
    ae66:	fb0c 2211 	mls	r2, ip, r1, r2
    ae6a:	fa06 f60e 	lsl.w	r6, r6, lr
    ae6e:	fa20 f303 	lsr.w	r3, r0, r3
    ae72:	fb01 f908 	mul.w	r9, r1, r8
    ae76:	4333      	orrs	r3, r6
    ae78:	0c1e      	lsrs	r6, r3, #16
    ae7a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    ae7e:	45b1      	cmp	r9, r6
    ae80:	fa00 f40e 	lsl.w	r4, r0, lr
    ae84:	d909      	bls.n	ae9a <__udivmoddi4+0x1ba>
    ae86:	19f6      	adds	r6, r6, r7
    ae88:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    ae8c:	f080 808c 	bcs.w	afa8 <__udivmoddi4+0x2c8>
    ae90:	45b1      	cmp	r9, r6
    ae92:	f240 8089 	bls.w	afa8 <__udivmoddi4+0x2c8>
    ae96:	3902      	subs	r1, #2
    ae98:	443e      	add	r6, r7
    ae9a:	eba6 0609 	sub.w	r6, r6, r9
    ae9e:	fbb6 f0fc 	udiv	r0, r6, ip
    aea2:	fb0c 6210 	mls	r2, ip, r0, r6
    aea6:	fb00 f908 	mul.w	r9, r0, r8
    aeaa:	b29e      	uxth	r6, r3
    aeac:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    aeb0:	45b1      	cmp	r9, r6
    aeb2:	d907      	bls.n	aec4 <__udivmoddi4+0x1e4>
    aeb4:	19f6      	adds	r6, r6, r7
    aeb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    aeba:	d271      	bcs.n	afa0 <__udivmoddi4+0x2c0>
    aebc:	45b1      	cmp	r9, r6
    aebe:	d96f      	bls.n	afa0 <__udivmoddi4+0x2c0>
    aec0:	3802      	subs	r0, #2
    aec2:	443e      	add	r6, r7
    aec4:	eba6 0609 	sub.w	r6, r6, r9
    aec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    aecc:	e78f      	b.n	adee <__udivmoddi4+0x10e>
    aece:	f1c1 0720 	rsb	r7, r1, #32
    aed2:	fa22 f807 	lsr.w	r8, r2, r7
    aed6:	408b      	lsls	r3, r1
    aed8:	ea48 0303 	orr.w	r3, r8, r3
    aedc:	fa26 f407 	lsr.w	r4, r6, r7
    aee0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    aee4:	fbb4 f9fe 	udiv	r9, r4, lr
    aee8:	fa1f fc83 	uxth.w	ip, r3
    aeec:	fb0e 4419 	mls	r4, lr, r9, r4
    aef0:	408e      	lsls	r6, r1
    aef2:	fa20 f807 	lsr.w	r8, r0, r7
    aef6:	fb09 fa0c 	mul.w	sl, r9, ip
    aefa:	ea48 0806 	orr.w	r8, r8, r6
    aefe:	ea4f 4618 	mov.w	r6, r8, lsr #16
    af02:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
    af06:	45a2      	cmp	sl, r4
    af08:	fa02 f201 	lsl.w	r2, r2, r1
    af0c:	fa00 f601 	lsl.w	r6, r0, r1
    af10:	d908      	bls.n	af24 <__udivmoddi4+0x244>
    af12:	18e4      	adds	r4, r4, r3
    af14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    af18:	d244      	bcs.n	afa4 <__udivmoddi4+0x2c4>
    af1a:	45a2      	cmp	sl, r4
    af1c:	d942      	bls.n	afa4 <__udivmoddi4+0x2c4>
    af1e:	f1a9 0902 	sub.w	r9, r9, #2
    af22:	441c      	add	r4, r3
    af24:	eba4 040a 	sub.w	r4, r4, sl
    af28:	fbb4 f0fe 	udiv	r0, r4, lr
    af2c:	fb0e 4410 	mls	r4, lr, r0, r4
    af30:	fb00 fc0c 	mul.w	ip, r0, ip
    af34:	fa1f f888 	uxth.w	r8, r8
    af38:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
    af3c:	45a4      	cmp	ip, r4
    af3e:	d907      	bls.n	af50 <__udivmoddi4+0x270>
    af40:	18e4      	adds	r4, r4, r3
    af42:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    af46:	d229      	bcs.n	af9c <__udivmoddi4+0x2bc>
    af48:	45a4      	cmp	ip, r4
    af4a:	d927      	bls.n	af9c <__udivmoddi4+0x2bc>
    af4c:	3802      	subs	r0, #2
    af4e:	441c      	add	r4, r3
    af50:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    af54:	fba0 8902 	umull	r8, r9, r0, r2
    af58:	eba4 0c0c 	sub.w	ip, r4, ip
    af5c:	45cc      	cmp	ip, r9
    af5e:	46c2      	mov	sl, r8
    af60:	46ce      	mov	lr, r9
    af62:	d315      	bcc.n	af90 <__udivmoddi4+0x2b0>
    af64:	d012      	beq.n	af8c <__udivmoddi4+0x2ac>
    af66:	b155      	cbz	r5, af7e <__udivmoddi4+0x29e>
    af68:	ebb6 030a 	subs.w	r3, r6, sl
    af6c:	eb6c 060e 	sbc.w	r6, ip, lr
    af70:	fa06 f707 	lsl.w	r7, r6, r7
    af74:	40cb      	lsrs	r3, r1
    af76:	431f      	orrs	r7, r3
    af78:	40ce      	lsrs	r6, r1
    af7a:	602f      	str	r7, [r5, #0]
    af7c:	606e      	str	r6, [r5, #4]
    af7e:	2100      	movs	r1, #0
    af80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af84:	4610      	mov	r0, r2
    af86:	e6f7      	b.n	ad78 <__udivmoddi4+0x98>
    af88:	4689      	mov	r9, r1
    af8a:	e6de      	b.n	ad4a <__udivmoddi4+0x6a>
    af8c:	4546      	cmp	r6, r8
    af8e:	d2ea      	bcs.n	af66 <__udivmoddi4+0x286>
    af90:	ebb8 0a02 	subs.w	sl, r8, r2
    af94:	eb69 0e03 	sbc.w	lr, r9, r3
    af98:	3801      	subs	r0, #1
    af9a:	e7e4      	b.n	af66 <__udivmoddi4+0x286>
    af9c:	4670      	mov	r0, lr
    af9e:	e7d7      	b.n	af50 <__udivmoddi4+0x270>
    afa0:	4618      	mov	r0, r3
    afa2:	e78f      	b.n	aec4 <__udivmoddi4+0x1e4>
    afa4:	4681      	mov	r9, r0
    afa6:	e7bd      	b.n	af24 <__udivmoddi4+0x244>
    afa8:	4611      	mov	r1, r2
    afaa:	e776      	b.n	ae9a <__udivmoddi4+0x1ba>
    afac:	3802      	subs	r0, #2
    afae:	443c      	add	r4, r7
    afb0:	e744      	b.n	ae3c <__udivmoddi4+0x15c>
    afb2:	4608      	mov	r0, r1
    afb4:	e706      	b.n	adc4 <__udivmoddi4+0xe4>
    afb6:	3a02      	subs	r2, #2
    afb8:	443e      	add	r6, r7
    afba:	e72b      	b.n	ae14 <__udivmoddi4+0x134>

0000afbc <__aeabi_idiv0>:
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop

0000afc0 <abs>:
    afc0:	2800      	cmp	r0, #0
    afc2:	bfb8      	it	lt
    afc4:	4240      	neglt	r0, r0
    afc6:	4770      	bx	lr

0000afc8 <memcpy>:
    afc8:	4684      	mov	ip, r0
    afca:	ea41 0300 	orr.w	r3, r1, r0
    afce:	f013 0303 	ands.w	r3, r3, #3
    afd2:	d149      	bne.n	b068 <memcpy+0xa0>
    afd4:	3a40      	subs	r2, #64	; 0x40
    afd6:	d323      	bcc.n	b020 <memcpy+0x58>
    afd8:	680b      	ldr	r3, [r1, #0]
    afda:	6003      	str	r3, [r0, #0]
    afdc:	684b      	ldr	r3, [r1, #4]
    afde:	6043      	str	r3, [r0, #4]
    afe0:	688b      	ldr	r3, [r1, #8]
    afe2:	6083      	str	r3, [r0, #8]
    afe4:	68cb      	ldr	r3, [r1, #12]
    afe6:	60c3      	str	r3, [r0, #12]
    afe8:	690b      	ldr	r3, [r1, #16]
    afea:	6103      	str	r3, [r0, #16]
    afec:	694b      	ldr	r3, [r1, #20]
    afee:	6143      	str	r3, [r0, #20]
    aff0:	698b      	ldr	r3, [r1, #24]
    aff2:	6183      	str	r3, [r0, #24]
    aff4:	69cb      	ldr	r3, [r1, #28]
    aff6:	61c3      	str	r3, [r0, #28]
    aff8:	6a0b      	ldr	r3, [r1, #32]
    affa:	6203      	str	r3, [r0, #32]
    affc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    affe:	6243      	str	r3, [r0, #36]	; 0x24
    b000:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b002:	6283      	str	r3, [r0, #40]	; 0x28
    b004:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b006:	62c3      	str	r3, [r0, #44]	; 0x2c
    b008:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b00a:	6303      	str	r3, [r0, #48]	; 0x30
    b00c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b00e:	6343      	str	r3, [r0, #52]	; 0x34
    b010:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b012:	6383      	str	r3, [r0, #56]	; 0x38
    b014:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b016:	63c3      	str	r3, [r0, #60]	; 0x3c
    b018:	3040      	adds	r0, #64	; 0x40
    b01a:	3140      	adds	r1, #64	; 0x40
    b01c:	3a40      	subs	r2, #64	; 0x40
    b01e:	d2db      	bcs.n	afd8 <memcpy+0x10>
    b020:	3230      	adds	r2, #48	; 0x30
    b022:	d30b      	bcc.n	b03c <memcpy+0x74>
    b024:	680b      	ldr	r3, [r1, #0]
    b026:	6003      	str	r3, [r0, #0]
    b028:	684b      	ldr	r3, [r1, #4]
    b02a:	6043      	str	r3, [r0, #4]
    b02c:	688b      	ldr	r3, [r1, #8]
    b02e:	6083      	str	r3, [r0, #8]
    b030:	68cb      	ldr	r3, [r1, #12]
    b032:	60c3      	str	r3, [r0, #12]
    b034:	3010      	adds	r0, #16
    b036:	3110      	adds	r1, #16
    b038:	3a10      	subs	r2, #16
    b03a:	d2f3      	bcs.n	b024 <memcpy+0x5c>
    b03c:	320c      	adds	r2, #12
    b03e:	d305      	bcc.n	b04c <memcpy+0x84>
    b040:	f851 3b04 	ldr.w	r3, [r1], #4
    b044:	f840 3b04 	str.w	r3, [r0], #4
    b048:	3a04      	subs	r2, #4
    b04a:	d2f9      	bcs.n	b040 <memcpy+0x78>
    b04c:	3204      	adds	r2, #4
    b04e:	d008      	beq.n	b062 <memcpy+0x9a>
    b050:	07d2      	lsls	r2, r2, #31
    b052:	bf1c      	itt	ne
    b054:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b058:	f800 3b01 	strbne.w	r3, [r0], #1
    b05c:	d301      	bcc.n	b062 <memcpy+0x9a>
    b05e:	880b      	ldrh	r3, [r1, #0]
    b060:	8003      	strh	r3, [r0, #0]
    b062:	4660      	mov	r0, ip
    b064:	4770      	bx	lr
    b066:	bf00      	nop
    b068:	2a08      	cmp	r2, #8
    b06a:	d313      	bcc.n	b094 <memcpy+0xcc>
    b06c:	078b      	lsls	r3, r1, #30
    b06e:	d0b1      	beq.n	afd4 <memcpy+0xc>
    b070:	f010 0303 	ands.w	r3, r0, #3
    b074:	d0ae      	beq.n	afd4 <memcpy+0xc>
    b076:	f1c3 0304 	rsb	r3, r3, #4
    b07a:	1ad2      	subs	r2, r2, r3
    b07c:	07db      	lsls	r3, r3, #31
    b07e:	bf1c      	itt	ne
    b080:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b084:	f800 3b01 	strbne.w	r3, [r0], #1
    b088:	d3a4      	bcc.n	afd4 <memcpy+0xc>
    b08a:	f831 3b02 	ldrh.w	r3, [r1], #2
    b08e:	f820 3b02 	strh.w	r3, [r0], #2
    b092:	e79f      	b.n	afd4 <memcpy+0xc>
    b094:	3a04      	subs	r2, #4
    b096:	d3d9      	bcc.n	b04c <memcpy+0x84>
    b098:	3a01      	subs	r2, #1
    b09a:	f811 3b01 	ldrb.w	r3, [r1], #1
    b09e:	f800 3b01 	strb.w	r3, [r0], #1
    b0a2:	d2f9      	bcs.n	b098 <memcpy+0xd0>
    b0a4:	780b      	ldrb	r3, [r1, #0]
    b0a6:	7003      	strb	r3, [r0, #0]
    b0a8:	784b      	ldrb	r3, [r1, #1]
    b0aa:	7043      	strb	r3, [r0, #1]
    b0ac:	788b      	ldrb	r3, [r1, #2]
    b0ae:	7083      	strb	r3, [r0, #2]
    b0b0:	4660      	mov	r0, ip
    b0b2:	4770      	bx	lr

0000b0b4 <strlen>:
    b0b4:	f020 0103 	bic.w	r1, r0, #3
    b0b8:	f010 0003 	ands.w	r0, r0, #3
    b0bc:	f1c0 0000 	rsb	r0, r0, #0
    b0c0:	f851 3b04 	ldr.w	r3, [r1], #4
    b0c4:	f100 0c04 	add.w	ip, r0, #4
    b0c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b0cc:	f06f 0200 	mvn.w	r2, #0
    b0d0:	bf1c      	itt	ne
    b0d2:	fa22 f20c 	lsrne.w	r2, r2, ip
    b0d6:	4313      	orrne	r3, r2
    b0d8:	f04f 0c01 	mov.w	ip, #1
    b0dc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b0e0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b0e4:	eba3 020c 	sub.w	r2, r3, ip
    b0e8:	ea22 0203 	bic.w	r2, r2, r3
    b0ec:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b0f0:	bf04      	itt	eq
    b0f2:	f851 3b04 	ldreq.w	r3, [r1], #4
    b0f6:	3004      	addeq	r0, #4
    b0f8:	d0f4      	beq.n	b0e4 <strlen+0x30>
    b0fa:	f1c2 0100 	rsb	r1, r2, #0
    b0fe:	ea02 0201 	and.w	r2, r2, r1
    b102:	fab2 f282 	clz	r2, r2
    b106:	f1c2 021f 	rsb	r2, r2, #31
    b10a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b10e:	4770      	bx	lr

0000b110 <_global_impure_ptr>:
    b110:	0028 1000 0043 0000                         (...C...

0000b118 <whitening_index>:
    b118:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    b128:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    b138:	1b28 5a54 703f 662f                         (.TZ?p/f

0000b140 <whitening>:
    b140:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    b150:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    b160:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    b170:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    b180:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    b190:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    b1a0:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    b1b0:	0001 0101 0000 0100 0100 0000 0001 7501          ...............

0000b1bf <compile_info>:
    b1bf:	6275 7265 6f74 746f 2068 6967 2d74 2820     ubertooth git- (
    b1cf:	616c 2d62 6370 312d 6c40 6261 6370 2d31     lab-pc-1@labpc1-
    b1df:	7250 6365 7369 6f69 2d6e 3633 3033 542d     Precision-3630-T
    b1ef:	776f 7265 2029 7246 2069 6546 2062 3832     ower) Fri Feb 28
    b1ff:	3120 3a32 3234 333a 2031 5343 2054 3032      12:42:31 CST 20
    b20f:	3032 0000 4000                                   20...

0000b214 <whitening_word>:
    b214:	b240 c3bc 371f 5f4a f685 9a9c d6c1 44c5     @....7J_.......D
    b224:	5920 e1de 1b8f afa5 7b42 cd4e eb60 2262      Y......B{N.`.b"
    b234:	2c90 f0ef 8dc7 57d2 3da1 66a7 75b0 1131     .,.....W.=.f.u1.
    b244:	4089 bcb2 1fc3 4a37 855f 9cf6 c19a c5d6     .@....7J_.......
    b254:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    b264:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    b274:	57d2 3da1 66a7 75b0 1131 9648 f877 46e3     .W.=.f.u1.H.w..F
    b284:	abe9 9ed0 3353 bad8 0898 cb24 fc3b a371     ....S3....$.;.q.
    b294:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    b2a4:	a51b 42af 4e7b 60cd 62eb 9022 ef2c c7f0     ...B{N.`.b".,...
    b2b4:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    b2c4:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    b2d4:	7964 3f87 946e 0abe 39ed 8335 8bad 4089     dy.?n....95....@
    b2e4:	bcb2 1fc3 4a37 855f 9cf6 c19a c5d6 2044     ....7J_.......D 
    b2f4:	de59 8fe1 a51b 42af 4e7b 60cd 62eb 9022     Y......B{N.`.b".
    b304:	8bad 4089 bcb2 1fc3 4a37 855f 9cf6 c19a     ...@....7J_.....
    b314:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    b324:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    b334:	9cf6 c19a c5d6 2044 de59 8fe1 a51b 42af     ......D Y......B
    b344:	4e7b 60cd 62eb 9022 ef2c c7f0 d28d a157     {N.`.b".,.....W.
    b354:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    b364:	6e3f be94 ed0a 3539 ad83 898b b240 c3bc     ?n....95....@...
    b374:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    b384:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    b394:	2408 3bcb 71fc f4a3 6855 a9cf 6c19 4c5d     .$.;.q..Uh...l]L
    b3a4:	9204 1de5 b8fe fa51 b42a d4e7 b60c 262e     ......Q.*......&
    b3b4:	c902 0ef2 dc7f 7d28 da15 6a73 5b06 1317     ......(}..sj.[..
    b3c4:	d6c1 44c5 5920 e1de 1b8f afa5 7b42 cd4e     ...D Y......B{N.
    b3d4:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    b3e4:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    b3f4:	c19a c5d6 2044 de59 8fe1 a51b 42af 4e7b     ....D Y......B{N
    b404:	60cd 62eb 9022 ef2c c7f0 d28d a157 a73d     .`.b".,.....W.=.
    b414:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    b424:	3353 bad8 0898 cb24 fc3b a371 55f4 cf68     S3....$.;.q..Uh.
    b434:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    b444:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    b454:	ef2c c7f0 d28d a157 a73d b066 3175 4811     ,.....W.=.f.u1.H
    b464:	7796 e3f8 e946 d0ab 539e d833 98ba 2408     .w..F....S3....$
    b474:	3bcb 71fc f4a3 6855 a9cf 6c19 4c5d 9204     .;.q..Uh...l]L..
    b484:	1de5 b8fe fa51 b42a d4e7 b60c 262e c902     ....Q.*......&..
    b494:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    b4a4:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    b4b4:	0abe 39ed 8335 8bad 4089 bcb2 1fc3 4a37     ...95....@....7J
    b4c4:	855f 9cf6 c19a c5d6 2044 de59 8fe1 a51b     _.......D Y.....
    b4d4:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    b4e4:	f877 46e3 abe9 9ed0 3353 bad8 0898 cb24     w..F....S3....$.
    b4f4:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    b504:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    b514:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    b524:	cf68 19a9 5d6c 044c e592 fe1d 51b8 2afa     h...l]L......Q.*
    b534:	e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc 157d     ......&......(}.
    b544:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    b554:	b60c 262e c902 0ef2 dc7f 7d28 da15 6a73     ...&......(}..sj
    b564:	5b06 1317 6481 8779 6e3f be94 ed0a 3539     .[...dy.?n....95
    b574:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b584:	3da1 66a7 75b0 1131 9648 f877 46e3 abe9     .=.f.u1.H.w..F..
    b594:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    b5a4:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b5b4:	44c5 5920 e1de 1b8f afa5 7b42 cd4e eb60     .D Y......B{N.`.
    b5c4:	2262 2c90 f0ef 8dc7 57d2 3da1 66a7 75b0     b".,.....W.=.f.u
    b5d4:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    b5e4:	2afa e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc     .*......&......(
    b5f4:	157d 73da 066a 175b 8113 7964 3f87 946e     }..sj.[...dy.?n.
    b604:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    b614:	539e d833 98ba 2408 3bcb 71fc f4a3 6855     .S3....$.;.q..Uh
    b624:	a9cf 6c19 4c5d 9204 1de5 b8fe fa51 b42a     ...l]L......Q.*.
    b634:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    b644:	d833 98ba 2408 3bcb 71fc f4a3 6855 a9cf     3....$.;.q..Uh..
    b654:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    b664:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    b674:	a157 a73d b066 3175 4811 7796 e3f8 e946     W.=.f.u1.H.w..F.
    b684:	d0ab 539e d833 98ba 2408 3bcb 71fc f4a3     ...S3....$.;.q..
    b694:	0898 cb24 fc3b a371 55f4 cf68 19a9 5d6c     ..$.;.q..Uh...l]
    b6a4:	044c e592 fe1d 51b8 2afa e7b4 0cd4 2eb6     L......Q.*......
    b6b4:	0226 f2c9 7f0e 28dc 157d 73da 066a 175b     &......(}..sj.[.
    b6c4:	fa51 b42a d4e7 b60c 262e c902 0ef2 dc7f     Q.*......&......
    b6d4:	7d28 da15 6a73 5b06 1317 6481 8779 6e3f     (}..sj.[...dy.?n
    b6e4:	be94 ed0a 3539 ad83 898b b240 c3bc 371f     ....95....@....7
    b6f4:	ed0a 3539 ad83 898b b240 c3bc 371f 5f4a     ..95....@....7J_
    b704:	f685 9a9c d6c1 44c5 5920 e1de 1b8f afa5     .......D Y......
    b714:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b724:	1fc3 4a37 855f 9cf6 c19a c5d6 2044 de59     ..7J_.......D Y.
    b734:	8fe1 a51b 42af 4e7b 60cd 62eb 9022 ef2c     .....B{N.`.b".,.
    b744:	c7f0 d28d a157 a73d b066 3175 4811 7796     ....W.=.f.u1.H.w
    b754:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b764:	e1de 1b8f afa5 7b42 cd4e eb60 2262 2c90     ......B{N.`.b".,
    b774:	f0ef 8dc7 57d2 3da1 66a7 75b0 1131 9648     .....W.=.f.u1.H.
    b784:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b794:	98ba 2408 3bcb 71fc f4a3 6855 a9cf 6c19     ...$.;.q..Uh...l
    b7a4:	4c5d 9204 1de5 b8fe fa51 b42a d4e7 b60c     ]L......Q.*.....
    b7b4:	262e c902 0ef2 dc7f 7d28 da15 6a73 5b06     .&......(}..sj.[
    b7c4:	1317 6481 8779 6e3f be94 ed0a 3539 ad83     ...dy.?n....95..
    b7d4:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b7e4:	d4e7 b60c 262e c902 0ef2 dc7f 7d28 da15     .....&......(}..
    b7f4:	6a73 5b06 1317 6481 8779 6e3f be94 ed0a     sj.[...dy.?n....
    b804:	3539 ad83 898b b240 c3bc 371f 5f4a f685     95....@....7J_..
    b814:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    b824:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    b834:	bad8 0898 cb24 fc3b a371 55f4 cf68 19a9     ....$.;.q..Uh...
    b844:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    b854:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    b864:	066a 175b 8113 7964 3f87 946e 0abe 39ed     j.[...dy.?n....9
    b874:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    b884:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    b894:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b8a4:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    b8b4:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    b8c4:	7f0e 28dc 157d 73da 066a 175b 8113 7964     ...(}..sj.[...dy
    b8d4:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    b8e4:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    b8f4:	4811 7796 e3f8 e946 d0ab 539e d833 98ba     .H.w..F....S3...
    b904:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    b914:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    b924:	f4a3 6855 a9cf 6c19 4c5d 9204 1de5 b8fe     ..Uh...l]L......
    b934:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    b944:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    b954:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b964:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    b974:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    b984:	8dc7 57d2 3da1 66a7 75b0 1131 9648 f877     ...W.=.f.u1.H.w.

0000b994 <hop_interval_lut>:
    b994:	0100 1913 0f1c 101f 210e 1b1a 1422 0508     .........!.."...
    b9a4:	1807 0223 1e0d 1d20 0311 0b0a 1704 0615     ..#... .........
    b9b4:	0916 120c 0024 0000 0001 0000 0001 0000     ....$...........
    b9c4:	0001 0000 0001 0000 6967 2d74 4100 2041     ........git-.AA 
    b9d4:	6573 0a74 4800 706f 6920 746e 7265 6176     set..Hop interva
    b9e4:	206c 6573 3a74 2520 0a64 5400 6172 736e     l set: %d..Trans
    b9f4:	696d 7474 6e69 2067 6e6f 6920 646e 7865     mitting on index
    ba04:	203a 6425 000a 6469 3a78 2520 2064 6e63     : %d..idx: %d cn
    ba14:	3a74 2520 2064 000a 654e 7478 6920 646e     t: %d ..Next ind
    ba24:	7865 203a 6425 000a 6f48 2070 6e69 6574     ex: %d..Hop inte
    ba34:	7672 6c61 203a 6425 000a 6e49 7263 6d65     rval: %d..Increm
    ba44:	6e65 3a74 2520 2064 6e49 6574 7672 6c61     ent: %d Interval
    ba54:	203a 6425 2520 2064 756f 2074 666f 2520     : %d %d out of %
    ba64:	0a64 7000 6f72 696d 6373 665f 6c6f 6f6c     d..promisc_follo
    ba74:	5f77 6263 000a 6843 6e61 656e 3a6c 2520     w_cb..Channel: %
    ba84:	0a64 0a00 2a0a 2a2a 552a 4542 5452 4f4f     d....****UBERTOO
    ba94:	4854 4220 4f4f 2a54 2a2a 0a2a 7325 000a     TH BOOT****.%s..

0000baa4 <index1.3939>:
    baa4:	0200 0301 0100 0300 0001 0102 0100          ..............

0000bab2 <index2.3940>:
    bab2:	0301 0402 0304 0402 0304 0304 0203          ..............

0000bac0 <whitening_index>:
    bac0:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    bad0:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    bae0:	1b28 5a54 703f 662f                         (.TZ?p/f

0000bae8 <whitening>:
    bae8:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    baf8:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    bb08:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    bb18:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    bb28:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    bb38:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    bb48:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    bb58:	0001 0101 0000 0100 0100 0000 0001 7b01     ...............{
    bb68:	6138 3463 6137 3838 632d 3263 2d36 6134     8ac47a88-cc26-4a
    bb78:	3961 382d 3738 2d62 3234 6163 6338 3066     a9-887b-42ca8cf0
    bb88:	6137 3336 007d                              7a63}.

0000bb8e <whitening_index>:
    bb8e:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    bb9e:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    bbae:	1b28 5a54 703f 662f                         (.TZ?p/f

0000bbb6 <whitening>:
    bbb6:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    bbc6:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    bbd6:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    bbe6:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    bbf6:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    bc06:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    bc16:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    bc26:	0001 0101 0000 0100 0100 0000 0001 6601     ...............f
    bc36:	6e69 7369 5f68 6f63 6e6e 655f 6576 746e     inish_conn_event
    bc46:	000a 656c 445f 414d 495f 5152 6148 646e     ..le_DMA_IRQHand
    bc56:	656c 0a72 0000                              ler...

0000bc5c <channels>:
    bc5c:	0968 0972 0977 09a5                         h.r.w...

0000bc64 <follow_handler.4030>:
    bc64:	8c2d 0000 8cdd 0000 8c4d 0000 8e35 0000     -.......M...5...
    bc74:	8c29 0000 8c29 0000 8c29 0000               )...)...)...

0000bc80 <continuous_rx_handler.4031>:
    bc80:	8c45 0000 8cdd 0000 8f51 0000 8c29 0000     E.......Q...)...
    bc90:	8c29 0000 8c29 0000                         )...)...

0000bc98 <jam_handler.4032>:
    bc98:	8c2d 0000 8cdd 0000 8eed 0000 8e75 0000     -...........u...
    bca8:	8d91 0000 8e95 0000                         ........

0000bcb0 <iap_entry>:
    bcb0:	1ff1 1fff                                   ....

0000bcb4 <abExtendedOsFeatureDescriptor>:
    bcb4:	0028 0000 0100 0004 0001 0000 0000 0000     (...............
    bcc4:	0100 4957 554e 4253 0000 0000 0000 0000     ..WINUSB........
    bcd4:	0000 0000 0000 0000                         ........

0000bcdc <_init>:
    bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcde:	bf00      	nop
    bce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bce2:	bc08      	pop	{r3}
    bce4:	469e      	mov	lr, r3
    bce6:	4770      	bx	lr

0000bce8 <__init_array_start>:
    bce8:	00004349 	.word	0x00004349

0000bcec <__frame_dummy_init_array_entry>:
    bcec:	00004139                                9A..

0000bcf0 <_fini>:
    bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcf2:	bf00      	nop
    bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bcf6:	bc08      	pop	{r3}
    bcf8:	469e      	mov	lr, r3
    bcfa:	4770      	bx	lr

0000bcfc <__fini_array_start>:
    bcfc:	00004111 	.word	0x00004111
